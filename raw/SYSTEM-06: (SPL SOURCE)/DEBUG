}(COMMON DEBUG'DECS;
})INCLUDE COMM,STDEC,STST,SCMWF,DBCOM,SGDEC;

*
*CONTENTS*
* DSA}*ADDRESS COMMAND
* DSB}*BREAK COMMAND
* DSC}*CONTINUE COMMAND
* DSD}*DISPLAY COMMAND
* DSE}*EXAMINE COMMAND
* DSF}*FIND COMMAND
* DSG}*GOTO COMMAND
* DSK}*KILL COMMAND
* DSL}*LIST COMMAND
* DSM}*MODE COMMAND
* DSN}*NEXT COMMAND
* DSP}*PROCEED COMMAND
* DSR}*REPORT COMMAND
* DSS}*STEP COMMAND
* DST}*TRACE COMMAND
* DSV}*VIEW COMMAND
* DSW}*WHERE COMMAND
* DPVAL}(PRINT VALUE IN FORMAT
* DFCND}(DECIMAL INTEGER
* DFCNB}(OCTAL INTEGER
* DFCRS}(REAL NUMBER
* DFCDS}(DOUBLE REAL
* DAPPND}'APPEND
* DWCI})WCI
* DCOPY}(COPY
* DPPDS}(PPDS
* DWN}*WRITE NAME
* DW3}*WRITE THREE CHARS.
* DILB})INC. TO NEXT ST.
* DMSET}(SET PRINT MODES
* DCMT})CHECK FOR CHANGE OF MODE
* DMOD})COLLECT MODIFIERS
* DGARG}(GET ARGUMENT
* DGPROG}'GET PROGRAM
* DGNUM}(GET NUMBER
* DSKIPB}'SKIP BLANKS
* DGRING}'GET RING NUMBER
* DNEA})CHECK FOR NULL EDITOR EDITOR ARGUMENT
* DEEL})EVALUATE LAST ARGUMENT
* DCOS})CODE OUT OF SEQUENCE TEST FOR BRU
* DGBKA}(GET BREAKPOINT CORE ADDRESS
* DOEA})GET TN,SI FOR ED. ADD.
* DPEA})PRINT ED.ADD. GIVEN TN,SI
* DCEAA}(GET CORE ADDRESS FROM ED. ADD.
* DUNSTK}'PSEUDO UNWIND
* DUNSI}(INIT. PSEUDO UNWIND
* DGDIM}(GET DIMENSION INFOL
* DISGNT}'INIT. GET NEXT TOKEN
* DGNT})GET NEXT TOKEN FROM PPTB
* DGLREG}'GET LREG
* DGSSET}'GET A GNT POINTER
* DDEL})DELETE DIRECT ST.
* DPROG}(SET UP PARAMETERS FOR RUN
* DGLX})PRINT G'[],L'[], OR X'
* DFNM})WRITE NAME IF FOUND
* CORES}(STORE IN CORE
* CORE})READ FROM CORE
* COREF}(GET CORE POINTER
* DEINIT}'INITIALIZATION
* DECOM}(COMMAND DISPATCHER
* DBGO})BARE MODE GO COMMAND
* DERRF}(ERROR FUNCTION
* DBKNXT}'SCAN TO NEXT BP.
* DBKINXT}&INIT. SCAN
* DBKMSH}'SMASH BPTS
* DUNMSH}'UNSMASH BPTS
* DPLANT}'PLANTS BREAKPOINTS
* DPLFIX}'FIXES UP P AND L ON EXIT
* S'T}*SPL TRAP ENTRY POINT
* S'E}*SPL ENTRY POINT
* S'C}*SPL CONT ENTRY POINT
* RING'TRAPX}#RING TRAP X
* RUN}*EXECUTION CONTROL
* PTERNO}'PRINTS ERROR MESSAGES
* MCRTPG}'CREATES PAGE
* MDELPG}'DELETES PAGE
* MRDMAP}'READS MAP BYTE
* DEE}*EVALUATE EXPRESSION
* DGT}*GET SYMBOL OR CONSTANT TYPE
* DGV}*GET SYMBOL OR CONSTANT VALUE
* DEGV})GET EFFECTIVE ADDRESS
* DIGV})GET CONTENTS OF ADDRESS
* DEGVI}(GET EFFECTIVE ADDRESS FOR INDIRECT WORD
* DPNV})PRINT NEXT VALUE
* DPV}*PRINT VALUE
* DRUN})TRANSFER CONTROL TO PROGRAM
* DPBM})PRINT BREAK MESSAGE
* DRGFIX}'FIXUP ON RING CHANGE
* DRING}(CHANGES RING AND STATE
* DPPM})PRINT PHYSICAL MAP
* DBKSET}'SET BP.
* DBKCLR}'CLEAR BP.
* DBKTCLR}&CLEAR TRACE BP.

*}&DS ERM180,1,"GOTO OR RETURN IS ILLEGAL";*DECOM
*}&DS ERM181,1,"COMMAND ERROR";*DECOM
*}&DS ERM182,1,"OUTPUT OR COLLECTION STRING TOO LONG";*DFCND
*}&DS ERM183,1,"EXPRESSION ERROR";*DGARG,DEE,DGNUM
*}&DS ERM184,1,"PROGRAM NAME DOES NOT EXIST OR SYNTAX ERROR";*DGPROG
*}&DS ERM185,1,"NO CURRENT LINE";*DNEA
*}&DS ERM186,1,"TOO MANY ARGUMENTS";*DSB,DSE,DEEL
*}&DS ERM187,1,"BLOCK IS NOT A PROGRAM";*DUNSTK
*}&DS ERM188,1,"TOO MANY BREAKPOINTS";*DMSH
*}&DS ERM189,1,"EDITOR ADDRESS ERROR";*DSB,DSK,DSG,DSS
*}&DS ERM190,1,"CANNOT RUN PROGRAM";*DECOM,DSG,DSC,DSS
*}&DS ERM191,1,"ENVIRONMENT BOUNDARY";*DSE,DSM
*}&DS ERM192,1,"EXPRESSION DOES NOT HAVE A LOCATION";*DSE,DPNV
*}&DS ERM193,1,"NO CURRENT EXPRESSION";*DSE,DSN
*}&DS ERM194,1,"COULD NOT FIND LOCAL ENVIRONMENT";*DGLREG
*}&DS ERM195,1,"ADDRESS NOT IN A PROGRAM";*DPBM,DSA,DSV
*}&DS ERM196,1,"CANNOT EVALUATE EXPRESSION";*DPV
*}&DS ERM197,1,"ERROR IN UNWINDING THE CALL STACK";*DUNSTK
*}&DS ERM198,1,"THE DIRECT STATEMENT HAS BEEN DELETED";*DRUN,DPBM,DDEL
*}&DS ERM199,1,"RING ERROR";*DSE
*}&DS ERM200,1,"STACK BOUNDARY HAS CHANGED, MUST ZAP";* DPROG
*}&DS ERM201,1,"REFERENCED A PAGE NOT IN CORE";* COREF
*NOTES:
*IMPROVE, AND VERIFY ERROR MESSAGES
*FIX EXAMINE TO GET JUST NUMBER OF CELLS WANTED
*FIX PRINTOUT OF MACROS
*IMPLEMENT FIND AND LEVEL
*FIX DIRECT STATEMENTS TO NOT USE DUMMY FUNCTION
*REDO DISPLAY COMMAND

*PARAMETERS
})DQ RBLLNO_10;
})DQ SBLLNO_6;
})DQ TAB1_7;* FIRST TAB IN LINE EDIT
})DQ DBKPT_77737400B;* WORD TO SMASH BREAKPOINTS WITH
})DQ DBRU_75010000B;* WORD TO CHECK FOR BRU INST.
})DQ HXDEBUG_'-';* EXPERT MODE HERALD CHAR
})DQ DTKATSIGN_6000B+'@';
})DQ DTKDOL_6000B+'$';
})DQ DTKDOT_6000B+'.';
})DQ DTKLBRAC_6000B+'[';
})DQ DTKRBRAC_6000B+']';
})DQ DTKPLUS_6000B+'+';
})DQ DTKMINUS_6000B+'-';
})DQ DTKCOMMA_6000B+',';
})DQ DCOLON_':';
})DQ QUITNO_23;
})DQ BPTNO_21;
})DQ BPTRET_1;
})DQ ERRRET_-1;
})DQ QUITRT_-2;
})DQ SPRET_0;
*FIELDS
})DF PCNTF(0),LREGF(7),GREGF(8);
})DF W0(0),W1(1);
})DF BLLERRNO(0:0,5);
})DF ADDR14(0:10,23);
})DF SPPCTR(0:6,23),SPLREG(1:6,23),SPGREG(2:6,23),SP940(1:0,0);
})DF SPSPNO(0:2,5);
})DF FPAGEA(0:6,12),FPAGEM(0:17,23),FPAGEE(0:13,13);
})DF R3B(0:21,23),L23B(0:0,22),L12B(0:0,11),R12B(0:12,23);
})DF R1B(0:23,23);
})DF F61(0:0,5),F62(0:6,11),F63(0:12,17),F64(0:18,23);
})DF F81(0:0,7),F82(0:8,15),F83(0:16,23);
*MACROS
})DM INC(XX)_XX_XX+1;
})DM DEC(XX)_XX_XX-1;
})DM CLS(XX)_SETS(XX,0,0);
})DM SETM(XX,YY,ZZ)_ZZ_YY IF MODES[XX]>0;
*
*
})DI SPLTM;
})DI T940;
})DI DSRING'PTR;
})DI DPRING'PTR;
})DM PCNT_DSRING'PTR.PCNTF;
})DM LREG_DSRING'PTR.LREGF;
})DM GREG_DSRING'PTR.GREGF;
})DM BPCNT_DPRING'PTR.PCNTF;
})DM BLREG_DPRING'PTR.LREGF;
})DM DPD_DEETP_DEETD_-1;
})DM DTPD(XX)_DEET_XX & DPD;
})DM DBCD_DEEB_DEEC_DEED_0;
})DM DABCD(XX)_DEEA_XX & DBCD;
***FIX THESE EVENTULALLY WITH APPROPRIATE SIGNED FIELDS
})DM DBIAS(XX)_(FRMASK(XX)/2+1);
})DM DGSGN(XX,YY)_((XX$YY) XOR DBIAS(YY)) - DBIAS(YY);
*
})DI RUNLR;
*
})DI DBERC,DBERN;
})DM ERRSPEC_DBERC,DBERN;
})DM SYSERR_ VALUE SYSTEM'ERROR():ERRSPEC;
*
})DECLARE STRING ARRAY DSTR[NCOMMAND]_("EXAMINE","NEXT","PREVIOUS",
})"MODE","GOTO","CONTINUE","STEP","BREAK","KILL",
})"DISPLAY","TRACE","REPORT","LEVEL","FIND","ADDRESS",
})"WHERE","VIEW");
})DECLARE FIXED STRING ARRAY DMU[4]_(
})"UCALL","UCALN","MCALL","MCALN");
})DA TSS[LSTATE];
})DI TP=TSS[0];
})DI TA=TSS[1];
})DI TB=TSS[2];
})DI TC=TSS[3];
})DI TD=TSS[4];
})DI TE=TSS[5];
})DI TX=TSS[6];
})DI TL=TSS[7];
})DI TG=TSS[8];
})DI TS=TSS[9];

})DECLARE INTEGER RTPC = G' [4], RTPAR = G' [5];
})DA RTMSG[11]_(6'#0  ',6'ABE ',6'FLO ',6'FLU ',6'RO  ',6'IATP',
})6'UFN ',6'FLX ',6'DIZ ',6'STKO',6'BLL ');
})DA TRMSG[16]_(6'MACC',6'PRO ',6'PNIM',6'PNIC',6'PI  ',6'TI  ',
})6'BLL ',6'ILIM',6'PNOD',6'DWSO',6'CWSO',6'NEP ',
})6'DMRD',6'NILE',6'SPCO',6'PMTO');
})DECLARE STRING ARRAY BLLMSG[7]_(6"??",6"UNDEFINED FUNCTION",
})6"WRONG # OF ARGS",6"ARG OF WRONG TYPE",6"BAD APW",
})6"ADDRESS TYPE ERROR",6"BAD DESCRIPTOR");

})UTILITY CREATE'SSP_30;
})UTILITY READ'SPT'FIELD_35;
})UTILITY SET'SPT'FIELD_36;

})MONITOR ACQPMT_50;
})MONITOR NPPMT_51;
})MONITOR DELPMT_54;
})MONITOR READ'SPCS_96;
})MONITOR READ'MAP'BYTE_101;
})MONITOR SET'MAP'BYTE_102;
})MONITOR SP'BRANCH_115;
})MONITOR SP'RETURN_116;
})MONITOR JUMP'RETURN_117;
})MONITOR MODIFY'CALL_120;
})MONITOR ALLOW'INTS_168;

*
*THE ADDRESS COMMAND


}(PROGRAM DSA;
})INCLUDE DEBUG'DECS;

})DI DSATN,DSASI,DSADP;

})FUNCTION DSA();
})DEEL(1);
})DRING(DGRING(DEEA));
})DOEA(DEEA:DSATN,DSASI,DSADP//DSA1);
})DPEA(DSATN,DSASI);
})CLS(PSTR);
})DWCI('[');
})DFCNB(DSADP,4B7);
})DWCI(']');
})DAPPND(MCR);
})CSOUT(PSTR);
})DERRF(-2);
DSA1:}$DERRF(195);

*
*
*BREAK COMMAND


}(PROGRAM DSB;
})INCLUDE DEBUG'DECS;


})FUNCTION DSB();
*COMPUTE EDITOR ADDRESS
})DNEA(//DSB2);
})EDLI(CSTR//DSB3);
*PROCESS TRACE BREAKPOINT
DSB2:}$IF MODES['T'] = 1 DO;
}-DERRF(186) IF E2TN # E1TN OR E2SI # E1SI;
}-DBKTCLR();
})ENDIF;
*SET BREAK POINT BIT
DSB1:}$DBKSET();
})RETURN IF E1TN=E2TN AND E1SI=E2SI ELSE DILB(// RETURN);
})GOTO DSB1;
DSB3:}$DERRF(189);

*
*
*CONTINUE COMMAND


}(PROGRAM DSC;
})INCLUDE DEBUG'DECS;


})FUNCTION DSC();
})DEEL(1);
})DPROG(1,BRKRG//DSC4);
})IF M1MODE DO;
}-PCNT_DBKMSH(-1,PCNT);
}-DBKSP_-1;
})ELSE DO;
}-DBKSP_0;
}-SSELECT(BRKTN);
}-POINT_A(ICST,BRKSI);
}-GOTO DSC2 IF POINT.PTBKF=0;
}-DRLB_DRUB_PCNT;
}-DBKMSH(1,-1);
}-RETURN IF DRUN()#2;
DSC2:}(DBKSP_-1;
}-DBKMSH(-1,-1);
})ENDIF;
})DRLB_0;
})DRUB_4B7-1;
})DRUN();
})RETURN;
DSC4:}$DERRF(190);

*
*
*DISPLAY COMMAND


}(PROGRAM DSD;
})INCLUDE DEBUG'DECS;

})DI DSDCT,DSDR;

})FUNCTION DSD();
*INITIALIZE STATEMENT SCAN
})FOR DSDR_0 TO NRINGS-1 DO;
}-IF REXISTS[DSDR] DO;
*** RECODE THIS
}1DRING(DSDR);
}1SSELECT(0);
}1E1TN _ ICFSTAT;
}1SSELECT(E1TN);
}1E1SI _ ICFSTAT;
}1DSDCT _ 0;
DSD1:
}1POINT _ A(ICST,E1SI);
}1GOTO DSD2 IF POINT.PTBKF = 0;
*WE HAVE A BREAKPOINT
*PRINT LOWER BOUND
}1DPEA(E1TN,E1SI) IF DSDCT = 0;
}1E2TN_E1TN;
}1E2SI_E1SI;
}1INC(DSDCT);
*CLOSE LOOP
DSD3:},DILB(//DSD2);
}1GOTO DSD1;
*CURRENT STATEMENT NOT A BREAK PT.
DSD2:},IF DSDCT > 1 DO;
*PRINT UPPER BOUND
}5CSOUT(MCOMMA);
}5DPEA(E2TN,E2SI);
}1ENDIF;
}1CSOUT(MCR) IF DSDCT > 0;
}1DSDCT _ 0;
}1GOTO DSD3 IF E1TN#0;
}1CSOUT(MCR);
}-ENDIF;
})ENDFOR;
})DERRF(-2);

*
*
*EXAMINE COMMAND


}(PROGRAM DSE;
})INCLUDE DEBUG'DECS;

})DI DSEI,DSEJ;

})FUNCTION DSE();
})DABSF_-1 IF MODES['1']>=1 OR (PMOD01<0 AND MODES['0']<1);
})DGARG(//DSE6);
})WCD(DSKIPB(//DSE6),PSTR);
})DEE(ECLTN,DCRING);
})DPRSZ_DELSZ;
})DTN1_DTN2;
})DRG1_DRG2;
})DERRF(193) IF DTN1=0;
})DMSET(0);
})DSUB1[DSEI]_DSUB2[DSEI] FOR DSEI_0 TO 7;
})DLOC1_DLOC2;
})DADD1_DADD2;
})DDIM1_DDIM2;
})DKIND1_DKIND2;
})DDIR_1;
})IF DKIND1=2 AND DDIM1=0 DO;
}-DLOC1_(DSEM+1 IF DSED=0 AND (DSEM=1 OR DSEM=3) ELSE DTW[DSEM]);
})ENDIF;
DSE8:}$DGARG(//DSE1);
})DEE(ECLTN,DCRING);
})DGARG(//DSE2);
})DTN1_0;
})DERRF(186);
DSE4:}$DERRF(191);
DSE5:}$DTN1_0;
})DERRF(192);
DSE6:}$DERRF(193) IF DTN1=0;
})DCMT();
})DLOC1_(DSEM+1 IF DSED=0 AND (DSEM=1 OR DSEM=3) ELSE DTW[DSEM])
})IF DKIND1=2;
})GOTO DSE8;

*WE HAVE A SINGLE VALUE TO BE PRINTED
DSE1:}$DPV(0//DSE4);
})DERRF(-2);
*WE HAVE TWO ARGS
DSE2:}$DERRF(199) IF DRG1#DRG2;
})GOTO DSE5 IF DKIND1=3;
})IF DKIND2=3 DO;
}-IF DEEA<0 DO;
}1DDIR_-1;
}1DSEI_-DEEA;
}-ELSE DO;
}1DSEI_DEEA;
}-ENDIF;
}-DPV(0 IF DEEA=0 ELSE 1 //DSE4);
}-DPNV(DDIR//DSE4) FOR DSEJ_2 TO DSEI;
}-DERRF(-2);
})ENDIF;
})IF DTN1#DTN2 DO;
}-DTN1_ECLTN;
}-SSELECT(ECLTN);
}-GOTO DSE7;
})ENDIF;
})IF DKIND1#DKIND2 OR DLOC1#DLOC2 AND (DDIM1#0 OR DDIM2#0) DO;
DSE7:}(DKIND1_2;
}-DDIM1_DPRSZ_0;
})ENDIF;
})IF DKIND1=0 OR DKIND1=1 OR DKIND1=2 AND DDIM1>0 DO;
}-IF DDIM1#0 DO;
}1DDIR_-1 IF DADD2<DADD1;
}1DPV(1//DSE4);
}1DPNV(DDIR//DSE4) WHILE (DADD2-DADD1-DSIZE)*DDIR>-1;
}-ELSE DO;
}1DDIR_-1 IF DLOC1>DLOC2;
}1DPV(1//DSE4);
}1DPNV(DDIR//DSE4) WHILE (DLOC2-DLOC1)*DDIR>0;
}-ENDIF;
})ELSEIF DKIND1=2 DO;
}-DTPD(9);
}-DMSET(0);
}-DLOC1_(DSEM+1 IF DSED=0 AND (DSEM=1 OR DSEM=3) ELSE DTW[DSEM]);
}-DDIR_-1 IF DADD2<DADD1;
}-DPV(1//DSE4);
}-DPNV(DDIR//DSE4) WHILE (DADD2-DADD1-DLOC1)*DDIR>-1;
})ELSE DO;
}-DTN1_0;
}-DERRF(0);
})ENDIF;
})DERRF(-2);

*
*
*THIS IS THE FIND COMMAND


}(PROGRAM DSF;
})INCLUDE DEBUG'DECS;

})DI DSFI;

})FUNCTION DSF();
})CSOUT("FIND COMMAND NOT IMPLEMENTED YET&307");
})FOR DSFI_LSTATE*RING TO LSTATE*RING+(LSTATE-1) DO;
}-CLS(PSTR);
}-DFCNB(DSSAVE[DSFI]$W0,4B7);
}-CSOUT(PSTR);
}-CSOUT(MCR);
})ENDFOR;
})RETURN;

*
*
*GOTO COMMAND


}(PROGRAM DSG;
})INCLUDE DEBUG'DECS;

})DI DSGI,DSGT,DSGL, GARBAGE;

})FUNCTION DSG();
*GET LINE ADDRESS
})DGARG(// RETURN);
})CSTR_DCOPY(PSTR,CSTR);
})EDLA(CSTR//DGOTO1);
*GET PROCEED COUNT
})DEEL(1);
*SET P COUNTER
})SSELECT(E1TN);
})DSGL_DGLREG(1);
})DPROG(0,DCRING//DGOTO3);
})DSGT_LSTATE*DCRING;
})DSSAVE[DSGT+DSGI]_0 FOR DSGI_0 TO LSTATE-1;
})PCNT _ DCEAA(E1TN,E1SI,0:,GARBAGE);
})LREG_DSGL;
})DRLB_-1;
})DRUB_4B7-1;
})DBKMSH(0,-1);
})DRUN();
})RETURN;
DGOTO1:}"DERRF(189);
DGOTO3:}"DERRF(190);

*
*
*KILL COMMAND


}(PROGRAM DSK;
})INCLUDE DEBUG'DECS;


})FUNCTION DSK();
*JUST TRACE BREAKPOINT
})GOTO DSK3 IF MODES['A'] = 1;
})GOTO DSK1 IF MODES['T'] = 1 AND LENGTH(CSTR)=0;
})DNEA(// RETURN);
*COMPUTE EDITOR ADDRESS
})EDLI(CSTR//DSK6);
*CLEAR THE BRK PTS
DSK2:}$DBKCLR();
})GOTO DSK5 IF E1TN=E2TN AND E1SI=E2SI ELSE DILB(//DSK5);
})GOTO DSK2;
DSK5:}$RETURN IF MODES['T'] # 1;
*CLEAR TRACE BRK PT
DSK1:}$DBKTCLR();
})RETURN;
*KILL ALL BREAKPOINTS
DSK3:}$DBKINXT(// RETURN);
DSK4:}$DBKCLR();
})DBKNXT(// RETURN);
})GOTO DSK4;
DSK6:}$DERRF(189);

*
*
*THIS IS THE LEVEL COMMAND


}(PROGRAM DSL;
})INCLUDE DEBUG'DECS;


})FUNCTION DSL();
})CSOUT("LEVEL COMMAND NOT IMPLEMENTED YET&307");
})RETURN;

*
*
*MODE COMMAND


}(PROGRAM DSM;
})INCLUDE DEBUG'DECS;

})DI DSMI,DSMTN;

})FUNCTION DSM();
})DGARG(//DSM1);
})DGPROG(-1,DCRING:DSMTN,DSMI//DSM1);
})IF DSMI#DCRING DO;
}-DRGFIX();
}-DCRING_DSMI;
})ENDIF;
})IF DSMTN#ECLTN DO;
}-SSELECT(ECLTN_DSMTN);
}-ECLSI_ICFSTAT;
})ENDIF;
DSM1:}$(PMODPT _ PMODD _ PMODP _ -1) IF MODES['V'] = 1;
})PMODPT _ DSMI IF MODES[DMODA[DSMI]] = 1
})FOR DSMI _ 0 TO 12;
})SETM('D',0,PMODD);
})SETM('P',0,PMODP);
})SETM('E',0,PMODEN);
})SETM('N',-1,PMODEN);
})SETM('Q',-1,PMODLQ);
})SETM('L',0,PMODLQ);
})SETM('G',-1,PMODGH);
})SETM('H',0,PMODGH);
})SETM('1',-1,PMOD01);
})SETM('0',0,PMOD01);
})DZAP() IF MODES['Z']=1;
})RETURN;

*
*
*NEXT COMMAND


}(PROGRAM DSN;
})INCLUDE DEBUG'DECS;

})DI DSNI,DSNUL,DSND;

})FUNCTION DSN();
})DSND_DDIR;
DSN1:}$DERRF(193) IF DTN1=0;
})DEEL(1);
})DABSF_-1 IF MODES['1']>=1 OR (PMOD01<0 AND MODES['0']<1);
})DCMT();
})DLOC1_(DSEM+1 IF DSED=0 AND (DSEM=1 OR DSEM=3) ELSE DTW[DSEM])
})IF DKIND1=2 AND DDIM1=0;
})DSNUL _ DEEA;
})DPNV(DSND//DSN3) FOR DSNI _ 1 TO DSNUL;
})DERRF(-2);
DSN3:}$DERRF(191);
*
*
*PREVIOUS COMMAND
})ENTRY DSP();

})DSND_-DDIR;
})GOTO DSN1;

*
*
*REPORT COMMAND


}(PROGRAM DSR;
})INCLUDE DEBUG'DECS;

})DI DSRI;

})FUNCTION DSR();
*LINE EDIT TEXT
})UPS_DCOPY(REPS,UPS);
})ZEDIT(UPS,TAB1,-1:UPS//DSR1);
})REPS_DCOPY(UPS,REPS);
})DREPTN_ECLTN;
})DREPRG_DCRING;
})RETURN;
DSR1:}$DERRF(182);

*
*
*STEP COMMAND


}(PROGRAM DSS;
})INCLUDE DEBUG'DECS;

})DI DSSA,DSSI, GARBAGE;

})FUNCTION DSS();
})IF M1MODE DO;
}-CSOUT("STEP COMMAND NOT IMPLEMENTED YET&307");
}-RETURN;
})ENDIF;
})DEEL(1);
})DSSA _ DEEA;
})DCDC _ 1;
})DPROG(1,BRKRG//DSS3);
})DBKSP_1;
})FOR DSSI _ 1 TO DSSA DO;
*RUN PROGRAM
DSS1:}(IF BRKFLG<0 DO;
}1DRLB_DRUB_BRKDP;
}-ELSE DO;
}1DRLB _ DCEAA(BRKTN,BRKSI,0:,GARBAGE);
}1SSELECT(BRKTN);
}1POINT _ A(ICST,BRKSI);
}1DRUB _ DRLB + POINT.PTLCODE -1;
}-ENDIF;
}-DBKMSH(DSSI,-1);
}-DRUB _ DRUN();
}-DUNMSH(DSSI);
}-DERRF(-2) IF DRUB#2;
}-DPBM(1);
}-GOTO DSS1 IF BRKFLG<0;
}-GOTO DSS1 IF DGBKA(BRKTN,BRKSI//DSS1)#PCNT;
}-DPBM(0) IF DSSI=DSSA OR DEVERY=0;
})ENDFOR;
})RETURN;
DSS3:}$DERRF(190);

*
*
*TRACE COMMAND


}(PROGRAM DST;
})INCLUDE DEBUG'DECS;


})FUNCTION DST();
})DGARG(//DST3);
DST3:}$CSTR_DCOPY(PSTR,CSTR);
})DNEA(//DST1);
*GET FIRST ARGUMENT
})EDLA(CSTR//DST2);
*CLEAR AND SET TRACE BREAKPOINT
DST1:}$DBKTCLR();
})MODES['T'] _ 1;
})DBKSET();
})DSC();
})RETURN;
DST2:}$DERRF(189);

*
*THE VIEW COMMAND


}(PROGRAM DSV;
})INCLUDE DEBUG'DECS;

})DI DSVI,DSVP,DSVTN,DSVSI,DSVE,DSVL,DSVLP,GARBAGE;

})FUNCTION DSV();
})IF DTASK=0 AND BARE=0 DO;
}-CSOUT(MZAPPED);
}-RETURN;
})ENDIF;
})DEEL(2B7);
})DSVE_DEEA;
})DUNSI(DMYTN:GARBAGE,GARBAGE,GARBAGE);
})DSVLP_-1;
})DSVP_PCNT;
})DSVL_LREG;
})FOR DSVI_0 TO DSVE DO;
}-RETURN IF DSVL=DSVLP OR
}-DIRRG1#RING AND (DSVL=ENDCSTACK OR DSVL=0);
}-CLS(PSTR);
}-DFCND(DSVI,4B7);
}-DWCI(' ');
}-CSOUT(PSTR);
}-IF DRLB<=DSVP AND DSVP<DRUB DO;
}1CSOUT(DBT1);
}1GOTO DSV4;
}-ENDIF;
}-DOEA(DSVP:DSVTN,DSVSI,GARBAGE//DSV1);
}-DPEA(DSVTN,DSVSI);
DSV4:}(CLS(PSTR);
}-GOTO DSV2;
DSV1:}(CLS(PSTR);
}-DOEA(DSVP:DSVTN,GARBAGE,GARBAGE//DSV3);
}-SSELECT(0);
}-DWN(DSVTN);
DSV2:}(DWCI(' ');
DSV3:}(DFCNB(DSVP, 4B7);
}-DWCI(' ');
}-DFCNB(DSVL, 4B7);
}-CSOUT(PSTR);
}-CSOUT(MCR);
}-DSVLP_DSVL;
}-DUNSTK(:DSVP,DSVL,GARBAGE// RETURN);
}-DSVP_DSVP-1;
})ENDFOR;
})RETURN;

*
*THE WHERE COMMAND


}(PROGRAM DSW;
})INCLUDE DEBUG'DECS;
})DECLARE INTEGER GARBAGE;


})FUNCTION DSW();
})DGARG(// RETURN);
})CSTR_DCOPY(PSTR,CSTR);
})EDLA(CSTR//DSW1);
})DGARG(//DSW2);
})DERRF(186);
DSW2:}$CLS(PSTR);
})DFCNB(DCEAA(E1TN,E1SI,0:,GARBAGE),4B7);
})DWCI(',');
})SSELECT(E1TN);
})POINT_A(ICST,E1SI);
})DFCNB(POINT.PTLCODE,4B7);
})CSOUT(PSTR);
})CSOUT(MCR);
})RETURN;
DSW1:}$DERRF(189);

}(PROGRAM DPVAL;
}(INCLUDE DEBUG'DECS;

})DI DPVI,DPVJ,DPVK,DPVL,DPVM,DPVN,DPVTN,GARBAGE;
}(DECLARE REAL FIELD REAL'FIELD(0);
}(DF DMUT(0:14,15),DMUA(0:16,23);
}(DECLARE LABEL ARRAY DFD[18]_(DVI,DVO,DV8,DVR,DV6,DVX,
})DVS,DVB,DVU,DVM,DVF,DVL,DVA,DVMAC,DVUND,DVFN1,DVFN2,DVSP);
}(DECLARE LABEL ARRAY DMTAG[10B]_(DDIRCT,DINDIR,DINDEX,
})DBIND,DPTD,DIPD,DBID,DRELAT);
}(DECLARE LABEL ARRAY DMREL[10B]_(DLREL,DILREL,DSREL,DSREL,DISREL,
})DISREL,DIMIND,DIMMED);

})FUNCTION DPVAL();
}(DPVTN_ICGTN;
}(CLS(PSTR);
}(IF DPRSZ=0 DO;
},GOTO LABEL'FIXER((DFD[DSEM]));
}(ELSE DO;
},FOR DPVI_1 BY 4 TO DPRSZ DO;
}0CLS(PSTR);
}0FOR DPVJ_1 TO 4 DO;
}4DEEA_CORE(DEEX);
}4IF DSEM=2 DO;
}8DW3(DEEA);
}4ELSEIF DSEP=0 DO;
}8DFCNB(DEEA$INSGD,4B7);
}4ELSEIF DSEM=0 DO;
}8DFCND(DEEA,0);
}4ELSEIF DSEM=9 DO;
}8DFCND(DEEA,4B7);
}4ELSE DO;
}8DFCNB(DEEA,4B7);
}4ENDIF;
}4INC(DEEX);
}4GOTO DPRSD IF DPVI+DPVJ>DPRSZ;
}4DWCI(',');
}0ENDFOR;
DPRSD:}*DAPPND(MCR);
}0CSOUT(PSTR);
},ENDFOR;
}(ENDIF;
}(RETURN;

*
DVP:}%DFCNB(DEEA$IWGD,4B7);
}(GOTO DPV1;
*
DVI:}%GOTO DVP IF DSEP=0;
}(DFCND(DEEA,0);
}(GOTO DPV1;
*
DVU:}%GOTO DVP IF DSEP=0;
}(DFCND(DEEA,4B7);
}(GOTO DPV1;
*
DVR:}%DFCDS(@DEEA,0) IF DSED= 0 ELSE DFCRS((@DEEA).REAL'FIELD,0);
}(GOTO DPV1;
*
DVX:}%DFCRS((@DEEA).REAL'FIELD,0);
}(DWCI(' ');
}(DFCRS((@DEEC).REAL'FIELD,0);
}(GOTO DPV1;
*
DVO:}%IF DSED=0 DO;
DLONG:}&DFCNB(DEEA,4B7);
},DWCI(',');
},DFCNB(DEEB,4B7);
}(ELSE DO;
},GOTO DVP IF DSEP=0;
DVO1:}'DFCNB(DEEA,4B7);
}(ENDIF;
}(GOTO DPV1;

*
DVF:}%GOTO DVO1 IF DEEA$IWTYPE#IWTFLD;
}(DWCI('(');
}(DFCND(DGSGN(DEEA,FIWDISP),0);
}(IF DEEA$FIWBL # 24 DO;
},DWCI(':');
},DFCND(DEEA$FIWBA,0);
},DWCI(',');
},DFCND(DEEA$FIWBA+DEEA$FIWBL-1,0);
}(ENDIF;
}(DWCI(')');
}(DWCI('S') IF DEEA$FIWSIGN = 1;
}(GOTO DPV1;
*
DVB:}%GOTO DLONG IF DSEP=0;
}(DPVI_DEEB;
}(DPVJ_DEEA;
}(DEGVI(DPVJ,0,DEEX//DLONG);* CHANGED FROM ZDEGVI(...) - 5/12/73
*}FJACK FREEMAN
})DEEB_DPVI;
}(DEEA_DPVJ;
}(DOEA(DEEX:DPVI,DPVJ,GARBAGE//DLONG);
}(SSELECT(DPVI);
*TEST FOR A LABEL
})DFNM(DEEX-@ICCODE[ICLLIT],2//DVB1);
}(GOTO DLONG;
DVB1:}#DPEA(DPVI,DPVJ);
}(CSOUT(MCR);
}(RETURN;

*
DVSP:}$GOTO DVO1 IF DEEA$IWTYPE#IWTSTR OR DSEP=0;
}(DPVI_4-DEEA$SIWCS;
}(DPVJ_0;
}(DPVK_DEEX+1;
}(DPVL_(DEEA$SIWWA-1)*DPVI+DEEA$SIWCA;
}(GOTO DVS2;
*
DVS:}%GOTO DVL IF DSEP=0;
}(DPVJ_DEEA$SIWCS;
}(DPVK_DPVL_0;
}(FOR DPVI_@DEEA TO @DEED DO;
},DPVM_DPVI.SIWWA;
},DPVN_DPVI.SIWCA;
},GOTO DVL IF DPVI.IWTYPE#IWTSTR OR
}-DPVI.SIWCS#DPVJ OR
}-DPVM<DPVL OR
}-DPVM=DPVL AND DPVK>DPVN OR
}-DPVN+DPVJ>3;
},DPVK_DPVN;
},DPVL_DPVM;
}(ENDFOR;
}(DPVI_4-DPVJ;
}(DPVJ_DEEB$SIWCA;
}(DPVK_DEEB$SIWWA;
}(DPVL_(DEEC$SIWWA-DPVK)*DPVI+DEEC$SIWCA-DPVJ;

*
DVS2:}$DFCND(24/DPVI,4B7) IF DPVI#3;
}(DWCI('"');
}(FOR DPVM_1 TO DPVL DO;
},INC(DPVJ);
},IF DPVJ>=DPVI DO;
}0INC(DPVK);
}0DPVJ_0;
},ENDIF;
},DPVN_(CORE(DPVK) LSH (DPVJ*(24/DPVI))) RSH (24-(24/DPVI));
},IF DPVI>2 DO;
}0DWCI(DPVN);
}0GOTO DVS1 IF (DPVM MOD 60) = 0 AND DPVM#DPVL;
},ELSE DO;
}0DFCNB(DPVN,4B7);
}0IF DPVM#DPVL DO;
}4IF (DPVM MOD (4 IF DPVI=1 ELSE 8)) = 0 DO;
DVS1:}3DWCI('"');
}8CSOUT(PSTR);
}8CSOUT(MCR);
}8CLS(PSTR);
}8DWCI('"');
}4ELSE DO;
}8DWCI(',');
}4ENDIF;
}0ENDIF;
},ENDIF;
}(ENDFOR;
}(DWCI('"');
}(GOTO DPV1;
*
DV6:}%DWCI(DEEA$F61);
}(DWCI(DEEA$F62);
}(DWCI(DEEA$F63);
}(DWCI(DEEA$F64);
}(GOTO DPV1;
*
DV8:}%DW3(DEEA);
}(GOTO DPV1;

*MACHINE CODE
DVM:}%DWCI('.');
}(IF DEEA$INSPOP # 0 DO;
},DFCNB(1B2+DEEA$INSOP,0);
}(ELSEIF DEEA$INSOP=77B DO;
},DPVI_DEEA$INSIMV;
},IF DPVI>-1 DO;
}0SSELECT(MOBTN);
}0FOR DPVI_101B TO ICLTT DO;
}4POINT_A(ICTT,DPVI);
}4POINT_A(ICST,POINT.TKSI);
}4GOTO DVM1 IF DEEA = POINT.SYVAL;
}0ENDFOR;
}0GOTO DVM2;
DVM1:}+DWN(DPVI);
}0GOTO DPV1;
},ELSE DO;
}0DPVI_-DPVI;
}0DAPPND(DMU[DPVI$DMUT]);
}0DWCI(' ');
}0DFCNB(DPVI$DMUA,4B7);
}0GOTO DPV1;
},ENDIF;
}(ELSE DO;
},SSELECT(MOBTN);
DVM2:}'DWN(DEEA$INSOP + 1);
}(ENDIF;
}(SSELECT(DPVTN);
}(DWCI(' ');
}(GOTO LABEL'FIXER((DMTAG[DEEA$INSTAG]));

*INDIRECT
*DIRECT
DINDIR:}"DWCI('$');
DDIRCT: DFNM(DEEA,0//DPV1);
}(DAPPND(DGPB);
DDIR1:}"DPVI_DEEA$INSGD;
DDIR2:}"DFCNB(DPVI,0);
DDIR4:}"DWCI(']');
}(GOTO DPV1;
*INDEXED
DINDEX:}"DAPPND(DXPB);
}(GOTO DDIR1;
*BASE-INDEX
DBIND:}#DGLX(DGSGN(DEEA,BXBASE),DBIAS(BXBASE));
}(DWCI('[');
}(DGLX(DGSGN(DEEA,BXINDEX),DBIAS(BXINDEX));
}(GOTO DDIR4;
*INDIRECT-POINTER DISPLACEMENT
DIPD:}$DWCI('$');
*POINTER DISPLACEMENT
DPTD:}$DGLX(DGSGN(DEEA,PDPTR),DBIAS(PDPTR));
}(DWCI('.');
}(DPVI_DEEA$PDDISP;
}(GOTO DIMMD1;
*BASE-INDEX DISPLACEMENT
DBID:}$DAPPND(DXPB);
}(DGLX(DGSGN(DEEA,BXDINDEX),DBIAS(BXDINDEX));
}(DPVI_DEEA$BXDDISP;
}(IF DPVI#0 DO;
},DWCI('+') IF DPVI>0;
},GOTO DDIR2;
}(ENDIF;
}(GOTO DDIR4;

*RELATIVE MODES
DRELAT:}"GOTO LABEL'FIXER((DMREL[DEEA$INSST]));
*INDIRECT L-RELATIVE
DILREL:}"DWCI('$');
*L-RELATIVE
DLREL:}#DFNM(DEEA,1//DPV1);
}(DAPPND(DLPB);
}(DPVI_DEEA$INSLRD;
}(GOTO DDIR2;
*INDIRECT SOURCE RELATIVE
DISREL:}"DWCI('$');
*SOURCE RELATIVE
DSREL:}#DFNM(DEEA+DEEX-@ICCODE[ICLLIT],2//DPV1);
}(DAPPND(DRPB);
}(DPVI_DEEA$INSSRD;
}(GOTO DDIR2;
*IMMEDIATE
DIMMED:}"DPVI_DEEA$INSIMV;
DIMMD1: DFCND(DPVI,0);
}(GOTO DPV1;
*IMMEDIATE INDEXED
DIMIND:}"DAPPND(DXP);
}(DPVI_DEEA$INSIMV;
}(IF DPVI#0 DO;
},DWCI('+') IF DPVI>0;
},GOTO DIMMD1;
}(ENDIF;
}(GOTO DPV1;

*
*
DVFN1:
DVFN2:
}(DEEA_DEEX IF DSEM=16;
}(IF DSEP#0 DO;
},SSELECT(1);
},DFNM(DEEA,3//DPV1);
}(ENDIF;
}(DIGV(DEEA);* CHANGED FROM ZDIGV(...) - 5/12/73}"JACK FREEMAN
}(GOTO DLONG;
*
DVA:}%GOTO DLONG IF DSEP=0 OR DEEA$IWTYPE#IWTARR;
}(DGDIM(//DLONG);
}(DWCI('[');
}(FOR DPVI_1 TO DDIM DO;
},DFCND(DSUB[DPVI],0);
},DWCI(',' IF DPVI#DDIM ELSE ':');
}(ENDFOR;
}(DFCND(DSIZE,0);
}(DWCI(',');
}(DFCNB(DBASE,4B7);
}(DWCI(']');
}(DAPPND("ONE") IF DLB=1;
}(GOTO DPV1;
DVL:}$DFCNB(DEEA,4B7);
}(DWCI(',');
}(DFCNB(DEEB,4B7);
}(DWCI(',');
}(DFCNB(DEEC,4B7);
}(DWCI(',');
}(DFCNB(DEED,4B7);
}(GOTO DPV1;
*
DVMAC:}#DAPPND("MACRO");
}(GOTO DPV1;
*
DVUND:}#DAPPND("UNDEFINED");
}(GOTO DPV1;
*
DPV1:}$CSOUT(PSTR);
}(CSOUT(MCR);
}(RETURN;

*APPEND DECIMAL INTEGER TO PSTR


}(PROGRAM DFCND;
}(INCLUDE DEBUG'DECS;

})DI DNSYM;

})FUNCTION DFCND(DDA,DDB);
}(FCNS(DDA,PSTR,DDB,10//DOER);
}(RETURN;
*APPEND OCTAL INTEGER TO PSTR
})ENTRY DFCNB(DDA,DDB);

})FCNS(DDA,PSTR,DDB,10B//DOER);
}((DDA_'B' & GOTO DWCI1) IF DDA>7 OR DDA<-7 OR DDA<0 AND DDB<0;
}(RETURN;
*APPEND REAL NUMBER TO PSTR
})ENTRY DFCRS(REAL DDR,INTEGER DDB);

})CRS(DDR,PSTR,DDB//DOER);
}(RETURN;
*APPEND DOUBLE REAL TO PSTR
})ENTRY DFCDS(DOUBLE DDD,INTEGER DDB);

})FCDS(DDD,PSTR,DDB//DOER);
}(RETURN;
*APPEND STRING TO PSTR
})ENTRY DAPPND(STRING DDS);

})APPND(PSTR,DDS//DOER);
}(RETURN;
*APPEND CHARACTER TO PSTR
})ENTRY DWCI(DDA);

DWCI1:}#IF DDA<=77B DO;
},WCI(DDA,PSTR//DOER);
}(ELSE DO;
},WCI('&&',PSTR//DOER);
},FCNS(DDA,PSTR,4B7,10B//DOER);
}(ENDIF;
}(RETURN;
*COPY STRING
})ENTRY DCOPY(STRING DDS,STRING DDT);

})CLS(DDT);
}(APPND(DDT,DDS//DOER);
}(RETURN (DDT);
*PREPROCESS
})ENTRY DPPDS(STRING DDS,INTEGER DDB);

})APPND(DDS,MCR//DOER);
}(DNSYM_INSYMF;
}(ZPPDS(DDS,DDB//DPPDS1);
}(FETCH() IF DNSYM#INSYMF;
}(RETURN;
DPPDS1: DERRF(-2);
*APPEND NAME TO PSTR
})ENTRY DWN(DDA);

})PSTR _ SWSYM(DDA,PSTR//DOER);
}(RETURN;
DOER:}#DERRF(182);

*APPEND 3 CHARACTERS TO PSTR


}(PROGRAM DW3;
})INCLUDE DEBUG'DECS;


})FUNCTION DW3(DWW);
})DWCI(DWW$F81);
})DWCI(DWW$F82);
})DWCI(DWW$F83);
})RETURN;

*
*
*THIS FUNCTION INCREMENTS LOWER BOUND TO NEXT STATEMENT
*FRETN IF NO MORE STATEMENTS


}(PROGRAM DILB;
})INCLUDE DEBUG'DECS;


})FUNCTION DILB(), FRETURN;
})SSELECT(E1TN);
})POINT _ A(ICST,E1SI);
})E1SI _ POINT.PTFP;
DILB1:}#RETN IF E1SI # 0;
DILB2:}#E1TN _ ICGSP.GSORD;
})FRETN IF E1TN = 0;
})SSELECT(E1TN);
})GOTO DILB2 IF ICTYPE # IBTFN;
})E1SI _ ICFSTAT;
})GOTO DILB1;

*
*
*THIS FUNCTION SETS PRINT MODE FOR EXAMINE COMMANDS.


}(PROGRAM DMSET;
})INCLUDE DEBUG'DECS;

})DI DMSETI;

})FUNCTION DMSET(DMSETT);
})DSEM _ DEET;
})DSED _ DEETD;
})DSEP _ DEETP;
DMSET1:}"GOTO DMSET2 IF DSEM=14;
})IF PMODPT#-1 AND MODES['V']<1 DO;
}-DSEM_PMODPT;
}-DSED_PMODD;
}-DSEP_PMODP;
})ENDIF;
})DSEM _ DMSETI IF MODES[DMODA[DMSETI]] = 1
})FOR DMSETI _ 0 TO 12;
})SETM('D',0,DSED);
})SETM('P',0,DSEP);
DMSET2:}"IF DMSETT=0 DO;
}-DSSEM_DSEM;
}-DSSEP_DSEP;
}-DSSED_DSED;
})ENDIF;
})RETURN;

*
*THIS FUNCTION CHECKS FOR A CHANGE OF MODE
})ENTRY DCMT();

})DMSETT_0;
})DSEM_DSSEM;
})DSEP_DSSEP;
})DSED_DSSED;
})GOTO DMSET1;

*
*
*THIS FUNCTION COLLECTS MODIFIERS


}(PROGRAM DMOD;
})INCLUDE DEBUG'DECS;

})DI DMC;

})FUNCTION DMOD();
DMOD1:}#DMC _ GCI(CSTR);
})RETURN IF DMC = ':';
})MODES[DMC] _ 1 IF 20B<=DMC AND DMC<=72B;
})GOTO DMOD1;

*THIS FUNCTION GETS AN ARGUMENT FROM QSTR AND PUTS IT ON PSTR
*FRETN IF NO ARGUMENT


}(PROGRAM DGARG;
})INCLUDE DEBUG'DECS;

})DI DGAC,DGAF,DGAD;

})FUNCTION DGARG(), FRETURN;
})FRETN IF LENGTH(QSTR)=0;
})CLS(PSTR);
})DGAC_0;
DGA1:}$DGAF_GCI(QSTR//DGA2);
DGA5:}$RETN (0) IF DGAF=',' AND DGAC=0;
})DWCI(DGAF);
})IF DGAF='&'' OR DGAF='"' DO;
}-(DWCI(GCI(QSTR//DGA3)) IF DGAD='&&') WHILE
}-DWCI(DGAD_GCI(QSTR//DGA3))#DGAF;
})ELSEIF DGAF='[' OR DGAF='(' DO;
}-INC(DGAC);
})ELSEIF DGAF=']' OR DGAF=')' DO;
}-DEC(DGAC);
})ELSEIF DGAF<='Z' AND DGAF>='A' DO;
DGA4:}(DGAF_GCI(QSTR//DGA2);
}-(DWCI(DGAF) & GOTO DGA4) IF DGAF<='Z' AND DGAF>='A' OR
}-DGAF<='9' AND DGAF>='0' OR DGAF='&'';
}-GOTO DGA5;
})ENDIF;
})GOTO DGA1;
DGA2:}$RETN (-1) IF DGAC=0;
DGA3:}$DERRF(183);

*THIS FUNCTION GETS THE TN FOR A PROGRAM
*A NEGATIVE ARG MEANS JUST PROGRAM NAME ALONE
*A POSITIVE ARG MEANS < NAME >
*FRETN IF NO PROGRAM NAME FOUND (SYNTAX)


}(PROGRAM DGPROG;
})INCLUDE DEBUG'DECS;

})DI DGPT,DGPI,DGPJ;
})DECLARE ARRAY DGPA[4];

})FUNCTION DGPROG(DGPTN,DGPRG), FRETURN;
})DGPI_GETR(PSTR);
})DGPT_DSKIPB(//DGP6);
})IF DGPT>='0' AND DGPT<'3' DO;
}-DGPRG_DGPT-20B;
}-GOTO DGP6 IF DSKIPB(//DGP6)#',';
}-DGPT_DSKIPB(//DGP6);
})ENDIF;
})DRING(DGPRG);
})IF DGPTN>=0 DO;
}-IF DGPT#'<' DO;
DGP6:},SETR(PSTR,DGPI);
}1FRETN;
}-ENDIF;
}-DGPT_DSKIPB(//DGP3);
}-(RETN (DGPTN,DGPRG) IF DGPTN>0 ELSE GOTO DGP3) IF DGPT='>' ;
})ENDIF;
})FOR DGPI_0 TO 3 DO;
}-DGPA[DGPI]_0;
}-FOR DGPJ_18 BY -6 TO 0 DO;
}1DGPA[DGPI]_DGPA[DGPI] + (DGPT LSH DGPJ);
}1DGPT_GCI(PSTR//DGP5);
}1GOTO DGP5 IF DGPT=',';
}1GOTO DGP1 IF DGPT=' ';
}1GOTO DGP2 IF DGPT='>';
}-ENDFOR;
})ENDFOR;
})DGPI_3;
DGP1:}$DGPT_DSKIPB(//DGP5);
DGP2:}$IF DGPTN<0 AND DGPT#',' OR DGPTN>=0 AND DGPT#'>' DO;
DGP3:}(DERRF(184);
})ENDIF;
DGP4:}$SSELECT(0);
})GOTO DGP3 IF (DGPT_SSFIND(DGPA,DGPI+1))=0;
})RETN (DGPT,DGPRG);
DGP5:}$GOTO DGP3 IF DGPTN>=0 ELSE GOTO DGP4;

*
*THIS FUNCTION GETS A NUMBER FROM PSTR
*RETURNS ARGUMENT IF BLANK OR EMPTY STRING


}(PROGRAM DGNUM;
})INCLUDE DEBUG'DECS;

})DI DGN8,DGNC;

})FUNCTION DGNUM(DGN10);
})DGARG(//DGN5);
})DGNC_DSKIPB(//DGN5);
})DGN8_DGN10_0;
DGN2:}$GOTO DGN3 IF DGNC<'0' OR DGNC>'9';
})DGN8_DGN8*8+DGNC-20B;
})DGN10_DGN10*10+DGNC-20B;
})DGNC_GCI(PSTR//DGN5);
})GOTO DGN2;
DGN3:}$IF DGNC='B' DO;
}-DGN10_DGN8;
})ELSEIF DGNC#' ' AND DGNC#'D' DO;
}-DERRF(183);
})ENDIF;
})DSKIPB(//DGN5);
})DERRF(183);
DGN5:}$RETURN (DGN10);

*
*THIS FUNCTION SKIPS OVER BLANKS IN PSTR
* RETN}"RETURNS CHARACTER AS VALUE
* FRETN NO NON-BLANK CHARACTERS


}(PROGRAM DSKIPB;
})INCLUDE DEBUG'DECS;

})DI DSKIPC;

})FUNCTION DSKIPB(), FRETURN;
DSKIP1:}"GOTO DSKIP1 IF (DSKIPC_GCI(PSTR//FRETN))=' ';
})RETN (DSKIPC);

*
*THIS FUNCTION GETS A RING NUMBER FROM AN ABSOLUTE LOCATION


}(PROGRAM DGRING;
})INCLUDE DEBUG'DECS;


})FUNCTION DGRING(DGRG);
})DGRG_DGRG$IWGD;
})RETURN ((0 IF DGRG<4B5 ELSE
})(1 IF DGRG>=4B5+3000B AND DGRG<6B5 ELSE
})2 )));

*THIS FUNCTION CHECKS FOR A NULL EDITOR ARGUMENT
*SETS TO CURRENT IF FOUND AND FRETN ELSE RETN


}(PROGRAM DNEA;
})INCLUDE DEBUG'DECS;


})FUNCTION DNEA(), FRETURN;
})RETN IF LENGTH(CSTR)#0;
})DERRF(185) IF ECLTN=0 OR ECLSI=0;
})E1TN_E2TN_ECLTN;
})E1SI_E2SI_ECLSI;
})FRETN;

*
*
*THIS FUNCTION EVALUATES AN EXPRESSION AS LAST ARGUMENT IN THE
*COMMAND STRING.}"FRETN IF COMMAND STRING NOT EMPTIED.
*IFNO ARG RETN AND SET DEEA TO ARGUMENT


}(PROGRAM DEEL;
})INCLUDE DEBUG'DECS;


})FUNCTION DEEL(DEELI);
})DEEA_DGNUM(DEELI);
})DGARG(// RETURN);
})DERRF(186);

*
*FUNCTION TO DO CODE OUT OF SEQUENCE
* RETURNS NEW LOCATION
* (IT IS ASSUMED THAT DCOS DOES NOT USE POINT)


}(PROGRAM DCOS;
})INCLUDE DEBUG'DECS;

})DI DCOSB;

})FUNCTION DCOS(DCOSA), FRETURN;
})DUSERF_-1;
})DCOSB_CORE(DCOSA);
})DUSERF_0;
})FRETN IF DCOSB-DCOSB$INSSRD#DBRU;
})RETN (DCOSA+DCOSB$INSSRD);

*
*THIS FUNCTION GETS A BREAKPOINT CORE ADDRESS


}(PROGRAM DGBKA;
})INCLUDE DEBUG'DECS;

})DI DGBA,DGBB;

})FUNCTION DGBKA(DGBTN,DGBSI), FRETURN;
})FRETN IF DGBTN=0 OR DGBSI=0;
})DCEAA(DGBTN,DGBSI,0:DGBA,POINT);
})DGBB_DCOS(DGBA//DGB1);
})DGBA_DGBB IF DGBB>=DGBA AND DGBB<DGBA+POINT.PTLCODE;
DGB1:}$RETN (DGBA);

*
*
*THIS FUNCITON RETURNS A TN AND SI AND WORD DISP FOR AN EDITOR ADDRESS
*GIVEN AN ABSOLUTE CORE ADDRESS


}(PROGRAM DOEA;
})INCLUDE DEBUG'DECS;

})DI DPEAL,DPEAT,DPEATN,DPEASI;

})FUNCTION DOEA(DPEAO), FRETURN;
})SSELECT(0);
*GET FUNCTION OF OCTAL ADDRESS
})DPEATN _ ICFSTAT;
DPEA2:}#POINT _ DGSSET(DPEATN);
})GOTO DPEA5 IF POINT.GSTYPE # IBTFN;
})DPEAT_POINT.GSADDR;
})DPEAL _ DPEAT + POINT.GSLCODE;
})GOTO DPEA1 IF DPEAT<=DPEAO AND DPEAO<DPEAL;
DPEA5:}#DPEATN _ POINT.GSORD;
})FRETN IF DPEATN = 0 ELSE GOTO DPEA2;
DPEA1:}#SSELECT(DPEATN);
})DPEAT_@ICCODE[ICLLIT];
})FRETN IF DPEAO<DPEAT OR DPEAO>=DPEAT+ICECODE;
*GET STATEMENT OF OCTAL ADDRESS
})DPEASI _ ICFSTAT;
DPEA3:}#POINT _ A(ICST,DPEASI);
})DPEAT _ DCOS(DPEAT//DPEA6) IF POINT.PTCOS # 0;
})DPEAT _ DPEAT + POINT.PTLCODE;
})RETN (DPEATN,DPEASI,DPEAO-DPEAT+POINT.PTLCODE) IF DPEAO < DPEAT
})OR POINT.PTFP=0;
})DPEASI_POINT.PTFP;
})GOTO DPEA3;
DPEA6:}#DERRF(0);

*THIS FUNCTION PRINTS AN EDITOR ADDRESS GIVEN 
*A FUNCTION TOKEN NUMBER AND SI FOR THE STATEMENT


}(PROGRAM DPEA;
})INCLUDE DEBUG'DECS;

})DI DPEAL;

})FUNCTION DPEA(DPEATN,DPEASI);

*PRINT <FCN NAME>
})SSELECT(0);
})CLS(PSTR);
})DWCI('<');
})DWN(DPEATN);
})DWCI('>');
*PRINT LABEL
})SSELECT(DPEATN);
})ZEDSA(DPEASI:DPEATN,DPEAL//DPEA0);
})IF DPEATN # 0 DO;
}-DWN(DPEATN);
*PRINT LINE COUNT DISPLACEMENT
}-IF DPEAL#0 DO;
}1DWCI('+');
}1DFCND(DPEAL,0);
}-ENDIF;
})ELSE DO;
}-IF DPEAL#0 DO;
}1DWCI('#');
}1DFCND(DPEAL,0);
}-ENDIF;
})ENDIF;
})CSOUT(PSTR);
})RETURN;
DPEA0:}#DERRF(0);

*
*
*THIS FUNCTION CONVERTS AN EDITOR ADDRESS INTO A CORE ADDRESS
*AND RETURNS THIS AS ITS VALUE


}(PROGRAM DCEAA;
})INCLUDE DEBUG'DECS;

})DI DCEAAI,DCEAAT,DCEAAL;

})FUNCTION DCEAA(DCEATN,DCEASI,DCEADI);
})DERRF(0) IF DCEATN<=1;
})SSELECT(DCEATN);
})DCEAAT _ @ICCODE[ICLLIT];
})DCEAAL_DCEAAT;
})FOR DCEAAI _ ICFSTAT,POINT.PTFP WHILE DCEAAI # DCEASI DO;
}-POINT _ A(ICST,DCEAAI);
}-DCEAAT _ DCOS(DCEAAT//DCEAA1) IF POINT.PTCOS # 0;
}-DCEAAT _ DCEAAT + POINT.PTLCODE;
})ENDFOR;
})RETURN (DCEAAT+DCEADI,A(ICST,DCEAAI));
DCEAA1:}"DERRF(0);

*THIS FUNCTION NON DESTRUCTIVELY UNWINDS THE CALL STACK ONE LEVEL


}(PROGRAM DUNSTK;
})INCLUDE DEBUG'DECS;


})FUNCTION DUNSTK(), FRETURN;
})FRETN IF DLREG=ENDCSTACK OR DLREG=0 OR DGRING(DPCNT)#DGRING(CORE(DLREG));
})DPCNT_CORE(DLREG);
})DLREG_CORE(DLREG+1)$IWGD;
})DNEWF_CORE(DLREG+2)$IWGD;
})DEC(DNOUN);
})DERRF(197) IF DNOUN=0;
})RETN (DPCNT,DLREG,DNEWF);

*THIS FUNCTION INITIALIZES THE NON DESTRUCTIVE UNWINDING OF THE CALL STACK
*


}(PROGRAM DUNSI;
})INCLUDE DEBUG'DECS;


})FUNCTION DUNSI(DUNSTN);
})DNOUN_256;
})DLREG_LREG;
})DPCNT_PCNT;
})DNEWF_CORE(DLREG+2)$IWGD;
})SSELECT(0);
})POINT_DGSSET(DUNSTN);
})DERRF(187) IF POINT.GSTYPE#IBTFN;
})DNEWL_POINT.GSNEWL;
})SSELECT(DUNSTN);
})DRLB_@ICCODE[ICLLIT];
})DRUB_DRLB+ICECODE;
})RETURN (POINT,DNEWF,DNEWL);

*GETS DIMENSION INFORMATION


}(PROGRAM DGDIM;
})INCLUDE DEBUG'DECS;

})DI DLEB;

})FUNCTION DGDIM(), FRETURN;
})FOR DDIM_1 TO 7 DO;
}-FRETN IF DEEA$IWTYPE # IWTARR;
}-DLEB_DEEA$AIWLEB;
}-DSUB[DDIM]_(DEEA$AIWNLIM IF DLEB=0 ELSE DEEA$AIWLLIM);
}-GOTO DGDIM1 IF DEEB$IWTRAP=0;
}-DEGVI(DEEB,0,DEEX+1//FRETN);
})ENDFOR;
})FRETN;
DGDIM1:}"DLB_DEEA$AIWORG;
})IF DLEB=0 DO;
}-DELSZ_0;
}-DSIZE_1+DEEA$AIWNMULT;
})ELSE DO;
}-DELSZ_DSIZE_1+DEEA$AIWLMULT;
})ENDIF;
})DEGVI(DEEB,0,DEEX+1//FRETN);
})DBASE_DEEX;
})RETN;

*
*
*THIS FUNCTION INITIALIZES GET NEXT TOKEN FROM PPTB


}(PROGRAM DISGNT;
})INCLUDE DEBUG'DECS;


})FUNCTION DISGNT(DGNTBB);
})DGNTB_DGNTBB;
})DGNTC _ 0;
})DGNTI _ PTTO;
})DGNTE_DGNTB.PTSIZE*2 + DGNTB.PTONT -(PTTO+1);
})RETURN;

*FUNCTION TO GET NEXT TOKEN


}(PROGRAM DGNT;
})INCLUDE DEBUG'DECS;

})DI DGNTT;

})FUNCTION DGNT(), FRETURN;
DGNT1:}#FRETN IF DGNTC = DGNTE;
})DGNTT _ DGNTB[DGNTI$L23B];
})INC(DGNTI);
})INC(DGNTC);
})RETN ((DGNTT$L12B IF DGNTI$R1B # 0 ELSE DGNTT$R12B));

*THIS FUNCTION GETS THE LOCAL ENVIRONMENT FOR THE CURRENT PROGRAM


}(PROGRAM DGLREG;
})INCLUDE DEBUG'DECS;

})DI DGLRV,DGLRI,DGLRC,GARBAGE;

})FUNCTION DGLREG(DGLRF);
})DGLRI_ICGTN;
})GOTO DGLR1 IF ICTYPE#IBTFN;
})DUNSI(DGLRI:GARBAGE,GARBAGE,DGLRV);
})RETURN (DGLRV$FWNEWL) IF DGLRV$FWSTK=0 AND DGLRF=0;
})DGLRV_LREG;
})DGLRC_PCNT;
})DUNSTK(:DGLRC,DGLRV,GARBAGE//DGLR1) FOR DGLRI_1 TO DLEVNO;
})DUNSTK(:DGLRC,DGLRV,GARBAGE//DGLR1) WHILE DGLRC<DRLB OR DGLRC>=DRUB;
})RETURN (DGLRV);
DGLR1:}#DERRF(194);

*
*
*THIS FUNCTION SETS UP POINTER FOR GIVEN GNT ENTRY
*ASSUMES GNT IS SELECTED


}(PROGRAM DGSSET;
})INCLUDE DEBUG'DECS;


})FUNCTION DGSSET(DGSSTN);
})POINT _ A(ICTT,DGSSTN);
})POINT _ A(ICST,POINT.TKSI);
})RETURN (POINT);

*THIS FUNCTION DELETES A DIRECT STATEMENT
*1 TASK 1
*2 TASK 2


}(PROGRAM DDEL;
})INCLUDE DEBUG'DECS;


})FUNCTION DDEL(DDELN);
})IF DDELN=1 DO;
}-DTASK_0;
}-DERRF(198) IF DIRTN1=0 OR DIRSI1=0;
}-DRING(DIRRG1);
}-SSELECT(DIRTN1);
}-DDELN_DIRSI1;
}-DIRTN1_0;
})ELSEIF DDELN=2 DO;
}-DTASK_1 IF DTASK=2;
}-DERRF(198) IF DIRTN2=0 OR DIRSI2=0;
}-DRING(DIRRG2);
}-SSELECT(DIRTN2);
}-DDELN_DIRSI2;
}-DIRTN2_0;
})ELSE DO;
DDEL1:}'DERRF(0);
})ENDIF;
***************THIS IS A REMOVAL KLUDGE UNTIL FIXED
})DERRF(0) IF DDELN#ICLSTAT;
})POINT_A(ICST,DDELN);
})ICBA.IBECODE_ICECODE_ICECODE-POINT.PTLCODE;
})STDEL(DDELN,DDELN//DDEL1);
})RETURN;

*
*
*THIS FUNCTION SETS UP PARAMETERS FOR TRANSFER OF CONTROL
*FRETN IF CAN NOT FIRE UP PROGRAM


}(PROGRAM DPROG;
})INCLUDE DEBUG'DECS;
})DECLARE INTEGER GARBAGE;


})FUNCTION DPROG(DPROGI,DPGRG), FRETURN;
})FRETN IF DPROGI=1 AND ((DTASK=0 AND BARE=0) OR BRKTN=0 OR BRKSI=0)
})AND BRKFLG>=0;
})DBKSP _ DCDA _ -1;
* ASSUMES ARRAY CONTAINS EITHER 0 OR 1 IN REFERENCED LOCATIONS.
})DEVERY _ (MODES['E'] - 1)}#A' (PMODEN V' N' (MODES['N'] - 1));
})DLOUD _ (MODES['L'] - 1)}#A' (PMODLQ V' N' (MODES['Q'] - 1));
})RETN IF DPROGI=-2;
})ZRECOMP(0,0) IF RECOMPILE#0;
})IF STKCHANGE#0 DO;
}-DZAP();
}-DERRF(200);
})ENDIF;
})IF NOGO>0 DO;
}-CLS(PSTR);
}-DFCND(NOGO,4B7);
}-DAPPND(" LEVELS MUST BE UNWOUND&307");
}-CSOUT(PSTR);
}-DERRF(-2);
})ENDIF;
})DRING(DSRING_DPGRG);
})DPRING'PTR_DSRING'PTR;
})RETN IF DPROGI=-1;
})IF BRKFLG<0 DO;
}-PCNT_BRKDP;
}-RETN;
})ENDIF;
})PCNT_DCEAA(BRKTN,BRKSI,BRKDP:,GARBAGE);
})SSELECT(BRKTN);
})POINT_A(ICST,BRKSI);
})RETN IF POINT.PTBKF=0;
})DCDA_DGBKA(BRKTN,BRKSI//RETN) IF MODES['H']>0 OR
})PMODGH>-1 AND MODES['G']<1;
})RETN;

*WRITES G'[#] , L'[#] , OR X'}"DEPENDING ON ARG1 >,<,= 0
*ARG1 IS OF SIZE GIVEN BY A RIGHT ADJUSTED MASK ARG2


}(PROGRAM DGLX;
})INCLUDE DEBUG'DECS;


})FUNCTION DGLX(DGLXV,DGLXM);
})IF DGLXV#0 DO;
}-IF DGLXV>0 DO;
}1DFNM(DGLXV,0// RETURN);
}1DAPPND(DGPB);
}-ELSE DO;
}1DGLXV_DGLXV+DGLXM;
}1DFNM(DGLXV,1// RETURN);
}1DAPPND(DLPB);
}-ENDIF;
}-DFCNB(DGLXV,0);
}-DWCI(']');
})ELSE DO;
}-DAPPND(DXP);
})ENDIF;
})RETURN;

*THIS FUNCTION WRITES A SYMBOL OR LABEL NAME IF IN CURRENT FUNCTION
* OR FUNCTION NAME
*0 G-RELATIVE
*1 L-RELATIVE
*2 LABEL
*3 FUNCTION
*** FRETN IF IT IS FOUND ELSE RETN


}(PROGRAM DFNM;
})INCLUDE DEBUG'DECS;

})DI DFNI,DFNJ,GARBAGE;

})FUNCTION DFNM(DFNV,DFNT), FRETURN;
})DFNI_0;
})IF DFNT=0 DO;
}-DFNI$INSTAG_ATD;
}-DFNI$INSGD_DFNV;
})ELSEIF DFNT=1 DO;
}-DFNI$INSTAG_ATREL;
}-DFNI$INSST_ASTLR;
}-DFNI$INSLRD_DFNV;
})ELSEIF DFNT=2 DO;
}-DFNI$INSTAG_ATREL;
}-DFNI$INSRT_ARTSR;
}-DFNI$INSSRD_DFNV;
})ELSEIF DFNT=3 DO;
}-DFNI_DFNV$IWGD+GBASE;
})ELSE DO;
}-DERRF(0);
})ENDIF;
})FOR DFNJ_1 TO ICLTT DO;
}-POINT_A(ICTT,DFNJ);
}-IF (DFNT#2 AND POINT.TKSYM#0) OR
}-(DFNT=2 AND POINT.TKPARAM#0) DO;
}1POINT_A(ICST,POINT.TKSI);
}1DFNV_DFNI-POINT.SYVAL;
}1IF DFNV=0 DO;
}5DWN(DFNJ);
}5FRETN;
}1ELSEIF DFNV>=0 AND DFNV<4 AND DFNT<=1 DO;
}5DGT(DFNJ:,GARBAGE//DFNM1);
}5IF DFNV<(DEET+1 IF DEETD=0 AND (DEET=1 OR DEET=3)
}5ELSE DTW[DEET]) DO;
}9DWN(DFNJ);
}9DWCI('$');
}9DFCND(DFNV,4B7);
}9FRETN;
}5ENDIF;
}1ENDIF;
}-ENDIF;
})ENDFOR;
})RETN;
DFNM1:}#DERRF(0);

*
*
*THIS FUNCTION STORES INTO CORE


}(PROGRAM CORES;
})INCLUDE DEBUG'DECS;

})DP COREP;

})FUNCTION CORES(COREA,COREB);
})IF BARE=0 OR DUSERF<0 DO;
}-COREP_COREA;
})ELSE DO;
}-COREP_(COREF(COREA) IF DABSF=0 ELSE COREA);
})ENDIF;
})PUT(COREP,COREB);
})RETURN;
*
*
*THIS FUNCTION READS FROM CORE
})ENTRY CORE(COREA);

})IF BARE=0 OR DUSERF<0 DO;
}-COREP_COREA;
})ELSE DO;
}-COREP_(COREF(COREA) IF DABSF=0 ELSE COREA);
})ENDIF;
})COREB_GET(COREP);
})RETURN (COREB);

*
*
*THIS FUNCTION GETS A REAL CORE ADDRESS


}(PROGRAM COREF;
})INCLUDE DEBUG'DECS;

})DI COREJ;

})FUNCTION COREF(COREI);
})COREJ_DSPM[COREI$FPAGEA];
})COREJ_((COREJ RSH 12) A' 3777B) IF COREJ<0;
})DERRF(201) IF COREJ$FPAGEE#0;
})COREI$FPAGEA_COREJ$FPAGEM;
})RETURN (COREI);

*
*
*DEBUGGER INITIALIZATION


}(PROGRAM DEINIT;
}(INCLUDE DEBUG'DECS;

})DI DEINTI, USP'STATUS;
}(DECLARE PARAMETER DPNIM _ 1B6;

})FUNCTION DEINIT();
}(DSPM[DEINTI]_ 2B3 FOR DEINTI_0 TO 127;
DEIN1:}"DBKTN _ 0;
}(CALLSTACK _ LREG _ ENDCSTACK;
}(GREG _ GBASE;
}(PMODPT_PMODGH_PMODEN_PMODD_PMODP_PMODLQ_-1;
}(PMOD01_BRKFLG_0;
}(DZAP();
}(DTN1_0;
}(DLEVNO_0;
}(RETURN;

*M1 MODE INIT
*USER MUST HAVE SET UP M1MODE AND GBASE
})ENTRY DEM1(DEMFLG);

})IF DEMFLG#0 DO;
},DZAP() IF DEMFLG=-1;
},RETURN;
}(ENDIF;
}(SPLTM_READ'SPT'FIELD(-1,'TCM'//SYSERR);
}(USPNO_CREATE'SSP(-1//SYSERR);
}(SET'SPT'FIELD(-1,'TM',SPLTM V' (4B7 RSH BPTNO)//SYSERR);
}(SET'SPT'FIELD(USPNO,'TCM',SPLTM A' N' (4B7 RSH BPTNO)//SYSERR);
}(USP'STATUS _ READ'SPT'FIELD(USPNO, 'SB'//SYSERR);
}(SET'SPT'FIELD(USPNO, 'SB', USP'STATUS V' DPNIM//SYSERR);
}(GOTO DEIN1;

*
*


}(PROGRAM DECOM;
}(INCLUDE DEBUG'DECS;

})DI DBR,DBT,DBI, GARBAGE;
}(DECLARE ARRAY DBA;

})FUNCTION DECOM();
}(DCRING_RING;
}(.CLA, STA DERRT;
}((DDEL(2) & DRING(DCRING)) IF DIRTN2#0;
}((DDEL(1) & DRING(DCRING)) IF DIRTN1#0 AND DTASK=0;
}(DBKFL_-1 IF DBKTN=0 OR DBKSI=0;
}(DABSF_DUSERF_0;
*IS STATEMENT DIRECT
})DBR _ GETR(CSTR);
}(MODES[DBI]_0 FOR DBI_20B TO 72B;
}(DBC _ GCI(CSTR//DERR);
}(IF DBC = ' ' DO;
SKIP:}'GOTO SKIP IF (DBC _ GCI(CSTR// RETURN)) = ' ';
},WCD(DBC, CSTR);
},GOTO DIRECT;
}(ENDIF;
}(GOTO DB1 IF HERALD = HXDEBUG;
*BEGINNER MODE
})SETR(CSTR,DBR);
}(COMMAND(CSTR,DSTR,0:CSTR,DBC,DBI//DERR);
*COLLECT MODIFIERS
DB5:}%DBR _ GETR(CSTR);
DB8:}$DBT _ GCI(CSTR//DB9);
}(GOTO DB8 IF DBT >= 'A' AND DBT <= 'Z'
})OR DBT >= '0' AND DBT <= '9';
}(GOTO DB9 IF DBT # DCOLON;
}(SETR(CSTR,DBR);
}(DMOD();
}(GOTO DB10;
DB9:}$SETR(CSTR,DBR);
*DISPATCH FOR BEGINNER MODE
DB10:}$(DFAA[DBI])();
}(RETURN;
*EXPERT MODE
DB6:}%DBC _ GCI(CSTR//DERR);
DB1:}$GOTO DB6 IF DBC >= 'A' AND DBC <= 'Z'
}(OR DBC >= '0' AND DBC <= '9';
*REPLACE COMMAND CHARACTER BY A COLON
*AND COLLECT MODIFIERS
})WCD(DCOLON,CSTR);
}(SETR(CSTR,DBR);
}(DMOD();
}(DBA _ DXCA;

*DISPATCH
DB11:}$FOR DBI _ 0 TO NCOMMAND-1 DO;
},IF DBC = DBA[DBI] DO;
}0QSTR_DCOPY(CSTR,QSTR);
}0(DFAA[DBI])();
}0RETN;
},ENDIF;
}(ENDFOR;
DERR:}#DERRF(181);

*
*
*DIRECT STATEMENT
DIRECT:}"WCI(';',CSTR);
}(DERRF(-1) IF BARE#0;
*ABOUT TO DO TASK1
})IF DTASK=0 DO;
},SSELECT(DMYTN);
},DPPDS(CSTR,5);
*COMPILE AND TEST FOR RETURN OR GOTO WHICH ARE ILLEGAL
}-DBFLAG_0;
},CSOUT("COMPILE 1&307");
},ZCOMPS(:DBT,DIRSI1//RETN);
},DZAP();
},DIRTN1_DMYTN;
},DIRRG1_DCRING;
},IF DBFLAG#0 DO;
*DELETE DIRECT STATEMENT
DIRCT1:}*DDEL(1);
}0DERRF(180);
},ENDIF;
*SET BREAKPOINT TO END DIRECT STATEMENT
}-DPLANT(@ICCODE[ICLLIT+DBT-1],-1,-1//DIRCT3);
},DPROG(-1,DIRRG1//DIRCT3);
},DTASK_1;
},DSSAVE[DBI]_0 FOR DBI_0 TO (3*LSTATE-1);
},DSSAVE[LSTATE*DBI+6]_ENDCSTACK FOR DBI_0 TO 2;
},PCNT_DCEAA(DIRTN1,DIRSI1,0:,GARBAGE);
},FOR DBI_0 TO NRINGS-1 DO;
}0IF REXISTS[DBI] DO;
}4DRING(DBI);
}4IF CORE(GBASE+1)#0 DO;
}8CORES(GBASE+2,CORE(GBASE+1));
}4ELSE DO;
}8CORES(GBASE+2,STKBOT);
}8CORES(GBASE+3,STKTOP);
}4ENDIF;
}0ENDIF;
},ENDFOR;

*ABOUT TO DO TASK 2 DIRECT STATEMENT
})ELSEIF DTASK=1 DO;
},DIRRG2_DCRING;
},SSELECT(ECLTN);
},DPPDS(CSTR,5);
*COMPILE
}-DBFLAG_0;
},CSOUT("COMPILE 2&307");
},ZCOMPS(:DBT,DIRSI2//RETN);
*SET BREAKPOINT TO END DIRECT STATEMENT
}-DIRTN2_ECLTN;
},DPLANT(@ICCODE[ICLLIT+DBT-1],-1,-1//DIRCT2);
},DPROG(-1,DIRRG2//DIRCT2);
},DTASK_2;
*SAVE STATE OF TASK 1
}-DSTATE[DBI]_DSSAVE[DBI] FOR DBI_0 TO (3*LSTATE-1);
},SBRKTN _ BRKTN;
},SBRKSI _ BRKSI;
},SBRKDP _ BRKDP;
},SBRKFLG _ BRKFLG;
},SBRKRG _ BRKRG;
},SSELECT(DIRTN2);
},DBR_DGLREG(DBFLAG);
},DBT_LSTATE*DIRRG2;
},DSSAVE[DBT+DBI]_0 FOR DBI_0 TO LSTATE-1;
},PCNT_DCEAA(DIRTN2,DIRSI2,0:,GARBAGE);
},LREG_DBR;
}(ELSE DO;
},DERRF(0);
}(ENDIF;
DIRCT5: DRLB_DSINIT_-1;
}(DRUB_1B6-1;
}(DCDC_1;
}(DBKMSH(0,-1);
}(CSOUT("GO&307");
}(DRUN();
}(RETN IF BARE=0 ELSE RETURN;
*DELETE TASK 2 DIR. ST. IF ERROR
DIRCT2:}"DDEL(2);
}(DERRF(190);
DIRCT3: DDEL(1);
DIRCT4: DERRF(190);

*
* STARTUP BARE MACHINE
})ENTRY DBGO();

}).CLA, STA DERRT;
}(DABSF_DUSERF_0;
}(DSINIT_-1;
}(DSPM[DBI]_2B3 FOR DBI_0 TO 127;
}(DCRING_RING;
}(DDEL(1) IF DIRTN1#0;
}(DZAP();
}(BRKFLG_0;
}(BSTART();
}(DPROG(-2,DCRING//DIRCT4);
}(GOTO DIRCT5;

*
*ERROR FUNCTION (PUNT)
* <-1 RETURN
* -1 ? ERROR
* 0 DEBUGGER ERROR
* >0 ERROR MESSAGE
DERR0:}#GOTO DERR1;
}(ENTRY DERRF(DERRN);

})DRING(DCRING);
}(CLS(PSTR);
}(IF DERRN=-1 DO;
},DWCI('?');
},CSOUT(PSTR);
}(ELSEIF DERRN=0 DO;
},DAPPND("DEBUGGER ERROR AT ");
DERR3:}&.LDA L' [0], STA DERRN;
},DFCNB(DERRN,4B7);
},CSOUT(PSTR);
}(ELSEIF DERRN>0 DO;
},ERRSET(DERR0);
},CERR(DERRN);
}(ELSE DO;
},GOTO DERR2;
}(ENDIF;
DERR1:}"CSOUT(MCR);
DERR2:}".LDA DERRT, XLA;
}(RETURN;

})ENTRY SYSTEM'ERROR();
}(CLS(PSTR);
}(DAPPND("&307SPL ERROR: ");
}(DW3(DBERC);
}(DWCI(',');
}(DFCND(DBERN,0);
}(DAPPND(" AT ");
}(GOTO DERR3;

*
*
*THIS FUNCTION SCANS FOR NEXT BREAKPOINT
*IN ORDER, FRETN WHEN NO MORE


}(PROGRAM DBKNXT;
})INCLUDE DEBUG'DECS;


})FUNCTION DBKNXT(), FRETURN;
})IF E2TN > 0 DO;
}-SSELECT(E1TN);
}-E1SI _ DBKNP.PTFP;
}-GOTO DBKN1;
})ENDIF;
})SSELECT(0);
})DBKNP _ DGSSET(E1TN);
DBKN3:}#E1TN _ F(DBKNP,GSORD);
DBKN2:}#FRETN IF E1TN = 0;
})DBKNP _ DGSSET(E1TN);
})GOTO DBKN3 IF DBKNP.GSTYPE # IBTFN;
})E1SI _ F(DBKNP,GSBKSI);
})E2TN _ 0;
})RETN IF F(DBKNP,GSBMF) = 1;
})GOTO DBKN3 IF E1SI = 0;
})E2TN _ E1SI;
})SSELECT(E1TN);
})E1SI _ ICFSTAT;
DBKN1:}#DBKNP _ A(ICST,E1SI);
})IF DBKNP.PTBKF = 0 DO;
}-GOTO DBKN1 IF ((E1SI _ DBKNP.PTFP) # 0);
}-DERRF(0);
})ENDIF;
})DEC(E2TN);
})RETN;
*INITIALIZE ENTRY POINT
})ENTRY DBKINXT(), FRETURN;
})E2TN _ 0;
})SSELECT(0);
})E1TN _ ICFSTAT;
})GOTO DBKN2;

*
*
*THIS FUNCTION SMASHES ALL CELLS FLAGGED WITH BREAKPOINTS


}(PROGRAM DBKMSH;
}(INCLUDE DEBUG'DECS;

})DI DBKMA,DBKMI, DBKMIP, PREVIOUS'DBKMA;

})FUNCTION DBKMSH(DBKMF,DBKMP);
}(DBKMIP _ DBKMP;
}(DTEMP[0]_0;
}(FOR DBKMI_0 TO NRINGS-1 DO;
},IF REXISTS[DBKMI] DO;
}0DRING(DBKMI);
}0IF DBKMF#1 DO;
}4DNSMASH _ 0;
}4PREVIOUS'DBKMA _ -1;
}4DBKINXT(//DBKMH3);
DBKMH1:}-DBKMA_DGBKA(E1TN,E1SI//DBKMH2);
}4IF BARE#0 DO;
}8DTEMP[0]_DTEMP[0]+1;
}8DERRF(188) IF DTEMP[0]>=50;
}8DTEMP[DTEMP[0]]_DBKMA;
}4ELSE DO;
}8IF DBKMA # PREVIOUS'DBKMA DO;
}<GOTO DBKMH4 IF LITBUF+DNSMASH>=ELITBUF;
}<LITBUF[DNSMASH] _ DBKMA;
}<INC(DNSMASH);
}<LITBUF[DNSMASH] _ CORE(DBKMA);
}<INC(DNSMASH);
}<(DBKMP_DPLANT(DBKMA,DBKMIP,DBKMP//DBKMH4));
}8ENDIF;
}8PREVIOUS'DBKMA _ DBKMA;
}4ENDIF;
}4DBKNXT(//DBKMH3);
}4GOTO DBKMH1;
* SETUP G-REGISTERS
}1ENDIF;
DBKMH3:})IF DBKMF#-1 DO;
}4GREG_GBASE;
}4DHSTACK[DBKMI]_CORE(GBASE+2) IF DTASK=2;
}0ENDIF;
},ENDIF;
}(ENDFOR;
}(IF BARE#0 DO;
},CORES(@(DPHMAP[DBKMI]),DTEMP[DBKMI]) FOR DBKMI_0 TO DTEMP[0];
}(ENDIF;
}(RETURN DBKMP;
DBKMH2: DUNMSH(-1);
}(DERRF(0);
DBKMH4: DUNMSH(-1);
}(DERRF(188);

*
*
*THIS FUNCTION UNSMASHES ALL SMASHED CELLS


}(PROGRAM DUNMSH;
})INCLUDE DEBUG'DECS;

})DI DUNMI,DUNMJ;

})FUNCTION DUNMSH(DUNMF);
})RETURN IF BARE#0;
})FOR DUNMI_0 TO NRINGS-1 DO;
}-IF REXISTS[DUNMI] DO;
}1DRING(DUNMI);
}1IF DUNMF#1 DO;
DUNM1:}/GOTO DUNM2 IF DNSMASH = 0;
}5CORES(LITBUF[DNSMASH-2]$W0,LITBUF[DNSMASH-1]$W0);
}5DNSMASH _ DNSMASH -2;
}5GOTO DUNM1;
*SAVE STATES IN CORE
}1ENDIF;
DUNM2:}+IF DUNMF#-1 DO;
}5CORES(CODEBOT-LSTATE+DUNMJ,DSSAVE[DUNMI*LSTATE+DUNMJ]$W0)
}5FOR DUNMJ_0 TO LSTATE-1;
}1ENDIF;
}-ENDIF;
})ENDFOR;
})RETURN;

* PLANT BREAKPOINT.}"TAKE NECESSARY ACTION IF IT IS AT THE
* LOCATION WHERE EXECUTION IS TO RESUME



}(PROGRAM DPLANT;
}(INCLUDE DEBUG'DECS;

* ARRAY OF OPCODE TYPES
})DECLARE ARRAY DOPTY[8]_(
})70000000B,00000000B,00000000B,00000007B,
})00000000B,17777772B,27700777B,00000000B);
}(DECLARE INTEGER
})BREAK'PC,}%/*PC WHERE BREAKPOINT IS TO BE SET*/
})BROKEN'PC,}$/*PC WHERE PROGRAM IS CURRENTLY BROKEN*/
})RESUME'PC;}$/*PC WHERE EXECUTION IS TO BE RESUMED*/
}(DI DOPWRD,DOPTYP,DPNEWP,DPNEWL,DPLBKPT;
}(DQ DPMINOP_77734000B,DPMAXOP_DPMINOP+77B;
}(DF DOP1F(0:3,5),DOP2F(0:6,8);* HALVES OF OPCODE FIELD
}(DP DPBLLL;

})FUNCTION DPLANT(BREAK'PC, BROKEN'PC, RESUME'PC), FRETURN;
}(DPLBKPT_CORE(FIXER+15B);
}(IF BREAK'PC = BROKEN'PC DO;
},DOPWRD_CORE(BROKEN'PC);
},GOTO FAIL IF DOPWRD$INSPOP#0 OR DOPWRD$INSOP=ZOPR AND
}-(DOPWRD<DPMINOP OR DOPWRD>DPMAXOP);
},DOPTYP_DOPTY[DOPWRD$DOP1F] LSH (3*DOPWRD$DOP2F) RSH 21;
},GOTO FAIL IF DOPTYP=7;
},IF FIXER<GREG OR FIXER>GREG+37734B DO;
* CAN'T GET TO FIXER G-RELATIVE
}1GOTO FAIL;
},ELSEIF DOPTYP=1 DO;
* BRU - MUST BE SOURCE-RELATIVE
}1GOTO FAIL IF DOPWRD$INSTAG#ATREL OR DOPWRD$INSRT#ARTSR;
}0CORES(BROKEN'PC,DPLBKPT);
}0RESUME'PC_BROKEN'PC+DOPWRD$INSSRD;
},ELSEIF DOPTYP=2 DO;
* BLL OR BLLN - MUST BE G- OR L-RELATIVE
}1DPBLLL_(GREG+DOPWRD$INSGD IF DOPWRD$INSTAG=ATD ELSE
}1LREG+DOPWRD$INSLRD IF DOPWRD$INSTAG=ATREL AND DOPWRD$
}1INSST=ASTLR ELSE GOTO FAIL);
}0DPNEWP_CORE(DPBLLL+FNEWP);
}0DPNEWL_CORE(DPBLLL+FNEWL);
}0GOTO FAIL IF DPNEWP AA 77B6;
}0IF DPNEWL$FWCPA DO;
}4DPNEWP_DPNEWP+1 WHILE CORE(DPNEWP)$FPLAST=0;
}4DPNEWP_DPNEWP+1;
}0ENDIF;
}0GOTO FAIL IF DPNEWP = BROKEN'PC;
}0FRETURN IF LITBUF+DNSMASH>=ELITBUF;
}0LITBUF[DNSMASH] _ DPNEWP;
}0DNSMASH _ DNSMASH + 1;
}0LITBUF[DNSMASH] _ CORE(DPNEWP);
}0DNSMASH _ DNSMASH + 1;
}0CORES(FIXER, BROKEN'PC);
}0CORES(FIXER+1,DPNEWP);
}0CORES(FIXER+2,DPNEWP);
}0CORES(FIXER+3,CORE(DPNEWP));
}0CORES(DPNEWP,U(ZBRU,INSOP)+FIXER+5-GREG);
},ELSE DO;
* ORDINARY INSTRUCTION
}1CORES(FIXER, BROKEN'PC);
}0CORES(FIXER+1,BROKEN'PC+1);
}0CORES(FIXER+2,FIXER+3);
}0RESUME'PC_FIXER+4;
},ENDIF;
},RETURN RESUME'PC;
}(ELSE DO;
},CORES(BREAK'PC,DPLBKPT);
},RETURN RESUME'PC;
}(ENDIF;
FAIL:}#CSOUT("BPT NOT SET&307");
}(RETURN RESUME'PC;


* FIGURE OUT WHETHER THE PROGRAM BROKE BECAUSE OF A BREAKPOINT
* RETURN (0) OR A RING TRAP RETURN (THE TRAP NUMBER)
* AND ALSO FIX UP P AND L IN THE SAVED STATE



}(PROGRAM DPLFIX;
})INCLUDE DEBUG'DECS;

})DI DPLTNO;

})FUNCTION DPLFIX();
})RETURN 0 IF PCNT#FIXER+41B;* BKRET
})PCNT_CORE(FIXER+32B) - 1;* BKPC
})LREG_CORE(FIXER+33B);* BKLR
})DPLTNO_PCNT-(FIXER+16B);* RTRAP
})IF DPLTNO>=0 AND DPLTNO<10 DO;
}-PCNT_CORE(GREG+4);* P SAVED BY RING TRAP
}-RETURN DPLTNO+1;
})ELSE DO;
}-RETURN 0;
})ENDIF;

}(PROGRAM SP'TRAP'ENTRY;
})INCLUDE DEBUG'DECS;

})DI NO= L' [0],PAR= L' [1];

*TRAP ENTRY POINT
})FUNCTION S'T(), SP'ENTRY _0;
}).STX TX, EAX TP, STORS;
})TRAP'LOGIC(NO,PAR);

}(PROGRAM RING'TRAP'ENTRYS;

})FUNCTION RING'TRAP'ABE(), TRAP'ENTRY _1;
})RING'TRAP(1);

})FUNCTION RING'TRAP'FLO(), TRAP'ENTRY _2;
})RING'TRAP(2);

})FUNCTION RING'TRAP'FLU(), TRAP'ENTRY _3;
})RING'TRAP(3);

})FUNCTION RING'TRAP'RO(), TRAP'ENTRY _4;
})RING'TRAP(4);

})FUNCTION RING'TRAP'IATRP(), TRAP'ENTRY _5;
})RING'TRAP(5);

})FUNCTION RING'TRAP'UFN(), TRAP'ENTRY _6;
})RING'TRAP(6);

})FUNCTION RING'TRAP'FLXO(), TRAP'ENTRY _7;
})RING'TRAP(7);

})FUNCTION RING'TRAP'DIZ(), TRAP'ENTRY _8;
})RING'TRAP(8);

})FUNCTION RING'TRAP'STKOV(), TRAP'ENTRY _9;
})STACK'OVERFLOW();

})FUNCTION RING'TRAP'BLL(), TRAP'ENTRY _10;
})RING'TRAP(10);
})END;*
}(PROGRAM RING'TRAP;
})INCLUDE DEBUG'DECS;

})FUNCTION RING'TRAP(RTNO);
})PTERNO("SPL ERROR: RINGTRAP", RTNO, RTPC, RTPAR, RTMSG);
})EXIT();
})END;*
}(PROGRAM STACK'OVERFLOW;
})INCLUDE M1'COMM;
})FIXED;

})FUNCTION STACK'OVERFLOW();
})SP' _ INIT'SP;
})RING'TRAP(9);
})END;*
}(PROGRAM RUN;
})INCLUDE DEBUG'DECS;
*EXECUTION CONTROL FOR USE IN PLACE OF THE SIMULATOR

})DI RTRPNO,TSPNO,BLLTNO;
})DECLARE LABEL L1_RUN1,L2_QUIT'BRANCH,L3_TRAP'RET,L4_EXIT'SPL;
})DA SPCA[5];
})DI TTP,RET'ADD;
})DECLARE INTEGER TRAPPC;
})MACRO RUN'REWIND_.LDA RUNLR, XLA;
})MACRO TRAPSYSERR_TRAP'SYSERR:ERRSPEC;

})FUNCTION RUN();
})RETURN QUITRT IF QUITF;
})BCOPY(@TP,@PCNT,10);
})TTP_TP;
*}&PFLUSH();* 5/24/73 JF - DELETED THIS CALL.}"WHAT WAS PFLUSH?
}).CLA, STA RUNLR;
})IF DSINIT=-1 DO;
}-DSINIT_0;
}-SET'SPT'FIELD(USPNO,'EG',GBASE//SYSERR);
}-SET'SPT'FIELD(USPNO,'EP',GBASE+10//SYSERR);
}-SP'BRANCH(USPNO,TTP,TL,TG//SYSERR);
}-.LDA RUNLR, .XLA;
}-RETURN SPRET;
})ELSE DO;
}-TP_@RUN1;
}-MODIFY'CALL(0,TTP,TL,TG,T940//SYSERR);
}-.EAX TP, LOADS;
RUN1:}(SP'RETURN(//SYSERR);
})ENDIF;

})ENTRY TRAP'LOGIC(TRAPNO,TRAPPAR);
})READ'SPCS(0,SPCA//TRAPSYSERR);
})SET'SPT'FIELD(-1,'TM',SPLTM//TRAPSYSERR);
})TP_SPCA[0]$SPPCTR;
})TL_SPCA[0]$SPLREG;
})TG_SPCA[0]$SPGREG;
})T940_SPCA[0]$SP940;
})TSPNO_SPCA[0]$SPSPNO;
})IF TSPNO#SSPNO DO;
}-ALLOW'INTS();
}-BCOPY(@PCNT,@TP,10);
}-DRING(DSRING_DGRING(TP));
}-DPRING'PTR_DSRING'PTR;
}-IF TRAPNO=BPTNO DO;
}1RTRPNO_DPLFIX();
}1IF RTRPNO=0 DO;
}5RUN'REWIND;
}5RETURN BPTRET;
}1ELSE DO;
}5TRAPPC_CORE(GREG+4);
}5TRAPPAR_CORE(GREG+5);
}5PTERNO("RING TRAP",RTRPNO,TRAPPC,TRAPPAR,RTMSG);
}5GOTO BLL'ERR IF RTRPNO=RBLLNO;
}5RUN'REWIND;
}5RETURN ERRRET;
}1ENDIF;
}-ELSEIF TRAPNO=QUITNO DO;
}1RUN'REWIND;
}1RETURN QUITRT;
}-ELSE DO;
}1PTERNO("SUBPROCESS TRAP",TRAPNO,TP,TRAPPAR,TRMSG);
}1IF TRAPNO=SBLLNO DO;
BLL'ERR:}-TRAPNO_TRAPPAR$BLLERRNO;
}5IF TRAPNO<7 DO;
}9CSOUT(BLLMSG[TRAPNO]);
}9CSOUT(MCR);
}5ENDIF;
}1ENDIF;
}1RUN'REWIND;
}1RETURN ERRRET;
}-ENDIF;
})ELSE DO;
}-IF TRAPNO=QUITNO DO;
}1IF QUITMODE=0 DO;
}5QUITF _ QUITF + 1;
}5IF QUITF >= QUIT'ABORT'LEVEL DO;
}9RET'ADD _ @QUIT'BRANCH;
}9GOTO MOD'RET;
}5ENDIF;
}1ELSE DO;
}5RET'ADD_@QUIT'BRANCH;
}5GOTO MOD'RET;
}1ENDIF;
}-ELSE DO;
}1PTERNO("SPL ERROR: SUBPROCESS TRAP",TRAPNO,TP,TRAPPAR,TRMSG);
}1RET'ADD_@EXIT'SPL;
}1GOTO MOD'RET;
}-ENDIF;
})ENDIF;
EXIT'TRAP:TP_@TRAP'RET;
}).CLA, SUB 2, STA G' [2];
}).EAX TP, LOADS;
TRAP'RET:SP'RETURN(//TRAPSYSERR);

QUIT'BRANCH:GOTO QUITGO;

TRAP'SYSERR:RET'ADD_@TRAP'ERROR;
MOD'RET: MODIFY'CALL(0,RET'ADD,TL,TG,0//TRAPSYSERR);
})GOTO EXIT'TRAP;

TRAP'ERROR:CSOUT("ERROR IN TRAP LOGIC&307");
EXIT'SPL:EXIT();

* ZAP


}(PROGRAM DZAP;
})INCLUDE DEBUG'DECS;

})DI DZAPL,DZAPLR,DZAPGR;
})DA ARRAY5[5];

})FUNCTION DZAP();
})DTASK_BRKTN_NOGO_STKCHANGE_0;
})RETURN IF M1MODE=0;
})DZAPL_-1;
DZAP1:}#INC(DZAPL);
})READ'SPCS(DZAPL,ARRAY5//DZAP3:ERRSPEC);
})IF ARRAY5[0]$SPSPNO=SSPNO DO;
}-.CLA, STA DZAPLR;
}-.CGA, STA DZAPGR;
}-MODIFY'CALL(DZAPL,@DZAP3,DZAPLR,DZAPGR,0//SYSERR);
}-JUMP'RETURN(DZAPL//SYSERR);
DZAP3:}'RETURN;
})ENDIF;
})GOTO DZAP1;

*PRINT ERROR MESSAGES


}(PROGRAM PTERNO;
})INCLUDE DEBUG'DECS;


})FUNCTION PTERNO(STRING PTST,INTEGER PTNO,PTPC,PTPAR,ARRAY PTMA);
})CLS(PSTR);
})DAPPND(MCR);
})DAPPND(PTST);
})DWCI(' ');
})IF PTNO>=0 AND PTNO<ARRAYSIZE(PTMA) DO;
}-PTNO_PTMA[PTNO];
}-DWCI('&'');
}-(DWCI(PTNO RSH 18) & PTNO_PTNO LSH 6) WHILE PTNO;
}-DWCI('&'');
})ELSE DO;
}-DWCI('#');
}-DFCND(PTNO,4B7);
})ENDIF;
})DAPPND(" AT ");
})DFCNB(PTPC,4B7);
})DAPPND(" PARAMETER=");
})DFCNB(PTPAR,4B7);
})DAPPND(MCR);
})CSOUT(PSTR);
})RETURN;

*CREATE PAGE


}(PROGRAM MCRTPG;
})INCLUDE DEBUG'DECS;

})DI BYTE;

})FUNCTION MCRTPG(BYTENO);
})BYTE_READ'MAP'BYTE(USPNO,BYTENO//SYSERR);
})IF BYTE=0 DO;
}-BYTE_ACQPMT(-1//SYSERR);
}-NPPMT(BYTE//SYSERR);
}-SET'MAP'BYTE(USPNO,BYTENO,BYTE//SYSERR);
})ENDIF;
})RETURN BYTE;

*DESTROY PAGE
})ENTRY MDELPG(BYTENO);
})BYTE_READ'MAP'BYTE(USPNO,BYTENO//SYSERR);
})IF BYTE#0 DO;
}-DELPMT(BYTE//SYSERR);
})ENDIF;
})RETURN;

*READ MAP (PMT)
})ENTRY MRDMAP(BYTENO);

})BYTE_READ'MAP'BYTE(USPNO,BYTENO//SYSERR);
})RETURN BYTE;

*THIS FUNCTION EVALUATES AN EXPRESSION
*FRETN IF NOT LEGAL EXPR


}(PROGRAM DEE;
})INCLUDE DEBUG'DECS;

})DI DEEK,DEEW,DEEAD,DEER,DEENG;
})DI DEET1,DEETP1,DEETD1,DEEK1,DEEK2;

})FUNCTION DEE(DEEZ,DEEY);
})DEENG_1;
})DDIM2_0;
*PREPROCESS EXPR
})DGPROG(DEEZ,DEEY:DEEZ,DEEY// VALUE (DEEZ_ECLTN & DEEY_DCRING));
})IF DEEZ#0 DO;
}-DTN2_DEEZ;
}-DRG2_DEEY;
})ELSE DO;
}-DTN2_DMYTN;
}-DRG2_DCRING;
})ENDIF;
})SSELECT(DTN2);
})CSTR_DCOPY(PSTR,CSTR);
})DPPDS(CSTR,4);
*INITIALIZE TOKEN STRING AND GET TOKEN
})DISGNT(@PPTB[0]);
})DEEK _ DGNT(//DEE5);
})DELSZ_DEEAD_DUNF_0;
})IF DEEK=DTKMINUS DO;
}-DEENG_-1;
}-DEEK_DGNT(//DEE5);
})ENDIF;
})IF DEEK=DTKATSIGN DO;
}-DEEAD_-1;
}-DEEK_DGNT(//DEE5);
})ENDIF;
*INDIRECTION
})IF DEEK = DTKDOL DO;
}-DGV(DGNT(//DEE5)//DEE5);
}-GOTO DEE5 IF DGTYPE # TTINT;
}-DIGV(DEEA$IWGD);* CHANGED FROM DIGV(...//DEE5); 5/15/73 JF
}-DKIND2_2;
}-DADD2_DEEX;
}-GOTO DEE3;
})ENDIF;
})DGV(DEEK//DEE5);
})DADD2_DEEX;
*1ST TOKEN IS SYMBOL OR CONST
*IF NO MORE TOKENS THEN SIMPLE VALUE
})DEEK _ DGNT(//DEE6);

*TAILING
})IF DEEK = DTKDOT DO;
}-DEEZ _ DEEA;
}-DGV(DGNT(//DEE5)//DEE5);
}-GOTO DEE5 IF DGMODE # SMFIELD;
}-DEEZ _ CORE(DEEZ$IWGD + DEEA$FIWDISP);
}-DEEZ _ DEEZ LSH DEEA$FIWBA;
}-DEEY _ 1 LSH DEEA$FIWBL;
}-DEEZ _ DEEZ RSH (24 - DEEA$FIWBL);
}-(DEEZ_DEEZ-DEEY) IF DEEA$FIWSIGN#0 AND (DEEZ AND (DEEY RSH 1))#0;
}-DABCD(DEEZ);
}-DPD;
}-DADD2_DEEX_-1;
}-DKIND2_3;
}-GOTO DEE3;
})ENDIF;
})GOTO DEE5 IF DEEK # DTKLBRAC;

*SUBSCRIPTING
})GOTO DEE5 IF DGMODE # SMARRAY;
})IF DEET=9 DO;
}-DEET_7;
})ELSEIF DEET=16 DO;
}-DEET_15;
})ENDIF;
})DEEK1_DLOC2;
})DEEK2_DKIND2;
})DEET1 _ DEET;
})DEETP1 _ DEETP;
})DEETD1 _ DEETD;
DEE2:}$DEEY _ DEEA;
})DEEW _ DEEB;
})DEER_DEEX+1;
*GET SUBSCRIPT
})DGV(DGNT(//DEE5)//DEE5);
})GOTO DEE5 IF DGTYPE # TTINT;
})DEEZ _ DEEA;
})DEEK _ DGNT(//DEE5);
*SUBSCRIPT HAS SECOND OPERAND
})IF DEEK = DTKPLUS OR DEEK = DTKMINUS DO;
}-DGV(DGNT(//DEE5)//DEE5);
}-GOTO DEE5 IF DGTYPE # TTINT;
}-DEEA _ -DEEA IF DEEK = DTKMINUS;
}-DEEZ _ DEEZ + DEEA;
}-DEEK _ DGNT(//DEE5);
})ENDIF;
*DO SUBSCRIPT ADDRESS CALCULATION
})DDIM2_DDIM2+1;
})DSUB2[DDIM2]_DEEZ;
})GOTO DEE5 IF DEEZ < DEEY$AIWORG OR DEEZ > DEEY$AIWLLIM;
})GOTO DEE5 IF DEEW$IWTRAP=1 AND DEEK = DTKRBRAC;
})DEEZ_DEEZ - DEEY$AIWORG;
})DEEA_DEEZ*((DEEY$AIWLMULT IF DEEY$AIWLEB#0 ELSE DEEY$AIWNMULT)+1);
})DEGVI(DEEW,DEEA,DEER//DEE5);
})GOTO DEE2 IF DEEK = DTKCOMMA;
})GOTO DEE5 IF DEEK # DTKRBRAC;
})DELSZ_1+DEEY$AIWLMULT IF DEEY$AIWLEB#0;
})DADD2_DEEX;
*WE HAVE SUCCESSFULLY SUBSCRIPTED
})DLOC2_DEEK1;
})DKIND2_DEEK2;
})DEET _ DEET1;
})DEETP _ DEETP1;
})DEETD _ DEETD1;

*PPTB EMPTY?
DEE3:}$DGNT(//DEE1);
DEE5:}$DERRF(183);
DEE6:}$IF DGMODE=SMARRAY DO;
}-DTPD(12);
})ELSEIF DGMODE=SMFIELD DO;
}-DTPD(10);
})ENDIF;
DEE1:}$IF DEEAD#0 DO;
}-GOTO DEE5 IF DEEX<0;
}-DABCD(DADD2);
}-DTPD(1);
}-DEEX_DADD2_-1;
}-DELSZ_DDIM2_0;
}-DKIND2_3;
})ENDIF;
})DEET_14 IF DUNF<0;
})(DEEA_-DEEA IF DEET=0 ELSE GOTO DEE5) IF DEENG<0;
})RETURN;

*
*
*THIS FUNCTION GETS THE TYPE OF SYMBOL OR CONST
*WITH GIVEN TOKEN NUMBER


}(PROGRAM DGT;
})INCLUDE DEBUG'DECS;

})DI DGTTK,DGTVAL;

})FUNCTION DGT(DGTTN), FRETURN;
})FRETN IF DGTTN > TNCMAX;
})DEETP _ DEETD _-1;
*SHORT CONSTANT
})IF DGTTN >= TNCMIN DO;
}-DGTVAL _ DGTTN - TNCMIN;
}-GOTO DGT1;
})ENDIF;
})POINT _ A(ICTT,DGTTN);
})DGTTK _ POINT[0];
})POINT _ A(ICST,DGTTK$TKSI);
})DGTVAL _ POINT.SYVAL;
})DGMODE _ POINT.SYMODE;
})DGDTYPE _ POINT.SYDTYPE;
*LONG CONSTANT
})IF DGTTK$TKSYM = 0 DO;
DGT1:}(DEET _ 0;
}-DGTYPE _ TTINT;
}-DGMODE_SMVALUE;
}-RETN (0,DGTVAL);
})ENDIF;
*SYMBOL
})DGTYPE_DGTTK$TKTYPE;
})IF DGMODE=SMVALUE OR DGMODE=SMARRAY OR DGMODE=SMFIELD DO;
}-IF DGTYPE=TTUND DO;
}1IF DGMODE=SMVALUE DO;
}5DUNF_-1;
}5DEET_14;
}1ELSE DO;
}5DEET_1;
}1ENDIF;
}-ELSEIF DGTYPE=TTINT DO;
}1IF DGDTYPE=SDNOR DO;
}5DEET_0;
}1ELSEIF DGDTYPE=SDOCTAL DO;
}5DEET_1;
}1ELSEIF DGDTYPE=SDCHAR DO;
}5DEET_2;
}1ELSEIF DGDTYPE=SDPOINT DO;
}5DEET_0; DEETP_0;
}1ELSE DO;
}5DERRF(0);
}1ENDIF;

}-ELSEIF DGTYPE=TTREAL DO;
}1DEET_3;
}-ELSEIF DGTYPE=TTDBL DO;
}1DEET_3; DEETD_0;
}-ELSEIF DGTYPE=TTCPLX DO;
}1DEET_5;
}-ELSEIF DGTYPE=TTSTR DO;
}1DEET_(17 IF DGTTK$TKPARAM#0 AND DGMODE#SMARRAY ELSE 6);
}-ELSEIF DGTYPE=TTLAB DO;
}1DEET_(9 IF DGTTK$TKPARAM#0 ELSE 7);
}-ELSEIF DGTYPE=TTLONG DO;
}1DEET_1; DEETD_0;
}-ELSEIF DGTYPE=TTLLONG DO;
}1DEET_11;
}-ELSEIF DGTYPE=TTARRAY DO;
}1DEET_12;
}-ELSEIF DGTYPE=TTFIELD DO;
}1DEET_10;
}-ELSEIF DGTYPE=TTFUNC DO;
}1GOTO DGT3;
}-ELSEIF DGTYPE=TTMAC DO;
}1DEET_13;
}-ELSE DO;
}1DERRF(0);
}-ENDIF;
})ELSEIF DGMODE=SMFUNC DO;
DGT3:}(DEET_(16 IF DGTTK$TKPARAM#0 ELSE 15);
})ELSE DO;
}-DERRF(0);
})ENDIF;
})DLOC2_DGTVAL;
})RETN (1,DGTVAL);

*
*
*THIS FUNCTION GETS THE VALUE OF SYMBOL OR CONST
*WITH GIVEN TOKEN NUMBER

}(COMMON DGV'COMMON;
*VARIABLES NEEDED FOR COMMUNICATION BETWEEN DGV AND GRAB4
})DECLARE INTEGER LNTH, CNT, CON;
})END;

}(PROGRAM DGV;
}(INCLUDE DEBUG'DECS, KTDEC, PPDEC, DGV'COMMON;

})DI DGVAL, TKN, OCT, DEC'VALUE, I, DIG;
}(DECLARE FIELD F1(0:12,15);

})FUNCTION DGV(DGVTN), FRETURN;
}(DEEX _ -1;
}(IF DGVTN>=KTMIN AND DGVTN<=KTMAX DO;
},IF (LNTH _ DGVTN$KTSIZE) = 0 DO;
}0LNTH _ DGNT(// FRETURN);
},ENDIF;
},OCT _ 0; CNT _ 1; DEC'VALUE _ 0;
},FOR TKN _ 1 TO (LNTH*4 + 11)/12 DO;
}0CON _ DGNT(// FRETURN);
}0FOR I _ 1 TO 3 DO;
}4DIG _ GRAB4(//DGV2);
}4IF DIG < 10 DO;
}8OCT _ OCT LSH 3 + DIG;
}8DEC'VALUE _ DEC'VALUE*10 + DIG;
}4ELSEIF DIG = KCB DO;
}8DEC'VALUE _ OCT;
}8DEC'VALUE _ OCT LSH (3*GRAB4(//DGV2));
}8GOTO DGV2;
}4ELSEIF DIG = KCD DO;
}8DEC'VALUE _ DEC'VALUE*10 FOR DIG _ GRAB4(//DGV2)-1 BY -1 TO 0;
}8GOTO DGV2;
}4ENDIF;
* NOTE THAT WE JUST IGNORE EVERYTHING EXCEPT DIGITS, 'B', AND 'D'
}1ENDFOR;
},ENDFOR;
DGV2:}'DEEA _ DEC'VALUE;
},DBCD;
},DKIND2 _ 3;
},DEETP _ DEETD _ -1;
},DEET _ 0;
},DGTYPE _ TTINT;
},DGMODE _ SMVALUE;
},RETURN;
}(ELSE DO;
},DGT(DGVTN:,DGVAL// FRETURN);
},GOTO DGV4;
}(ENDIF;

*THIS ENTRY POINT WILL COMPUTE THE EFFECTIVE ADDRESS AND OPERAND
*OF THE GIVEN INTRUCTION
})ENTRY DEGV(DGVAL), FRETURN;

*DIRECT ADDRESSING
DGV4:}$IF DGVAL$INSTAG = ATD DO;
},DKIND2_0;
},DGVAL _ DGVAL$INSGD + GREG;
*L-RELATIVE
})ELSEIF DGVAL$INSTAG = ATREL AND DGVAL$INSST = ASTLR DO;
},DKIND2_1;
},DGVAL _ DGVAL$INSLRD + DGLREG(0);
*S-RELATIVE
})ELSEIF DGVAL$INSTAG = ATREL AND DGVAL$INSRT = ARTSR DO;
},DKIND2_2;
},DGVAL_DGVAL$INSSRD + @ICCODE[ICLLIT];
*IMMEDIATE
})ELSEIF DGVAL$INSTAG = ATREL AND DGVAL$INSST = ASTIM DO;
},DKIND2_3;
},DEEA _ DGSGN(DGVAL,INSLRD);
},DBCD;
},DEEX_-1;
},RETN;
}(ELSE DO;
},FRETN;
}(ENDIF;
}(GOTO DGV5;

*
*THIS ENTRY GETS CONTENTS OF THE ADDRESS
})ENTRY DIGV(DGVAL);

*DGVAL NOW CONTAINS THE EFFECTIVE ADDRESS
DGV5:}$DEEA _ CORE(DGVAL);
}(DEEB _ CORE(DGVAL+1);
}(DEEC _ CORE(DGVAL+2);
}(DEED _ CORE(DGVAL+3);
}(DEEX _ DGVAL;
}(RETN;

*GETS FOR INDIRECT WORDS
})ENTRY DEGVI(DGVAL,DGVX,DGVR), FRETURN;

})FRETN IF DGVAL$IWTYPE#0;
}(IF DGVAL$IWTAG=ATD DO;
},DGVAL_DGVAL$IWGD;
}(ELSEIF DGVAL$IWTAG=ATX DO;
},DGVAL_DGVAL$IWGD+DGVX;
}(ELSEIF DGVAL$IWTAG=ATREL AND DGVAL$IWST=ASTLR DO;
},DGVAL_DGVAL$IWLRD+DGLREG(0)+
}-(0 IF DGVAL$IWRELX=0 ELSE DGVX);
}(ELSEIF DGVAL$IWTAG=ATREL AND DGVAL$IWRT=ARTSR DO;
},FRETN IF DGVR<0;
},DGVAL_DGVAL$IWSRD+DGVR+
}-(0 IF DGVAL$IWRELX=0 ELSE DGVX);
}(ELSE DO;
},FRETN;
}(ENDIF;
}(GOTO DGV5;

*THIS LITTLE FUNCTION GETS A 4-BIT BYTE FOR DGV.
})FUNCTION GRAB4(), FRETURN;
}(FRETURN IF CNT > LNTH;
}(CNT _ CNT + 1;
}(DIG _ CON$F1;
}(CON _ CON LSH 4;
}(RETURN DIG;

*
*
*THIS FUNCTION PRINTS THE NEXT VALUE AFTER LAST VALUE TYPED
*FRETN IF BOUND OF ENVIRONMENT EXCEEDED


}(PROGRAM DPNV;
})INCLUDE DEBUG'DECS;

})DI DPNVS,DPNVI,DPNVV,DPNVD,DPNVB;

})FUNCTION DPNV(DPNVL), FRETURN;
})DRING(DRG1);
})SSELECT(DTN1);
})DPRSZ_0;
})IF DKIND1=0 OR DKIND1=1 OR DKIND1=2 AND DDIM1>0 DO;
}-IF DDIM1>0 DO;
}1DEGV(DLOC1//DPNVE);
}1DGDIM(//DPNVE);
}1DPRSZ_DELSZ;
}1FOR DPNVI_DDIM1 BY -1 TO 1 DO;
}5DSUB1[DPNVI]_DSUB1[DPNVI]+DPNVL;
}5IF DSUB1[DPNVI]>DSUB[DPNVI] DO;
}9DSUB1[DPNVI]_DLB;
}5ELSEIF DSUB1[DPNVI]<DLB DO;
}9DSUB1[DPNVI]_DSUB[DPNVI];
}5ELSE DO;
}9DADD1_DADD1+DSIZE*DPNVL;
}9GOTO DPNV2;
}5ENDIF;
}1ENDFOR;
}1FOR DPNVI_0 TO DDIM1 DO;
}5DSUB1[DPNVI]_(0 IF DPNVL<0 ELSE DSUB[DPNVI]);
}1ENDFOR;
}1FRETN;
}-ENDIF;
}-DPNVD_1B7;
}-SSELECT(DTN1);
}-FOR DPNVI_1 TO ICLTT DO;
}1POINT_A(ICTT,DPNVI);
}1IF POINT.TKSYM#0 DO;
}5POINT_A(ICST,POINT.TKSI);
}5DPNVV_POINT.SYVAL;
}5IF DKIND1=0 AND DPNVV$INSTAG=ATD OR
}5DKIND1=1 AND DPNVV$INSTAG=ATREL AND DPNVV$INSST=ASTLR DO;
}9DPNVS_(DPNVV-DLOC1)*DPNVL;
}9IF DPNVD>DPNVS AND DPNVS>0 DO;
}=DPNVD_DPNVS;
}=DPNVB_DPNVI;
}9ENDIF;
}5ENDIF;
}1ENDIF;
}-ENDFOR;
}-FRETN IF DPNVD=1B7;

}-DPNVS_DLOC2;
}-DGV(DPNVB//DPNVE);
}-DLOC1_DLOC2;
}-DKIND1_DKIND2;
}-DLOC2_DPNVS;
}-GOTO DPNV0 IF DEET=14;
}-IF DGMODE=SMARRAY DO;
}1DTPD(12);
}-ELSEIF DGMODE=SMFIELD DO;
}1DTPD(10);
}-ENDIF;
DPNV0:}'DMSET(0);
}-DADD1_DEEX;
}-DDIM1_0;
*INCREMENT TO NEXT VALUE
})ELSEIF DKIND1=2 DO;
}-IF DPNVL>0 DO;
}1DADD1_DADD1+DINC;
}-ELSEIF DPNVL<0 DO;
}1DADD1_DADD1-DLOC1;
}-ELSE DO;
}1DERRF(0);
}-ENDIF;
}-FRETN IF DADD1<0 OR DADD1>=1B6;
})ELSE DO;
DPNV1:}'DERRF(192);
})ENDIF;
})GOTO DPNV2;

*
*PRINT VALUE
})ENTRY DPV(DPNVL), FRETURN;

DPNV2:}#DRING(DRG1);
})SSELECT(DTN1);
})CLS(PSTR);
})IF DKIND1=0 OR DKIND1=1 DO;
}-DFNM(DLOC1,DKIND1//DPNV3);
DPNVE:}'DTN1_0;
}-DERRF(196);
})ELSEIF DKIND1=2 DO;
}-DINC_DLOC1;
}-DFNM(DADD1-@ICCODE[ICLLIT] IF DDIM1=0 ELSE DLOC1,2//DPNV3);
}-DFCNB(DADD1,4B7);
})ELSEIF DKIND1=3 DO;
}-DPVAL();* CHANGED FROM ZDPVAL() - 5/12/73}"JACK FREEMAN
}-RETN;
})ELSE DO;
}-DTN1_0;
}-DERRF(0);
})ENDIF;
DPNV3:}#IF DDIM1>0 DO;
}-DWCI('[');
}-FOR DPNVI_1 TO DDIM1 DO;
}1DFCND(DSUB1[DPNVI],0);
}1DWCI(',' IF DPNVI#DDIM1 ELSE ']');
}-ENDFOR;
})ENDIF;
})DWCI(' ');
})CSOUT(PSTR) IF DPNVL#0 ELSE CLS(PSTR);
})DIGV(DADD1);* CHANGED FROM DIGV(...//DPNV1); 5/15/73 JF
})DPVAL();* CHANGED FROM ZDPVAL() - 5/12/73}"JACK FREEMAN
})RETN;

*
*
*THIS FUNCTION TRANSFERS CONTROL TO USER PROGRAM WITH CURRENT STATE
*IT ALSO HANDLES REENTRY FROM USER PROGRAM AND WILL UNSMASH
*ALL SMASHED CELLS.


}(PROGRAM DRUN;
})INCLUDE DEBUG'DECS;

})DI DRUNI,DRUNL,DRUNU, GARBAGE;

})FUNCTION DRUN();
DRUN1:}#IF M1MODE DO;
}-DRTNF_RUN();
})ELSE DO;
}-ZSIM(DRLB,DRUB:DRTNF);
}-DSPM[DRUNI]_CORE(@(DPHMAP[0])) FOR DRUNI_0 TO 127;
})ENDIF;
})CALLSTACK _ BLREG;
})ECLLN _ 0;
*UNSMASH BREAKPOINTS
})DUNMSH(0) IF DBKSP<0;
*RETURN FROM TASK 2
})IF DTASK=2 DO;
}-(DPBM(1) & DERRF(198)) IF DIRTN2=0 OR DIRSI2=0;
}-DRING(DIRRG2);
}-DUNSI(DIRTN2:GARBAGE,GARBAGE,GARBAGE);
*GET BOUNDS OF DIRECT STATEMENT
}-DRUNL_DCEAA(DIRTN2,DIRSI2,0:,GARBAGE);
}-POINT_A(ICST,DIRSI2);
}-DRUNU_DRUNL+POINT.PTLCODE;
}-DDEL(2);
}-DTASK_1;
*DELETE DIRECT STATEMENT
}-DRUNI_BPCNT;
*SCAN STACK UNTIL FIND DIRECT STATEMENT OR ELSE TOP
DRUN4:}'IF DRUNL<=DRUNI AND DRUNI<DRUNU DO;
*FOUND DIRECT STATEMENT
}1DPBM(-1) IF DRUNI#BPCNT;
}1DSSAVE[DRUNI] _ DSTATE[DRUNI]
}1FOR DRUNI _ 0 TO 3*LSTATE-1;
}1BRKTN _ SBRKTN;
}1BRKSI _ SBRKSI;
}1BRKDP _ SBRKDP;
}1BRKFLG _ SBRKFLG;
}1BRKRG _ SBRKRG;
}1FOR DRUNI_0 TO NRINGS-1 DO;
}5IF REXISTS[DRUNI] DO;
}9DRING(DRUNI);
}9CORES(GBASE+2,DHSTACK[DRUNI]);
}5ENDIF;
}1ENDFOR;
}1DRING(DIRRG2);
}1CSOUT("&307EXIT TASK 2&307");
}1GOTO DRUN2;
}-ENDIF;
*BACKUP ANOTHER LEVEL
}-DUNSTK(:DRUNI,GARBAGE,GARBAGE//DRUN3);
}-GOTO DRUN4;
})ENDIF;

*ERROR RETURN
DRUN3:}#IF DRTNF =-1 DO;
}-DRUNI_DPBM(-1);
}-BRKDP_0 IF BRKFLG>=0;
}-GOTO DRUN7 IF DRUNI=1 ELSE GOTO DRUN5;
*PANIC RETURN
})ELSEIF DRTNF=-2 DO;
}-DPBM(-1);
DRUN5:}'CSOUT(MCR);
})ELSEIF DRTNF=0 DO;
}-GOTO DRUN7;
*BREAKPOINT RETURN
})ELSEIF DRTNF=1 DO;
*CHECK FOR RETURN OF DIRECT STATEMENT
}-GOTO DRUN6 IF BARE#0;
}-DERRF(198) IF DIRTN1=0 OR DIRSI1=0;
}-DPBM(1);
}-DRING(DIRRG1);
}-DRLB_DCEAA(DIRTN1,DIRSI1,0:,GARBAGE);
}-POINT_A(ICST,DIRSI1);
}-IF BPCNT=DRLB+POINT.PTLCODE-1 DO;
DRUN7:}+CSOUT("&307EXIT TASK 1&307");
}1DDEL(1);
}1DZAP();
}-ELSE DO;
DRUN6:}+DEC(DCDC) IF DCDA = -1 OR DCDA = BPCNT;
}1IF DCDC<=0 OR (DCDA#BPCNT AND DCDA#-1) DO;
}5CSOUT("&307BREAK");
}5DPBM(0);
}5GOTO DRUN2;
}1ENDIF;
}1DPBM(0) IF DEVERY = 0;
}1IF M1MODE DO;
}5BPCNT _ DBKMSH(-1, BPCNT);
}5DBKSP _ -1;
}1ELSE DO;
}5DBKSP _ 0;
}5DRLB _ DRUB _ BPCNT;
}1ENDIF;
}-ENDIF;
*ELSE CONTINUE COMMAND RETURN OR
*STEP COMMAND RETURN
})ENDIF;
DRUN2:}#RETURN (DRTNF);

*
*
*THIS FUNCTION PRINTS A BREAK MESSAGE


}(PROGRAM DPBM;
})INCLUDE DEBUG'DECS;

})DI DPBP,DPBMC,DPBV,GARBAGE;

})FUNCTION DPBM(DPBMF);
})DRING(DSRING);
})DPBV_0;
})DPBP_PCNT;
})DRGFIX() IF DCRING#RING;
})BRKRG_DCRING_RING;
*PRINT BREAK ADDRESS AND SET AS CURRENTLINE
})GOTO DPBM4 IF BARE#0;
})DERRF(198) IF DIRTN1=0 OR DIRSI1=0;
})GOTO DPBM4 IF DCRING#DIRRG1;
})DRLB_DCEAA(DIRTN1,DIRSI1,0:,GARBAGE);
})POINT_A(ICST,DIRSI1);
})IF DRLB<=DPBP AND DPBP<DRLB+POINT.PTLCODE DO;
}-BRKTN_DIRTN1;
}-BRKSI_DIRSI1;
}-BRKDP_DPBP-DRLB;
}-DPBV_1;
}-RETURN DPBV IF DPBMF>0;
}-CSOUT(MCR);
}-CSOUT(DBT1);
})ELSE DO;
}-GOTO DPBM4;
DPBM3:}'BRKFLG_-1;
}-BRKDP_DPBP;
}-BRKTN_BRKSI_0;
}-GOTO DPBM6;
DPBM4:}'DOEA(DPBP:BRKTN,BRKSI,BRKDP//DPBM3);
}-BRKFLG_0;
DPBM6:}'ECLTN _ BRKTN;
}-ECLSI _ BRKSI;
}-RETURN DPBV IF DPBMF>0;
}-CSOUT(MCR);
}-IF BRKFLG<0 DO;
}1CLS(PSTR);
}1DFCNB(BRKDP,4B7);
}1CSOUT(PSTR);
}-ELSE DO;
}1DPEA(BRKTN,BRKSI);
}-ENDIF;
})ENDIF;
})CSOUT(MCR);
})RETURN DPBV IF DPBMF < 0;
*PRINT CURRENT STATEMENT IF REQUESTED
})IF DLOUD = 0 AND BRKFLG>=0 DO;
}-SSELECT(BRKTN);
}-ZUNPP(BRKSI,BRKTN,2);
}-CSOUT(UPS);
}-CSOUT(MCR);
})ENDIF;
*PRINT EXPRESSIONS
})QSTR_DCOPY(REPS,QSTR);
DPBM1:}#DGARG(//DPBM5);
})DWCI(' ');
})CSOUT(PSTR);
})SETR(PSTR,0);
})DEE(DREPTN,DREPRG);
})DPRSZ_DELSZ;
})DMSET(1);
})DPVAL();* CHANGED FROM ZDPVAL() - 5/12/73}"JACK FREEMAN
})GOTO DPBM1;
DPBM5:}#DRING(DCRING);
})RETURN DPBV;

*
*THIS FUNCTION FIXES THINGS UP ON A RING CHANGE


}(PROGRAM DRGFIX;
})INCLUDE DEBUG'DECS;


})FUNCTION DRGFIX();
})GREG_GBASE;
})RETURN;

*
*THIS FUNCTION FIXES THE CURRENT STATE

}(PROGRAM DRING;
})INCLUDE DEBUG'DECS;

})FUNCTION DRING(RING'NO);
})SRING(RING'NO);
})DSRING'PTR_@DSSAVE[RING'NO*LSTATE];
})RETURN;

*
*
* PRINT PHYSICAL MAP


}(PROGRAM DPPM;
})INCLUDE DEBUG'DECS;

})DI DPPMI,DPPMV,DPPMU;

})FUNCTION DPPM();
})RETURN IF M1MODE;
})FOR DPPMI_0 TO 127 DO;
}-DPPMV_DSPM[DPPMI];
}-DPPMU_((DPPMV RSH 12) A' 3777B IF DPPMV<0 ELSE DPPMV);
}-IF DPPMU$FPAGEE=0 DO;
}1CLS(PSTR);
}1DFCNB(DPPMI,4B7);
}1DWCI(' ');
}1IF DPPMV<0 DO;
}5DWCI('(');
}5DFCNB(DPPMU,4B7);
}5DWCI(')');
}1ELSE DO;
}5DFCNB(DPPMV,4B7);
}1ENDIF;
}1DAPPND(MCR);
}1CSOUT(PSTR);
}-ENDIF;
})ENDFOR;
})RETURN;

*
*
*THIS FUNCTION SETS A BREAKPOINT


}(PROGRAM DBKSET;
})INCLUDE DEBUG'DECS;


})FUNCTION DBKSET();
})(DBKTN _ E1TN & DBKSI _ E1SI) IF MODES['T'] = 1;
})SSELECT(E1TN);
})POINT _ A(ICST,E1SI);
})IF POINT.PTBKF=0 DO;
}-POINT.PTBKF_1;
})ELSE DO;
}-DBKFL_0 IF MODES['T'] = 1;
}-RETURN;
})ENDIF;
})IF ICGSP.GSBMF = 1 DO;
}-ICGSP.GSBMF _ 0;
}-ICGSP.GSBKCT _ 2;
})ELSEIF ICGSP.GSBKCT = 0 DO;
}-ICGSP.GSBKSI _ E1SI;
}-ICGSP.GSBMF _ 1;
})ELSE DO;
}-INC(ICGSP.GSBKCT);
})ENDIF;
})RETURN;

*
*
*THIS FUNCTION CLEARS A BREAKPOINT


}(PROGRAM DBKCLR;
})INCLUDE DEBUG'DECS;


})FUNCTION DBKCLR();
})IF DBKFL=0 AND DBKTN=E1TN AND DBKSI=E1SI DO;
}-DBKFL_-1;
}-RETURN;
})ENDIF;
})SSELECT(E1TN);
})POINT _ A(ICST,E1SI);
})RETURN IF POINT.PTBKF = 0;
})POINT.PTBKF_0;
})IF ICGSP.GSBMF = 1 DO;
}-ICGSP.GSBMF _ 0;
}-ICGSP.GSBKCT _ 0;
})ELSE DO;
}-DEC(ICGSP.GSBKCT) IF ICGSP.GSBKCT;
})ENDIF;
})RETURN;

*
*
*THIS FUNCTION CLEARS THE TRACE BREAKPOINT


}(PROGRAM DBKTCLR;
})INCLUDE DEBUG'DECS;


})FUNCTION DBKTCLR();
})RETURN IF DBKTN = 0;
})E1TN _ DBKTN;
})E1SI _ DBKSI;
})DBKCLR();
})DBKTN _ 0;
})RETURN;
