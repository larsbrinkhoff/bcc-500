}'COMMON EDIT';
}'INCLUDE COMM,STDEC,STST,EDST;


* THIS FILE CONTAINS THE SPL EDITOR


}'DECLARE EXTERNAL EDLL,EDTK,EDSST; *SEARCH FUNCTIONS
*EX1
}'DECLARE EXTERNAL ZPMAIN,ZPPDS;
*EX2



}'PROGRAM EDINIT;
}'INCLUDE EDIT', DBCOM;

* INITIALIZE ALL EDITOR VARIABLES. THIS FUNCTION IS
* CALLED PRIOR TO THE FIRST TIME THE EDITOR (EDCOM) IS CALLED.
}'DI EINITX;

FUNCTION EDINIT();
}'TABS[0]_8;
}'TABS[EINITX]_TABS[EINITX-1]+5 FOR EINITX_1 TO LTABS;
}'TABS[LTABS]_0;
}'EDLANG_0; *THIS MUST BE FIXED--RIGHT NOW IT SAYS SPL UNSYMBOLLICALLY
}'SETS(EDPSRS);
}'SETS(EDPS);
}'SETS(EDPST);
}'EDUTN_EDUSI1_EDUSI2_EDUSI3_0;
}'E1TN_E1SI_E2TN_E2SI_ECLTN_ECLSI_0;
}'MODES[EINITX]_0 FOR EINITX_0 TO 6;
}'MODES[4]_50;
}'UMCONT_1;
}'EFORMAT_4; *SET INDENTATION MODE TO STANDARD INDENTATION
}'EMARGIN_8; *SET INDENTATION MARGIN
}'EINDENT_4; *SET INCREMENTAL INDENTATION
}'ECONTSP_1; *SET CONTINUATION INDENTATION INCREMENT
}'SYMFT_940; *INDICATES 940 FILES FOR READING AND WRITING
}'CODEFLAG _ PPTFLAG _ TREEFLAG _ BARE _ 0;
}'STATFLAG _ 0;
}'RETURN;



}'PROGRAM EDCOM;
}'INCLUDE EDIT', DBCOM;

* MAIN DRIVER FOR SPL EDITOR. CALLED FROM COMMAND LOOP.
}'DECLARE ARRAY EDCAD[5]_(10000,1000,100,10,1);
* DISPATCH TABLE FOR EDITOR COMMANDS
}'DECLARE SWITCH EDCMT[24]_(EDAPND,EDERR,EDCHNG,EDELET,
}*EDEDIT,EDERR,EDERR,EDERR,EDINSR,EDERR,EDERR,EDLSTD,EDMODE,EDNEXT,EDERR,
}*EDPREV,EDERR,EDREAD,EDSUB,EDTABS,EDUNDO,EDVAL,EDWRIT,EDXCHG);
}'DP EDLXP;
}'DI EDTBT1;
}'DI EDCMCH,EDCZT,EDLXT;
}'DQ EDCMIO_102B,EDCMIN_56110107B,EDCMDL_56000100B;
}'DECLARE LABEL EDT4X_EDT4;* KLUDGE

FUNCTION EDCOM(), FRETURN;
}'EDCZT_(0 IF HERALD='*' ELSE 1);
}'COMMAND(CSTR,EDCMAR,EDCZT:CSTR,,EDCMCH//FRETN);
}'E1TN_E2TN_ECLTN;
}'E1SI_E2SI_ECLSI;
}'MODES[7+EDCZT]_MODES[EDCZT] FOR EDCZT_0 TO 6;
}'CSTR_EDGSP(CSTR);
}'SDCOPY(EDLIST,CSTR);
EDCZ2: GOTO EDCZ2 IF (EDCZT_GCI(EDLIST//EDCZ3))#':' AND
}(((EDCZT>='A' AND EDCZT<='Z')OR(EDCZT>='0' AND EDCZT<='9')OR
}((EDCZT=' '));
}'GOTO EDCZ3 IF EDCZT#':';
}'EDCZT_GETW(CSTR);
}'SETW(CSTR,GETR(EDLIST)-1);
}'CSTR_EDMOD(CSTR,1//FRETN);
}'SETW(CSTR,EDCZT);
}'CSTR$SR _ INCDES(CSTR$SR, 1);
EDCZ3: CSTR_EDGSP(CSTR);
}'IF (EDCMIO LSH EDCMCH)<0 DO;
}*SETS(EDFNM);
}*EDFNM_CGETF(EDFNM//FRETN);
}*CSTR_EDGSP(CSTR);
}*GOTO EDCZ9 IF LENGTH(CSTR)>0;
}*IF EDCMCH='R'-'A' DO;
}-E1TN_E1SI_E2SI_E2TN_0;
}-GOTO EDCZ7;
}*ENDIF;
}*IF EDCMCH='W'-'A' DO;
}-SSELECT(0);
}-E1TN_ICFSTAT; E2TN_ICLSTAT;
}-SSELECT(E1TN); E1SI_ICFSTAT;
}-SSELECT(E2TN); E2SI_ICLSTAT;
}-GOTO EDCZ7;
}*ENDIF;
}'ENDIF;
EDCZ9: CSTR_EDGSP(CSTR);
}'CSTR_EDLJ(CSTR//FRETN) IF (EDCMIN LSH EDCMCH)<0;
}'CSTR_EDGSP(CSTR);
EDCZ7: SUDEL() IF (EDCMDL LSH EDCMCH)<0;
}'GOTO LABEL'FIXER(EDCMT[EDCMCH]);
EDERR: FRETN;
EDCHNG:FRETN IF E1TN#E2TN OR E2TN=0;
}'SSELECT(E2TN);
}'FRETN IF E1SI=ICFSTAT AND E2SI#ICLSTAT;
}'EDLTN_E2TN; EDLSI_E2SI; EDISP(1,1//CHNG1);
}'PLITN_EDLTN; PLISI_(EDLSI IF EDLTN=E2TN ELSE 0); GOTO CHNG2;
CHNG1: PLITN_PLISI_0;
CHNG2: EDXT(//FRETN);
}'SSELECT(E2TN);
}'EDCZT_SUNHOOK(E1SI,E2SI//CHNG3);
}'IF EDINTV#0 DO;
}*ENOUT(EDCZT); CSOUT(EDMS4);
}'ENDIF;
}'RETN;
* BAD INTERVAL SENT TO SUNHOOK.
CHNG3: CERR(124);
*}&******************************************************************
EDAPND:FRETN IF E2TN#E1TN OR E2SI#E1SI;
}'GOTO APRD1 IF E2TN=0;
}'EDLTN_E2TN; EDLSI_E2SI; EDISP(1,1//APRD1);
}'PLITN_EDLTN; PLISI_(EDLSI IF EDLTN=E2TN ELSE 0); GOTO APRD2;
APRD1: PLITN_0; PLISI_0;
APRD2: EDXT(//FRETN);
}'RETN;
*}&******************************************************************
EDEDIT:FRETN IF E1TN#E2TN; SSELECT(E2TN); FRETN IF E1SI=ICFSTAT;
}'FRETN IF E2SI#E1SI; *REQUIRES ADDRESS INSTEAD OF INTERVAL
}'FRETN IF E2TN=0;
}'EDLTN_E1TN; EDLSI_E1SI;
}'ERRSET(EDT4);
EDT1:}"ZUNPP(EDLSI,EDLTN,EFORMAT);
}'IF MODES[8]#0 DO; FSOUT(UPS,-1); COUT('&/',-1);
}'ENDIF;
}'UPS_ZEDIT(UPS,0,4B7//EDT4);
}'IF MODES[7]#0 DO; FSOUT(UPS,-1); COUT('&/',-1); ENDIF;
}'PLISI_E1SI; PLITN_E1TN;
}'ZPPDS(UPS,10014000B//EDT4);
}'GOTO EDT3 IF EDLSI=E2SI AND EDLTN=E2TN;
}'IFQUIT(//EDT3);
}'EDISP(1,0//EDT3); GOTO EDT1;
EDT3:}"IF PLITN2#0 DO; ECLTN_PLITN2; ECLSI_PLISI2;
}'ELSE DO;
}'EDISP(-1,1//EDT5); GOTO EDT7;
EDT5:}"EDISP(1,1//EDT6); GOTO EDT7;
EDT6:}"ECLTN_ECLSI_0; GOTO EDT8;
EDT7:}"ECLTN_EDLTN; ECLSI_EDLSI;
EDT8:}"ENDIF;
}'SSELECT(E1TN); SUNHOOK(E1SI,EDLSI//CHNG3);
}'RETN;
EDT4:}"EDISP(-1,0//FRETN);
}'SSELECT(E1TN);
}'SUNHOOK(E1SI,EDLSI//FRETN); ECLTN_E1TN; ECLSI_EDLSI;
}'FRETN;
*}&*****************************************************************
EDELET:FRETN IF E1TN#E2TN; FRETN IF E2TN=0;
}'SSELECT(E2TN);
}'FRETN IF E1SI=ICFSTAT AND E2SI#ICLSTAT;
}'EDLTN_E1TN; EDLSI_E1SI; EDISP(-1,1//DELT1);
}'ECLTN_EDLTN; ECLSI_EDLSI; GOTO DELT3;
DELT1: EDLTN_E2TN; EDLSI_E2SI; EDISP(1,1//DELT2);
}'ECLTN_EDLTN; ECLSI_EDLSI; GOTO DELT3;
DELT2: ECLTN_0; ECLSI_0;
DELT3: SSELECT(E2TN); EDCZT_SUNHOOK(E1SI,E2SI//CHNG3);
}'IF EDINTV#0 DO;
}*ENOUT(EDCZT); CSOUT(EDMS3);
}'ENDIF; RETN;
*}&******************************************************************
EDINSR:FRETN IF E1TN#E2TN OR E2SI#E1SI;
}'PLITN_E2TN; SSELECT(E2TN); PLISI_(E2SI IF E2SI#ICFSTAT ELSE 0);
}'EDXT(//FRETN);
}'RETN;
*}&****************************************************************
EDMODE:CSTR_EDMOD(CSTR,0//FRETN); RETN;
*}&******************************************************************
EDREAD:FRETN IF E1TN#E2TN OR E1SI#E2SI;
}'EDFN_OPEN'SEQ'FILE(EDFNM,0);
}'PLITN_E2TN; SSELECT(E2TN); PLISI_(E2SI IF E2SI#ICFSTAT ELSE 0);
}'ZPMAIN(EDFN,EDLANG,1//FRETN) IF PLISI=0
}(ELSE ZPMAIN(EDFN,EDLANG,6//FRETN);
}'IF PLITN2#0 DO; ECLTN_PLITN2; ECLSI_PLISI2;
}'ENDIF;
}'FMTO("* LINES/"); OUT(PLLNCT);
}'RETURN;
*}&*********************************************************************
EDSUB: SDCOPY(EDLIST,CSTR); EDLIST_EDGSP(EDLIST);
}'EDSB_GCI(EDLIST//FRETN);
}'FRETN IF EDSB#'/' AND EDSB#'*' AND}"EDSB#'&'' AND EDSB#'"';
}'SETS(EDSUBS); EDSUBS_EDGS(EDSB,EDSUBS//FRETN);
}'EDPST_EDGS(EDSB,EDPST//FRETN); SDCOPY(EDTKNS,EDPST);
}'FRETN IF LENGTH(EDPST)=0;
}'EDLIST_EDLI(EDLIST//FRETN); FRETN IF LENGTH(EDLIST)>0;
}'EDSB_('*'IF(EDSB='*' OR EDSB='/')ELSE '"');
}'EDNSB_0; EDTKNO_0;
}'EDLSI_E1SI; EDLTN_E1TN; EDLSSI_E2SI; EDLSTN_E2TN;
}'EDSTN_EDABT2_EDABT1_EDNEWL_0; SSELECT(E1TN);
EDSUL1:EDSD(EDTK//EDSUL3) IF EDSB='*' ELSE EDSD(EDSST//EDSUL3);
EDSUL2:IF EDNSB>=MODES[11] DO;
}*CSOUT(EDMS9); GOTO EDSUL3;
}'ENDIF;
}'EDSUX1_ZUNPSI(EDLSI,EDLTN,EDKT1);
}'ZUNPSI(EDLSI,EDLTN,EDKT2); EDSUX2_UNCHNE;
}'EDSUX2_LENGTH(UPS) IF EDSUX2=-1;
}'EDRP(EDSUX1,EDSUX2//FRETN); EDNEWL_1;
}'EDTKNO_EDKT3;
}'GOTO EDSUL1;
EDSUL3:ENOUT(EDNSB); CSOUT(EDMS8);
}'RETN;
*}&*******************************************************************
EDTABS:IF LENGTH(CSTR)=0 DO;
*SET TABS ACCORDING TO STANDARD TERMINAL TABS.
}*TABS[EDTBT1_0]_8;
}*TABS[EDTBT1_EDTBT1+1]_TABS[EDTBT1-1]+5 WHILE EDTBT1<LTABS;
}*TABS[LTABS]_0;
}*RETN;
}'ELSE DO;
*SET TABS ACCORDING TO LIST OF NUMBERS IN CSTR.
}*SDCOPY(EDLIST,CSTR);
}*EDNUM(//FRETN);
}*FRETN IF EDLXV<1 OR EDLXV>80;
}*TABS[0]_EDLXV;
}*SDCOPY(CSTR,EDLIST); EDTBT1_0;
}*WHILE GCI(EDLIST//EDTB1)=',' DO;
}-EDNUM(//EDTB2);
}-GOTO EDTB2 IF EDLXV>80 OR EDLXV<=TABS[EDTBT1];
}-GOTO EDTB2 IF EDTBT1=(LTABS+2);
}-TABS[EDTBT1_EDTBT1+1]_EDLXV;
}-SDCOPY(CSTR,EDLIST);
}*ENDFOR;
EDTB1:}$TABS[EDTBT1+1]_0; RETN;
EDTB2:}$TABS[EDTBT1+1]_0; FRETN;
}'ENDIF;
*}&******************************************************************
EDUNDO:FRETN IF EDUTN=0; SUINS(); RETN;
*}&*****************************************************************
EDXCHG:FRETN;
*}&*****************************************************************
EDLSTD:EDLST(-1); RETN;
********************************************************************
EDVAL: FRETN IF E1TN#E2TN AND E1SI#E2SI;
}'EDCZT_1;
}'SSELECT(E1TN); EDLTN_E1TN; EDLSI_ICFSTAT;
}'WHILE E1SI#EDLSI DO; EDISP(1,0//FRETN); EDCZT_EDCZT+1;
}'ENDFOR;
}'FMTO("<@>'#* = <>'#*/");
}'OUT(-E1TN); OUT(EDCZT);
}'SSELECT(0); EDLXT_ICFSTAT;
}'WHILE EDLXT#E1TN DO;
}+SSPTR(EDLXT:,EDLXP);
}*EDCZT_EDCZT+EDLXP.GSNL; EDLXT_SGNEXT(EDLXT//FRETN);
}'ENDFOR;
}'OUT(EDCZT);
}'ECLTN_E1TN; ECLSI_E1SI;
}'RETN;
*}&*****************************************************************
EDWRIT:EDLST(OPEN'SEQ'FILE(EDFNM,1)); RETN;
*}&******************************************************************
EDNEXT:EDGNP(//FRETN);
}'EDLXV_1 IF EDLXV=0;
}'EDPX(); RETN;
*}&******************************************************************
EDPREV:EDGNP(//FRETN);
}'EDLXV_1 IF EDLXV=0;
}'EDLXV_-EDLXV;
}'EDPX(); RETN;



}'PROGRAM EDLI;
}'INCLUDE EDIT';

* READ FROM THE ARGUMENT STRING (AND DELETE IF SUCCESSFUL)
* AN EDITOR ADDRESS OR INTERVAL AND LEAVE THE RESULT IN
* E1TN,E1SI,E1LN AND E2TN,E2SI,E2LN. IF THE INTERVAL IS
* ONLY ONE LINE, E1=E2. FAILURE OCCURS IF AN IMPROPER
* CONSTRUCT IS PRESENTED.
}'DI EDLIX1;

STRING FUNCTION EDLI (STRING EDLIS), FRETURN;
}'EDLIX1_0; GOTO EDLIL1;
*THIS ENTRY COLLECTS E1,E2 INTERVAL AND ALSO THE E3,E4 INTERVAL; AND
*SETS THE MOVE FLAG(EDTFG) APPROPRIATLY.
STRING ENTRY EDLJ(EDLIS), FRETURN;
}'EDLIX1_1;
EDLIL1:SDCOPY(EDLIST,EDLIS);
}'EDLXCH_EDINTV_0;
}'E3TN_E4TN_E3SI_E4SI_EDLSCP_EDTFG_0;
}'EDLX(//FRETN); E1TN_EDLTN; E1SI_EDLSI;
}'IF EDLXCH=',' DO; EDLZ(//FRETN); EDINTV_1;
}'ENDIF;
}'E2TN_EDLTN; E2SI_EDLSI;
}'EDCK(E1TN,E1SI,E2TN,E2SI//FRETN);
}'IF EDLIX1=0 DO; FRETN IF EDLXCH#-1 ELSE GOTO EDLI3;
}'ENDIF;
}'IF EDLXCH='=' DO; EDTFG_1; EDLIST_EDGSP(EDLIST);
}*FRETN IF GCI(EDLIST//FRETN)#'['; GOTO EDLI2;
}'ENDIF;
}'IF EDLXCH='[' DO;
EDLI2:}$EDLSCP_0; EDLX(//FRETN); E3TN_EDLTN; E3SI_EDLSI;
}*EDLZ(//FRETN) IF EDLXCH=',';
}*E4TN_EDLTN; E4SI_EDLSI;
}*FRETN IF EDLXCH#']';
}*EDCK(E3TN,E3SI,E4TN,E4SI//FRETN);
}+FRETN IF E1TN=0 OR E2TN=0;
}'ENDIF;
EDLI3: SDCOPY(EDLIS,EDLIST); RETN EDLIS;



}'PROGRAM EDLA;
}'INCLUDE EDIT';

* AS IN EDLI EXCEPT THAT ONLY ONE ADDRESS IS ACCEPTED
* AND THE RESULTS ARE LEFT IN E1TN,E1SI.

FUNCTION EDLA (STRING EDLAST), FRETURN;
}'SDCOPY(EDLIST,EDLAST);
}'EDLSCP_0;
}'EDLX(//FRETN);
}'E1TN_EDLTN; E1SI_EDLSI;
}'FRETN IF EDLXCH#-1 AND EDLXCH#',';
}'SDCOPY(EDLAST,EDLIST);
}'RETN;



}'PROGRAM EDLX;
}'INCLUDE EDIT';
*****
* 5/3/73}"JACK FREEMAN
* ARRAY FOR KLUDGE TO PASS ARRAY DESCRIPTOR (INSTEAD OF POINTER) TO
* SSFIND.}"SEE BELOW.
}'DECLARE ARRAY KLUDGE'EDID;
*****

* THIS FUNCTION COLLECTS AN EDITOR ADDRESS. THE RESULT
* IS LEFT IN EDLTN,EDLSI. FAILURE INDICATES
* THAT SOMETHING WAS WRONG WITH THE PRESENTED ADDRESS.

FUNCTION EDLX(), FRETURN;
}'SSELECT(ECLTN); EDLTN_ECLTN; EDLSI_ECLSI;
}'GOTO EDLXL1;
*THIS ENTRY IS FOR THE SECOND ADDRESS IN AN INTERVAL.
ENTRY EDLZ(), FRETURN;
}'SSELECT(EDLTN);
EDLXL1:EDIR_1;
}'EDLIST_EDGSP(EDLIST);
EDLX0: EDLXCH_GCI(EDLIST//RETN);
}'IF EDLXCH='.' DO;
}*EDLTN_ECLTN; EDLSI_ECLSI; SSELECT(EDLTN);
}*GOTO EDLX7;
}'ELSEIF EDLXCH='<' DO; EDLIST_EDGSP(EDLIST);
}*IF(EDLXCH_GCI(EDLIST//FRETN))='>' DO;
}-EDLSCP_1;
}*ELSEIF EDLXCH>='A' AND EDLXCH<='Z' DO;
}-EDLSCP_0; EDCL(//FRETN); SSELECT(0);
*****
* 5/3/73}"JACK FREEMAN
* KLUDGE TO GIVE SSFIND THE ARRAY DESCRIPTOR IT REQUIRES.}"PROPER
* FIX MIGHT BE TO STORE WHAT IS NOW STORED IN EDID[0] IN A GLOBAL
* SCALAR AND THEN STORE SYMBOL NAME IN EDID STARTING AT ELEMENT
* 0 INSTEAD OF 1.}"THIS WOULD ALLOW PASSING EDID ITSELF TO SSFIND.
* THIS SAME KLUDGE IS USED BELOW IN EDLL.
}-KLUDGE'EDID _ ARRDESC(@EDID[1], 4, 1, 0);
*****
}-FRETN IF (EDLTN_SSFIND(KLUDGE'EDID,EDID[0]))=0;
}-EDLIST_EDGSP(EDLIST);
}-FRETN IF GCI(EDLIST//FRETN)#'>';
}-SSELECT(EDLTN); EDLSI_ICFSTAT;
}*ELSE DO; FRETN;
}*ENDIF;
}*EDLIST_EDGSP(EDLIST);
}*EDLXCH_GCI(EDLIST//FRETN);
}'ENDIF;
}'IF EDLXCH='$' DO;
}*IF EDLSCP=1 DO;
}-SSELECT(0); EDLTN_ICLSTAT; SSELECT(EDLTN);
}*ENDIF;
}*EDLSI_ICLSTAT; GOTO EDLX7;
}'ELSEIF EDLXCH='#' DO; EDLIST_EDGSP(EDLIST);
}*IF EDLSCP=1 DO; SSELECT(0); EDLTN_ICFSTAT;
}*ENDIF;
}*SSELECT(EDLTN); EDLSI_ICFSTAT;
}*EDNUM(//FRETN); EDISP(EDLXV-1,EDLSCP//FRETN);
}*GOTO EDLX7;
}'ELSEIF EDLANG=0 AND EDLXCH>='A' AND EDLXCH<='Z' DO;
}*EDCL(//FRETN); EDSC(EDLL//FRETN); GOTO EDLX7;
}'ELSEIF EDLXCH='-' DO; EDLIST_EDGSP(EDLIST);
}*EDLXCH_GCI(EDLIST//FRETN); EDIR_-1;
}'ENDIF;
}'EDSR(//FRETN); EDIR_1;
EDLX7: EDLIST_EDGSP(EDLIST);
}'IF LENGTH(EDLIST)=0 DO; EDLXCH_-1; RETN;
}'ENDIF;
}'EDLXCH_GCI(EDLIST//RETN);
}'RETN IF EDLXCH=',' OR EDLXCH='[' OR EDLXCH=']' OR EDLXCH='=';
}'IF EDLXCH='+' DO; EDLIST_EDGSP(EDLIST);
}*EDNUM(//FRETN); EDISP(EDLXV,1//FRETN);
}'ELSEIF EDLXCH='-' DO; EDLIST_EDGSP(EDLIST);
}*IF(EDLXCH_GCI(EDLIST//FRETN))<='9' AND EDLXCH>='0' DO;
}-EDLIST$SR _ INCDES(EDLIST$SR, -1);
}-EDNUM(//FRETN); EDISP(-EDLXV,1//FRETN);
}*ELSE DO;
}-EDIR_-1; EDSR(//FRETN); EDIR_1;
}*ENDIF;
}'ELSE DO;
}*EDSR(//FRETN);
}'ENDIF;
}'GOTO EDLX7;



}'PROGRAM EDNUM;
}'INCLUDE EDIT';

* COLLECT DECIMAL INTEGER FROM STRING EDLIST AND PUT ITS NUMERICAL
* VALUE IN EDLXV.
}'DI EDLZCH,EDLXV1;

FUNCTION EDNUM(), FRETURN;
}'EDLXV_EDLXV1_0;
EDNM1: EDLZCH_GCI(EDLIST//EDNM2);
}'IF EDLZCH>='0' AND EDLZCH<='9' DO;
}*FRETN IF EDLXV>838859;
}*EDLXV_EDLXV*10+EDLZCH-'0';
}+EDLXV1_1;
}*GOTO EDNM1;
}'ENDIF;
}'EDLIST$SR _ INCDES(EDLIST$SR, -1);
EDNM2: FRETN IF EDLXV<0 OR EDLXV1=0;
}'RETN;



}'PROGRAM EDCK;
}'INCLUDE EDIT';

*THIS FUNCTION CHECKS THE X1,X2 INTERVAL FOR X2>=X1.
}'DI EDCKX1,EDCKX2;
}'DP EDCKX3;

FUNCTION EDCK(X1TN,X1SI,X2TN,X2SI), FRETURN;
}'RETN IF X1TN=0 AND X2TN=0;
}'IF X1TN=X2TN DO;
}*IF X1SI#X2SI DO;
}-EDLTN_X1TN; EDLSI_X1SI;
EDCKL1:}&EDISP(1,0//FRETN); GOTO EDCKL1 IF X2SI#EDLSI;
}*ENDIF;
}'ELSE DO;
}*SSELECT(0);
}*EDCKX1_X1TN;
EDCKL2:}#EDCKX1_SGNEXT(EDCKX1//FRETN);
}*GOTO EDCKL2 IF EDCKX1#X2TN;
}'ENDIF;
}'RETN;



}'PROGRAM EDXT;
}'INCLUDE EDIT';

* THIS FUNCTION GETS TEXTUAL INPUT FROM KEYBOARD OR SPECIFIED INTERVAL
* AND EXPECTS PLISI AND PLITN TO BE ALLREADY SETUP. ALSO SETS
* CURRENT LINE APPROPRIATELY.
}'DI EDXTX1;

FUNCTION EDXT(), FRETURN;
}'IF E4TN=0 DO;
}*ZPMAIN(TTYIN,EDLANG,1//FRETN) IF PLISI=0
}+ELSE ZPMAIN(TTYIN,EDLANG,6//FRETN);
}'ELSE DO;
}*FRETN IF E4TN#E3TN;
}*EDLTN_E3TN; EDLSI_E3SI;
EDXTL1:}#ZUNPP(EDLSI,EDLTN,2);
}*ZPPDS(UPS,1//FRETN) IF PLISI=0 ELSE ZPPDS(UPS,6//FRETN);
}*GOTO EDXTL2 IF EDLSI=E4SI AND EDLTN=E4TN;
}*IFQUIT(//FRETN);
}*EDISP(1,1//EDXTL3); GOTO EDXTL1;
EDXTL2:}#SSELECT(E3TN);
}*IF EDTFG=1 DO; EDXTX1_SUNHOOK(E3SI,E4SI//EDXTL4); SUDEL();
}-ENOUT(EDXTX1); CSOUT(EDMS5);
}*ENDIF;
}'ENDIF;
}'IF PLITN2=0 DO; ECLTN_E1TN; ECLSI_E1SI;
}'ELSE DO; ECLTN_PLITN2; ECLSI_PLISI2;
}'ENDIF;
}'RETN;
EDXTL3:CERR(125); *FINAL LINE NO. FOR TEXT NOT FOUND
EDXTL4:CERR(124); *BAD INTERVAL SENT TO SUNHOOK



}'PROGRAM EDLB;
}'INCLUDE EDIT';

* RETN TOKEN OF LABEL IN LINE INDEXED BY EDLBSI, FRETN IF NONE.
}'DI EDLBX1,EDLBX2,EDLBX3,EDLBX4,EDLBX5,EDLBX6;
}'DP EDLBP;

FUNCTION EDLB(EDLBSI), FRETURN;
}'FRETN IF ICGTN=0 OR EDLBSI<1;
}'EDLBP_STPTR(EDLBSI);
}'EDLBX6_(EDLBP.PTSIZE-1)*2+EDLBP.PTONT;
}'IF ICBA.IBFTYPE=IBFTSPL DO;
}*EDLBX2_0;
}*FOR EDLBX1_PTTO TO EDLBX6 DO;
}-EDLBX2_EDLBX2+1 IF(EDLBX3_GHW(EDLBP,EDLBX1))>0
}.AND EDLBX3<TNBMIN;
}-EDLBX4_EDLBX3 IF EDLBX2=1;
}-IF EDLBX2=2 DO; EDLBX5_EDLBX3 A' OPTMSK; GOTO EDLBL1;
}-ENDIF;
}*ENDFOR; FRETN;
EDLBL1:}#FRETN IF EDLBX5#TNRMIN+':';
}*RETN EDLBX4;
}'ELSE DO;
}*FRETN;
}'ENDIF;



}'PROGRAM EDCL;
}'INCLUDE EDIT';

* COLLECT IDENTIFIER FROM EDLIST AND LEAVE IT IN EDID WITH EDID[0]
* EQUAL TO THE NUMBER OF WORDS USED BY THE IDENTIFIER. FAIL IF ID TOO BIG.
* THE FIRST CHARACTER IS ALLREADY IN EDLXCH.
}'DI EDCX1,EDCX2;

FUNCTION EDCL(), FRETURN;
}'EDID[4]_EDID[2]_EDID[3]_0;
}'EDID[1]_EDLXCH LSH 18; EDCX2_4;
}'WHILE ((EDCX1_GCI(EDLIST//EDCL1))>='A' AND EDCX1<='Z')
}(OR (EDCX1>='0' AND EDCX1<='9') OR (EDCX1='&'') DO;
}*EDCX2_EDCX2+1;
}*EDID[EDCX2 RSH 2]_(EDCX1 LSH EDCSH[EDCX2 AA 3B]) VV
}+EDID[EDCX2 RSH 2] IF EDCX2<20;
}'ENDFOR;
}'EDLIST$SR _ INCDES(EDLIST$SR, -1);
EDCL1: EDID[0]_EDCX2 RSH 2; FRETN IF EDCX2>19;
}'RETN;



}'PROGRAM EDSR;
}'INCLUDE EDIT';

* COLLECT STRING IN PREPARATION FOR SEARCH AND CALL
* PROPER SEARCH DRIVER WITH PROPER ENVIRONMENT.

FUNCTION EDSR(), FRETURN;
}'FRETN IF ICGTN=0;
}'IF EDLXCH='*' OR EDLXCH='/' DO;
}*EDPSRS_EDGS(EDLXCH,EDPSRS//FRETN); FRETN IF LENGTH(EDPSRS)=0;
}*SDCOPY(EDTKNS,EDPSRS);
}*EDTKNO_0;
}*EDSC(EDTK//FRETN); RETN;
}'ELSEIF EDLXCH='&'' OR EDLXCH='"' DO;
}*EDPSRS_EDGS(EDLXCH,EDPSRS//FRETN); FRETN IF LENGTH(EDPSRS)=0;
}*SDCOPY(EDTKNS,EDPSRS);
}*EDSC(EDSST//FRETN); RETN;
}'ELSE DO;
}*FRETN;
}'ENDIF;



}'PROGRAM EDSC;
}'INCLUDE EDIT';

* THIS FUNCTION ACTS AS THE MAIN SEARCH DRIVER - PROVIDING THE
* EXTERNAL LINE SEQUENCING FOR FUNCTION EDFUN.}"FAILURE AND SUCCESS
* FRETNS MEAN JUST THAT.
* EDIR DETERMINES THE LINE INCREMENT, EDLSCP THE IB SCOPE, AND EDLTN
* AND EDLSI DETERMINE THE ENDING POINT.}"THE FIRST LINE EXAMINED IS
* ADJACENT TO THE ENDING LINE AND THE SEARCH IS CIRCULAR WITHIN THE
* SCOPE BOUNDARY.

FUNCTION EDSC(FUNCTN EDFUN), FRETURN;
}'FRETN IF EDLTN=0;
}'EDLSSI_EDLSI; EDLSTN_EDLTN;
}'EDSTN_EDABT2_0;
EDSCL1:EDISP(EDIR,EDLSCP//EDSCL3);
EDSCL4:EDABT1_EDTKNO_EDNEWL_0;
}'GOTO EDSCL5;
*ENTRY POINT TO CONTINUE WHERE LAST LEFT OFF.
ENTRY EDSD(EDFUN);
EDSCL5:IFQUIT(//FRETN);
}'EDFUN(//EDSCL2); RETN;
EDSCL2:FRETN IF EDLSI=EDLSSI AND EDLTN=EDLSTN;
}'IF EDABT1#0 DO; SSELECT(EDLTN);
}*IF EDLTN=EDLSTN DO; FRETN IF EDABT2#0; EDABT2_1;
}-FRETN IF EDLSCP=0;
}-FRETN IF EDLSSI=ICLSTAT AND EDIR>0;
}-FRETN IF EDLSSI=ICFSTAT AND EDIR<0;
}*ENDIF;
}*EDLSI_(ICFSTAT IF EDIR<0 ELSE ICLSTAT);
}'ENDIF;
}'GOTO EDSCL1;
EDSCL3:IF EDLSCP=1 DO;
}*SSELECT(0); EDLTN_(ICFSTAT IF EDIR>0 ELSE ICLSTAT);
}*SSELECT(EDLTN);
}'ENDIF;
}'EDLSI_(ICFSTAT IF EDIR>0 ELSE ICLSTAT);
}'GOTO EDSCL4;



}'PROGRAM EDSST;
}'INCLUDE EDIT';

* RETN IF STRING EDPS IS IN LINE EDLTN, EDLSI; ELSE FRETN
}'DS EDSER(0),EDSSTEST(0);
}'DI EDSSX1,EDSSX2;

FUNCTION EDSST(), FRETURN;
}'ZUNPP(EDLSI,EDLTN,EFORMAT);
}'SDCOPY(EDSER,EDTKNS);
}'SDCOPY(EDSSTEST,UPS);
}'SETR(EDSSTEST,EDTKNO);
}'EDSSX1_GCI(EDSER//FRETN);
EDSSL2:GOTO EDSSL4 IF EDSSX1#GCI(EDSSTEST//FRETN); *FIND FIRST LETTER
}'EDSSX2_GETR(EDSSTEST);
EDSSL4:GOTO EDSSL4 IF GCI(EDSER//EDSSL6)=GCI(EDSSTEST//FRETN);
}'SETR(EDSER,1); *RESET SEARCH STRING
}'SETR(EDSSTEST,EDSSX2); *RESET TEST STRING
}'GOTO EDSSL2; *TRYAGAIN
EDSSL6:EDKT1_EDSSX2-1; *SET FIRST CHARACTER NUMBER
}'EDKT2_GETR(EDSSTEST)-1; *SET LAST CHARACTER NUMBER
}'RETN;



}'PROGRAM EDRP;
}'INCLUDE EDIT', DBCOM;

* THIS FUNCTION REPLACES PORTIONS OF STRING UPS WITH STRING EDSUBS.
* FIRST CHAR. NO. IS EDRPP1, LAST-1 IS EDRPP2.
}'DS EDRPS1(0),EDRPS2(100);
}'DI EDRPX1,EDRPX2,EDRPX3;

FUNCTION EDRP(EDRPP1,EDRPP2), FRETURN;
}'IF EDNEWL=0 AND (MODES[8]#0 OR MODES[9]#0) DO;
}*CSOUT(UPS); COUT('&/', -1);
}'ENDIF;
}'EDRPX1_0; SETS(EDRPS2);
}'WHILE EDRPX1<EDRPP1 DO; EDRPX2_GCI(UPS//FRETN);
}*WCI(EDRPX2,EDRPS2//FRETN); EDRPX1_EDRPX1+1;
}'ENDFOR;
}'UPS$SR _ INCDES(UPS$SR,EDRPP2-EDRPP1); SDCOPY(EDRPS1,EDSUBS);
EDRPL1:APPND(EDRPS2,EDRPS1//FTLERR);
EDRPL8:EDRPX3_LENGTH(EDRPS2);
EDRPL2:APPND(EDRPS2,UPS//FTLERR);
EDRPL3:SETS(UPS);
EDRPL4:WHILE LENGTH(UPS)<EDRPX3 DO;
}*EDRPX2_GCI(EDRPS2//EDRPL5); WCI(EDRPX2,UPS//FRETN);
}'ENDFOR;
EDRPL5:PLISI_EDLSI; PLITN_EDLTN;
}'ZPPDS(UPS,12220000B//FRETN);
}'EDKT3_(PPTA.PTSIZE*2+PPTA.PTONT-PTTO-1 IF EDSB='*' ELSE
}(EDRPP1+LENGTH(EDSUBS)+1);
}'SETR(UPS,0); *RECLAIM STRING
EDRPL6:APPND(UPS,EDRPS2//FTLERR);
EDRPL7:IF MODES[9] DO;
EDRPL9:}#CSOUT(EDMS10);
}'EEES _ ZEDIT(EEES,0,4B7//EDRPL0);
EDRPL0:IF LENGTH(EEES)>0 DO;
}+EDRPX2_GC(EEES);
}'ELSE DO;
}+EDRPX2_'N';
}'ENDIF;
}*IF EDRPX2#'Y' AND EDRPX2#'N' DO;
}-CSOUT(EDMS12); CSOUT(EDMS11); GOTO EDRPL9;
}*ENDIF;
}*COUT('&/', -1);
}*IF EDRPX2='N' DO; EDKT3_EDKT1+1; RETN;
}*ENDIF;
}'ENDIF;
}'SSELECT(EDLTN);
}'PLISI_EDLSI; PLITN_EDLTN;
}'ZPPDS(UPS,10013000B//FRETN);
}'IF PLITN2#0 DO; ECLTN_PLITN2; ECLSI_PLISI2; EDNSB_EDNSB+1;
}'ENDIF;
}'IF EDLSI=EDLSSI AND EDLTN=EDLSTN DO; EDLSSI_PLISI2;
}'ENDIF;
}'SUDEL();
}'SUNHOOK(EDLSI,EDLSI//FRETN); SUDEL();
}'EDLSI_PLISI2;
}'IF MODES[7]#0 DO; SETR(EDRPS2,0);
}*CSOUT(EDRPS2); COUT('&/', -1);
}'ENDIF;
}'RETN;



}'PROGRAM EDLL;
}'INCLUDE EDIT';
*****
* 5/3/73}"JACK FREEMAN
* ARRAY FOR KLUDGE TO PASS ARRAY DESCRIPTOR (INSTEAD OF POINTER) TO
* SSFIND.}"SEE BELOW.
}'DECLARE ARRAY KLUDGE'EDID;
*****

* RETN IF LABEL IN EDID IS IN LINE EDLTN, EDLSI; ELSE FRETN.

FUNCTION EDLL(), FRETURN;
}'IF EDLTN#EDSTN DO;* GET LABEL TOKEN FOR CURRENT IB
}*EDSTN_EDLTN;
*****
* 5/3/73}"JACK FREEMAN
* KLUDGE TO GIVE SSFIND THE ARRAY DESCRIPTOR IT REQUIRES.}"PROPER
* FIX MIGHT BE TO STORE WHAT IS NOW STORED IN EDID[0] IN A GLOBAL
* SCALAR AND THEN STORE SYMBOL NAME IN EDID STARTING AT ELEMENT
* 0 INSTEAD OF 1.}"THIS WOULD ALLOW PASSING EDID ITSELF TO SSFIND.
* THIS SAME KLUDGE IS USED ABOVE IN EDLX.
}-KLUDGE'EDID _ ARRDESC(@EDID[1], 4, 1, 0);
*****
}*EDSTK_SSFIND(KLUDGE'EDID,EDID[0]);
}'ENDIF;
}'IF EDSTK=0 DO; *ABORT SEARCH IN CURRENT IB
}*EDABT1_1; FRETN;
}'ENDIF;
}'RETN IF EDLB(EDLSI//FRETN)=EDSTK;
}'FRETN;



}'PROGRAM EDGS;
}'INCLUDE EDIT';

* COPY STRING IN EDLIST UP TO CHARACTER EDGSC INTO THE PERMANENT 
* STRING EDGSS UNLESS EDGSC IS THE FIRST CHARACTER ENCOUNTERED, IN 
* WHICH CASE EDGSS IS LEFT UNDISTURBED.
}'DI EDGSX1;

STRING FUNCTION EDGS(EDGSC,STRING EDGSS), FRETURN;
}'RETN EDGSS IF((EDGSX1_GCI(EDLIST//FRETN))=EDGSC);
}'SETS(EDGSS);
EDGSL1:WCI(EDGSX1,EDGSS//FRETN);
}'RETN EDGSS IF((EDGSX1_GCI(EDLIST//FRETN))=EDGSC);
}'GOTO EDGSL1;



}'PROGRAM EDTK;
}'INCLUDE EDIT';

* RETN IF TOKENS IN EDTKNS STRING ARE IN LINE EDLTN, EDLSI; FRETN OTHERWISE.
*SEARCH}"STARTS WITH TOKEN NUMBER EDTKNO (FIRST = 0).
}'DS EDTKS(0);
}'DP EDTKP;
}'DI EDTKX1,EDTKX2,EDTKX3,EDTKX4,EDTKX5;

FUNCTION EDTK(), FRETURN;
}'IF EDLTN#EDSTN DO;* SET UP FOR CURRENT IB
}*EDSTN_EDLTN; SDCOPY(EDTKS,EDTKNS); SETS(UPS);
}*EDTKX3_GCI(EDTKS//EDTKL1);
}*IF EDTKX3='*' AND EDLANG=0 DO; WCI(' ',UPS//FRETN);
}*ENDIF;
}*WCI(EDTKX3,UPS//FRETN);
}*APPND(UPS,EDTKS//FTLERR);
EDTKL1:}#SSELECT(EDLTN);
}*ZPPDS(UPS,02220100B//EDTKL2);
}*EDTKX1_0; EDTKX2_(PPTA.PTSIZE-1)*2+PPTA.PTONT;
}*FOR EDTKX3_PTTO TO EDTKX2 DO;
}0EDTKX4_GHW(PPTB,EDTKX3);
}0GOTO EDTKL3 IF (EDTKX1_EDTKX1+1)>10; *TOO MANY TOKENS
}0EDTKM[EDTKX1]_(OPTMSK IF EDTKX4>=TNRMIN AND
}1EDTKX4<TNKMIN ELSE -1);
}0EDTKA[EDTKX1]_EDTKX4; GOTO EDTKL4 IF EDTKX4=TKN50;
}*ENDFOR;
EDTKL4:}#GOTO EDTKL2 IF (EDTKA[0]_EDTKX1)=0; * NO TOKENS
}'ENDIF;
}'EDTKP_STPTR(EDLSI);
}'EDTKX1_((EDTKP.PTSIZE-1)LSH 1)+EDTKP.PTONT;
}'EDTKX3_0;
}'FRETN IF GHW(EDTKP,PTTO)=TKN55; *ERROR LINE
}'FOR EDTKX2_PTTO TO EDTKX1 DO;
}*EDTKX3_EDTKX3+1;
}*EDTKX4_GHW(EDTKP,EDTKX2); PHW(PPTB,EDTKX3,EDTKX4);
}+IF EDTKX4=TKN50 DO; *IF COMMENT LINE THEN BLANK IT OUT
}/EDTKX5_(((GHW(EDTKP,EDTKX2+1)+1)LSH 1)/3)
}0+(EDTKX2 AA 1)+1; *NUMBER OF COMMENT HALF WORDS
}/IF (EDTKX2_EDTKX2+EDTKX5)<EDTKX1 DO;
}3EDTKX5_EDTKX3+EDTKX5;
}3PHW(PPTB,EDTKX3,0)FOR EDTKX3_EDTKX3+1 TO EDTKX5;
}3EDTKX3_EDTKX5;
}/ENDIF;
}+ENDIF;
}'ENDFOR;
}'EDTKX1_EDTKX3;
EDTKL7:FOR EDTKX2_1+EDTKNO TO EDTKX1 DO;
}*IF ((EDTKA[1] XOR GHW(PPTB,EDTKX2)) AA EDTKM[1])=0 DO;
}-EDTKX5_EDTKX2;
}-FOR EDTKX3_2 TO EDTKA[0] DO;
EDTKL8:})GOTO EDTKL5 IF(EDTKX5_EDTKX5+1)>EDTKX1;
}0EDTKX4_GHW(PPTB,EDTKX5);
}0GOTO EDTKL8 IF EDTKX4>=TNBMIN OR EDTKX4=0;
}0GOTO EDTKL5 IF ((EDTKX4 XOR EDTKA[EDTKX3]) AA
}1EDTKM[EDTKX3])#0;
}-ENDFOR;
}-EDKT1_EDTKX2-1; EDKT2_EDTKX5-1;
}-RETN;
EDTKL5:}#ENDIF;
}'ENDFOR;
}'FRETN;
EDTKL2:EDABT1_1; EDSTN_0; FRETN;
* TOO MANY TOKENS IN TOKEN SEARCH
EDTKL3:CERR(120);
* CAN NOT SEARCH FOR COMMENT TOKEN
EDTKL6:CERR(121);



}'PROGRAM EDISP;
}'INCLUDE EDIT';

*}"INCREMENTS OR DECREMENTS EDLTN, EDLSI, BY
*}"THE NUMBER OF LINES SPECIFIED BY THE SIGNED VALUE OF
*}"LINES.}"IF EDISX=1, IB BOUNDARIES MAY BE CROSSED;
*}"OTHERWISE NOT. FRETN IF EDISX=0 AND ATTEMPT IS
*}"MADE TO CROSS BOUNDARY AND IF EDISX#0 AND ATTEMPT
*}"IS MADE TO CROSS FIRST OR LAST BOUNDARY. FRETN WILL
*}"LEAVE MAX OR MIN LEGAL VALUE IN EDLTN, EDLSI.
}'DP EDIPP,EDIPQ;
}'DI EDIST1;

FUNCTION EDISP(EDISL, EDISX), FRETURN;
}'FRETN IF EDLTN=0;
}'RETN IF EDISL=0;
}'SSELECT(EDLTN);
}'IF EDISL>0 DO;
}*WHILE EDISL>0 DO;
}-EDISL_EDISL-1;
}-IF(EDIST1_SNEXT(EDLSI))=0 DO;
}1EDLTN_SGNEXT(EDLTN//EDIS3) IF EDISX=1 ELSE FRETN;
}1SSELECT(EDLTN);}"EDLSI_ICFSTAT;
}-ELSE DO; EDLSI_EDIST1;
}-ENDIF;
}*ENDFOR;
}'ELSE DO;
}*WHILE EDISL<0 DO;
}.EDISL_EDISL+1;
}.IF(EDIST1_SPREV(EDLSI))=0 DO;
}1EDLTN_SGPREV(EDLTN//EDIS3) IF EDISX=1 ELSE FRETN;
}1SSELECT(EDLTN);}"EDLSI_ICLSTAT;
}.ELSE DO; EDLSI_EDIST1;
}.ENDIF;
}*ENDFOR;
}'ENDIF;
}'RETN;
* GSORD=0 NOT EXPECTED
EDIS2: CERR(128);
EDIS3: SSELECT(EDLTN);
}'FRETN;



}'PROGRAM EDGSP;
}'INCLUDE EDIT';

* GET (THUS DELETING) SPACES IN STRING EDGSX UP
* TO THE NEXT NON-BLANK CHARACTER

STRING FUNCTION EDGSP(STRING EDGSX);
EDGS1: GOTO EDGS1 IF GCI(EDGSX//EDGS2)=' ';
}'EDGSX$SR _ INCDES(EDGSX$SR,-1);
EDGS2: RETURN EDGSX;



}'PROGRAM EDLST;
}'INCLUDE EDIT', DBCOM;

* LISTS ON DEVICE EDDEV THE E1-E2 INTERVAL.
* RETURN OCCURS IF QUIT OCCURS.
}'DI EDLST3,EDLST4;

FUNCTION EDLST(EDDEV);
}'UMCONT_(MODES[10] IF EDDEV=-1 ELSE 1);
}'EDLST3_0;
}'ECLTN_E1TN;}"ECLSI_E1SI;
}'SSELECT(E1TN);
}'EDLST4_0;
EDLT2: ZUNPP(ECLSI,ECLTN,EFORMAT);
}'FSOUT(UPS,EDDEV);
}'COUT('&/',EDDEV);
}'EDLST4_EDLST4+1;
}'EDLST3_EDLST3+LENGTH(UPS)+2;
}'IFQUIT(//EDLT8); 
}'IF ECLSI=E2SI AND ECLTN=E2TN DO;
EDLT8:}$IF EDDEV#-1 DO;
}-EDLST3_(EDLST3+3)/3;
}-CLOSE'SEQ'FILE(EDDEV);
}-ENOUT(EDLST4); CSOUT(EDMS1);
}-ENOUT(EDLST3); CSOUT(EDMS2);
}*ENDIF;
}*RETURN;
}'ENDIF;
EDLT9: EDLTN_ECLTN; EDLSI_ECLSI;
}'EDISP(1,1//EDLT6);
}'ECLTN_EDLTN; ECLSI_EDLSI;
}'GOTO EDLT2;
* FINAL LINE NUMBER FOR LINE NOT IN LINE SEQUENCE
EDLT6: CERR(123);



}'PROGRAM ENOUT;
}'INCLUDE EDIT';

* PRINTS ENOUTN ON THE TELETYPE, BASE TEN.

FUNCTION ENOUT(ENOUTN);
}'FIOUT(ENOUTN,-1,0,10);
}'RETURN;



}'PROGRAM EDPX;
}'INCLUDE EDIT';

*}"LISTS THE NEXT OR PREVIOUS (EDLXV) LINES DEPENDING ON THE
*}"SIGN OF EDLXV.}"LEAVES THE LAST LISTED LINE AS CURRENT.

FUNCTION EDPX();
}'EDLTN_ECLTN; EDLSI_ECLSI;
}'EDISP(1 IF EDLXV>0 ELSE -1,1//EDPX1);
}'ECLTN_EDLTN; ECLSI_EDLSI;
EDPX1: EDLXV_(EDLXV-1 IF EDLXV>0 ELSE EDLXV+1);
}'EDCI(); EDLST(-1); RETURN;



}'PROGRAM EDCI;
}'INCLUDE EDIT';

*}"SETS UP INTERVAL E1-E2 USING ECLTN,ECLSI
*}"AND NUMBER OF LINES IN EDLXV.}"INTERVAL IS ADJUSTED TO FIRST
*}"OR LAST IB BOUNDARY IF REQUEST GOES BEYOND.

FUNCTION EDCI();
}(EDLSI_ECLSI; EDLTN_ECLTN;
}(IF EDLXV>0 DO;
}+E1TN_ECLTN; E1SI_ECLSI;
}+EDISP(EDLXV,1//EDCI1);
EDCI1:}%E2TN_EDLTN; E2SI_EDLSI;
}(ELSE DO;
}+E2TN_ECLTN; E2SI_ECLSI;
}+EDISP(EDLXV,1//EDCI2);
EDCI2:}%E1TN_EDLTN; E1SI_EDLSI;
}(ENDIF;
}(RETURN;



}'PROGRAM EDGNP;
}'INCLUDE EDIT';

* GET VALUE FOR NEXT AND PREVIOUS COMMANDS.
}'DI EDGNPT;

FUNCTION EDGNP(), FRETURN;
}'EDGNPT_EDLXV_0;
}'SDCOPY(EDLIST,CSTR);
}'IF (EDLXCH_GCI(EDLIST//RETN))='-' DO;
}*EDGNPT_EDLXCH;
}*GOTO EDGN1;
}'ELSEIF EDLXCH='+' DO;
}*GOTO EDGN1;
}'ENDIF;
}'EDLIST$SR _ INCDES(EDLIST$SR, -1);
EDGN1: EDNUM(//FRETN);
}'EDLXV_-EDLXV IF EDGNPT='-';
}'SDCOPY(CSTR,EDLIST);
}'RETN;



}'PROGRAM EDMOD;
}'INCLUDE EDIT', DBCOM;

* SCANS FROM EMODES STRING AND SETS MODES ACCORDINGLY.
* FRETN IF NO MODES OR NON-VALID MODE ENCOUNTERED, OTHERWISE
* RETN. IF EDMP=1 THEN SET TEMPORARY MODES, IF EDMP=0
* THEN SET PERMANENT MODES.
}'DECLARE INTEGER EDMX1;

STRING FUNCTION EDMOD(STRING EMODES,INTEGER EDMP), FRETURN;
}'EDMX1_1;
}'EDMP_7*EDMP;
EDM1:}"GOTO EDM1 IF(EDLXCH_GCI(EMODES//FRETN))=' '; GOTO EDM3;
EDM2:}"GOTO EDM2 IF(EDLXCH_GCI(EMODES//EDM5))=' ';
EDM3:}"IF EDLXCH='N' DO; EDMX1_0;
}'ELSEIF EDLXCH='A' DO; MODES[0+EDMP]_EDMX1;
}'ELSEIF EDLXCH='B' DO; MODES[1+EDMP]_EDMX1;
}'ELSEIF EDLXCH='C' DO; MODES[2+EDMP]_EDMX1;
}'ELSEIF EDLXCH='I' DO; MODES[3+EDMP]_EDMX1;
}'ELSEIF EDLXCH>='0' AND EDLXCH<='9' DO;
}*EMODES$SR _ INCDES(EMODES$SR,-1);
}*EDNUM(//FRETN);
}*MODES[4+EDMP]_EDLXV;
}'ELSE DO; FRETN;
}'ENDIF;
EDM4:}"GOTO EDM2;
EDM5:}"RETN EMODES;



}'END;