}'COMMON STAB';
}'INCLUDE COMM,STDEC,STST;

* MACRO FOR CAREFUL ARRAY REFERENCES
}'MACRO PUT'REF(PTR,ARR,I,FR)_
}(.LDX I, EAX $(ARR$Z), TSB FR, STX PTR;
}'DECLARE FIELD Z(0);* KLUDGE


*********************
* SPL TABLE MANAGER *
*********************




***
*** CERR(N)
***
* COMPILER ERROR MESSAGE N



}'PROGRAM CERR;
}'INCLUDE STAB';

}'DECLARE INTEGER L0=L'[0],L1=L'[1];

}'DECLARE STRING LS00_":&/",HS00_">HELP!< # # /";
}'DECLARE INTEGER I00,F00,J00;
* 9/30/74}"JACK FREEMAN: CHANGED THE FOLLOWING LABEL ARRAY
* SO THAT ERRORS OF "LEVEL 2" WILL BE TREATED LIKE ERRORS OF "LEVEL 1".
})DECLARE LABEL ARRAY EX00[3]_(CEX0,CEX1,CEX1);

FUNCTION CERR(N00);
}'ERRPAR(N00:F00,I00);
}'GOTO CERR3 IF NOERRP#0 AND I00#0;
}'COUT('&/', -1);
}'GOTO CERR1 IF F00#0;
}'GOTO CERR1 IF N00=ERNB[J00] FOR J00_0 TO ERBC-1;
}'F00_1;
}'ERBP_ERBC_ERBC+1 IF ERBC<NERB
}#ELSE ERBP_1 IF ERBP=NERB ELSE ERBP_ERBP+1;
}'ERNB[ERBP-1]_N00;
CERR1: ERRMSG(N00,F00);
}'CSOUT(LS00);
CERR3: GOTO LABEL'FIXER(EX00[I00]);
CEX0:}"FMTO(HS00);
}'OUT(L0);
}'OUT(L1);
}'GOTO CEX1;
CEX2:}"CERRFN();
}'RETURN;
CEX1:}"CERRFN();
}'GOTO CERRX;

***
*** ERBCLR()
***
* CLEAR ERROR BUFFER



}'PROGRAM ERRSET;
}'INCLUDE STAB', SCMWF;
}'DECLARE OCTAL L'REGISTER;


FUNCTION ERBCLR();
}'NOERRP_ERBP_ERBC_0;
}'RETURN;


***
*** ERRSET(L)
***
* SET UP TO TRANSFER TO L ON ERRORS

FUNCTION ERRNIL();
}'RETURN;

FUNCTION ERRSET(LABEL L00);
}'CERRX_L00;
}'CERRX$FDSTK _ 1;
}'CERRX$FDUSTK _ 1;
}'.CLA; .STA L'REGISTER;
}'CERRX$FDNEWL _ L'REGISTER;
}'CERRFN_ERRNIL;
}'RETURN;

* SET UP LABEL TO GO TO ON QUIT.
FUNCTION QUIT'SET(LABEL L00);
}'QUITGO _ L00;
}'QUITGO$FDSTK _ 1;
}'QUITGO$FDUSTK _ 1;
}'.CLA; .STA L'REGISTER;
}'QUITGO$FDNEWL _ L'REGISTER;
}'RETURN;

***
*** SSELECT(T)
***
* SELECT AS CURRENT THE IB WHOSE TN IN THE GNT IS T
* IF T=0, SELECT THE GNT ITSELF
* RETURN NO VALUE
***
*** SSCB(T)
***
* SAME AS SSELECT, USING THE WINDOW NORMALLY RESERVED
* FOR THE FNT (FOR SSFGS AND INCLUDE PROCESSING)
***
*** SSELS(A)*
***
* SET UP THE SYMBOL AND TOKEN TABLES
* FOR THE IB AT ABSOLUTE ADDRESS A
***
*** SSELA(A)*
***
* PUT THE IB AT ABSOLUTE ADDRESS A INTO THE WINDOW



}'PROGRAM SSELECT;
}'INCLUDE STAB';

}'DECLARE POINTER A01,W01;
}'DECLARE INTEGER I01;

FUNCTION SSELECT(TN01);
}'W01_(ATWBA IF TN01=1 ELSE TWBA);
}'GOTO SSEL0;
ENTRY SSCB(TN01);
}'W01_ATWBA;
SSEL0: W01_GTWBA IF TN01=0;
}'RETURN IF TN01=ICGTN AND W01=ICWBA;
}'ICWBA_W01;
}'IF (ICGTN_TN01) DO;
}/SSELS(AGW);
}/SSPTR(TN01:,ICGSP);
}/SSELA(ICGSP.GSIBA);
}/ICTYPE_ICGSP.GSTYPE;
}/ICLCODE_ICGSP.GSLCODE;
}'ELSE DO;
}/SSELA(AGLOB);
}/ICTYPE_IBTGN;
}/ICLCODE_0;
}'ENDIF;
}'A01_ICBA;
}'ICRECOMP_A01.IBRECOMP;
}'ICTFL_A01.IBTFL;
}'ICLSU_A01.IBLSU;
}'ICNXW_A01.IBNXW;
}'ICFSTAT_A01.IBFSTAT;
}'ICLSTAT_A01.IBLSTAT;
}'SSELS(A01);
}'IF ICTYPE#IBTGN DO;
}/ICLBL_A01.IBLHEAD-IBOBT;
}/ICECODE_A01.IBECODE;
}/ICLLIT_A01.IBLLIT;
}/ICNEWL_ICGSP.GSNEWL;
}/ICBT_ARRDESC(A01+IBOBT,ICLBL,1,1);
}/ICCODE_ARRDESC(ICGSP.GSADDR,ICLCODE,1,0);
}'ELSE DO;
}/ICNEWL_ICLBL_ICECODE_ICLLIT_0;
}/ICBT_ICCODE_ARRDESC(0,0,1,1);
}'ENDIF;
}'ICFTYPE_A01.IBFTYPE;
}'ICHT_ARRDESC(A01+IBOHT,IBLHT,1,0);
}'RETURN;



}'PROGRAM SSELS;
}'INCLUDE STAB';


FUNCTION SSELS(POINTER P01);
}'ICLTT_P01.IBLTT;
}'ICLST_P01.IBSIZE-P01.IBLHEAD-ICLTT;
}'ICTT_ARRDESC(P01+P01.IBLHEAD,ICLTT,1,1);
}'ICST_ARRDESC(P01+P01.IBLHEAD+ICLTT,ICLST,1,1);
}'RETURN;



}'PROGRAM SSELA;
}'INCLUDE STAB';

}'DECLARE INTEGER B01,J01;

FUNCTION SSELA(AA01);
}'ICAA_AA01;
}'SMAP(B01_ICAA$VPA,RING,ICWBA);
}'ICBA_ICWBA+ICAA$VWA;
}'ICNPW_(ICAA+ICBA.IBSIZE-1)$VPA-B01+1;
}'SMAP(B01+J01,RING,ICWBA+J01@VPA) FOR J01_1 TO ICNPW-1;
}'RETURN;

***
*** SSFIND(A,M)
***
* LOOK UP SYMBOL IN CURRENT SYMBOL TABLE
* NAME IS FIRST M WORDS OF ARRAY A
* SET UP ICTOKEN IF FOUND & RETURN IT
* OTHERWISE SET TO 0 AND RETURN 0
***
*** SSINS(N)
***
* INSERT THE SYMBOL JUST LOOKED FOR UNSUCCESSFULLY
* ALLOCATE N EXTRA VALUE WORDS
* SET UP ICTOKEN & RETURN IT
* FATAL ERROR IF ICTOKEN#0 OR N#ICNXW



}'PROGRAM SSFIND;
}'INCLUDE STAB';

}'DECLARE INTEGER TN02,W02,I02;
}'DECLARE POINTER SP02,TP02,P02;
}'DECLARE INTEGER SI02,L02;

FUNCTION SSFIND(ARRAY A02,INTEGER M02);
}'SSFSYM_A02;}"SSFSIZE_M02;
}'SSFSIZE_SSFSIZE-1;
}'W02_SSFSYM[0];
}'SHCODE_W02 LCY 7 XOR W02+SSFSIZE;
}'SHCODE_(SHCODE+SHCODE LCY 5+SHCODE RCY 5) RSH 1 MOD IBLHT;
}'GOTO SSF0 IF (SHCHAIN_TN02_ICHT[SHCODE])=0;
SSF1:}"SSPTR(TN02:TP02,SP02);
}'IF SP02.SYLN=SSFSIZE AND SP02[SSNAME_SP02.SYSIZE-
}(SSFSIZE-1]=W02 DO;
}/P02_SP02+SSNAME;
}/GOTO SSF2 IF P02[I02]#SSFSYM[I02] FOR I02_1 TO SSFSIZE;
}/RETURN ICTOKEN_TN02;
}'ENDIF;
SSF2:}"GOTO SSF1 IF (TN02_SP02.SYHPTR)#0;
SSF0:}"RETURN ICTOKEN_0;

ENTRY SSINS(N02);
* ICTOKEN#0 ?
}'CERR(31) IF ICTOKEN;
* N#ICNXW ?
}'CERR(38) IF N02#ICNXW;
}'SI02_SGSYM(L02_N02+SSFSIZE+SYLE);
* GET A NEW TOKEN
}'IF ICTFL=0 DO;
}*SXPT(1);
}*CERR(200) IF ICTFL=0;
}*ENDIF;
}'ICTOKEN_TN02_ICTFL;
}'ICBA.IBTFL_ICTFL_ICTT[TN02];
}'ICTT[TN02]_1@TKSYM+TTUND@TKTYPE+SI02@TKSI;
}'SP02_STPTR(SI02);
}'BSET(SP02,0,SSNAME_N02+(SYLE-1));
}'BCOPY(SP02+SSNAME,@SSFSYM[0],SSFSIZE+1);
}'SP02.SYSIZE_L02;
}'SP02.SYLN_SSFSIZE;
}'SP02.SYHPTR_SHCHAIN;
}'ICHT[SHCODE]_TN02;
}'SP02.SYTN_TN02;
}'INSYMF_INSYMF+1;
}'RETURN TN02;

***
*** SGSYM(N)
***
* ACQUIRE N WORDS OF SYMBOL TABLE SPACE
* RETURN THE SYMBOL INDEX OF THE FIRST ONE



}'PROGRAM SGSYM;
}'INCLUDE STAB';


FUNCTION SGSYM(N04);
}'SXPS(N04) IF ICLST-ICLSU<N04;
}'ICBA.IBLSU_ICLSU_ICLSU+N04;
}'RETURN ICLSU-N04+1;


***
*** SGST(A)*
***
* ACQUIRE SPACE FOR AND COPY THE PPT AT A, RETURNING THE SI



}'PROGRAM SGSPT;
}'INCLUDE STAB';

}'DECLARE INTEGER SI05,N05;
}'DECLARE REFERENCE R05;

FUNCTION SGST(ARRAY A05);
}'R05_@A05[0];
}'N05_R05.PTSIZE;
}'R05.BTYPE_BTTEXT;
}'BCOPY(STPTR(SI05_SGSYM(N05)),R05,N05);
}'RETURN SI05;


***
*** SRSYM(N,S)
***
* FREE N WORDS OF THE CURRENT IB'S SYMBOL TABLE AT SI S
* RETURN NO VALUE



}'PROGRAM SRSYM;
}'INCLUDE STAB';


FUNCTION SRSYM(N12,SI12);
}'IF SI12+N12-1=ICLSU DO;
}/ICBA.IBLSU_ICLSU_ICLSU-N12;
}'ELSE DO;
}/BSET(@ICST[SI12],0,N12);
}'ENDIF;
}'RETURN;

***
*** SSPTR(T)
***
* RETURN A TOKEN TABLE POINTER AND A SYMBOL TABLE POINTER FOR
* THE SYMBOL WITH TN T IN THE CURRENT IB



}'PROGRAM SSPTR;
}'INCLUDE STAB';

}'DECLARE POINTER SP15,TP15;

FUNCTION SSPTR(TN15);
*****
* 5/6/73}"JACK FREEMAN
* THE FOLLOWING BOUNDS CHECK ON TN15 CAN BE REMOVED WHEN ABE TRAP
* HANDLING IS INSTALLED.
}'GOTO SSPT0 IF TN15<1 OR TN15>ICLTT;
*****
}'PUT'REF(TP15,ICTT,TN15,SSPT0);
}'SP15_STPTR(TP15.TKSI);
}'RETURN (TP15,SP15);
* (COME HERE ON ABE)
* ILLEGAL TN
SSPT0: CERR(174);


***
*** SSPTS(T)
***
* RETURN TOKEN AND SYMBOL POINTERS
* FOR TN T.}"FAIL IF TN T UNUSED.

ENTRY SSPTS(TN15), FRETURN;
*****
* 5/6/73}"JACK FREEMAN
* THE FOLLOWING BOUNDS CHECK ON TN15 CAN BE REMOVED WHEN ABE TRAP
* HANDLING IS INSTALLED.
}'GOTO SSPT0 IF TN15<1 OR TN15>ICLTT;
*****
}'PUT'REF(TP15,ICTT,TN15,SSPT0);
}'FRETURN IF TP15.TKFLAGS=0;
}'RETURN (TP15,STPTR(TP15.TKSI));


}'PROGRAM STPTR;
}'INCLUDE STAB';

}'DECLARE POINTER SP15X;

***
*** STPTR(S)
***
* RETURN POINTER TO WORD S OF CURRENT SYMBOL TABLE

FUNCTION STPTR(SI15);
*****
* 5/6/73}"JACK FREEMAN
* THE FOLLOWING BOUNDS CHECK ON SI15 CAN BE REMOVED WHEN ABE TRAP
* HANDLING IS INSTALLED.
}'GOTO STPT0 IF SI15<1 OR SI15>ICLST;
*****
}'PUT'REF(SP15X,ICST,SI15,STPT0);
}'RETURN SP15X;
* (COME HERE ON ABE)
* ILLEGAL SI
STPT0: CERR(176);

***
*** SNEXT(S)
***
* GET THE SI FOR THE PPT FOLLOWING THE ONE WITH SI S
***
*** SPREV(S)
***
* LIKE SNEXT, BUT PREVIOUS INSTEAD OF NEXT



}'PROGRAM SNEXT;
}'INCLUDE STAB';

}'DECLARE POINTER SSP15;

FUNCTION SNEXT(SS15);
}'SSP15_STPTR(SS15);
}'RETURN SSP15.PTFP;

ENTRY SPREV(SS15);
}'SSP15_STPTR(SS15);
}'RETURN SSP15.PTBP;

***
*** SSFGS(S,B,F)
***
* LOOK UP THE SYMBOL OR CONSTANT WITH TN S IN THE CURRENT IB
* IN THE IB WITH GNT TN B
* AND RETURN THE TN IN THAT IB, LEAVING IT SSELECTED
* INSERT IT IF F=1 AND IT IS MISSING
* RETURN 0 IF F=0 AND IT IS MISSING



}'PROGRAM SSFGS;
}'INCLUDE STAB';

}'DECLARE PARAMETER MAXCW_12;
}'DECLARE ARRAY S16[MAXCW];
}'DECLARE INTEGER N16,T16;
}'DECLARE POINTER TP16,SP16;

FUNCTION SSFGS(STN16,BTN16,F16);
}'SSPTR(STN16:TP16,SP16);
}'N16_SP16.SYLN+1;
}'HALT() IF N16>MAXCW;*** ***
}'BCOPY(@S16[0],SP16+SP16.SYSIZE-N16,N16);
}'SSCB(BTN16);
}'IF SSFIND(S16,N16)=0 AND F16#0 DO;
},SSINS(ICNXW);
}'ENDIF;
}'RETURN ICTOKEN;

***
*** SWSYM(T,S)
***
* WRITE THE SYMBOL DESIGNATED BY T ONTO THE STRING S
* FRETURN IF STRING TOO SHORT WITH SYMBOL PARTIALLY WRITTEN
* RETURN STRING NORMALLY
* IF T>0, T IS A TN IN THE CURRENT IB
* IF T<0, T IS A TN IN THE GNT



}'PROGRAM SWSYM;
}'INCLUDE STAB';

}'DECLARE INTEGER C28,I28;
}'DECLARE POINTER SP28,Q28;
}'DECLARE STRING SS28;

STRING FUNCTION SWSYM(TN28,STRING S28), FRETURN;
}'IF TN28>0 DO;
},SSPTR(TN28:,SP28);
}'ELSE DO;
},SSELS(AGW);
},SSPTR(-TN28:,SP28);
},SSELS(ICBA);
}'ENDIF;
}'Q28_SP28+SP28.SYSIZE-1;
}'I28_SP28.SYLN;
}'SETUP(SS28,4*(I28+1),Q28-I28,6);
}'SS28$WP_SS28$EP;
}'WCI(C28,S28//FRETURN) WHILE C28_GCI(SS28//SWS1);
SWS1:}"RETURN S28;

***
*** SWEA(I,F,S)
***
* WRITE THE EDITOR ADDRESS FOR THE STATEMENT WITH LOCAL SI S
* ON THE STRING S; ONLY WRITE THE BLOCK NAME IF F=0
* FAIL IF THE STRING IS TOO SHORT, RETURN THE STRING NORMALLY



}'PROGRAM SWEA;
}'INCLUDE STAB';

}'DECLARE INTEGER TN33,LN33;

STRING FUNCTION SWEA(SI33,F33,STRING S33), FRETURN;
}'IF F33=0 DO;
},WCI('<',S33//FRETURN);
},S33_SWSYM(-ICGTN,S33//FRETURN);
},WCI('>',S33//FRETURN);
}'ENDIF;
}'ZEDSA(SI33:TN33,LN33//FRETURN);
}'IF TN33 DO;
},S33_SWSYM(TN33,S33//FRETURN);
},WCI('+',S33//FRETURN) IF LN33;
}'ELSE DO;
},WCI('#',S33//FRETURN);
}'ENDIF;
}'S33_FCNS(LN33,S33,0,10//FRETURN) IF LN33;
}'RETURN S33;

***
*** SGNEXT(N)
***
* RETURN THE GLOBAL TN OF THE BLOCK FOLLOWING N,
* FAIL IF NONE



}'PROGRAM SGNEXT;
}'INCLUDE STAB';

}'DECLARE POINTER DP34;

FUNCTION SGNEXT(TN34), FRETURN;
}'DP34_ICGSP IF TN34=ICGTN ELSE (SSELECT(0) &
}(SSPTS(TN34:,DP34//SGNX1));
}'RETURN TN34 IF TN34_DP34.GSORD ELSE FRETURN;
* ILLEGAL TN IN SGNEXT
SGNX1: CERR(164);


***
*** SGPREV(N)
***
* RETURN THE GLOBAL TN OF THE BLOCK PRECEDING N,
* FAIL IF NONE



}'PROGRAM SGPREV;
}'INCLUDE STAB';

}'DECLARE INTEGER TL35,TS35;

FUNCTION SGPREV(TN35), FRETURN;
}'SSELECT(0);
}'FRETURN IF TN35=(TL35_ICFSTAT);
}'TL35_TS35 WHILE (TS35_SGNEXT(TL35//SGPR1))#TN35;
}'RETURN TL35;
* TN NOT ON GSORD CHAIN
SGPR1: CERR(165);

***
*** UPTR(A,F)
***
* COMPUTE WINDOW POINTER TO ADDRESS A IN USER AREA, FILE F



}'PROGRAM UPTR;
}'INCLUDE STAB';

}'DECLARE INTEGER VP30,I30,T30,J30;

FUNCTION UPTR(POINTER A30,INTEGER F30);
}'RETURN ULBA+A30$VWA IF (VP30_A30$VPA)=ULVP AND F30=ULFN;
}'ULVP_VP30;
}'ULFN_F30;
}'UPCTR_UPCTR+1;
}'FOR I30_NUPW-1 BY -1 TO 0 DO;
UPTR1:}&RETURN (A30$VWA+(ULBA_UWBA+I30@VPA WHERE
}*UPTTAB[I30]_UPCTR)) IF UPPTAB[I30]=VP30
}*AND UPFTAB[I30]=F30;
}'ENDFOR;
}'T30_4B7-1;
}'FOR J30_NUPW-1 BY -1 TO 0 DO;
},(T30_UPTTAB[J30] & I30_J30) IF UPTTAB[J30]<T30;
}'ENDFOR;
}'SCPG(VP30,-1);
}'SMAP(VP30,-1,UWBA+I30@VPA);
}'UPPTAB[I30]_VP30;
}'UPFTAB[I30]_F30;
}'GOTO UPTR1;

***
*** GET(A)
***
* GET CONTENTS OF USER CELL A
***
*** PUT(A,W)
***
* PUT W INTO USER CELL A



}'PROGRAM GET;
}'INCLUDE STAB';

}'DECLARE POINTER P30;

FUNCTION GET(POINTER U30);
}'P30_UPTR(U30,-1);
}'RETURN CONTENTS(P30);

ENTRY PUT(U30,W30);
}'P30_UPTR(U30,-1);
}'RETURN CONTENTS(P30)_W30;

***
*** COMMAND(S,A,F)
***
* LOOK UP THE COMMAND ON THE FRONT OF THE STRING S
* IN THE STRING ARRAY A
* FRETURN IF THE STRING DOES NOT MATCH
* RETURN PARTIALLY READ STRING, PREFIX, AND INDEX
* F=1 FOR EXPERT MODE, F=0 FOR BEGINNER MODE



}'PROGRAM COMMAND;
}'INCLUDE STAB';

}'DECLARE INTEGER COWRD,COCHR,COIDX,COBUF,CONCH,COJDX,COLEN;
}'DECLARE STRING COSTR,CORS;
}'DECLARE ARRAY COIT, STRING ARRAY COTAB=COIT;
*}&KLUDGE FOR ARRAY SIZE

STRING FUNCTION COMMAND(STRING COS,STRING ARRAY COTAB,INTEGER COEXP), FRETURN;
}'COLEN_ARRAYSIZE(COIT)-1;
}'COWRD_COIDX_CONCH_0;
COM1:}"COCHR_GCI(COS//FRETURN);
}'CONCH_CONCH+8;
}'COWRD_COWRD+COCHR RCY CONCH;
}'COJDX_-1;
}'FOR COIDX_COIDX TO COLEN DO;
},SDCOPY(COSTR,COTAB[COIDX]);
},GOTO COM2 IF LENGTH(COSTR)=0;
},GOTO COM2 IF GCI(COSTR//COM2)#COBUF RSH 16
}*FOR COBUF_COWRD,COBUF LSH 8 WHILE COBUF;
* CHECK FOR FIRST OR SECOND MATCH
},(GOTO COM1 WHERE COIDX_COJDX) IF COJDX>=0;
},COJDX_COIDX;
},SDCOPY(CORS,COSTR);
COM2:}"ENDFOR;
}'FRETURN IF COJDX<0 ELSE GOTO COM3 IF COEXP;
* VERIFY REMAINDER OF COMMAND FOR BEGINNER MODE
COM4:}"COBUF_GCI(CORS//COM3);
}'COCHR_GCI(COS//COMX);
}'GOTO COM4 IF COBUF=COCHR ELSE GOTO COM3 IF COCHR=' '
}#ELSE FRETURN IF COCHR>='A' AND COCHR<='Z' OR
}#COCHR>='0' AND COCHR<='9' ELSE GOTO COM5;
* SKIP FOLLOWING BLANKS
COM3:}"GOTO COM3 IF (COCHR_GCI(COS//COMX))=' ';
COM5:}"WCD(COCHR,COS);
COMX:}"RETURN (COS,COWRD LCY CONCH,COJDX);

***
*** FIOUT(N,F,W,R)
***
* OUTPUT N TO FILE F, WIDTH W, RADIX R - LIKE CNS



}'PROGRAM FIOUT;
}'INCLUDE STAB';

}'DECLARE STRING FIOS(10);

FUNCTION FIOUT(FION,FIOF,FIOW,FIOR);
}'SETS(FIOS,0,0);
}'FIOS_FCNS(FION,FIOS,FIOW,FIOR//FTLERR);
}'CSOUT(FIOS) IF FIOF=-1 ELSE FSOUT(FIOS,FIOF);
}'RETURN;

***
*** FFMTO(S,F)
***
* PREPARE FOR OUTPUT ACCORDING TO THE FORMAT S ON FILE F
* *=DECIMAL INTEGER, /=NEW LINE, '=NEXT CHAR LITERALLY,
* #=OCTAL INTEGER, @=SYMBOL (USING SWSYM), OTHER=LITERAL
***
*** FMTO(S)
***
* FFMTO TO TELETYPE
***
*** OUT(X)
***
* TRANSMIT NEXT QUANTITY



}'PROGRAM FFMTO;
}'INCLUDE STAB';

}'DECLARE INTEGER FMTX,FMTC;
}'DECLARE STRING FMTWS(SYMAXCN);
}'DECLARE LABEL ARRAY FMTSW[3]_(FMTIN,FMTSY,FMTIN);

FUNCTION FFMTO(STRING FMTSS,INTEGER FMTF);
FMT0:}"SDCOPY(FOSTR,FMTSS);
}'FOFILE_FMTF;
FMT1:}"FMTC_GCI(FOSTR//RETURN);
}'IF FMTC='/' DO;
},COUT('&/',FOFILE);
}'ELSEIF FMTC='&'' DO;
},COUT(GCI(FOSTR),FOFILE);
}'ELSEIF FMTC='*' OR FMTC='#' DO;
},FOSWI_(0 IF FMTC='#' ELSE 2);
},RETURN;
FMTIN:}&FIOUT(FMTX,FOFILE,4B7 IF FMTX<-4B4 ELSE 0,8+FOSWI);
}'ELSEIF FMTC='@' DO;
},FOSWI_1;
},RETURN;
FMTSY:}&SETS(FMTWS,0,0);
},FSOUT(SWSYM(FMTX,FMTWS//FTLERR),FOFILE);
}'ELSEIF FMTC<100B DO;
},COUT(FMTC,FOFILE);
}'ENDIF;
}'GOTO FMT1;

ENTRY FMTO(STRING FMTSS);
}'FMTF_-1;
}'GOTO FMT0;

ENTRY OUT(FMTX);
}'GOTO LABEL'FIXER(FMTSW[FOSWI]);

***
*** ZNEWIB(N,T,M)
***
* CREATE A NEW INFORMATION BLOCK OF TYPE T WITH GNT TN N
* INSERT IT BEFORE THE ONE WITH TN M,
* OR AS LAST IF M=0, OR NOT ON CHAIN IF M=-1
* MAKE IT CURRENT AND RETURN NO VALUE



}'PROGRAM ZNEWIB;
}'INCLUDE STAB',SCMWF;

}'DECLARE POINTER A06,P06,BA06;
}'DECLARE INTEGER AA06,C06;

FUNCTION ZNEWIB(TN06,T06,TC06);
}'AA06_STGET(IBLE+21);
}'BA06_(TWBA IF TN06 ELSE GTWBA);
}'SMAP(AA06$VPA,RING,BA06);
}'SMAP(AA06$VPA+1,RING,BA06+1@VPA)
}#IF (AA06+IBLE+20)$VPA#AA06$VPA;
}'A06_BA06+AA06$VWA;
}'BSET(A06,0,IBLE+21);
}'A06.IBSIZE_IBLE+21;
}'A06.IBLHEAD_IBLE;
}'A06.IBLTT_1;
}'A06.IBTFL_1;
}'A06.IBGTN_TN06;
}'ICGTN_-1;
}'IF TN06=0 DO;
* GNT ALREADY EXISTS ?
}/CERR(78) IF AA06#TABBOT;
}/A06.IBNXW_GSLE;
}'ELSE DO;
}/A06.IBNXW_FSLE IF TN06=1;
}/SSELECT(0);
}/SSPTR(TN06:,P06);
* GSIBA#0 ?
}/CERR(32) IF P06.GSIBA;
* CODE AREA FULL ?
}/CERR(52) IF CODETOP>=CODELIM;
}/P06.GSIBA_AA06;
}/P06.GSADDR_CODETOP;
}/P06.GSLCODE_1;
}/CODETOP_CODETOP+1;
}/P06.GSTYPE_T06;
}/P06.GSNEWL_1@FWCLL+1@FWSTK;
}/IF TC06=-1 DO;
}/ELSEIF ICFSTAT=0 DO;
}2ICBA.IBFSTAT_TN06;
}2ICBA.IBLSTAT_TN06;
}/ELSE DO;
}2IF TC06=0 DO;
}5C06_ICLSTAT;
}5ICBA.IBLSTAT_TN06;
}2ELSE DO;
}5C06_SGPREV(TC06//FTLERR);
}2ENDIF;
}2SSPTR(C06:,P06);
}2P06.GSORD_TN06;
}2SSPTR(TN06:,P06);
}2P06.GSORD_TC06;
}/ENDIF;
}'ENDIF;
}'SSELECT(TN06);
}'RETURN;

***
*** SXPT(M)*
***
* EXPAND THE TOKEN TABLE OF THE CURRENT IB BY AT LEAST M



}'PROGRAM SXPT;
}'INCLUDE STAB';

}'DECLARE INTEGER I03,K03,L03;
}'DECLARE POINTER P03;

FUNCTION SXPT(M03);
}'K03_SEXP(M03,ICLTT+20);
}'K03_L03 IF K03>20 AND (L03_ICLST RSH 2)<K03 AND ICLST>K03;
}'K03_TNLIM-ICLTT IF K03+ICLTT>TNLIM;
}'P03_@ICST[1];
}'BCOPY(P03+K03,P03,ICLSU);
}'ICBA.IBLTT_ICLTT_(L03_ICLTT)+K03;
}'SSELS(ICBA);
}'ICTT[I03]_I03+1 FOR I03_L03+1 TO ICLTT;
}'ICTT[ICLTT]_ICTFL;
}'ICBA.IBTFL_ICTFL_L03+1;
}'RETURN;


***
*** SXPS(M)*
***
* EXPAND THE SYMBOL TABLE OF THE CURRENT IB BY AT LEAST M



}'PROGRAM SXPS;
}'INCLUDE STAB';

}'DECLARE INTEGER K04;

FUNCTION SXPS(M04);
}'K04_SEXP(M04,ICLST+20);
}'SRSYM(K04,ICLST-K04+1);
}'RETURN;

***
*** SEXP(N,K)*
***
* EXPAND THE CURRENT IB BY AT LEAST N WORDS
* USE MAX(N,K*XPANFAC/100) AS COUNT
* RETURN THE ACTUAL AMOUNT OF EXPANSION



}'PROGRAM SEXP;
}'INCLUDE STAB';

}'DECLARE INTEGER I11,E11,TN11;
}'DECLARE POINTER P11,SP11,Q11,B11,R11;

FUNCTION SEXP(N11,K11);
}'N11_I11 IF (I11_K11*XPANFAC/100)>N11;
}'IF (P11_Q11_ICAA+ICBA.IBSIZE)=TABTOP DO;
}*STGET(N11);
}'ELSE DO;
}*TN11_ICGTN;
}*ICWBA_TWBA;
}*WHILE Q11<TABTOP AND Q11-P11<N11 DO;
}-SSELA(Q11);
}-Q11_Q11+ICBA.IBSIZE;
}*ENDFOR;
}*B11_(STGET(N11_Q11-P11) IF Q11-P11>=N11
}*ELSE (P11+N11 WHERE STGET(N11)));
}*R11_P11;
}*WHILE R11<Q11 DO;
}-SSELA(R11);
}-SSELS(AGW);
}-SSPTR(ICBA.IBGTN:,SP11);
}-SP11.GSIBA_SP11.GSIBA+B11-P11;
}-R11_R11+ICBA.IBSIZE;
}*ENDFOR;
}*WMOVE(B11,P11,Q11-P11);
}*ICGTN_-1;
}*SSELECT(TN11);
}'ENDIF;
}'ICBA.IBSIZE_ICBA.IBSIZE+N11;
}'IF (E11_(ICAA+ICBA.IBSIZE-1)$VPA-ICAA$VPA+1)>ICNPW DO;
}*SMAP(I11+ICAA$VPA,RING,ICWBA+I11@VPA)
}+FOR I11_ICNPW TO E11-1;
}*ICNPW_E11;
}'ENDIF;
}'SSELS(ICBA);
}'RETURN N11;


***
*** STGET(N)
***
* ACQUIRE N WORDS AT TABTOP, UPDATE IT, AND RETURN THE OLD TABTOP
* ERROR IF TABLE SPACE EXCEEDED



}'PROGRAM STGET;
}'INCLUDE STAB';

}'DECLARE INTEGER A17;

FUNCTION STGET(N17);
}'IF TABTOP+N17<=TABLIM DO;
},A17_TABTOP;
},WHILE TABTOP$VPA<(TABTOP+N17)$VPA DO;
}1TABTOP_TABTOP+1@VPA;
}1SCPG(TABTOP$VPA,RING);
}1N17_N17-1@VPA;
},ENDFOR;
},TABTOP_TABTOP+N17;
},RETURN A17;
}'ELSE DO;
* TABLE SPACE EXHAUSTED
},CERR(35);
}'ENDIF;

***
*** SBCLEAR()
***
* CLEAR THE BLOCK LIST OF THE CURRENT FUNCTION
* RETURN NO VALUE
***
*** SBFI(T)
***
* LOOK UP, AND INSERT IF NECESSARY, GNT TN T IN THE
* BLOCK LIST OF THE CURRENT FUNCTION
* RETURN THE INDEX OF THE ENTRY IN THE BLOCK LIST



}'PROGRAM SBCLEAR;
}'INCLUDE STAB';

}'DECLARE INTEGER I08,J08;
}'DECLARE POINTER P08;

FUNCTION SBCLEAR();
}'BSET(@ICBT[1],0,ICLBL);
}'RETURN;

ENTRY SBFI(TN08);
SBF1:}"J08_0;
}'FOR I08_1 TO ICLBL DO;
}/RETURN I08 IF ICBT[I08]=TN08
}*ELSE J08_I08 IF J08=0 AND ICBT[I08]=0;
}'ENDFOR;
}'(ICBT[J08]_TN08 & RETURN J08) IF J08;
}'SGSYM(1);
}'SGSYM(-1);
}'P08_@ICTT[1];
}'BCOPY(P08+1,P08,ICLTT+ICLSU);
}'$P08_0;
}'ICBA.IBLHEAD_ICBA.IBLHEAD+1;
}'I08_ICGTN;
}'ICGTN_-1;
}'SSELECT(I08);
}'GOTO SBF1;

***
*** STDEL(S1,S2)
***
* DELETE ALL STATEMENTS FROM THE ONE WITH SI S1
* THROUGH THE ONE WITH SI S2
* FRETURN IF S2 PRECEDED S1, RETURN IF ALL WAS WELL
* ** ONLY TO BE USED FOR DIRECT STATEMENTS **



}'PROGRAM STDEL;
}'INCLUDE STAB';

}'DECLARE INTEGER I310,R310;

FUNCTION STDEL(I110,I210), FRETURN;
}'I310_SNEXT(I210);
}'R310_ICRECOMP;
}'ICRECOMP_1;* TO FOOL STDI
}'STUI(I110,I210//FRETURN);
}'STDC(I110,I210,I310);
}'STDI(I110,I210);
}'ICRECOMP_R310;
}'RETURN;

***
*** STUI(S1,S2)*
***
* UNHOOK THE STATEMENTS WITH SI'S S1 THROUGH S2
* FROM THE CURRENT IB
* FRETURN IF S2 PRECEDED S1
* RETURN NUMBER OF LINES UNHOOKED IF ALL WAS WELL
* UPDATE NUMBER OF LINES IN GNT
***
*** STDI(S1,S2)*
***
* DELETE THE STATEMENTS WITH SI'S S1 THROUGH S2,
* WHICH ARE ASSUMED TO BE UNHOOKED
* UPDATE BREAKPOINT AND RECOMPILATION INFORMATION



}'PROGRAM STUI;
}'INCLUDE STAB';

}'DECLARE INTEGER SJ10,S110,S210,NL10;
}'DECLARE POINTER SP110,SP210,P10;

FUNCTION STUI(SI110,SI210), FRETURN;
}'SJ10_SI110;
}'WHILE SJ10#0 AND SJ10#SI210 DO;
},SJ10_SNEXT(SJ10);
}'ENDFOR;
}'FRETURN IF SJ10=0;
}'SP110_STPTR(SI110);
}'S110_SP110.PTBP;
}'SP110.PTBP_0;
}'SP210_STPTR(SI210);
}'S210_SP210.PTFP;
}'SP210.PTFP_0;
}'IF S110 DO;
}/SP110_STPTR(S110);
}/SP110.PTFP_S210;
}'ELSE DO;
}/ICBA.IBFSTAT_ICFSTAT_S210;
}'ENDIF;
}'IF S210 DO;
}/SP210_STPTR(S210);
}/SP210.PTBP_S110;
}'ELSE DO;
}/ICBA.IBLSTAT_ICLSTAT_S110;
}'ENDIF;
}'NL10_0;
}'NL10_NL10+1 FOR SJ10_SI110, SNEXT(SJ10) WHILE SJ10;
}'ICGSP.GSNL_ICGSP.GSNL-NL10;
}'RETURN NL10;



}'PROGRAM STDI;
}'INCLUDE STAB';

}'DECLARE INTEGER SK10;
}'DECLARE POINTER SQ10;

FUNCTION STDI(SJ110,SJ210);
STD1:}"SQ10_STPTR(SJ110);
}'SJ110_SNEXT(SK10_SJ110);
}'IF SQ10.PTBKF DO;
}+IF ICGSP.GSBMF = 1 DO;
}/CERR(33) IF ICGSP.GSBKSI # SK10;* "GSBKSI WRONG"
}/ICGSP.GSBMF _ 0;
}/ICGSP.GSBKCT _ 0;
}+ELSE DO;
}/ICGSP.GSBKCT _ ICGSP.GSBKCT - 1 IF ICGSP.GSBKCT > 0;
}+ENDIF;
}'ENDIF;
}'DBKSI_0 IF ICGTN=DBKTN AND SK10=DBKSI;
}'BRKSI_0 IF ICGTN=BRKTN AND SK10=BRKSI;
}'SRSYM(SQ10.PTSIZE, SK10);
}'GOTO STD1 IF SK10#SJ210;
}'IF ICRECOMP=0 DO;
},ICGSP.GSRECOMP_ICBA.IBRECOMP_ICRECOMP_RECOMPILE_1;
}'ENDIF;
}'RETURN;

***
*** STINS(S,P)
***
* INSERT THE STATEMENT AT ADDRESS P BEFORE THE ONE WITH SI S
* IF S=0, APPEND AT THE END
* RETURN THE SI OF THE STATEMENT
***
*** STII(S1,S2,S)*
***
* INSERT THE INTERVAL GIVEN BY SI'S S1,S2
* BEFORE THE ONE WITH SI S AS FOR STINS



}'PROGRAM STINS;
}'INCLUDE STAB';

}'DECLARE INTEGER SY09;

FUNCTION STINS(SI09,ARRAY A09);
* SPECIAL ENTRY FOR PREPROCESSOR
ENTRY PSTINS(SI09,A09);
}'SY09_SGST(A09);
}'STII(SY09,SY09,SI09);
}'RETURN SY09;



}'PROGRAM STII;
}'INCLUDE STAB';

}'DECLARE INTEGER J09;
}'DECLARE POINTER SP09,SQ09,SR09;

FUNCTION STII(SJ09,SK09,I09);
}'SQ09_STPTR(SJ09);
}'SR09_STPTR(SK09);
}'IF ICLSTAT=0 DO;
}/ICBA.IBLSTAT_ICLSTAT_SK09;
}/ICBA.IBFSTAT_ICFSTAT_SJ09;
}'ELSEIF I09=0 DO;
}/SP09_STPTR(ICLSTAT);
}/SQ09.PTBP_ICLSTAT;
}/SP09.PTFP_SJ09;
}/ICBA.IBLSTAT_ICLSTAT_SK09;
}'ELSE DO;
}/SP09_STPTR(I09);
}/SR09.PTFP_I09;
}/SQ09.PTBP_J09_SP09.PTBP;
}/SP09.PTBP_SK09;
}/(SP09.PTFP_SJ09 WHERE SP09_STPTR(J09))
}*IF J09 ELSE ICBA.IBFSTAT_ICFSTAT_SJ09;
}'ENDIF;
}'IF ICRECOMP=0 DO;
}/ICGSP.GSRECOMP_ICRECOMP_RECOMPILE_1;
}'ENDIF;
}'SK09_SR09.PTFP;
}'WHILE SJ09#SK09 DO;
}/SQ09_STPTR(SJ09);
}/SQ09.PTRECOMP_1 IF ICRECOMP=0;
}/ICGSP.GSNL_ICGSP.GSNL+1;
}/SJ09_SQ09.PTFP;
}'ENDFOR;
}'RETURN;

***
*** SUDEL()
***
* DELETE THE UNHOOKED INTERVAL



}'PROGRAM SUDEL;
}'INCLUDE STAB';

}'DECLARE INTEGER FTN19;

FUNCTION SUDEL();
}'IF EDUTN DO;
},FTN19_ICGTN;
},SSELECT(EDUTN);
},STDC(EDUSI1,EDUSI2,EDUSI3);
},STDI(EDUSI1,EDUSI2);
},EDUTN_EDUSI1_EDUSI2_EDUSI3_0;
},SSELECT(FTN19);
}'ENDIF;
}'EDITN_EDISI1_EDISI2_0;
}'RETURN;

***
*** SUINS()
***
* RE-INSERT THE UNHOOKED INTERVAL
* IN THE IB WITH GNT TN EDUTN; ERROR IF EDUTN=0



}'PROGRAM SUINS;
}'INCLUDE STAB';

}'DECLARE INTEGER FTN20;

FUNCTION SUINS();
* NO UNHOOKED INTERVAL ?
}'CERR(88) IF EDUTN=0;
}'FTN20_ICGTN;
}'SSELECT(EDUTN);
}'STII(EDUSI1,EDUSI2,EDUSI3);
}'EDITN_EDISI1_EDISI2_EDUSI3_EDUTN_EDUSI1_EDUSI2_0;
}'SSELECT(FTN20);
}'RETURN;

***
*** SUNHOOK(S1,S2)
***
* UNHOOK THE STATEMENTS S1 THROUGH S2 IN THE CURRENT IB
* PUT THE IB'S GNT TN IN EDUTN AND S1,S2 IN EDUSI1,EDUSI2
* PUT SUCCESSOR OF S2 IN EDUSI3
* ERROR IF THERE IS ALREADY AN UNHOOKED INTERVAL
* FRETURN IF THE STATEMENTS WERE OUT OF ORDER
* RETURN NUMBER OF LINES NORMALLY



}'PROGRAM SUNHOOK;
}'INCLUDE STAB';

}'DECLARE INTEGER NL21;

FUNCTION SUNHOOK(SI121,SI221), FRETURN;
* EDUTN#0 ?
}'CERR(89) IF EDUTN#0;
}'EDUSI3_SNEXT(SI221);
}'NL21_STUI(SI121,SI221//FRETURN);
}'EDUTN_ICGTN;
}'EDUSI1_SI121;
}'EDUSI2_SI221;
}'RETURN NL21;

***
*** SRING(N)
***
* SELECT RING N, AND ITS GNT
* ERROR IF RING DOES NOT EXIST



}'PROGRAM SRING;
}'INCLUDE STAB';

}'DECLARE INTEGER I24,C24;

FUNCTION SRING(N24);
* RING DOES NOT EXIST ?
}'CERR(179) IF N24>=0 AND REXISTS[N24]=0;
SRG0:}"GOTO SRG1 IF RING=N24;
}'BCOPY(VARA,BRVARS,NRVARS) IF RING>=0;
}'IF N24>=0 DO;
SRG2:}'RING_N24;
},REXISTS[N24]_1;
},C24_SGNP(-1,RING);
},FOR I24_TABBOT$VPA-1 BY -1 TO 0 DO;
}1SCPG(I24,RING) IF C24=-1;
}1SMAP(I24,RING,VARA+I24@VPA);
},ENDFOR;
},SCPG(TABBOT$VPA,RING);
},BCOPY(BRVARS,VARA,NRVARS);
},ICGTN_-1;
SRG1:}'IF TABTOP>TABBOT DO;
}1SMAP(AGLOB$VPA,RING,GTWBA);
}1SMAP(AGLOB$VPA+I24,RING,GTWBA+I24@VPA)
}/FOR I24_(AGLOB$VWA+AGW.IBSIZE-1)$VPA BY -1 TO 1;
}1SSELECT(0);
},ENDIF;
}'ENDIF;
}'RETURN;


***
*** SLRING(N)
***
* LOAD THE VARIABLES FOR RING N
* ** USE WITH CARE **

ENTRY SLRING(N24);
}'GOTO SRG2;


***
*** SARING(N)
***
* SAME AS SRING, BUT WILL CREATE A NEW RING

ENTRY SARING(N24);
}'GOTO SRG0;

***
*** STDC(S1,S2,S3)*
***
* DELETE THE CODE FOR STATEMENTS WITH SI'S S1 THROUGH S2
* THE INTERVAL IS ASSUMED TO BE UNHOOKED,
* WITH S3 BEING THE OLD SUCCESSOR OF S2



}'PROGRAM STDC;
}'INCLUDE STAB',SGDEC;

}'DECLARE INTEGER R25,SI25,B25, GARBAGE;
}'DECLARE POINTER C125,C225,SP25,P25;

FUNCTION STDC(S125,S225,S325);
}'RETURN IF S325=0 OR ICTYPE#IBTFN;
}'SFCA(S325,ICFSTAT,P25_ICLLIT+@ICCODE[0]:C125,B25);
}'SFCA(0,S125,C125:C225,GARBAGE);
}'IF S325=0 DO;
},IF B25=0 DO;
}1ICBA.IBECODE_ICECODE_C125-P25;
},ENDIF;
},RETURN;
}'ELSEIF (SP25.PTCOS#0 WHERE SP25_STPTR(S325)) DO;
},R25_GET(C225)$INSSRD+C225-C125;
}'ELSE DO;
},R25_C225-C125;
},RETURN IF R25=0;
},SP25.PTCOS_1;
}'ENDIF;
}'PUT(C125, ZBRU@INSOP+RQ(R25));
}'RETURN;

***
*** SFCA(T,S,C)*
***
* FIND THE ADDRESS OF THE CODE FOR THE STATEMENT WITH SI T
* GIVEN THAT C IS THE CODE ADDRESS FOR THE STATEMENT WITH SI S
* RETURN THE ADDRESS, AND A FLAG INDICATING WHETHER
* THERE WERE ANY PATCHES IN THE CODE
* ** S MUST EQUAL OR PRECEDE T **



}'PROGRAM SFCA;
}'INCLUDE STAB',SCMWF;

}'DECLARE POINTER SP26;
}'DECLARE INTEGER B26;

FUNCTION SFCA(SJ26,SI26,POINTER C26);
}'B26_0;
}'WHILE SI26#SJ26 DO;
},SP26_STPTR(SI26);
},SI26_SP26.PTFP;
},IF SP26.PTCOS DO;
}1B26_1;
}1C26_C26+GET(C26)$INSSRD;
},ENDIF;
},C26_C26+SP26.PTLCODE;
}'ENDFOR;
}'RETURN (C26,B26);

***
*** SDMAC(T,R)
***
* DEFINE THE SYMBOL T AS A MACRO WITH PPT AT
* CORE ADDRESS R (PUT IN THE IB)



}'PROGRAM SDMAC;
}'INCLUDE STAB';

}'DECLARE INTEGER SI18;
}'DECLARE POINTER P18,TP18,SP18;

FUNCTION SDMAC(TN18,ARRAY R18);
}'SI18_SGST(R18);
}'P18_STPTR(SI18);
}'SSPTR(TN18:TP18,SP18);
}'TP18.TKTYPE_TTMAC;
}'SP18.SYVAL_SI18;
}'P18.PTBP_-1;
}'P18.PTFP_TN18;
}'RETURN;

***
*** SFIN(N)
***
* CLEAN UP THE CURRENT IB
* LEAVING NO MORE THAN N% UNUSED SPACE



}'PROGRAM SFIN;
}'INCLUDE STAB';

}'DECLARE INTEGER L22;

FUNCTION SFIN(N22);
}'L22_ICLSU+ICLSU*N22/100-ICLST;
}'IF L22<0 AND ICAA+ICBA.IBSIZE=TABTOP DO;
}*STGET(L22);
}*ICBA.IBSIZE_ICBA.IBSIZE+L22;
}*SSELS(ICBA);
}'ENDIF;
}'RETURN;

***
*** BMOVE(D,S,N,F)*
***
* MOVE N WORDS FROM S TO D, BREAKING UP THE TRANSFER
* INTO PIECES WHICH DO NOT CROSS A PAGE BOUNDARY.
* CALL F(D',S',N') FOR EACH PIECE



}'PROGRAM BMOVE;
}'INCLUDE STAB';

}'DECLARE INTEGER F31,K31,NS31,ND31;

FUNCTION BMOVE(MD31,MS31,N31,FUNCTN FN31);
}'IF MD31<MS31 OR MD31>=MS31+N31 DO;
},F31_0;
}'ELSE DO;
},F31_-1;
},MD31_MD31+N31;
},MS31_MS31+N31;
}'ENDIF;
BM1:}#RETURN IF N31=0;
}'K31_N31;
}'IF F31=0 DO;
},NS31_1@VPA-MS31$VWA;
},ND31_1@VPA-MD31$VWA;
}'ELSE DO;
},NS31_1+(MS31-1)$VWA;
},ND31_1+(MD31-1)$VWA;
}'ENDIF;
}'K31_NS31 IF K31>NS31;
}'K31_ND31 IF K31>ND31;
}'IF F31=0 DO;
},FN31(MD31,MS31,K31);
},MS31_MS31+K31;
},MD31_MD31+K31;
}'ELSE DO;
},FN31(MD31_MD31-K31,MS31_MS31-K31,K31);
}'ENDIF;
}'N31_N31-K31;
}'GOTO BM1;


***
*** UMOVE(D,S,N)
***
* MOVE N WORDS FROM S TO D IN THE USER AREA



}'PROGRAM UMBLK;
}'INCLUDE STAB';


FUNCTION UMBLK(TD31A,TS31A,M31A);
}'BCOPY(UPTR(TD31A,-1),UPTR(TS31A,-1),M31A);
}'RETURN;

FUNCTION UMOVE(MD31A,MS31A,N31A);
}'BMOVE(MD31A,MS31A,N31A,UMBLK);
}'RETURN;


***
*** UCLEAR(D,C,N)
***
* CLEAR N WORDS AT D TO C IN THE USER AREA



}'PROGRAM UCBLK;
}'INCLUDE STAB';


FUNCTION UCBLK(TD31B,TS31B,M31B);
}'BSET(UPTR(TD31B,-1),CCONST,M31B);
}'RETURN;

FUNCTION UCLEAR(MD31B,C31B,N31B);
}'CCONST_C31B;
}'BMOVE(MD31B,MD31B,N31B,UCBLK);
}'RETURN;


***
*** WMOVE(D,S,N)
***
* MOVE N WORDS FROM S TO D IN THE CURRENT IB



}'PROGRAM WMBLK;
}'INCLUDE STAB';

}'DECLARE INTEGER I32;

FUNCTION WMBLK(TD32,TS32,M32);
}'I32_(1@VPA IF (TD32 E' TS32)$VPA ELSE 0);
}'SMAP(TD32$VPA,RING,ICWBA);
}'SMAP(TS32$VPA,RING,ICWBA+I32);
}'BCOPY(ICWBA+TD32$VWA,ICWBA+I32+TS32$VWA,M32);
}'RETURN;

FUNCTION WMOVE(MD32,MS32,N32);
}'BMOVE(MD32,MS32,N32,WMBLK);
}'SMAP(ICAA$VPA,RING,ICWBA);
}'SMAP(ICAA$VPA+1 IF ICNPW>1 ELSE -1,RING,ICWBA+1@VPA);
}'RETURN;

***
*** CPERR(S,T,F)
***
* PRINT THE STATEMENT WITH SI S WHICH JUST CAUSED A COMPILER ERROR
* BREAKING IT AT THE TOKEN WHOSE INDEX IS T
* IF T<0, BREAK AT CHARACTER (N' T)
* ONLY PRINT THE BLOCK NAME IF F=0, THE STATEMENT IF F>=0



}'PROGRAM CPERR;
}'INCLUDE STAB';

}'DECLARE INTEGER I29,W29;
}'DECLARE STRING LF29_"&J",FN29(2*SYMAXCN+12);

FUNCTION CPERR(SI29,TI29,F29);
}'SETS(FN29,0,0);
}'FN29_SWEA(SI29,F29,FN29//CPER2);
CPER2: CSOUT(FN29);
}'COUT('&/', -1);
CPER4: RETURN IF F29<0;
}'IF TI29<0 DO;
}/ZUNPSI(SI29,ICGTN,0);
}/I29_NN TI29;
}'ELSE DO;
}/I29_ZUNPSI(SI29,ICGTN,TI29-1);
}'ENDIF;
}'W29_LENGTH(UPS);
}'I29_W29 IF I29<=0;
}'SETW(UPS,I29);
}'CSOUT(UPS);
}'CSOUT(LF29);
}'SETW(UPS,W29);
}'SETR(UPS,I29);
}'CSOUT(UPS);
}'COUT('&/', -1);
CPER1: RETURN;