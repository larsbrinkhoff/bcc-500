* LOCATION 400B

}'ORG 400B;

* INSTRUCTION TABLE.}"MUST BE ON 128 WORD BOUNDARY
*}"Z,Q - CONTAIN AR
*}"M - CONTAINS R (RELATIVE EFFECTIVE ADDRESS)
*}"MAR - CONTAINS ABSOLUTE EFFECTIVE ADDRESS
HLTF:}"CALL PNT,}"BREAKSC;
* OVERFLOW FROM SHIFT
SHFT1:}#AR_Q LCH Z, GOTO ILOOP;
BRU:}%Q_R, Z_-1, GOTO FIXP;
LDI1:}"AR _ M MRG 7774B4,}"GOTO ILOOP;
ETR:}%FETCH, DGOTO ILOOP;
})AR_M AND Q;
MRG:}%FETCH, DGOTO ILOOP;
})AR_M OR Q;
EOR:}%FETCH, DGOTO ILOOP;
})AR_M EOR Q;
})GOTO ILOOP;*}"NOP
MSIN1: M _ SKZ,}"GOTO STOR;
EXU:}%FETCH, Q _ OPMASK, GOTO IL1;
MSIN2: SKZ _ M,}"GOTO ILOOP;
STA:}$M_AR, GOTO STOR;
BSX1:}"XR _ M,}"GOTO BSL1;
STB:}%M_BR, GOTO STOR;
MUL0:}"AR _ Q,}"RETURN;
STX:}%M_XR, GOTO STOR;
UPOT2:}#POT, GOTO ILOOP;
BRXF:}$M_XR, Z_-1, DGOTO ILOOP;
})GOTO FIXP ON XR_M+1 < 0,}"Q _ R;
BRM:}%M_P, SETA, CALL STOR;
})Q_0, GOTO FIXP;
UPOT:}$ALERT, GOTO *+1;
})Z_BR, GOTO UPOT2;
UPIN:}#ALERT, GOTO *+1;
})M_READ, GOTO CAB;
RCH:}%M_R, Q_RCHMASK, DGOTO RCH1;
})M_M AND Q LCY 16, T_Z_XR;
SKE:}%FETCH, DGOTO TEST;
})M_M EOR Q;
BRR:}%Q_ADMASK, FETCH, DGOTO FIXP;
})Q_M AND NOT Q, Z_0;
SKB:}%Q_BR, FETCH;
SKB1:}$M_M AND Q, GOTO TEST;
SKN:}%Q_4B7, FETCH;
SKN1:}$M_M AND Q ! Q, GOTO TEST;
SUB:}%FETCH, DGOTO ILOOP;
})AR_Q-M;
ADD:}%FETCH, DGOTO ILOOP;
})AR_Q+M;
SKR:}%HFETCH, DGOTO SKN1;
})M_M-1, Q_BOUND, SETA, CALL STOR1;
MIN:}%Q_1, HFETCH;
MIN1:}$M_M+Q, GOTO STOR;
XMA:}%HFETCH, DGOTO CBA;
})Q_M, M_AR, DGOTO STOR;
ADM:}%HFETCH, GOTO MIN1;
BSL1:}"CSTK _ Z + 1,}"GOTO ICNT1;
SHIFT:}#Z_R, DGOTO SHFT1;
LLN3:}$Q_Q LCL Z;
SKM:}%Q_BR, FETCH;
})M_M AND Q - Z AND Q, GOTO TEST;
LDX:}%Q_0, FETCH, DGOTO ILOOP;
LDX1:}$XR_M AND NOT Q ! Z AND Q;
SKA:}%FETCH, GOTO SKB1;
* SKG WHERE SIGNS DISAGREE
SKG2:}"Q_4B7, GOTO SKN1;
* SKG IS SIGN OF M-AR IF SIGNS AGREE, SIGN OF M IF NOT
SKG:}#FETCH, DGOTO SKG1;
}'GOTO SKG2 ON M EOR Q<0;
LDB:}%FETCH, DGOTO ILOOP;
LDB1:}$BR_M;
LDA:}%FETCH, DGOTO ILOOP;
LDA1:}$AR_M;
EAX:}%M_R, Q_LONGAD, DGOTO LDX1;
})Z_XR, DGOTO ILOOP;
UPS:}%Q _ M LCY 16,}"Z _ 7,}"DGOTO UPS1;
})DGOTO Z AND Q MRG UPSTAB,}"Q _ R;
CSK:}#M_R, Q_300B, DGOTO CSK1;
}'Q _ M AND Q LCL 24 - 6;
LDY:}#T1_LDF1, GOTO FLDO, M_BR;
LDF1:}"AR_Z AND Q, GOTO ILOOP;
STY:}#T1_ADF2, GOTO FLDO, M_BR;
ZRF2:}$M_Z AND NOT Q, Q_T1, GOTO ADF2;
ADF:}#T1_ADF1, GOTO FLDO, M_BR;
MGF2:}"M_Z OR Q, Q_T1, GOTO ADF2;
MGF:}#T1_MGF1,GOTO FLDO, M_BR;
MGF1:}"T1_Q, Q_AR, GOTO MGF2;
GOTB:}"Z_R,}"CALL GZ;
*}"THE REST OF STACK P AND CALL MICROCODE SUBROUTINE
SCAL3: SKZ _ NOT Q MRG ADMASK;
CALX:}"R5 _ SR5,}"Q_34B3,}"DGOTO CALL1;
}'GOTO CALL2 ON Q_M AND Q LCY 12 = 0,R0_SR0;
ZRF:}$M_BR, T1_ZRF1, GOTO FLDO;
ZRF1:}#T1_Q, Q_AR, GOTO ZRF2;
SKNEX: FETCH,}"DGOTO ILOOP;*}"SKNE
}'M EOR Q,}"GOTO SKIP IF LB#0;
SNEL:}"FETCH,}"DGOTO ILOOP;
}'M,}"GOTO SKIP IF NNPTR;
MDC:}#HFETCH,}"DGOTO STOR;
}'M _ M - 1;
SKLEF: FETCH,}"DGOTO SKL1;
}'M EOR Q,}"GOTO SKIP IF LB=0;
SCALF: Z _ STKP,}"Q _ 34B3,}"DGOTO SCAL1;
}'T _ P,}"GOTO SCAL2 ON M AND Q # 0;
SKELF: FETCH,}"DGOTO ILOOP;
}'M,}"GOTO SKIP IF NULLPTR;
SKLF:}"FETCH,}"DGOTO SKG + 1;
}'Q _ M,}"M _ AR,}"DGOTO SKG1;
SKGEF: FETCH,}"DGOTO SKGE1;
}'M EOR Q,}"GOTO SKIP IF LB=0;
SKPF:}"FETCH,}"DGOTO ILOOP;
}'GOTO SKIP ON M >= 0;
SKACF: FETCH,}"DGOTO ILOOP;
}'M AND Q,}"GOTO SKIP IF LB#0;
SKBCF: FETCH,}"Q _ BR,}"DGOTO ILOOP;
}'M AND Q,}"GOTO SKIP IF LB#0;
BSRF:}"FETCH,}"Q _ ADMASK,}"DGOTO FIXP;
}'Q _ M AND NOT Q,}"Z _ 1;
BSLF:}"MAR _ Z _ CSTK,}"DGOTO BSL1;
}'Q _ P _ M,}"M _ T2 + 1,}"STORE;
BSXF:}"MAR _ Z _ CSTK,}"DGOTO BSX1;
}'Q _ P _ M,}"M _ T2 + 1,}"STORE;
BVRF:}"Z _ CSTK,}"Q _ ADMASK,}"DGOTO BVR1;
}'CSTK _ MAR _ Z - 1,}"Z _ R,}"FETCH;
SKUMF: Q _ BR,}"FETCH,}"DGOTO ILOOP;
}'GOTO SKIP ON M AND Q - Z AND Q # 0;
SKIF:}"HFETCH,}"DGOTO SKI1;
}'M _ M + 1,}"Q _ BOUND,}"SETA,}"CALL STOR1;
BRNXF: Z _ -1,}"DGOTO ILOOP;
}'GOTO FIXP IF AT1ON,}"Q _ R;
MULF:}"FETCH,}"DGOTO ILOOP;
}'M _ M LCH 23 - NMBIT,}"Q _ 0,}"CALL MUL1;
BRQF:}"DGOTO BRQ1,}"Q _ R,}"Z _ -1;
}'DGOTO FIXP IF NOCRASH;
LLNF:}"Q,}"GOTO LLN2 IF LB=0,}"Z _ R + 1;
}'T _ 0 - Z,}"Z _ AR,}"GOTO LLN1;
LDIF:}"AR _ M,}"Q _ 2B4,}"DGOTO ILOOP;
}'GOTO LDI1 IF BL#0,}"M AND Q;


* LOCATION 600B;

CLL3B: AR_M, Q_R5;
}'SR5_Q,Q_R4;
}'SR4_Q,Q_R3;
}'SR3_Q,Q_R2;
}'SR2_Q,Q_R1;
}'SR1_Q,Q_R0;
}'SR0_Q , DGOTO FIXP;
}'Q_P;


* UPS TABLE. MUST BE ON 8-WORD BOUNDARY
UPSTAB:}"Q, STROBE;
UPR:}%Q, CLRPRO;
PRO:}%Q, SETPRO, GOTO PRO1 IF PRONEX;
}'CLEARMAP;
}'RESETTSU;
}'CALL PNT;
}'CALL PNT;
}'CALL PNT;


* RCH TABLE. MUST BE ON 16-WORD BOUNDARY.
*}"ENTERED WITH DGOTO ILOOP PENDING, ABX IN MQZ, XR IN T
RCHTAB:}"XR _ 0-Z;
CLEAR: XR_0,}"GOTO *+1;
CLAB:}$AR_M_0, GOTO CAB;
CLA:}%AR_0;
CLB:}%BR_0;
CLX:}%XR_0;
CAB:}%BR_M, GOTO ILOOP;
* THIS LINE IS EXECUTED FROM SEVERAL PLACES
CBA:}%AR_Q;
XAB:}%AR_Q, GOTO CAB;
CBX:}%XR_Q;
CXB:}%BR_Z;
XXB:}%XR_Q, GOTO CAB, M_T;
CXA:}%AR_Z, GOTO ILOOP;
CAX:}%XR_M;
XXA:}%XR_M, M_T, GOTO CXA;
CNA:}#AR_0-M;


*}"FAIL RETURN TABLE FOR CALL,}"MUST OCCUR ON AN 8 WORD BOUNDARY
FTABLE: NOP;
}'NOP;
}'XR_CALL4;
}'BR_CALL4;
}'R5_CALL4;
}'AR_CALL4;
}'FA0 _ CALL4;
}'NOP;


*}"SCRATCHPAD TO SCRATCHPAD (CSK) TABLE, MUST BE ON 4-WORD BOUNDARY
CSKTAB:}(T _ SKZ,}"GOTO CSK2;
}'T _ 0,}"GOTO CSK2;
}'Z _ SKZ,}"Q _ 1;
}'Z _ SKZ,}"Q _ -1;


* CHECK R FOR < BOUND, THEN STORE M WITH MAR AND GOTO ILOOP
* UNLESS A IS SET, IN WHICH CASE RETURN
*}"EXIT:}"Z - R,}"Q - 4B7
STOR:}$Q_BOUND;
STOR1:}#GOTO *+2 ON Z_R<0;
STOR2:}#CALL PNT ON Q-Z<=0;
STOR3:}#STORE, RETURN IF ASET, Q_4B7;
* FALL THROUGH
}'T2 _ Q _ P,}"DGOTO IL0;
}'FETCH ABSP _ ABSP + 1,}"P _ Q + 1;


* CONTINUE EXECUTION, STARTING WITH INSTRUCTION ADDRESSED BY P
ICONT:}#Q_P;
ICNT1:}#Z_REL,}"T2 _ Q - 1;
})CALL PNT ON MAR_ABSP_Q+Z < 0, FETCH;
*}"BEGIN MAIN LOOP
*}"Q - P
*}"T2 - P - 1
*}"MAR - ABSP
*}"FETCH OF INSTRUCTION STARTED
IL0:}%MAR_MAR+1, Q_OPMASK, PREFETCH;
IL1:}%Q_M AND Q LCY 8;
})Q_T1_Q LCY 2;
})CALL INDEX ON T_M LCY 1<0, Q_ADMASK;
*}"CHECK RELATIVE ADDRESSING
IL2:}%GOTO IL2A IF YODD, T, R_M AND NOT Q;
})Z _ REL;
})MAR_M AND NOT Q+Z, Q_T,}"CLRA;
IL2R:}$GOTO MSINS ON Q LCY 1<0, M_T1;
})DGOTO M MRG HLTF,}"M _ R;
})GOTO *+1 ON Q LCY 8<0, Z_Q_AR;
*}"INDIRECTION
})FETCH,}"Q _ 4B7;
})M AND Q,}"GOTO IL3 IF BL=0;
})M_M AND NOT Q,DGOTO IL2;
}'CALL INDEX ON T _ M LCY 1 < 0,}"Q _ ADMASK;
*}"ABSOLUTE INDIRECTION
IL3:}%CALL INDEX ON T_M LCY 1<0, Q_LONGAD;
})M _ R_MAR_M AND NOT Q MRG 4B7, Z_T1;
})GOTO Z MRG HLTF, Z_Q_AR;


IL2A:}"R _ R MRG 4B7,}"DGOTO IL2R;
}'MAR _ M AND NOT Q,}"Q _ T,}"CLRA;


* SUBROUTINE FOR INDEXING
INDEX:}#Z_XR, DRETURN;
})M_M AND NOT Q+Z,Q_LONGAD;


* SET P TO Q+Z, RECOMPUTE ABSP AND GO TO ILOOP
*}"NEXT INSTRUCTION COMES FROM P+1
FIXP:}$Q_P_Q+Z;
})Z_REL, DGOTO ILOOP;
})CALL PNT ON ABSP_Q+Z < 0;


*}"MEMORY TO SCRATCHPAD INSTRUCTION
*
MSINS: Z_Q LCY 8, M_1B5,}"DGOTO MSIN1;
*}"TEST FOR LOAD OR STORE
}'M AND Q, GOTO *+1 IF BL=0;
}'FETCH,}"GOTO MSIN2;


*}"12 BIT MULTIPLICATION ROUTINE
*}"M - SHORT ARGUEMENT LCH 23 - NMBIT
*}"Q - 0
*}"Z - LONG ARGUEMENT
*}"RETURN:}"PRODUCT IN ,AR,}"M RESTORED
*}"CLOBBERS: ADR

MUL1:}"M _ M LCL 23-NMBIT, R0 _ -NMBIT;
}'M _ R0+1, R0 _ M LCY 1, DGOTO MUL0 IF R0>=0;
}'M _ R0, R0 _ M, DGOTO *-1 IF R0>=0;
}'Q _ Q LCY 1;
}'Q _ Q!Z, GOTO *-3;


*}"THE REST OF BVR
BVR1:}"M _ M + Z,}"DGOTO ICNT1;
}'Q _ P _ M AND NOT Q;


*}"THE REST OF SKI
SKI1:}"DGOTO ILOOP;
}'GOTO SKIP ON M >= 0;


*}"THE REST OF SKIP A <= M
SKL1:}"Q _ M,}"M _ AR,}"DGOTO SKG1;
}'GOTO SKG2 ON M EOR Q < 0;


SKGE1: GOTO SKG2 ON M EOR Q < 0;
SKG1:}"M_M-Q, Q_4B7, GOTO SKN1;


*}"THE REST OF BRANCH ON REQUEST STROBE
BRQ1:}"GOTO ILOOP IF NOREQ;
}'CALL R2PNT;


* THESE LINES ARE USED}"BY SKIP INSTRUCTIONS
TEST:}$M, GOTO ILOOP IF LB#0;
SKIP:}$Q_P, Z_1, GOTO FIXP;


* REMAINDER OF RCH
RCH1:}$DGOTO M MRG RCHTAB, Q_BR;
UPS1:}$M_AR, DGOTO ILOOP;


*}"REMAINDER OF PROTECT
PRO1:}"Q,}"CLRPRO,}"DGOTO ILOOP;
}'Q,}"SETPRO,}"GOTO *-1 IF PRONEX;


*}"SCRATCHPAD RCH INSTRUCTIONS
*
CSK1:}"DGOTO Q LCH 24 - 6 MRG CSKTAB;
}'Z _ M LCY 16,}"Q _ 77B,}"DGOTO *+1;
}'T _ Z + Q,}"Q _ 77B;
CSK2:}"Z _ M AND Q,}"Q _ T,}"DGOTO ILOOP;
}'SKZ_Q;


*}"CALL MICRO-CODE SUBROUTINES
CALL1: DGOTO Q LCY 1 MRG FTABLE, Q_P;
}'P_Q+1, DGOTO CALL2;


*}"ACTUAL CALL ON ROUTINE
CALL2: R1_SR1, Q_3777B;
}'R2_SR2, Z_M AND Q;
}'R3_SR3, DGOTO CALL3;
}'R4_SR4, CALL *+1;
}'M_AR;
}'Q_BR, DGOTO Z;
}'Z_XR;


*}"RETURN FROM ROUTINE
CALL3: XR_Z, Z_0;
CLL3A: BR_Q,}"GOTO CLL3B;


*}"FAILURE RETURN FROM ROUTINE
CALL4: XR_Z, Z_STKP;
}'GOTO *+2 ON Z _ SKZ < 0;
}'BR _ Q,}"Z _ -1,}"GOTO CLL3B;
}'P _ NOT Z - 1,}"Z _ STKP,}"GOTO PATCH1;


*}"PATCH SPACE
SCAL1: Q _ T,}"STKP _ Z - 1,}"GOTO SCAL3;
SCAL2: Q _ T + 1,}"STKP _ Z - 1,}"GOTO SCAL3;
PATCH1: Z_SKZ_0,}"GOTO CLL3A;
*}"PATCH TO ALLOW A RCY INSTRUCTION, NOTE ONLY BOTTOM 8 BITS MAY 
*}"CONTAIN DATA
RCY:}#R_Z-Q, Q_AR, GOTO SHIFT;


*}"MODULO OPERATION (A MOD M)
*}"Q - A
*}"Z - M
*}"RETURN
*}"M - A MOD M
*}"Q - (A-M) MOD M
*}"OFFSET - DISP(EQP)

MOD:}#M_Q, DGOTO *;
}'RETURN ON Q_Q-Z<0, R3_5;
}'CALL PUNT;
}'CHECK 1000B;


}'END;