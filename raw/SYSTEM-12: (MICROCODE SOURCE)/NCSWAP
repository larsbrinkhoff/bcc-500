}'ORG 1000B;
*}"THIS IS THE MAIN LOOP,}"CONTROL RESIDES IN THIS LOOP UNTIL AN
*}"ATTENTION, REQUEST IS RECIIVED, OR THE
*}"DISK QUEUES NEED SERVICING.
MAIN:}"CALL SETSTK, UNPRO(17B);}(*PATCH
}'C(PATTN);}/*EW5_0 FOR 1.03
}'GOTO *+3 ON Q >=0;
}'C(COPYK),}"M _ NKT;
}'GOTO MAIN;}"*GOTO MAIN2, M_FLAGRG;}"FOR 1.03


*}"A REQUEST STROBE HAS BEEN RECEIVED
MAIN0: FETCH ACTCL;
*}"ACTIVATE?
}'GOTO MAIN1 ON M-1#0,}"RSTRQL;
*}"AN ACTIVATE HAS BEEN FOUND
}'FETCH ACTHD,}"CALL SETSTK;
}'T _ PNT;
}'Z _ ACTREQ,}"CALL SAPU;
*}"GENERAL REQUEST?
MAIN1: T_MAIN, CALL SETSTK;},*PATCH
}'PRO(2);}9*PATCH
}'FETCH GRQ;}6*PATCH
}'Z _ GENREQ,}"CALL SAPU;
*}"CHECK ON THE DRUM AND DISK
}'C(PATTN);
*}"PROCESS DISK QUEUES?
}'C(COPYK),}"M _ NKT;
*}"CHECK ON DRUM AND DISK AGAIN
}'C(PATTN);
*}"TEST FOR ACTIVATE IF REQUEST STROBE RECEIVED
}'GOTO MAIN0 ON Q=0;
}'GOTO MAIN1;


*}"IF NKT = 0 OR FLAG BIT 0 = 1 CALL COPY FUNCTION
*}"M - NKT
COPYK: P _ CCYLF,}"CALL STCSTK;
}'GOTO COPK1 ON M <= 0, Z _ KCQCNT;
}'GOTO ICONT ON FLAGRG < 0;
}'R;


*}"PROCESS ATTENTION IF ATTN SET
*}"RETURN -1 - NO REQUEST
*}*0 - REQEST 1 SET
*}*CALL R2PNT IF REQUEST 2 SET
PATTN: GOTO PATN0 IF ATTS;
}'R IF NORQ, Q_-1;
}'R IF RQ2NS, Q_0;
}'CALL R2PNT;


*}"DO CLEANUP BY CALLING APU SUBROUTINE
*}"A,X CONTAIN REQUEST CODE
*}"B CONTAINS POINTER TO NODE
*}"THE TSU STATE PLUS ADDITIONAL INFORMATION IS PUT IN CORE IN
*}"THE RELATIVE ADDRESS SPACE
PATN2: Q_Q LCY 1, Z_CLBUF;
}'M _ BR_Q+Z,}"Z _ TSUSTATE;
}'Q _ RELL;
}'STORE Q + Z,}"Q _ PATI;
}'Q _ Q LCL STCY(RSLTSU),}"INC(ADR);
}'M _ Q LCH STCY(RSLTSU),}"CALL DPTSU;
}'FETCH BR,}"CALL STCSTK;
}'T _ PNT;
}'Z _ CLPRC,}"CALL SAPU;


*}"SEARCH FOR TSU NEEDING CLEANUP
PATN0: M_PATI_0;
PATN1: M_M LCL STCY(RSLTSU);
}'Z_M LCH STCY(RSLTSU) MRG TSPC0, ALERT;
}'M_PIN, Z_2;
}'GOTO PATN2 ON M LCY 2<0, Q_PATI;
}'M_PATI_Z+Q, Q_3, DGOTO PATN3;
}'GOTO PATN1 ON Q-M>=0;


*}"DO STARTUP
*}"PATI - TSU #
PATN4: P_DMCOM, CALL PATN5;
}'DGOTO PATN3 ON Z-1<=0;
}'CALL SICONT ON Z-1<=0;
}'P_DKCOM, CALL SICONT;

*}"SEARCH FOR A TSU NEEDING A COMMAND
PATN3: M_PATI_0;
}'M_M LCL STCY(RSLTSU);
}'Z_M LCH STCY(RSLTSU) MRG TSPC0, ALERT;
}'M_PIN, Q_2;
*}"FOUND ONE?
}'GOTO PATN4 ON M>=0, Z_PATI;
*}"NOPE
RESUMESTART:
}'M_PATI_Z+Q, Q_3;
}'GOTO PATN3+1 ON Q-M>=0;
}'GOTO PATN0 IF ATTS;
*}"CHECK ON CONTEXT BLOCKS
}'P_NDCTX, CALL SICONT;
}'GOTO PATN0 IF ATTS;
*}"CHECK ON PROCESS BEING CONSIDERED
}'P_NDPRC, CALL SICONT;
}'GOTO PATTN;


*}"SET STACKS
SETSTK: STKP _ LSKPR, UNPROTECT;
STCSTK: Q _ RELL,}"Z _ BASCSTK,}"DRETURN;
}'CSTK _ Q + Z;


*}"START APU
*}"Z - P COUNTER
*}"M - PTR TO NODE
*}"T - FAIL ADDRESS
*}"PLACES REQUEST CODE IN A,X
*}"PLACES PTR TO NODE IN B (THE TOP 6 BITS ARE 0)
SAPU:}"P _ Z,}"Q _ NADB;
}'ENDL(FT,BR _ M AND NOT Q),}"Q _ DISP(RCD);
}'FETCH M+Q,}"Q _ MASK(RCD);
}'M _ XR _ M AND Q,}"DGOTO SICONT;
}'AR _ M;


*}"R0 - MEMORY ADDRESS OF STORAGE
*}"DUMP TSU STATE
*}"M - TSU NUMBER IN SELECT POSITION
FUNCTION(DPTSU),}"STORE;
}'T2_-9,}"DGOTO DPTS0;
}'T1 _ M,}"Q_4B7,}"DGOTO *+1;
}'Q_Z_Q LCY 1, Z_T1, ALERT;
}'M_PIN;
}'STORE, DGOTO *-2 ON INC(T2)<0;
DPTS0: INC(ADR);
}'Q _ Z _ 0,}"T2_-4;
}'CALL GETPOS, Z _ Z + Q;
}'STORE, DGOTO *-1 ON Z _ INC(T2)<0;
}'INC(ADR),}"Q _ 4;
}'T2_-3;
}'Q_TSPC0;
}'Q_Z_Q LCY 1, Z_T1, ALERT;
}'M_PIN;
}'STORE, DGOTO *-2 ON INC(T2)<0;
}'INC(ADR);
}'R;


*}"GENERATE WAKEUP
*}"Q - PRT PTR
*}"Z - SECOND WORD OF WAKEUP

WAKU0: UNPRO(8);
WAKEUP:}(PRO(8);
}'FETCH USIBTOP;
}'T _ Q,}"Q _ 2;
}'M _ M + Q,}"Q _ MASK(USIB);
}'GOTO WAKU0 ON M AND Q = 0,}"Q _ T;
}'T _ Z,}"Z _ NADB;
}'STORE, T_NOT Z AND Q MRG WAKCOM, Z_T;
}'M _ T,}"ADR _ M, STORE;
}'SRQS(2);
}'M _ Z,}"INC(ADR),}"STORE,}"DRETURN;
}'UNPRO(8);


*}"SEND TSU INSTRUCTIONS
*}"T4(R1) - INSTRUCTION V UNIT #
*}"T3(R2) - DEVICE ADDRESS
*}"T2(R3) - PAGE ADDRESS
*}"Z - WORD COUNT
*}"ADR(R0) - TSU # LEFT ADJUSTED TO POSITION IN SELECT WORD
*}"M - UN0
*}"Q - UN1

STSUI: T _ Z,}"Z_ADR MRG TSIN+TSEL, ALERT;
}'Z_T4, POT;
*}"SEND DEVICE ADDRESS
}$Z_ADR MRG TSDA+TSEL, ALERT;
}'Z_T3, POT;
*}"SEND PAGE ADDRESS
}'Z_ADR MRG TSCMA+TSEL, ALERT;
}'Z_T2, POT;
*}"SEND WORD COUNT
}'Z_ADR MRG TSWC+TSEL, ALERT;
}'Z_T, POT;
*}"SEND UNIQUE NAME
}'Z_ADR MRG TSUN0+TSEL, ALERT;
}'Z_M, POT;
}'Z_ADR MRG TSUN1+TSEL, ALERT;
}'Z_Q, POT;
*}"SEND UNIT #
}'Z_ADR MRG TSHU+TSEL, ALERT;
}'Z_T4, POT;
}'R;


*}"THE FOLLOWING TEST ROUTINES ALL EXPECT
*}"Q - PTR TO CHT ENTRY
*}"RETURN IF FIELD = 0
*}"FAIL THRU Z IF FIELD # 0
*}"TEST LOCK BITS IN CHT

LKNST: T _ Q,}"M _ DISP(PL),}"DGOTO TESTF;
}'ADR _ Q + M,}"Q _ MASK(PL), FETCH, DRETURN;

*TEST DIRTY BIT IN CHT

DNST:}"T _ Q,}"M _ DISP(DB),}"DGOTO TESTF;
}'ADR _ Q+M,}"Q _ MASK(DB),FETCH, DRETURN;

*TEST SCHEDULED COUNT

SCHZ:}#T _ Q,}"M _ DISP(SCH),}"DGOTO TESTF;
}'ADR _ Q + M,}"Q _ MASK(SCH), FETCH, DRETURN;


*TEST NOT ZERO

TESTF:}"GOTO GZ ON M AND Q # 0, Q_T;


RCH1:}&M_M RCH 1;* LCY 3
PRO2:}%PRO(2);
}*RETURN;
UNPROA:}#UNPRO(15), RETURN;
ALERTF:}#ALERTSC, RETURN;
POTF:}%POTSC, RETURN;
*}"STACK ENTRY ON FREE LIST,}"CALLED BY MACRO SEFL.

FUNCTION(SETFL);
}'PRO(2);
}'MIN(NFREL);
}'M _ FREL,}"OFFSET _ 0,}"CALL SEL;
}'UNPRO(2),}"R;


*}"REMOVE ENTRY FROM FREE LIST
FUNCTION(REFFL);
}'PRO(2);
}'FA0 _ Z,}"Z _ REFL0;
}'Q _ FREL,}"OFFSET _ 0,}"CALL RTE;
}'MDC(NFREL);
}'UNPRO(2),}"R;
REFL0: MIN(ROFN);
}'UNPRO(2), FRA(FA0);


*}"MEMORY INCREMENT, CALLED BY MACRO MIN.
FUNCTION(MINF);
}'INC(M),}"STORE,}"RETURN;

*}"MEMORY DECREMENT, CALLED BY MACRO MDC.

FUNCTION(MDCF);
}'DEC(M),}"STORE,}"RETURN;


*}"12 BIT MULTIPLICATION ROUTINE
*}"M - SHORT ARGUEMENT
*}"Z - LONG ARGUEMENT
*}"RETURN:}"PRODUCT IN Q,AR
MULP:}"M _ M LCH 23 - NMBIT,}"Q _ 0,}"GOTO MUL1;


*}"INITIALIZATION SEQUENCE
*
GO:}$RSTRQL2;
}'GOTO * IF NORQ, R0 _ -1 + 1, Q _ MASK(SRDST);
*}"DISK OR DRUM RESTART
*}"T = TSU#, T3 = ADDRESS OF DISK OR DRUM, T4 = UNIT #
*}"ST3 = ADD FOR JUMP IN ADDRESS, ST4 = DISK/DRUM BIT MASK FOR ADD
GO1:}#FETCH SRMEM;
}'GOTO GO10 ON M AND Q = 0, Q _ ONE(SRTSU) * 2,}"RSTRQL;
}'ST1_M;
*}"TEST FOR DISK OR DRUM
}'M AND Q, GOTO GOA IF BL#0, Q _ MASK(SRBND);
*}"DRUM START
}'T3 _ M AND Q RCY 8, DGOTO GOB, Q_DRCON;* DRCON=44B
}'ST4_DBITM;* DBITM=134B
*}"DISK START
GOA:}#T4_M;
}'Z_M AND Q RCY 8, M_1, CALL MULP;
}'T3_Q, Q_DKCON;
}'M_T4, ST4_DKBITM;
GOB:}#ST3_Q, Q _ MASK(SRTSU);
*}"SET UP TSU#
}'ADR_M AND Q LCY LDCY(SRTSU)-5, Q _ MASK(SRUNT);
*}"SET UP UNIT#, PAGE ADDRESS
}'M_M AND Q LCL LDCY(SRUNT), T2_0;
}'T4_M LCH LDCY(SRUNT) MRG WRITE;


*}"LOOP FOR WRITING AND READING 64K
*}"GET IN SYNC WITH TSU
}'ST0_-31, CALL RDST;
GO2:}#M_ST1, Q_MASK(SRSOLD);
}'Q _ M AND Q MRG WRITE, GOTO *+2 IF LB#0,}"M _ T4;
}'GOTO GO5 ON M AND Q#0,}"M _ T3;
}'Z _ 4000B;
}'M_Q_-1, C(STSUI);
*}"WAIT FOR COMMAND TO FINISH
}'CALL RDST;
*}"TEST FOR ERROR
}'Z_ADR MRG TSSTS;
}'GOTO *+1, ALERTSC;
}'M_PIN;
}'M AND Q, GOTO GO2 IF BL#0, M_T3;
GO5:}#Z_ST4, Q_MASK(DSTR);
*}"UPDATE ADDRESSES
}'GOTO GO3 ON M AND Q-Z=0, Q_ONE(DSTR);
}'T3_M+Q, GOTO GO4, M_T2;
GO3:}#Q_ST3, GOTO *-1;

GO4:}#Z _ ST0,}"Q_MASK(DSTR);
}'ST0 _ Z + 1,}"Z _ 4B3,}"DGOTO GO2 IF Z<0;
}'T2_M+Z,}"M _ T3;
*}"FIX DEVICE ADDRESS (KEPT IN T3) TO POINT TO NEXT BAND
}'M _ M AND NOT Q,}"Q _ ONE(DBND);
}'T3 _ M + Q,}"Q}"_ WRITE;
*}"CHECK WHETHER READS HAVE TO BE DONE
}'ST0 _ -31,}"M _ T4;
}'M AND Q, T2_0, DGOTO GO2 IF BL#0, .TAX_0;
}'T4_M AND NOT Q;
}'SRQS(2);
GO10:}"GOTO * IF NORQ;
}'GOTO LOADST,}"RSTRQL;


RDST:}"Z_ADR MRG TSPC0;
}'GOTO *+1, ALERTSC, Q_TSPNV;
}'M_PIN;
*}"POSITION INVALID?
}'M AND Q, GOTO *-2 IF BL#0, Q_6B7+2;
*}"
}'M AND Q, GOTO *-3 IF BL#0;
}'RETURN, Q_3776B;


*}"GET SELECTED POSITION
*}"M - TSU NUMBER RIGHT ADJUSTED
*}"Z - UNIT #
*}"Q - FAIL ADDRESS
*}"RETURN:}"M,Q - SECTRO POSITION RIGHT JUSTIFIED
}%FUNCTION(FSTR),}"FA0 _ Q;
}'M_M LCY 3;
}'TSUN_M LCY 16, Q_3;
}'CALL GETPOS, SU_Z_Q AND Z;
*}"GET FUNCTIONAL UNIT
}'SP_M, Z_TSUN MRG TSFU, ALERT;
}'Z_PIN, Q_3;
*}"GET FUNCTIONAL POSITION
}'FU_Q AND Z, CALL GETPOS;
}'FP_M AND Q, Z_SP;
}'SP_Q AND Z, Q_PCFEX+PCEOS;
*}"TEST TSU ACTIVE
}'M_M AND Q, Q_PCFEX;
*}"TEST TSU TRANSFER
}'M EOR Q, GOTO FRA0 IF BL=0, M_37B;
*}"UPDATE SP
FSTR1: Z_FP, Q_MASK(PCRCP);
*}"TEST FOR 512 WORD RECORD LEFT IN FU
}'Z_Z AND Q, Q_10B;},*PATCH
}'GOTO FRA0 ON Z-Q>0;
}'Z_FP, Q_MASK(PCRCP);
}'Z_M-Q AND Z, M_SP;
}'Z_M+Z, M_SU;
}'Q_FU;
*}"COMPARE UNIT NUMBERS
}'M EOR Q, GOTO FSTR2 IF BL=0, Q_2;
}'Z_Q+Z;
*}"UPDATE SECTOR POSITION FOR WRAPAROUND
FSTR2: M_Z, Q_MASK(PCSTR);
}'T_M AND Q LCY 20;
*}"TEST FOR DISK
}'M_TSUN, Q_4B6;
}'GOTO FSTR3 ON M-Q>=0, Z_NKSECT;
}'Z_24;
FSTR3: M_Q_T, DR;
}'GOTO *+1 ON M-Z>=0;
}'M_Q_M-Z, R;


*}"GET POSITION
*}"Z - UNIT #
*}"T1 = TSU# IN SELECT POSITION
*}"RETURN:}"M - POSITION
*}+Q - MASK(POSITION)
*}+T1 - TSU # IN SELECT POSITION
GETPOS: Q_3;
}'Z_Q-Z AND Q, Q_TSPC3;
}'Z_Q LCL Z, Z_TSUN;
}'.VCY, GOTO *+1, ALERTSC, Q_TSPNV;
}'M_PIN;
}'GOTO *-2 ON M AND Q#0;
}'Q_MASK(POSITION), RETURN;


*}"THE FOLLOWING PATCHES COPYK TO SEARCH AROUND THE CYLINDER QUEUES ONCE
*}"WHEN NOTHING IS HAPPENING ON THE DISK
COPK1: GOTO *+2 ON Z-1>=0, M_FLAGRG;
}'KCQCNT_Z+1,}"GOTO ICONT;
}'R ON M LCY 1 < 0, Z _ -NKCQ;
}'FLAGRG_M MRG MASK(STKCQ), GOTO *-2;
*}"PATCH FOR FAST STARTUP
PATN5: SAVEPATI_M_Z, Q_3;}.*PATCH
}'M_M AND Q LCL 19;}/*PATCH
}'TSUNM_Z_M_M LCH 19, DGOTO STDRUM;*PATCH
}'GOTO STDISK ON M LCY 3 < 0;}%*PATCH
*}"PATCH TO FAST START FOR NEWPAGE REQUEST
NPAGE: Q_BR, FETCH WRTQ;
}'Q, GOTO FINSTART IF NENDLT;
}'P_APUWRITE, DGOTO FINSTART;
}'BR_M, CALL SICONT IF NENDLT;
*}"PATCH TO MAIN LOOP TO QUEUE PROCESS IF FLAG SET (THE FOLLOWING 
* FOR 1.03)
MAIN2: P_NDPRC, DGOTO MAIN;
}'CALL SICONT ON M LCY 2<0;


*}"SET FLAG REGISTER
*}"M - BIT TO SET

SFLG:}"Q_M, Z_FLAGRG;
SFLG0: FLAGRG_Z AND NOT Q ! M AND Q, RETURN;
}'ALL;
}'ALL;
}'ALL;
}'ALL;
}'ORG 1376B;
}'CALL PUNT;
@}&NOLIST EXT;
}'END;