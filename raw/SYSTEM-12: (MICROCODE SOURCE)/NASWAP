
SWAPR: SSMREG_M, M_R0, GOTO SAVST IF BRKON;
}'STKP _ LSKPR,}"RSTRQL,}"GOTO GO;
ILOOP: T2 _ Q _ P,}"DGOTO IL0;
}'FETCH ABSP _ ABSP + 1,}"P _ Q + 1;


*}"START FIELD LOGIC
*
*}"CALCULATE DISPLACEMENT AND FETCH
*}"R2 - (RELATIVE) INSTRUCTION ADDRESS
*}"T1 - RETURN ADDRESS
*}"M - BR
*}"RETURNS:}"M - AR
*},T - R2
*},Q - RIGHT-ADJUSTED FIELD MASK
*},Z - DATA WORD CYCLED SO THAT FIELD IS RIGHT-ADJUSTED
FLDO:}"CALL INDEX ON T_M LCY 1< 0,Q_NADB;
}'GOTO *+2 IF YEVEN, T, Z_4B7;
}'Z_RELL;
}'M_M AND NOT Q+Z, Z_R2;
}'T_Z, Q_17B;
}'R2_ADR_M+Z AND Q, PREFETCH, Q_T;
}'T2_Z_Q LCY 20;
}'M_Q LCY 3;
}'M_M LCY 12, Q_37B;
}'Z_Z AND Q - M AND Q, Q_1,}"HFETCH;
}'Q_Q LCH Z;
}'Q_Q LCL Z;
}'T2 _ Q - 1,}"Z _ T2 + 1;
}'M _ M LCL Z,}"Q _ T1;
}'Z _ M LCH Z;
}'DGOTO Q,}"Q _ T2;
}'Q _ Q LCY 1 MRG 1,}"M _ AR;


*}"ADD TO FIELD
*
ADF1:}"M_M+Z;
*}"ROUTINE FOR FIELD STORES
*}"EXPECTS M - INFO TO STORE
*}*T,Q,Z, FROM FLDO
ADF2:}"M_M AND Q ! Z AND NOT Q, Q_T;
*}"RETURN WORD
}'Q_Q LCY 20, Z_23;
}'Z_Z-Q,}"Q _ BOUND;
}'M_M LCH Z,}"DGOTO STOR3;
}'M_M LCL Z, GOTO STOR2 ON Z _ R2 >= 0;


LLN1:}"Z _ Q _ Q LCY 1,}"DGOTO *+1 IF Z>=0;
}'Z _ Q _ Q LCY 1,}"DGOTO * IF Z>=0,}"M _ T _ T + 1;
}'Q _ Q LCL 22,}"GOTO *+1;
}'GOTO LLN2 ON XR _ M _ 0 - M < 0;
}'AR _ Q LCH 22,}"GOTO ILOOP;
LLN2:}"XR _ 0,}"Z _ R2,}"DGOTO LLN3;
}'Q _ AR,}"DGOTO SHFT1;


*}"PATCH SPACE
ECHT1: STKP_Z-1, Q_NADB, GOTO CHTS0;
}'CALL PUNT;


SICONT: SUBR _ ICONT,}"GOTO STKLK;
R2PNT: SSMREG _ M,}"M _ R0;
SAVST: STORE SAVER0;
}'M _ 0,}"STORE BRKWAIT;
}'M_Z, STORE SAVEZ;
}'M_R1, STORE Z_SAVER0+1;
}'M_R2, IMS;
}'M_R3, IMS;
}'M_R4, IMS;
}'M_R5, IMS;
}'M_R6, IMS;
}'M_OS, IMS;
}'M_Q, STORE ADR+1;
}'Z_0, T_-NSKPAD, CALL XSKPD;

*}"STATE NOW STORED, WAIT FOR BREAKWAIT CELL TO BECOME NON-ZERO.

}'FETCH BRKWAIT;
}'GOTO *-1 ON M=0;

*}"NOW LOAD STATE

LOADST:Z_0, T_-NSKPAD, CALL XSKPD;
}'FETCH SAVER0+1;
}'R1_M, CALL IAF;
}'R2_M, CALL IAF;
}'R3_M, CALL IAF;
}'R4_M, CALL IAF;
}'R5_M, CALL IAF;
}'R6_M, CALL IAF;

*}"LOAD OS BY DGOTO TRICK

}'DGOTO M, FETCH ADR+1, .VCY _ 1;
}'Q_M, FETCH ADR+1, CALL*+1;
}'Z_M, FETCH BREAK;
}'DGOTO M, FETCH SAVER0;
}'R0_M, M_SSMREG;

*}"INCREMENT ADR, FETCH

IAF:}#FETCH ADR+1, RETURN;

*}"EXCHANGE SCRATCHPAD WITH MEMORY
*}"T - - (NO OF REGISTERS TO EXCHANGE)
*}"Z - 0

XSKPD: FETCH SAVESK, GOTO *+2;
}'FETCH ADR+1;
}'T1_SKZ;
}'SKZ_M, M_T1, DGOTO *-2;
}'INC(Z), RETURN ON INC(T)>=0, STORE;


*}"STACK LINK SUBROUTINE
*}"R6 - DEDICATED TO STACK POINTER (STKP)
*}"R5 - USED TO TRANSMIT SUBROUTINE ADDRESS AND FAIL ADDRESS (SUBR)
*}"R4 - CLOBBERED BY STLINK SUBROUTINE (T1)
*}"M,Q,Z UNAFFECTED
*}"LINK IS STACKED AT THE UPPER END OF SCRATCHPAD.
STKLK: STKP _ Z,}"Z _ STKP;
}'T1 _ Q,}"Q _ OS;
}'SKZ _ Q,}"Q _ SUBR,}"CALL CAL1;
RET:}#STKP _ Z,}"Z _ STKP + 1;
}'SUBR _ Q,}"GOTO RETAPU ON Q _ SKZ < 0;
}'DGOTO Q,}"Q _ SUBR;
RET1:}"Z _ STKP,}"STKP _ Z;

FRET:}"SUBR _ Z,}"Z _ SUBR;
}'DGOTO Z,}"Z _ SUBR;
}'STKP _ STKP + 1;


RETAPU: P _ NOT Q,}"Q _ SUBR,}"DGOTO RET1;
}'SKZ_0, DGOTO CALL3;


CAL1:}"DGOTO Q,}"Q _ T1;
}'STKP _ Z - 1,}"Z _ STKP;


*}"FAIL RETURNS OR DIRECTED GOTOS
GQ:}$GOTO Q;
GZ:}$GOTO Z;
GM:}$GOTO M;
FRQ:}#GRA(Q);
FRZ:}#GRA(Z);
FRM:}#GRA(M);
FRA0:}"GRA(FA0);
FT1:GRA(T1);
FT2:}#GRA(T2);
FT3:}#GRA(T3);
FT4:}#GRA(T4);

FT:}$Z _ T,}"GOTO GZ;


*}"PUNT CODE
PNT:}#SRQS2(2);
}'GOTO R2PNT;


*}&R0}'R1}'R2}'R3}'R4}'R5}'R6
*}&.}(.}(.}(.}(.}(.}(.
*}&ADR}0NPTR}-PPTR}%SUBR}%STKP

*}&CALL}.SRET}.FRET
* M}#UN0
* Q}#UN1}0NADB
* Z}"FAIL ADDR}'PTR TO NODE(NPTR)
*}"RETURN (BOTH NORMAL & FAIL):
*}&PPTR - PTR TO PREVIOUS NODE
*}&NPTR - PTR TO NODE (777777B ON FAILURE)

FUNCTION(CHTSCH),UN0_M;
}*UN1_Q, OFFSET_DISP(CLP);
}'GOTO FRZ ON M OR Q = 0;
}'SUBR _ Z,}"CALL CHTHSH;
}'PPTR_M,}"Z _ DISP(CLP),}"GOTO *+2;
CHTS0:}$PPTR_M_NPTR, Z_DISP(CLP);
}*FETCH M AND NOT Q+Z;
*}"NOTE:}"WILL ATTEMPT TO FETCH 777777B ON FAILURE OF SUBROUTINE
}*ENDL (FRET, FETCH Z_NPTR_M AND NOT Q), Q_UN0;
}*GOTO *+2 ON M EOR Q#0, INC(ADR);
}*FETCH, Q_UN1, DR;
}*GOTO CHTS0 ON M EOR Q#0, Q_NADB;


*}"ENTER ENTRY IN CHT
*}&R0}'R1}'R2}'R3}'R4}'R5}'R6
*}&.}(.}(.}(.}(.}(.}(.
*}&ADR}%NODE}ASUBR}%STKP

*}&CALL}.SRET}.FRET
* M}#UN0
* Q}"UN1
* Z}"- PTR TO CHT ENTRY
* EW2}"DISK ADDR
* RETURN:}"NODE - PTR TO ENTRY

}(FUNCTION (ECHT);
}*NODE_Z, Z_*+2, CALL CHTSCH;
}'Z_STKP, T_*+1, GOTO ECHT1;
}'M _ UN0;
}'HSTORE NODE;
}'M _ UN1;
}'STORE ADR+1;
}'M _ EW2, Q _ NKAD;
}'EW2_M_M AND NOT Q, STORE ADR+1;
}'T _ PPTR,}"Z _ DISP(CLP), DR;
}'T1 _ NODE,}"Q _ NADB,}"CALL ECHT0;


*}"PUT PAGE ON FREE CORE LIST
*}"Q - PTR TO CHT ENTRY FOR PAGE
*}"ASSUMES FCLP(Q) = 0 IFF NOT ON FCL ALREADY

FUNCTION(PPFCL);
}'T _ Q,}"Z _ DISP(FCLP);
}'FETCH Q + Z,}"Q _ NADB;
}'R ON M AND NOT Q # 0,}"Q _ T;
}'MIN(NFCL);
}'M_FCL, DR;
}'OFFSET_DISP(FCLP), CALL SEL;


*}"CHT HASHING ROUTINE
*}"M - UN0
*}"Q - UN1
*}"RETURN:}"ADR,M - PTR TO CHT1 ENTRY (-DISP(CLP))
*}+Q - NADB

CHTHSH: T1 _ Q _ M EOR Q,}"M _ 132B3;
}'M _ M EOR Q LCY 8,}"Z _ -DISP(CLP)+CHTB;
}'M _ M EOR Q LCY 8 MRG 777774B2,}"Q _ T1, .TCY,}"DRETURN;
}'M _ M EOR Q + Z,}"Q _ NADB;


*}"DHT HASHING ROUTINE
*}"M - DISK ADDRESS ONLY
*}"RETURN:}"M - INDEX INTO DHT
*}+T - CONTAINS DISK ADDRESS
*}+Q - CONTAINS SIZE OF DHT (SZDHT)

DHTHSH:T _ M,}"Q _ NKAD;
}'M _ M AND NOT Q RCY 12,}"Q _ T;
}'M _ M EOR Q,}"Q _ 3152B;
}'M _ M EOR Q,}"Q _ 7776B4;
}'M _ Z _ M AND NOT Q,}"Q _ SZDHT;
DHTH0: RETURN ON Z _ Z - Q < 0;
}'M _ Z,}"GOTO DHTH0;


*}"DELETE CHT ENTRY
*}&R0}'R1}'R2}'R3}'R4}'R5}'R6
*}&.}(.}(.}(.}(.}(.}(.
*}&ADR}.NPTR}/PPTR}%SUBR}%STKP

*}&CALL}.SRET}.FRET
* M}#UN0
* Q}"UN1}0NADB
* Z}"FAIL ADDR}&PTR TO NODE

}(FUNCTION (DCHT);
}*FA0_Z, Z_FRA0, CALL CHTSCH;
}*M _ Z,}"Z_DISP(CLP);
}*FETCH M+Z;
}*PPTR_M, M_PPTR;
}*FETCH M+Z, Z_PPTR, DR;
}*M_M AND Q ! Z AND NOT Q, STORE, Z_Q_NPTR;


*}"CLEAR CHT ENTRY
*}"Q- PTR TO CHT ENTRY
*}"RETURN Q, Z TO PTR TO CHT ENTRY
*}"T1 PTR TO FREE CORE LIST POINTER
CCHTE: PREFETCH Q, Z_2;
}'PREFETCH M_Q+Z;
}'PREFETCH M+Z;
}'HSTORE T_Q,}"M _ 0;
}'STORE ADR+1;
}'HSTORE ADR+1;
}'HFETCH ADR+1, Q_MASK(PG);
}'M_M AND Q, STORE;
}'HFETCH T1_ADR+1, Q_NADB;
}'M_M AND NOT Q, HSTORE, DRETURN,}"Q _ Z _ T;
}'M_0, STORE ADR+1;


*}"GET FREE CORE PAGE

*}&R0}'R1}'R2}'R3}'R4}'R5}'R6
*}&.}(.}(.}(.}(.}(.}(.
*}&ADR}&FCNTR}$FCPTR}6SUBR}%STKP

*}"Q - FAIL ADDRESS
*}"RETURN:}"Q - PTR TO CHT ENTRY
FUNCTION(GFC), FA0_Q;
}'PRO(2);
}*FCNTR_-DISP(FCLP)+FCL,}"GOTO GFC0;
GFC5:}"M _ FCPTR,}"Q _ FCL,}"CALL REL;
}'ADR _ Q + Z,}"M _ NPTRWD;
}'Q _ NADB;
}'M _ M AND Q,}"STORE;
}'MDC(NFCL),}"Q _ FCPTR;
}'FCNTR _ Q - Z;
GFC0:}%FCPTR_M_FCNTR, Z_DISP(FCLP);
}*ADR_M+Z, FETCH,}"Q _ NADB;
}*ENDL(GFC6,FCNTR_Q_M AND NOT Q);
}'OFFSET _ Z,}"Z _ DISP(SCH);
}'FETCH Q + Z,}"Z _ GFC5,}"DGOTO TESTF;
*}"TEST SCHED COUNT DIRTY BIT AND SOME BITS OF THE STATUS FIELD
}'T _ Q,}"Q _ MASK(SCH) + 67B6 + 34B2,}"DGOTO *+1;
}*Z_GFC5;
}*M_FCPTR, Q_FCL,}"CALL REL;
}'MDC(NFCL);
}*ADR _ Q+1,}"Z _ *+2,}"FETCH;
}*Q_M, FETCH PEPW, CALL DCHT;
}'M_UN0;
}'Q_UN1;
}'GOTO *+2 ON M OR Q=0;
}'CLEARMAP;
}*Q_PEPW, CALL CCHTE, UNPRO(2);
}'M_0, STORE T1,R;
GFC6:}"UNPRO(2),}"FRA(FA0);


*}"SEARCH DHT FOR DISK ADDRESS
*}"M - DISK ADDRESS
*}"Z - FAIL ADDRESS
*}"RETURN:}"ADR - PTR TO ENTRY IN DHT1
*}+Z - PTR TO ENTRY IN DHT2
*}+DHT3,M - DISK ADDRESS WORD FROM CORE

*}"FALI RETURN:
*}"FAILS IF DISK ADDRESS IS 0,}"M = 0
*}"FAILS IF TABLE FULL,}"M = -1
*}"FAILS IF ENTRY NOT IN DHT
*}0ADR - PTR TO 0 IN DHT1
*}0Z - PTR TO ENTRY IN DHT2

FUNCTION(DHTSCH),}"FA0 _ Z;
}'GOTO FRA0 ON M = 0;
}'CALL DHTHSH;
}'Z _ DHT1B,}"T1 _ 0-Q;
}'ADR _ M + Z,}"Q _ DHT2B;
}'M _ M LCY 1;
}'Z _ M + Q,}"FETCH;
}'Q _ T MRG NKAD,}"T _ Q;

DHTS0: GOTO FRA0 ON M _ DHT3 _ M = 0, M _ NKAD;
}'GOTO DHTS2 ON M EOR Q = 0,}"M _ T;
}'Z _ ADR + 1,}"ADR _ Z + 1;
*}"NOTE:}"ASSUMES DHT2 IMMEDIATELY FOLLOWS DHT1
}'GOTO DHTS1 ON Z - M >= 0;
}'DGOTO DHTS0 ON INC(T1) < 0;
}'ADR _ Z,}"Z _ ADR+1,}"FETCH;
}'FRA(FA0),}"M _ -1;
DHTS1: ADR _ DHT1B,}"GOTO DHTS0,}"FETCH;
DHTS2: M _ DHT3, R;



*}"MAKE DHT ENTRY.}"FAIL IF IT ALREADY EXISTS, OR DHT FULL
*}"FAIL RETURN:}"ADR - PTR TO ENTRY IN DHT1
*}0Z - PTR TO ENTRY IN DHT2
*}"RETURN:}"Q - PTR TO ENTRY IN DHT1
*}+Z - PTR TO ENTRY IN DHT2
*}"CALL:
*}"Z - FAIL ADDRESS
*}"ENTRY IN DHT0,DHT1,DHT2 IN SCRATCHPAD


DFUNCTIONX(EDHT), M_DHT0;
}'T2_Z, Q_NKAD;
}'CALL DHTSCH ON M_M AND NOT Q # 0, Z_EDHT0;
}'FRA(T2);
EDHT0: GOTO *-1 ON NOT M = 0,}"Q _ ADR;
}'M _ DHT0,}"STORE;
}'M _ DHT1,}"ADR _ Z,}"HSTORE,}"DR;
}'M _ DHT2,}"ADR _ Z + 1,}"STORE;


*}"DELETE DHT ENTRY
*}&R0}'R1}'R2}'R3}'R4}'R5}'R6
*}&.}(.}(.}(.}(.}(.}(.
*}&ADR}%T4}%T3}<SUBR}%STKP

*}&CALL}.SRET}.FRET
* M}#DISK ADDR
* Q}#
* Z}#FAIL ADDR

}(FUNCTION (DDHT);
}*T2_Z, Z_FT2, CALL DHTSCH;
}'M _ 0,}"T3 _ ADR+1,}"STORE,}"DGOTO DDHT1;
}'T4 _ Z + 1;
DDHT0:}$R ON M=0, Q_T4 + 1;
}*DHT0_M, M_0, STORE;
}*HFETCH Q, Q_ADR + 1;
}*DHT1_M, HFETCH T4 _ ADR + 1;
}*DHT2_M;
}*T3 _ Q,}"Z _ PNT,}"CALL EDHT;
DDHT1:}$Z _ ADR_T3, HFETCH;
}'Q _ DHT2B,}"DGOTO DDHT0;
}'GOTO *+1 ON Z - Q >= 0;
*}"OVERFLOW INTO DHT2,}"RESTORE T3 AND T4 TO POINT TO THE
*}"BEGINNING OF DHT
}'ADR _ T3 _ DHT1B,}"HFETCH,}"DGOTO DDHT0;
}'T4 _ Q - 1;


*}"APPEND ENTRY ONTO LIST (TYPE 2)
*}"M - HEADER
*}"Q - PTR TO ENTRY
*}"OFFSET - OFFSET OF PTR

*}&R0}'R1}'R2}'R3}'R4}'R5}'R6
*}&.}(.}(.}(.}(.}(.}(.
*}&ADR}8OFFSET}#T1}'T}(STKP

AELEQP:}(OFFSET _ DISP(EQP);
AEL:}&Z_T1_Q, Q_NADB;
}*ADR_M AND NOT Q+1,}"FETCH;
}'T _ M;
}'M _ M AND Q ! Z AND NOT Q,}"STORE,}"Z _ OFFSET;
ECHT0: M _ T,}"T _ LADB,}"DGOTO AEL0;
}'ADR _ M AND NOT Q + Z,}"HFETCH,}"Z _ T1;


*}"STACK ENTRY ON LIST (TYPE 2)
*}"M - HEADER
*}"Q - NODE
*}"OFFSET - OFFSET OF PTR

*}&R0}'R1}'R2}'R3}'R4}'R5}'R6
*}&.}(.}(.}(.}(.}(.}(.
*}&ADR}8OFFSET},T}(STKP

SELEQP:}(OFFSET_ DISP(EQP);
SEL:}&T_Q, Q_NADB;
}*ADR_M AND NOT Q, HFETCH;
}*DENDL(SEL1, T_M), Z_T;
AEL0:}%M_M AND Q ! Z AND NOT Q, STORE, Z_OFFSET;
SEL0:}%ADR_M AND NOT Q+Z, Z_T, HFETCH,DRETURN;
}*M_M AND Q ! Z AND NOT Q, STORE;
SEL1:}%INC(ADR), STORE, GOTO SEL0;


*}"REL-REMOVE ENTRY FROM LIST (TYPE 2)
*}"M - PTR TO ENTRY PRECEEDING THE ENTRY TO BE REMOVED
*}"Q - PTR TO LIST HEADER
*}"Z - FAIL ADDRESS
*}"OFFSET - OFFSET OF PTR
*}"RETURN: M,Q,PEPW - PTR TO ENTRY REMOVED
*}*PEPA - PTR TO OF POINTER WORD OF PREVIOUS NODE
*}1(PTR TO PREVIOUS NODE + OFFSET)

*}&R0}'R1}'R2}'R3}'R4}'R5}'R6
*}&.}(.}(.}(.}(.}(.}(.
*}&ADR}&PEPW}%PEPA}&OFFSET}#HEADER}"SUBR,T}#STKP
*}"Q-PTR TO HEADER
RTEQP: OFFSET _ DISP(EQP);
RTE:}&SUBR_Z, Z_OFFSET, DGOTO REL2;
}-M_Q-Z;
RELEQP:}(OFFSET _ DISP(EQP);
REL:}&Z_OFFSET, SUBR_Z;
REL2:}%HEADER_Q, Q_NADB;
}*PEPA_ADR_M AND NOT Q+Z, FETCH;
}*ENDL(FT, PEPW_M);
}*ADR_M AND NOT Q+Z, FETCH;
}*ENDL(REL1,NPTRWD _ M);
REL0:}%Z_PEPW;
}*ADR_PEPA, M_M AND NOT Q ! Z AND Q, STORE;
}*M_PEPW, DRETURN;
}*M_PEPW _ Q_M AND NOT Q, Z_OFFSET;

REL1:}%T_M, M_PEPA;
}*ADR_HEADER+1, M_M-Z, STORE, DGOTO REL0;
}*M_T;


@}&NOLIST EXT
}'END;