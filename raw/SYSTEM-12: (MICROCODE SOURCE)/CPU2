},ORG 400B;
*
*}"SUBROUTINE M_CONTENTS(R0)
LODX:}&MFETCH, R0_E1, .VCY, DRETURN;
}+GOTO PAGEF IF R0<0;
*
*}"SUBROUTINE CONTENTS(K_K+1)_M
STORX:}%R0_K_K+1;
STOR1:}%MAP, .VCY, R0_E1, GOTO CSTORE IF STERR;
}+STORE, RETURN;
*
*}"CHECK MULTIPLE WORD OPERAND
DBL:}'CLEARA, GOTO TI IF A;
}+FETCH, RETURN;
*
TI1:}'GOTO TI;
*
SKIP:}'Z_P_P+1, RESETCM, DGOTO NX3;
}+R6_M_NI, Q_7B7, GOTO NX4 IF INTRPT, .TSPY_0;
*
*}"THE SPECIAL CASES IN BRU ARE HANDLED HERE:
*}"K[0]= NOT A AND NOT B, K[1]=A
*}"NOTE HOW P IS RESTORED IF A TRAP SHOULD OCCUR
*
BRUA:}&Q_K, GOTO NX4 IF Y<0;
}+P_S, Q LCY 1, GOTO TI IF X<0;
}+R0_P_Z, GOTO NX5;
*
EXUA:}&DGOTO M AND Q LCY 4 MRG BASEAD, IR_XR;
}+R6_M, Q_37777B, GOTO POP IF M[9];
*
*
*}"LDD, Q=SR, S=Q+1
*
LDD1:}&MFETCH, R0_E1, Z_40B, GOTO PAGEF IF Y<0;
}+RES_AR, Z_Q AND Z, DGOTO NX1;}+*}"TDFLAG TO Z
}+BR_M, R0_S_S+1, GOTO LDD2 IF Z#0;
LDD2:}&MFETCH, R0_E1, .VCY, GOTO PAGEF IF Y<0;
}+CR_M, R0_S_S+1, CALL LODX;
}+DR_M, Z_P_P+1, GOTO NX2;
*
*}"XMA
XMAA:}&GOTO CSTORE IF R0[2];
}+Z_M, GOTO ROIA IF D;
}+RES_AR_Z, M_K, GOTO STRFLD IF B;
}+STORE, Z_P_P+1, GOTO NX2;
*
*
*}"STD, M=SR AND NOT TDFLAG, Z[18]=TDFLAG, K=Q+1
*
STD1:}&IR_M, Q_20B, GOTO CSTORE IF R0<0;
}+Q_Q AND M LCY 1, Q_IR, GOTO ROIA IF D;
}+STORE, M_AR, DGOTO STD2 IF NZ[18];
}+M_BR, CALL STORX;
}+M_CR, CALL STORX;
}+M_DR, CALL STORX;
STD2:}&Z_P_P+1, SR_Q, GOTO NX2;
*
*}"CYCLIC SINGLE LEFT SHIFT
CYAL1:}%Z_R0, M_24;
CYAL:}&R0_Z-M, Q_AR;
}+M_Q LCL Z, GOTO CYAL1 IF R0>=0;
}+RES_AR_M LCH Z, GOTO NX1;
*
*}"CYCLIC SINGLE RIGHT SHIFT
*
CYAR2:}%Z_Z+M, Q_AR, GOTO CYAR1;
CYAR:}&Z_M+ NOT Q OR Z, Q_AR;
CYAR1:}%Q_Q LCL Z, GOTO CYAR2 IF Z<0;
}+RES_AR_Q LCH Z, GOTO NX1;
*
*}"CYCLIC DOUBLE LEFT SHIFT
*
CYDL1:}%Z_R0, BR_M, DGOTO CYDL3;
}+M_Q, Q_24;
CYDL:}&Q_24, M_AR;
CYDL3:}%R0_Z-Q;
}+R6_M LCL Z, Q_BR, GOTO CYDL1 IF R0>=0;
}+M_R6, DGOTO Z MRG BASEMSK;
}+R6_M LCH Z, M_BR, DGOTO CYDL2;
CYDL2:}%M_M LCL Z;
}+M_M LCH Z, Z_R6;
}+BR_M AND NOT Q ! Q AND Z, DGOTO NX1;
}+RES_AR_M AND Q ! NOT Q AND Z;
*
*}"CYCLIC DOUBLE RIGHT SHIFT
*}$SHIFT LEFT 48-COUNT.
*
CYDR:}&M_48, DGOTO CYDL;
}+Z_M+NOT Q OR Z;
*
*}"ARITHMETIC SINGLE LEFT SHIFT (LOGICAL IF A)
*}"Z=SHIFT COUNT
ASAL1:}%Z_24; * SHIFT_24 IF SHIFT>24
ASAL:}&M_AR, Q_24;
}+R0_Z-Q;
}+M_M LCL Z, GOTO ASAL5 IF R0>=0;
}+DGOTO Z MRG BASEMSK;
}+M_M LCH Z, DGOTO ASAL2;
ASAL2:}%RES_AR_M AND NOT Q, GOTO NX1 IF A;
ASAL3:}%Q_Q MRG 4B7, DGOTO ASAL4;
}+NOT M AND Q, GOTO NX1 IF LB=0;
SPILL:}%M_Q_4B7, DGOTO NX1;
}+M+Q, ROV;
*
*}"ARITHMETIC SINGLE RIGHT SHIFT, (LOGICAL IF A)
*
ASAR:}&M_24;
}+Z_M+NOT Q OR Z, R0_M_AR;
}+M_M LCL Z, Q_0, GOTO ASAR1 IF Z<0;
}+DGOTO Z MRG BASEMSK;
}+M_M LCH Z, DGOTO ASAR1;
ASAR1:}%RES_AR_M AND Q, DGOTO NX1 IF A;
}+GOTO NX1 IF R0>=0;
}+RES_AR_M OR NOT Q, GOTO NX1;
*
*}"ARITHMETIC DOUBLE LEFT SHIFT, (LOGICAL IF A)
*}"M=BR, Z=SHIFT COUNT
*
LSHDL:}%Z_R0, M_0;
ASDL:}&BR_0, Q_24;
ASDL1:}%R0_Z-Q;
}+Q_M LCL Z, GOTO ASDL3 IF R0>=0;
}+DGOTO Z MRG BASEMSK;
}+M_Q LCH Z, DGOTO ASDL2;
ASDL2:}%BR_M AND NOT Q;
}+R6_M AND Q, M_AR;
}+M_M LCL Z;
}+M_M LCH Z, Z_R6; DGOTO ASAL3;
}+RES_AR_M AND NOT Q+Z, GOTO NX1 IF A;
*
*}"SHIFT COUNT>24, OVERFLOW IF NOT(AR=0 OR
*}$AR=-1 AND ((AR EOR BR) AND 4B7=0));
*
ASDL3:}%Z_AR;
}+AR_M, GOTO LSHDL IF A;
}+Q_Z_NOT Z, GOTO ASDL4 IF Z=0;
}+GOTO ASDL4 IF Z=0;
ASDL5:}%Z_M_4B7, DGOTO ASDL;
}+Z_R0, M_Z+M, ROV;
ASDL4:}%Z_Q EOR M, DGOTO ASDL;
}+Z_R0, M_0, GOTO ASDL5 IF Z>=0;
*
*}"ARITHMETIC DOUBLE RIGHT SHIFT
*}"M=BR, Z=NEGATIVE SHIFT COUNT AND 77B, Q=77B
*
ASDR:}&Z_Z OR NOT Q, Q_24, GOTO NX1 IF Z=0;
}+Z_Q+Z;
ASDR1:}%M_M LCL Z, GOTO ASDR3 IF Z<=0;
}+DGOTO Z MRG BASEMSK;
}+M_M LCH Z, DGOTO ASDR2;
ASDR2:}%R6_M AND Q, M_AR;
}+M_M LCL Z, R0_AR;
}+M_M LCH Z, Z_R6;
}+BR_M AND NOT Q ! Z, DGOTO NX1 IF A;
}+RES_AR_M AND Q, GOTO NX1 IF R0>=0;
}+RES_AR_M OR NOT Q, GOTO NX1;
*
*}"SHIF COUNT>24.}"EXTEND THE SIGN OF AR.
*
ASDR3:}%R0_M_AR, Z_Q+Z, GOTO *+2 IF A;
}+AR_-1, GOTO ASDR1 IF R0<0;
}+AR_0, GOTO ASDR1;
*}"MULTIPLY NEGATIVE MULTIPLIER
MUL2:}&M_NOT M+1, HROV, DGOTO MUL1;
}+K_4B7, GOTO MUL6 IF OVFLW;
*}"MULTIPLY NEGATIVE MULTIPLICAND
MUL3:}&K_NOT Z, Q_0, GOTO MUL5 IF OVFLW;
}+Q_R0, DGOTO MUL4;
}+MH1_Q, .LSPX_0;}%*INSTR EFFECTIVELY NO-OPED
*}"MULTIPLY POSITIVE MULTIPLIER
MUL1:}&Z_K, R0_NOT Q+1, HROV, GOTO MUL3 IF R0<0;
MUL4:}&MH2_M LCY 1, .LSPX_0;
}+M_MHR, .TSPY_0;}%* INSTR EFFECTIVELY NO-OPED;
}+Q_MMR, .TSPY_0;}%* INSTR EFFECTIVELY NO-OPED;
MUL5:}&IR_AR_M, K, GOTO MUL10 IF Y<0;
MUL7:}&BR_Q, M_IR;
}+Q_Q LCY 20;
}+Q_Q LCY 3, Z_P_P+1, DGOTO NX2;
}+RES_M OR Q;
*
MUL6:}&M_Q, Q_0, GOTO MUL5;
MUL10:}%Q_NOT Q+1, HROV;
}+AR_IR_NOT M+1, ROV, GOTO MUL7 IF CARRY;
}+AR_IR_NOT M, GOTO MUL7;
*
DIV4:}&IR_Q_NOT Q+1, GOTO DIV5;
DIV2:}&Z_Z+1, HROV, DGOTO DIV1;
}+M_NOT M, GOTO DIV3 IF CARRY;
DIV3:}&M_M+1;
DIV1:}&IR, Q_40000026B, DGOTO DIV4 IF Y<0;
}+R0_NOT Q, Q_IR;
DIV5:}&R6_M-Q, Q_1, GOTO DIV6 IF X<0;
}+M_R6, Q_Z MRG 1, GOTO DIV7 IF A;
}+Z_Q LCY 1, R0_R0+1, GOTO DIV8 IF R0<0;
}+M_M LCY 1, Q_1, DGOTO DIV5;
}+M_M AND NOT Q ! Z AND Q, Q_IR;
DIV6:}&Q_Z AND NOT Q, CLEARA, R0_R0+1, GOTO DIV8 IF R0<0;
}+M_M LCY 1;
}+Z_Q LCY 1, Q_1, DGOTO DIV5;
}+M_M AND NOT Q ! Z AND Q, Q_IR;
DIV8:}&AR_RES_Q, S, GOTO DIV9 IF Y<0;
DIV10:}%BR_NOT M+1, GOTO NX1 IF D;
}+BR_M, Z_P_P+1, GOTO NX2;
DIV9:}&AR_RES_NOT Q+1, GOTO DIV10;
DIV7:}&Q_Q-1;
}+M OR Q, GOTO SPILL IF LB#0, Z_S;
}+GOTO SPILL IF Z>=0, M_S_4B7;
}+RES_AR_M, M_0, GOTO DIV10;
*
*}"ISD, IR=MAPPED Q, R0=Q+1
*}$Q=Z=CONTENTS(Q)
*
ISD1:}&MFETCH, .VCY, R0_E1, GOTO PAGEF IF Y<0;
}+R6_Z;
}+Q_NOT Q LCY 2 MRG 63777777B;
}+Q_Z+NOT Q, Z_54B6;}5*}"Q_CPOS+CSIZE
}+R0_Q-Z, Q_Z_R6;
}+RES_Z_M-Z, M_1B6, DGOTO ISD2 IF R0<0;
}+Z_Q, GOTO NX1 IF Z=0;
}+R0_IR, Q_3B6, GOTO CSTORE IF STERR, .VCY;
}+M_Z AND NOT Q+1, DGOTO NX2;
}+STORE, Z_P_P+1;
ISD2:}&R0_IR, M_M+Z, GOTO CSTORE IF STERR;
}+STORE, Z_P_P+1, GOTO NX2;
*
*}"DSD, R0=Q+1, Z=CONTENTS(Q)
*
DSD1:}&MFETCH, .VCY, R0_E1, Q_3B6, GOTO PAGEF IF Y<0;
}+R6_Z;
}+Z_M AND Q, Q_R6;
}+RES_Z_Q-M, Q_14B6, DGOTO DSD2 IF Z=0;
}+Z_1B6, GOTO NX1 IF Z=0;
}+M_M-Z, R0, GOTO CSTORE IF STERR;
DSD3:}&STORE, Z_P_P+1, GOTO NX2;
DSD2:}&Z_M AND Q, R0, GOTO CSTORE IF STERR, .VCY;
}+Q_Q-Z;
}+Q_Q LCY 20;
}+Q_Q LCY 2, DGOTO DSD3;
}+M_M OR Q-1;
*
SRS1:}&Z_R0;
}+M_M, M_Q_IR, GOTO SRS2 IF Z#0;
}+M_M AND NOT Q;
SRS2:}&CALL LOADSR;
NEXT:}&Z_P_P+1, GOTO NX2;
*
TSB1:}&Q_IR, DGOTO NX1;
}+RES_M AND Q;
*
*
GETSR:}%Q_4B7, M_Z_RES;
GETS1:}%M_Z_NOT M AND Q LCY 12, Q_2B7, GOTO GETS1 IF Z=0;
}+M_SR, Q_7017B, DRETURN;
}+M_M AND NOT Q ! Z, M_E1, GSB;
*
LOADSR:}$Z_SR_M, Q_6B3;
}+M_M AND Q, Q_2B3, PSB, DRETURN;
}+RES_M-Q;
*
*
ICP1:}&RES_M EOR Q MRG 1, GOTO NX2;
DIV11:}%Z_NOT Z MRG 1, SETD, GOTO DIV2;
ASAL4:}%M AND Q, M_1, GOTO NX1 IF LB=0;
}+M, GOTO SPILL IF LB#0;
ASAL5:}%RES_AR_0, GOTO NX1 IF A, .VCY;
}+M, GOTO SPILL IF LB#0;
},GOTO NX1;
}+END;
