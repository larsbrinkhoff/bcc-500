}+ORG 2400B;
*
*
*}"OPR TABLE:
*}#THIS TABLE IS INDEXED BY A POSITIVE OPR OPERAND.
*}#IF IT IS GREATER OR EQUAL THAN MAXOPR, THE OPR
*}#IS PRIVILEGED.
*}#Z=AR, Q=BR, M=XR IF NOT PRIVILEGED
*
BASEOPR:}#BR_Z, Z_P_P+1, SETBA, GOTO NX2;}(* CAB
}+BR_Z;}B* XAB
CBA:}'RES_AR_Q, SETBA, GOTO NX1;}-* CBA
CBX:}'XR_Q, Z_P_P+1, SETBA, GOTO NX2;}(* CBX
}+XR_Q;}B* XXB
}+BR_M, Z_P_P+1, SETBA, GOTO NX2;}(* CXB
}+XR_Z, Z_P_P+1, SETBA, GOTO NX2;}(* CAX
}+XR_Z;}B* XXA
CXA:}'RES_AR_M, SETBA, GOTO NX1;}-* CXA
}+RES_AR_NOT Z+1, SETBA, GOTO NX1;}'* CNA
}+XR_NOT M+1, Z_P_P+1, SETBA, GOTO NX2;}"* CNX
}+RES_AR_0, SETBA, GOTO NX1;}-* ZOA
}+AR_0, GOTO ZAB1;}7* ZAB
}+BR_0, Z_P_P+1, SETBA, GOTO NX2;}(* ZOB
}+Q_GR, GOTO CBA;}8* CGA
}+Q_GR, GOTO XGA1;}7* XGA
}+Q_LR, GOTO CBA;}8* CLA
}+Q_LR, GOTO XLA1;}7* XLA
}+GOTO CSA1;}=* CSA
}+GOTO XSA1;}=* XSA
}+Z_ITR, ALERT, GOTO CTA1;}/* CTA
}+Z_CTCR, ALERT, GOTO CTA1;}.* CCA
NOP:}'Z_P_P+1, SETBA, GOTO NX2;}.* NOP
}+R0_Q-M, GOTO MVB1, SETA;}/* MVB
}+R0_0, GOTO MVB1;}7* MVC
}+SETBA, GOTO TI;}%*ILLEGAL MICROINSTRUCTION
}+SETBA, GOTO TI;}8* CPS
}+M_NOT Q LCY 4 MRG 1774B, GOTO CLS1;}$* CLS
}+Z_R6, S_M_Z, GOTO ASP1;}0* ASP
LLT:}'M_Z, GOTO LLT1;}8* LLT
}+M_Q, R0_0, SETA, GOTO COB1;},* COB
}*SETBA, GOTO TI;}&*ILLEGAL MICROINSTRUCTION [GRET]
}+SETBA, GOTO TI;}8* [GRETN]
}+IR_SR, GOTO LODS1;}5* LOADS
}+GOTO STRS1;}<* STORS
}+GOTO LSC1;}=* LSC
}+S_Z, GOTO FIX1;}8* FIX
}+M_BR_0, GOTO FLOAT1;}3* FLOAT
}+BR_NOT Q+1, HROV, GOTO FNA1;}+* FNA
}+R0_2406B+CPUNO, SETBA, GOTO BREAK;
}'ALL;
}'ALL;
}'ALL;
}*SETBA, GOTO TI;}&*ILLEGAL MICROINSTRUCTION
}+SETBA, GOTO TI;
*}SMAXOPR
}+X23LCK, Q_1, GOTO SLOK1;}/* SLOK
}+X23LCK, Z_4, GOTO UNPRO;}/* RLOK
}+R0_XR, FETCH, GOTO CXA;}0* ALD
}+R0_XR, M_Z, STORE, GOTO NOP;}+* AST
}+R0_XR, GOTO AAX1;}6* AAX
}+Z, RES_0, PROTECT, DGOTO NOP;}** PRO
}+Z, RES_4B7, GOTO 1705B IF NPROTECT, SETBA; *
UNPRO:}%Z, UNPROTECT, GOTO NOP;}0* UNPRO
}+Z, STROBE, GOTO NOP;}3* ATTN
}+S_Z, SETA, GOTO USCL1;}1* USCL
}+CLEARMAP, GOTO NOP;}4* CMAP
}+CMAPS, GOTO NOP;}7* CMAPS
}+Z_ ITL, ALERT, GOTO CAT1;}.* CAT
}+Z_ CTCL, ALERT, GOTO CAT1;}-* CAC
}+Z_ UNLS, ALERT, GOTO RUN1;}-* RUN
}+Z, STOP, Z_P_P+1, GOTO NOP;},* HLT
}*SETBA, GOTO TI;}&*ILLEGAL MICROINSTRUCTION
}+R0_XR, GOTO LDM1, SETBA;
}+SETBA, GOTO TI;
*
*
OPR1:}&Q_BR, ABCD0, GOTO OPR2 IF R0>=0;
}+M_R6_XR, DGOTO M MRG BASEOPR;
}+Z_AR;
SYSCLL:}$M_R0_Q LCY 12, Z_377B;
}+IR_Q AND Z, Z_600000B, SETC;
}+NEWG_Z, Z_R0_S_604000B, DGOTO SYSC1 IF R0[2];
}+K_M LCY 3 MRG 30000240B;
}+Z_R0_S_403016B;
UCAL1:}%NEWG_403000B;
SYSC1:}%SSOURCE;
}+ILIM_0, SETBA, CALL IA;
}+R6_R0, DGOTO BLL1;
}+Z_K, Q_77B6, CALL BLODX;
*
XGA1:}&GR_Z, GOTO CBA;
XLA1:}&LR_Z, GOTO CBA;
ZAB1:}&BR_0, DGOTO NX2, SETBA;
}+ER_0, Z_P_P+1;
*
*
CLSMULT:}#M_M+Z;
}+M_M+Z;
}+M_M+Z;
}+Q_Q LCY 4;
}+R6_Q LCY 2, Q_AR;
}+Q_Q LCY 4;
}+Q_Q LCY 2, Z_3B;
}+R6_Q AND Z, Q_R6;
}+Q_Q AND Z, Z_R6;
}+Q_Q-Z, Z_P_P+1, SETBA, DGOTO NX2;
}+RES_AR_M+Q;
*
CLS1:}&Q_NOT Q MRG 77B6;
}+Z_NOT Z MRG 77B6;
}+DGOTO NOT M+1 MRG 2520B;
}+M_Z_NOT Q-NOT Z, Q_BR;
BMACCQ: R0_Q, SETBA, GOTO BMACC1;
*
*
*}"ASP, M=AR, Z=XR, IR=M
*
ASPDIV:}$M_Z_3, DGOTO ASP4;}+*}"6 BIT CHARS
}+M_Q AND NOT M LCY 2;
}+Z_Q LCY 2, DGOTO ASP9, M_74B6; *8 BIT CHARS
}+M_Q AND NOT M + Z;
}+M_Z_1, DGOTO ASP4;}+* 12 BIT CHARS
}+M_Q AND NOT M LCY 3;
}+M_Q LCY 4, Z_0;}.* 24 BIT CHARS
ASP4:}&M_M LCY 20;
ASP5:}&Q_Z AND Q, Z_S, DGOTO ASP8 IF A;
*
*}"ASPX CAN BE CALLED AS A SUBROUTINE, TO ASP Q<CSIZE
*}#INT0 Z.}"M=0, C SET.
ASPX:}&Q_Q LCY 16;
}+Z_Z+M;
ASPX1:}%M_Q LCY 2, Q_3B6;
}+R6_M+Q AND Z;
}+Q_Z;
}+Q_Q LCY 20, M_6B5;
}+Q_M AND Q LCY 2, M_4B6;
}+Q_Q-M, M_R6, DGOTO ASP6;
}+R6_M+Q, Q_3B6, GOTO *+1 IF X>=0;
}+Z_Z+1, M_R6, GOTO ASP6;
ASP6:}&Z_M AND Q ! Z AND NOT Q, RETURN IF C;
}+XR_Z, SETBA, GOTO NX1;
ASP8:}&Z_Z-M;
}+M_Q LCY 2, Q_3B6;
}+M_Q AND Z-M, GOTO ASP6 IF X>=0;
}+R6_Q_Z-1, Z_4B6;
}+Q_Q LCY 20;
}+M_M+Z;
}+Z_Q LCY 2, Q_3B6, DGOTO ASP6;
}+M_M-Z AND Q, Z_R6;
*}"DIVIDE Q BY 3 (MULTIPLY BY .25252...B)
ASP9:}&Z_Q LCY 4, Q_3B;
}+IR_Z_M+Z, M_R6;
ASP10:}%M_M AND NOT Q LCY 20, Q_IR, GOTO ASP11 IF LB=0;
}+M_M LCY 2, Q_3, DGOTO ASP10;
}+IR_Z_M+Z;
ASP11:}%Q_NOT Q LCY 16 MRG 176B5;
}+IR_Q_NOT Q LCY 2;
}+Z_Q LCY 1;
}+Z_Q+Z, M_R6;
}+Q_M-Z, Z_3;
ASP12:}%R0_Q-Z, M_IR, GOTO ASP5 IF X<0;
}+M_IR_M+1, Q_R0, GOTO ASP5;
*
CSA1:}&SETBA, CALL GETSR;
}+GOTO CXA;
XSA1:}&R6_Z, SETBA, CALL GETSR;
}+AR_M, M_R6, SETBA, CALL LOADSR;
}+Z_P_P+1, SETBA, GOTO NX2;
*
CTA1:}&PIN, Q_E2, GOTO CBA;
*
*}"MOVE BLOCK OR CONSTANT (IF A IS NOT SET)
*
MVB1:}&GOTO MVB2 IF R0<0;
}+Q_Q+Z;
*}"MOVE TOP CELL FIRST
}+M_M+Z, SETBA, GOTO TI IF Z<0;
MVB3:}&K_Q_Q-1, SETBA, GOTO NX1 IF Z=0;
}+S_R0_M-1, M_XR, CALL BLODX IF A;
}+R0_K, CALL BSTR1;
}+AR_Z_Z-1, M_S, DGOTO MVB3;
}+SETBA, GOTO TOSP IF INTRPT1;
*
*}"MOVE BOTTOM CELL FIRST
MVB2:}&S_R0_M, SETBA, GOTO NX1 IF Z=0;
}+K_Q, CALL BLODX IF Z>=0;
}+R0_K, CALL BSTR1 IF Z>=0;
}+BR_Q_Q+1, M_S, SETBA, GOTO TI IF Z<0;
}+AR_Z_Z-1, DGOTO MVB2;
}+XR_M_M+1, SETBA, GOTO TOSP IF INTRPT1;
*
*}"LOCATE LEADING TRANSITION IN AB
*}#(RETURN IF C IS SET)
LLT1:}&M, R0_0, GOTO LLT3 IF LB=0;
}+NOT M, GOTO LLT3 IF LB=0;
LLT2:}&DGOTO *+1;
}+M_M LCY 1, Z_R0_R0+1, DGOTO * IF M[0]=M[1];
}+Z_Z-1, GOTO LLT5;
LLT3:}&M_M EOR Q, Z_0, GOTO LLT5 IF LB=0;
}+M, Z_24, GOTO LLT5 IF X<0;
}+R0_Z, GOTO LLT2;
LLT5:}&Q_K, RETURN IF C;}6* K USED IN NORM
}+RES_XR_Z, SETBA, GOTO NX1;
*
*}"LOAD STRING CONSTANT
LSC1:}&Q_S_R0_M, CALL BLODX;
}+Z_CR_M+Q;
}+DR_Z, Q_14B6;
}+Q_NOT M AND Q LCY 20;
}+Z_Q LCY 2, Q_74B6;
}+M_M AND Q ! Z, Q_S;
}+AR_M OR Q, SETBA, DGOTO NX2;
}+BR_M OR Q, Z_P_P+1;
*
*}"START OF ASP IS ALMOST HERE (AT ASP1)
*
ASP2:}&Z_NOT Q+1, Q_3, SETA, GOTO ASP3;
ASP1:}&M_M LCY 4, Q_3;
ASP3:}&DGOTO M AND Q LCY 1 MRG ASPDIV;
}+R6_Q_Z, GOTO ASP2 IF Z<0;
*
*
*}"COUNT ONE BITS IN AB
*
COB1:}&Q_Z-1, GOTO COB2 IF Z=0;
}+Z_Q AND Z, R0_R0+1, GOTO COB1;
COB2:}&Q_R0, Z_M, CLEARA, GOTO COB1 IF A;
}+RES_XR_Q, SETBA, GOTO NX1;
*
*}"LOAD STATE, IR CONTAINS XMONT,XUTILT BITS
*
LODS1:}%S_M, SETBA, CALL LSTATE;
}+Z_R0_Q, Q_XX, SETA, DGOTO BMACC;
}+MAP, R0_E1, .VCY, DGOTO *+1;
}+SSOURCE, R0_P;
}+MAP, R0_E1, .VCY, XR_Q;
}+R0_M_Z, CALL MEXIT IF R0[1];
}+Z_R0_P_M, SETBA, DGOTO NX5 IF A;
}+ABCD0;
}+Q_0, SETBA, GOTO FIXTRP;
STRS1:}%K_M-1, SETBA, CALL SSTATE;
}+Z_P_P+1, SETBA, GOTO NX2;
*
*}"TEST FOR PRIVILEGED OPR-S
OPR2:}&Z_MAXPRIV;
}+M-Z, Q_6B5, SETBA, GOTO TI IF X>=0;
}+M_P, DGOTO M MRG BASEOPR;
}+NOT M AND Q, Z_AR, SETBA, GOTO TI IF LB#0;
*
AAX1:}&MAP, .VCY, Q_E1, GOTO CBX;
*
SLOK1:}%4, PROTECT, GOTO * IF NPROTECT;
}+Z_P_P+1, SETBA, GOTO NX2;
*
CAT1:}&Z_AR, POT, GOTO NOP;
RUN1:}&Q_E2, .VCY, PIN, DGOTO CTA1;
}+BR_Q, Z_UNMS, ALERT;
*
USCL1:}%P_P+1, SETBA, GOTO TOSP2;
*
*
*
EAC1:}&Z_M AND Q LCY 4 MRG BASEAD, CALL BLL48;
}+Z_RES_0, M_R0, GOTO EAC4 IF D;
EAC2:}&Q_77B6, IR_SHIFT, GOTO EAC5 IF A;
}+MAP, .VCY, R0_E1, GOTO EAC6 IF B;
BMACC:}%SETBA, GOTO BMACC1 IF R0[1];
EAC3:}&XR_M AND NOT Q ! Z AND Q, SETBA, Z_P_P+1, GOTO NX2;
EAC4:}&Z_RES_2B6, M_0, GOTO EAC2;
EAC5:}&AR_M, Z_RES_1B6, GOTO EAC3;
EAC6:}&Z_MASK;
}+AR_Z, Z_IR, DGOTO BMACC;
}+BR_Z, Z_RES_3B6;
*
*}"Q = Z = R0 = BITS,
MON:}'Z_IR_SR, DGOTO CLL IF R0[2];
}+R0_M, M_1;
MEXIT:}%Q_P, 4, UNPROTECT;
}+Q_Q LCY 12, M_R0;
}+Q_Q LCY 2, Z_IR;
}+Z_Q AND Z, Q_100B;
}+Z_Q AND Z, X23LCK, DRETURN IF NZ[16];
}+IR_8, GOTO XTRP IF Z#0;}0*}"XMON
}+IR_9, GOTO XTRP;}7*}"XUTIL
*
CLL:}'Q AND M, Q_60B, DRETURN IF LB=0;
}+M_R0, SR_NOT Q AND Z;
}+4, PROTECT, GOTO * IF NPROTECT;
}+1, X23LCK, RETURN;
*
XTRP:}&CLEARA, RETURN;
*
*
}+SETBA, CALL 1776B;}"*ILLEGAL MICROINSTRUCTION
}+END;
