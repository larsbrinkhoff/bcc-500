* FROM L23A, FILE FLD
*}"DECLARATION MACROS
}'MACRO BC_DEF BCONDITION *1* _ *2* , *3*;
}'MACRO BCNV_DEF BCONDITION *1* _ *2* , *3*, NOVCY;
}'MACRO BCNVF_DEF BCONDITION *1*,*2*_*3*,*4*,NOVCY;
}'MACRO SC_DEF SCONDITION *1* _ *2* , *3*;
}'MACRO SCNV_DEF SCONDITION *1* _ *2* , *3*, NOVCY;
}'MACRO MO _ MACRO *1*;
}'MO DEF_DEFINE;
}'MO REG_DEF REGISTER *1* AS *2*;
}'MO DPM_DEFINE PARAMETER *1* _ *2*;
}'MO DDPM_DEF PARAMETER *1* _ *2*;
}*MO TWO_TWO*1*;
}*MO DF_DPM(PM0,*2**TWO12)^;
}'DDPM(PM1,*3**TWO18/TWO12)^;
}'DDPM(PM2,*4**TWO18/TWO18)^;
}'DPM(*1*,PM0+PM1+PM2);
}*MO LLB_*1* *1B4/1B6;
}*MO DISP_*1*/1B4;
}%MO MASK_MSK($-*1*/TWO6+*1**TWO18/TWO18)*TWO($-*1**TWO18/TWO18+23);
}*MO NMASK_- MASK(*1*)-1;
}*MO SHFT_-*1* *TWO18/TWO18+23;
}*MO ONE_TWO($-*1**TWO18/TWO18+23);
}*MO STCY_-*1**TWO18/TWO18+23;
}*MO LDCY_*1**TWO18/TWO18+1;
}*MO STUFF_M AND *2* Q LCY LDCY(*1*);
}*MO NSTUFF_STUFF(*1*,NOT);
}*MO MSK_MSK*1*;
}'MO EVALN_DEFINE PARAMETER *1* _ *2*;
}'MO NOLIST_DEFINE PARAMETER FOO_;
}'MO INCLUDE_0;


*}*MACRO'S TO IMPLEMENT FIELD LOGIC--
*}"ONE MAY DEFINE A FIELD BY SAYING
*}*DF(NAME, DISPLACEMENT, FIRST BIT, LAST BIT);
*}"THEN THE FOLLOWING OPERATIONS ARE POSSIBLE
*}*OPERATION}/RESULT
*})DISP(NAME)}/DISPLACEMENT OF FIELD
*})MASK(NAME)}/MASK OF FIELD
*})NMASK(NAME)}.MASK OF FIELD EOR-1
*})SHFT(NAME)}/SHIFT REQUIRED TO RIGHT ADJUST FIELD.
*})ONE(NAME)}0VALUE OF ONE IN FIELD.
*})LDCY(NAME)}/VALUE OF CYCLE TO DO
*}BON A LOAD IN ORDER TO
*}BRIGHT ADJUST THE FIELD
*})STCY(NAME)}/VALUE OF CYCLE TO DO
*}BON A STORE TO RESTORE
*}BFIELD FROM RIGHT ADJUSTED
*}BPOSITION TO PROPER POSITION
*}BIN WORD.
*})STUFF(NAME)}.M AND Q LCY LDCY(NAME)
*}BIDEA IS TO RIGHT ADJUST
*}BFIELD
*})NSTUFF(NAME)}-M AND NOT Q LCY LDCY(NAME)


}*DPM(TWO0,1);
}*DPM(TWO1,2);
}*DPM(TWO2,4);
}*DPM(TWO3,10B);
}*DPM(TWO4,2B1);
}*DPM(TWO5,4B1);
}*DPM(TWO6,1B2);
}*DPM(TWO7,2B2);
}*DPM(TWO8,4B2);
}*DPM(TWO9,1B3);
}*DPM(TWO10,2B3);
}*DPM(TWO11,4B3);
}*DPM(TWO12,1B4);
}*DPM(TWO13,2B4);
}*DPM(TWO14,4B4);
}*DPM(TWO15,1B5);
}*DPM(TWO16,2B5);
}*DPM(TWO17,4B5);
}*DPM(TWO18,1B6);
}*DPM(TWO19,2B6);
}*DPM(TWO20,4B6);
}*DPM(TWO21,1B7);
}*DPM(TWO22,2B7);
}*DPM(TWO23,4B7);

}*DPM(MSK0,1);
}*DPM(MSK1,3);
}*DPM(MSK2,7B);
}*DPM(MSK3,17B);
}*DPM(MSK4,37B);
}*DPM(MSK5,77B);
}*DPM(MSK6,177B);
}*DPM(MSK7,377B);
}*DPM(MSK8,777B);
}*DPM(MSK9,1777B);
},DPM(MSK10,3777B);
}*DPM(MSK11,7777B);
}*DPM(MSK12,17777B);
}*DPM(MSK13,37777B);
}*DPM(MSK14,77777B);
}*DPM(MSK15,177777B);
}*DPM(MSK16,377777B);
}*DPM(MSK17,777777B);
}*DPM(MSK18,1777777B);
}*DPM(MSK19,3777777B);
}*DPM(MSK20,7777777B);
}*DPM(MSK21,17777777B);
}*DPM(MSK22,37777777B);
}*DPM(MSK23,-1);
*FIELDS AND REGISTERS AS USED BY THE CHIO PART OF THE COMMUNICATIONS 
*SYSTEM --P.C.H.
*
*THIS FILE IS USED AS INPUT TO 3 PROGRAMS: MICRO TO DEFINE
*FIELDS FOR THE MICROPROCESSOR CODE, QSPL TO DEFINE FIELDS FOR THE
*CPU CODE, AND TABLE TO PRINT A PICTURE OF THE FIELDS DEFINED
*
*FOLLOWING THE NAME OF EACH TABLE IS THE NAME OF THE 
*REGISTER THAT CONTAINS ITS BASE ADDRESS
**SYN DPM,DECLARE PARAMETER;
**SYN EVALN,EVALN;
**SYN DF,DEFINE FIELD;
**BIT LENGTH 3
**WORD LENGTH 24
**BEGIN TABLE
**SPACE 5
**CENTER PUBLIC MEMORY FOR INPUT/OUTPUT LINE - 4 WORDS (MTAA,MTAE,/4)
**SPACE 5
}(EVALN(QQ,0);
 DF(WOC,QQ,8,8);}#*WAKEUP IF OUTPUT WAKEUP CONDITION IS VALID
 DF(WIC,QQ,9,9);}#*WAKEUP IF INPUT WAKEUP CONDITION IS VALID
 DF(BS,QQ,0,1);}'*BREAK STRATEGY (STOP ECHO STRATEGY)
**TAB}"* 0) NEVER
**TAB}"* 1) CONTROL CHARACTERS ONLY
**TAB}"* 2) PUNCTUATION CHARACTERS AND CONTROL CHARACTERS
**TAB}"* 3) ALWAYS
 DF(WS,QQ,2,3);}.*WAKEUP STRATEGY - SAME VALUES AS BS. NOTE: WS>=BS
 DF(CCPBIT,QQ,6,6);}/*IF ON WHEN LINE IS EMPTY WAKEUP PROCESS IN LINK FIELD
 DF(LNKBIT,QQ,7,7);}.*IF ON LINK OUTPUT
 DF(LF,QQ,6,7);}&*LINK FLAG 
**TAB}"* 0) NRMLNK: IGNORE LQNK FIELD
**TAB}"* 1) LNKLNK: LQNK FIELD HAS LINKED TO LINE NUMBER
**TAB}"* 2) CCPLNK: LQNK FIELD HAS PROCESS TO WAKEUP IN CCP MODE
**TAB}"* 3) ADVLNK: ADVISE MODE LQNK FIELD HAS LINE ADVISING
 DF(DE,QQ,4,4);}&*DEFERRED ECHO. IF ON, ECHO CHARACTERS WHEN INPUT TO CPU
 DF(CLE,QQ,5,5);}+*CHARACTER LOCALLY ECHOED (FOR LOCAL LINES)
 DF(DECLE,QQ,4,5);}7*BOTH DE AND CLE
**TAB}"NORMALLY DE AND CLE ARE 0. WHEN A BREAK CHAR IS INPUT TO
**TAB}"CHIO CLE IS SET. WHEN A BREAK CHAR IS INPUT TO THE CPU DE IS SET.
**TAB}"WHEN AN ATTEMPT TO READ CHARS TO THE CPU IS MADE THAT FAILS BOTH 
**TAB}"ARE RESET.
 DF(ES,QQ,10,10);}&*ECHO STRATEGY. IF OFF, DON'T ECHO CHARACTERS
 DF(RCNO,QQ,11,16);}.*REMOTE CONCENTRATOR NUMBER
**TAB}**RCNO=0 MEANS LOCAL BIT SCANNED TTYS
**TAB}**RCNO=1 MEANS LOCAL 2400 BAUD LINES
 DF(EBC,QQ,17,17);}/*ECHO BREAK CHARACTER
 DF(DTYP,QQ,18,23);}.*DEVICE TYPE FOR LOCAL LINES(DISPATCHED ON)
 DF(MDTYP,QQ,21,23);}+*DEVICE TYPE
**TAB}&* 0) NULL
**TAB}&* 1) MODEL 37 TELETYPE
 DPM(M37T,1);}3*DEVICE TYPE FOR MODEL 37 TTY
**TAB}&* 2) MODEL 35 TELETYPE
 DPM(M35T,2);}2*DEVICE TYPE FOR MODEL 35 TTY
**TAB}&* 3) IBM 2740 SELECTRIC
 DPM(M2741T,3);}5*DEVICE TYPE FOR 2740
 EVALN(QQ,QQ+1);
 DF(QUITC,QQ,16,23);}/*QUIT CHARACTER
 DF(NOQ,QQ,0,0);}/*NO OUTPUT REQUESTS DESIRED
 DF(NIQ,QQ,1,1);}/*NO INPUT REQUESTS DESIRED
 DF(TABTY,QQ,2,7);}7*TAB TYPE
 DF(LPOS,QQ,8,15);}7*CHAR POS IN LINE
 EVALN(QQ,QQ+1);
 DF(XWT,QQ,0,3);}1*WAIT TIME FOR GUARANTEED POOR RESPONSE
 DF(AWT,QQ,4,7);}1*ACTUAL WAIT TIME LEFT
**TAB}"AWT IS SET TO XWT WHEN AN INPUT WAKEUP IS GENERATED.
 DF(REF,QQ,8,10);}-*RESUME ECHO FLAG
**TAB}"*0) NORMAL CASE
**TAB}"* 1 TO 6) RESUME AFTER N INPUT BLOCKS
**TAB * 7) RESUME AFTER 7 INPUT BLOCKS 
 DF(LQNK,QQ,11,23);}#*LINKED TO LINE
 EVALN(QQ,QQ+1);
 DF(PROC,QQ,11,23);}/*PROCESS
 DF(LFK,QQ,9,9);}3*LINE FEED KLUDGE
 DF(LOK,QQ,8,8);}%*LINK OK
 DF(LDVN,QQ,0,7);}.*LOCAL DEVICE NUMBER
**END TABLE
**SPACE 5
**LIST
**SPACE 5
**}"BASE ADDRESS:}"MTAA
**}"ENTRY ADDRESS:}"MTAE
**}"BASE ADDRESS EQUAL TO:}"0 MOD MTAM(4)
**}"NUMBER OF ENTRIES:}"ONE FOR EACH LINE PAIR
**}"USE:}"CONTAINS INFORMATION COMMON TO A LINE PAIR
**}"ENTRY INDEXED BY:}"LINE NUMBER /2
**}"INITIALIZATION:}"ALL ENTRIES MUST BE INITIAIZED
**PAGE
**PPAGE
**BEGIN TABLE
**CENTER MAIN POINTER TABLE - 2 BLOCKS INPUT, THEN OUTPUT(MTCA,MTCE/2=1)
**SPACE 5
}(EVALN(QQ,0);
 DF(XBCNT,QQ,0,7);}/*MAXIMUM BUFFER COUNT
 DF(RCPF,QQ,8,23);}/*READ CHARACTER POINTER
 EVALN(QQ,QQ+1);
 DF(ABCNT,QQ,0,7);}/*ACTUAL BUFFER COUNT
 DF(WCPF,QQ,8,23);}/*WRITE CHARACTER POINTER
 EVALN(QQ,QQ+1);
 DF(WKCNT,QQ,0,11);}.*WAKEUP CHARACTER COUNT
 DF(CCNT,QQ,12,23);}+*CHARACTER COUNT
**END TABLE
**SPACE 5
**LIST
**SPACE 5
**}"BASE ADDRESS:}"MTCA
**}"BASE ADDRESS EQUAL TO:}"1 MOD MTCM(2)
**}"NUMBER OF ENTRIES:}"1 FOR EACH LINE (2 FOR EACH LINE PAIR)
**}"USE:}"CONTAINS INFORMATION UNIQUE TO A LINE
**}"ENTRY INDEXED BY:}"LINE NUMBER
**}"INITIALIZATION:}"ALL ENTRIES, (RCP=WCP=CCNT=ABCNT=0))
**PAGE
**PPAGE
**BEGIN TABLE
**CENTER CHARACTER BUFFER FORMAT (BUF0,/32)
**SPACE 5
 EVALN(QQ,0);
 DF(ZLIN,QQ,0,7);}0*LINE NUMBER MOD 256 (USED TO DETECT ERRORS)
 DF(NEXT,QQ,8,23);}/*NEXT BUFFER POINTER
 EVALN(QQ,QQ+1);
 DF(CHAR1,QQ,0,7);}-*FIRST CHAR IN BUFFER
}(EVALN(QQ,QQ+6);
DF(CHAR21,QQ,16,23);},*TWENTY-FIRST CHARACTER
**END TABLE
**SPACE 5
**LIST
**SPACE 5
**}"BASE ADDRESS:}"BUF0
**}"ENTRY ADDRESS: -
**}"BASE ADDRESS EQUAL TO:}"0 MOD CBOM (32)
**}"NUMBER OF ENTRIES:}"ENOUGH FOR DEMAND
**}"USE:}"CONTAINS CHARACTERS. POINTED TO BY LINE TABLE
**}"ENTRY INDEXED BY:}"POINTER FROM PREVIOUS BUFFER
**}"INITIALIZATION:}"FREELIST OF BUFFERS LINKED THROUGH NEXT
**SPACE 5
**PPAGE
**PAGE
**BEGIN TABLE
**CENTER CPUIT - THE CPU INTERFACE TABLE (CPUIT,/16)
**SPACE 5
}(EVALN(QQ,40B);
 DF(LNO,QQ,11,23);}%*LINE NUMBER FOR REQUEST
 DF(RWCH,QQ,10,10);}#*REQUEST WAITING FOR CHIO
 DF(NSR,QQ,8,9);}%*NOT SATISFIED RETURN}"
**TAB}&* 0 NORMAL RETURN
**TAB}&* 1 FIRST ABNORMAL RETURN
**TAB}&* 2 SECOND ABNORMAL RETURN (RARELY USED)
 DF(CRT,QQ,0,7);}$*CPU REQUEST TYPE
**TAB}&* 0 NULL REQUEST
**TAB}&* 1 WST (WRITE STRING)
}'DPM(ZWST,1);
**TAB}&* 2 RCND (READ CHARACTER NON DESTRUCTIVELY)
}'DPM(ZRCND,2);
**TAB}&* 3 RSTB (READ STRING TO BREAK CHARACTER)
}'DPM(ZRSTB,3);
**TAB}&* 4 MBLK(MOVE MEMORY BLOCK)
}'DPM(ZMBLK,4);
**TAB}&* 5 IG (IGNORE NON CPU REQUESTS)
}'DPM(ZIG,5);
**TAB}"* 6 NIG (NO LONGER IGNORE NON - CPU REQUESTS)
}'DPM(ZNIG,6);
**TAB}'* 7 SCF (PUTFIELD)
}'DPM(ZSCF,7);
**TAB}** 8 LCF (GETFIELD)
}'DPM(ZLCF,8);
**TAB}&* 9 STR (STORE CHIO REGISTERS)
}'DPM(ZSTR,9);
**TAB}"* 10 LDR (LOAD CHIO REGISTER)
}'DPM(ZLDR,10);
**TAB}"* 11 RTUPDATE (UPDATE REAL TIME CLOCK IN CORE)
}'DPM(ZRTU,11);
**TAB}"* 12 DOAPOT
}'DPM(ZPOT,12);
**TAB}"* 13 DOAPIN
}'DPM(ZPIN,13);
 EVALN(QQ,QQ+1);
 DF(NFB,QQ,0,23);}2*NUMBER OF FREE BUFFERS (41B)
 EVALN(QQ,QQ+1);
 DF(VALU,QQ,0,23);}6*VALUE OF CHIO CALL(42B)
}(EVALN(QQ,QQ+1);
 DF(CARG1,QQ,0,23);}"*FIRST SPECIAL ARGUMENT LOCATION (43B)
 EVALN(QQ,QQ+1);
 DF(CARG2,QQ,0,23);}#*SECOND SPECIAL ARGUMENT LOCATION (44B)
 EVALN(QQ,QQ+1);
 DF(CARG3,QQ,0,23);}#*THIRD SPECIAL ARGUMENT LOCATION (45B)
 DF(RWSB,51B,0,23);}%*FIRST OF A 7 WORD STRING BUFFER
 DF(RWEB,57B,0,23);},*END OF A 7 WORD STRING BUFFER
**TAB}&*}"THE READ/WRITE STRING BUFFER
**END TABLE
**SPACE 5
**LIST
**SPACE 5
**}"BASE ADDRESS:}"CPUIT EXISTS IN ABSOLUTE CORE FROM 40B TO 100B.
**}"ENTRY ADDRESS:}"
**}"BASE ADDRESS EQUAL TO:}"40B
**}"NUMBER OF ENTRIES:}"1
**}"USE:}"COMMUNICATIONS REGION BETWEEN CPU,CHIO
**}"ENTRY INDEXED BY:}"
**}"INITIALIZATION:}"INITIALIZATION RWCH=0
**PAGE
**PPAGE
**BEGIN TABLE
**CENTER DEVICE TABLE ONE PER DEVICE TYPE ((DVTBA,LB24T),DVTBE,/4)
**SPACE 5
 EVALN(QQ,0);
 DF(ESCCH,QQ,0,7);}6*ESCAPE CHARACTER FOR DEVICE
 DF(NCTI,QQ,8,15);}/*NUMBER OF CHARACTER THIS INTERVAL
 DF(NCTIF,QQ,16,23);}/*NCTI FRACTION
**TAB}"*ALGORITHM: EACH CLOCK TICK: 
**TAB}"*NCTI.NCTIF _ NCTIF + NCPI.NCPIF
 EVALN(QQ,QQ+1);
 DF(TABCH,QQ,0,7);}/*TAB CHARACTER FOR DEVICE
 DF(NCPI,QQ,8,15);}/*NUMBER OF CHARACTERS PER INTERVAL
 DF(NCPIF,QQ,16,23);}-*NCPI FRACTION
}(EVALN(QQ,QQ+1);
 DF(C0,QQ,0,1);}/*CHARACTER TYPE FOR 0TH CHARACTER
**TAB}"0) ALPHANUMBERIC CHARACTER (A-Z 0-9)
**TAB}"1) PUNCTIUATION CHARACTERS (,.:*.)( ETC)
**TAB}"2) ECHOABLE CONTROL CHARACTERS (CARRAIGE RETURN, LINE FEED)
**TAB}"3) NON ECHOABLE CONTROL CHARACTERS (CONTROL A ETC.)
 DF(C1,QQ,2,3);}.*CHARACTER TYPE OF FIRST CHARACTER
 DF(C7,QQ,14,15);}6*SEVENTH CHARACTER TYPE
 EVALN(QQ,QQ+1);
 EVALN(QQ,QQ+30);
 DF(C255,QQ,14,15);}/*LAST CHARACTER TYPE
**END TABLE
**SPACE 5
**LIST
**SPACE 5
**}"BASE ADDRESS:}"DVTBA
**}"ENTRY ADDRESS:}"DVTBE
**}"BASE ADDRESS EQUAL TO:}"0 MOD DVTBM(4)
**}"NUMBER OF ENTRIES:}"1 PER DEVICE TYPE (CURRENTLY 3)
**}"USE:}"CONTAINS INFORMATION UNIQUE TO DEVICE
**}"ENTRY INDEXED BY:}"DEVICE TYPE NUMBER*36 - SEE DEVICE TYPE FOR PUBLIC
**}$LINE TABLE
**}"INITIALIZATION:}"ALL (IGNORE NC(T,P)I(F) IN PHASE 1)

**PPAGE
**PAGE
**BEGIN TABLE
**CENTER LOW SPEED DEVICE BUFFER TABLE (LDVTA,LDVTE,4)
**SPACE 5
}(EVALN(QQ,0);
 DF(HCOP,QQ,13,13);},*HIGH BIT CHARACTER IN COP FIELD
 DF(HCOP2,QQ,13,14);}2*HIGH ORDER 2 BITS OF COP FOR 2741
 DF(COP37,QQ,14,14);
 DF(COP35,QQ,13,14);
 DF(COP41,QQ,15,15);
 DF(COP,QQ,13,23);}%*CHARACTER OUTPUT IN PROGRESS
 DF(CIP,QQ,1,8);}%*CHARACTER INPUT IN PROGRESS
 DF(CIP2,QQ,1,9);}/*MASK USED IN DID FOR 2741'S
 DF(CIPX2,QQ,8,8);}5*MASK USED IN DID FOR 2741'S
 DF(CIPX,QQ,9,9);}0*BIT SHIFTED OUT OF INPUT CHARACTER
 DF(CIPY,QQ,8,9);
 DF(CIPT,QQ,0,9);}8*BOTH CIP AND CIPX
}(EVALN(QQ,QQ+1);
 DF(CLINE,QQ,11,23);}+*CPU LINE NUMBER
**SPACE 5
**END TABLE
**SPACE 5
**LIST
**SPACE 5
**}"BASE ADDRESS:}"LDVTA
**}"ENTRY ADDRESS:}"LDVTE
**}"BASE ADDRESS EQUAL TO:}"0 MOD LDVTM (4)
**}"NUMBER OF ENTRIES:}"1 FOR EACH LOCAL DEVICE
**}"USE:}"USED FOR LOCAL BIT SCANNING AND 2400 BAUD LINES
**}"ENTRY INDEXED BY:}"LOCAL LINE NUMBER
**}"INITIALIZATION:}"COP=0, CLINE
**PPAGE
**PAGE
**CENTER LOCAL DEVICE BIT TABLE (LBTBA,LBTBE,/16)
**SPACE 5
**BEGIN TABLE
 EVALN(QQ,0);
 DF(CIB0,QQ,0,15);}%*CHARACTER INPUT BIT SLICE 0
}(EVALN(QQ,QQ+1);
 DF(COB0,QQ,0,15);}#*CHARACTER OUTPUT BIT SLICE 0
}(EVALN(QQ,QQ+1);
 DF(CIB1,QQ,0,15);}%*CHARACTER INPUT BIT SLICE 1
}(EVALN(QQ,QQ+1);
}(EVALN(QQ,14);
 DF(NCIP,QQ,0,15);}$*NEXT CHARACTER INPUT;
}(EVALN(QQ,QQ+1);
 DF(BSNO,QQ,21,23);}0*BIT SLICE NUMBER
**TAB}**LBTBA - DEVICE TYPE CONTAINS BSNO;
**END TABLE
**SPACE 5
**LIST
**SPACE 5
**}"BASE ADDRESS:}"LBTBA
**}"ENTRY ADDRESS:}"LBTBE
**}"BASE ADDRESS EQUAL TO:}"0 MOD LBTBM (16)
**}"NUMBER OF ENTRIES:}"1 PER 24 LOCAL LINES
**}"USE:}"USED TO FIND TTYS TO BIT SCAN
**}"ENTRY INDEXED BY: DEVICE TYPE - 1
**}"INITIALIZATION:}"BSNO=0, NCIP=ALL ONES
**PPAGE
**PAGE
**BEGIN TABLE
**CENTER FORMAT OF REQUEST TO THE SCHEDULER
**SPACE 5
 DF(WKPRF,0,0,5);}6*WAKEUP INSTRUCTION FIELD
 DPM(WKPRI,2*1B6);}1*WAKEUP PROCESS
**TAB}"2) WKPRI}0*WAKEUP A PROCESS
DF(WKPNO,0,6,23);}6*PROCESS NUMBER TO WAKEUP
DF(WKTYP,1,0,23);}6*WAKEUP TYPE 
**END TABLE
**SPACE 5
**LIST
**PAGE
**PPAGE
**BEGIN TABLE
**SPACE 5
**CENTER FORMAT OF AN FIELD INDIRECT WORD
**SPACE 5
 DF(FDSZ,0,3,7);}4*FIELD SIZE
 DF(CXBIT,0,19,19);},*IF BIT ON REFERENCE MTCE, ELSE MTAE
 DF(FDFB,0,8,12);}3*FIRST BIT
 DF(FDDISP,0,13,23);}8*FIELD DISPLACEMENT
 DF(SFDDISP,0,21,23);}2*SHORT PART OF FIELD DISPLACEMENT
**END TABLE
**SPACE 5
**LIST
**PAGE
**PPAGE

**BEGIN TABLE
**CENTER FORMAT OF 2400 BAUD LINE INPUT WORD
**SPACE 5
 DF(MSF,0,9,15);}2*SET OF INTERESTING BITS
 DF(ICR,0,14,14);}3*INPUT CHARACTER READY
 DF(RRE,0,15,15);}3*RECEIVE RATE ERROR
 DF(TRC,0,12,12);}3*TRANSMIT READY FOR NEXT CHARACTER
 DF(CTS,0,10,10);}3*CLEAR TO SEND
 DF(DCD,0,9,9);}3*DATA SET CARRIER DETECTOR
 DF(DSR,0,11,11);}3*DATA SET READY
 DF(TRE,0,13,13);}3*TRANSMITTER RATE ERROR
 DF(ICHAR,0,16,23);}7*INPUT CHARACTER
**END TABLE
**SPACE 5
**LIST
**SPACE 5
**BEGIN TABLE
**CENTER FORMAT OF 2400 BAUD LINE OUTPUT WORD
**SPACE 5
 DF(TRON,0,13,13);}2*TRANSMITTER ON
 DF(RCON,0,14,14);}2*RECEIVER ON
 DF(TRCH,0,12,12);}2*TRANSMIT CHARACTER IN OCHAR
 DF(RQS,0,10,10);}3*REQUEST TO SEND
 DPM(RQSEND,2B4);
DPM(TARON,224B2);}8*SET STATUS TO BOTH TRANS AND RECON ON
 DF(CST,0,15,15);}3*COPY STATUS TO HARDWARE (TRON,RCON,TRCH)
 DPM(CHSTAT,4B2);
 DF(OCHAR,0,16,23);}7*OUTPUT CHARACTER
**END TABLE
**SPACE 5
**LIST
**PPAGE
**BEGIN TABLE
**CENTER FORMAT FOR ALERT REQUEST
**SPACE 5
 DF(IOH,0,0,0);}0*IO HARDWARE USED IF 1
 DF(ALINB,0,1,1);}6*INPUT REQUEST IF 1, ELSE OUTPUT
 DPM(OUTRQ,100B);}7*OUTPUT REQUEST FOR 2400 BAUD LINE
 DPM(INRQ,20000100B);}8*INPUT REQUEST FOR 2400 BAUD LINE
DF(INPC,0,16,16);}/*INPUT CHRACTER (PEEK IF INPTC OFF)
 DF(B24D,0,17,23);}5*2400 BAUD LINE NUMBER FIELD
 DF(ALLNF,0,17,23);},*LINE NUMBER FOR REQUEST (OR REQUEST TYPE)
**END TABLE
**SPACE 5
**LIST
**SPACE 5
**BEGIN TABLE
**CENTER FORMAT FOR RETURN FROM ALERT-10B: STATUS OF CHIO
**SPACE 5
 DF(ERB,0,14,14);}6*ERROR
 DF(RRQ,0,15,15);}6*RECEIVER REQUEST
 DF(TRQ,0,16,16);}6*TRANSMITTER REQUEST
**DF(ALLNF,0,16,23);},*LINE NUMBER FOR REQUEST (OR REQUEST TYPE)
**END TABLE
**SPACE 5
**LIST
**PPAGE
**END ALL FIELDS
**PAGE
*
*
*LIST OF SCRATCH PAD REGISTER ASSIGNMENTS
*
*ORIGINS OF TABLES
*
REG(SK53,BUF0);}1*LOCATION OF BUFFER ZERO
REG(SK1,MTAA);}1*ADDRESS OF MAIN TABLE 
REG(SK2,MTCA);}1*ADDRESS OF CHARACTER POINTER TABLE
REG(SK3,LDVTA);}8*LOCAL DEVICE TABLE ADDRESS
REG(SK6,DVTBA);}8*DEVICE TABLE ADDRESS
REG(SK28,LBTBA);}7*LOCAL BIT TABLE ADDRESS
REG(SK60,LB24T);}/*BASE OF 2400 BAUD LINE TABLE
*
*BEGINNING OF TABLE ENTRIES THAT HAVE NO VALUES WHEN NOT PROCESSING A REQUEST
*
REG(SK8,MTAE);}1*ADDRESS OF ENTRY FOR LINE IN MAIN TABLE
REG(SK29,LBTBE);}7*LOCAL BIT TABLE ENTRY
REG(SK10,LDVTE);}7*LOCAL DEVICE TABLE ENTRY (SEE NSRFLAG)
REG(SK11,DVTBE);}7*DEVICE TABLE ENTRY CPU REQUEST
**REG(R1,MTCE);}1*ADDRESS OF ENTRY FOR LINE IN CHARACTER POINTER TABLE
*
*OTHER SCRATCH PAD REGISTERS THAT MUST BE INITIALIZED BY CPU
*
REG(SK32,NCI);}1*NEXT CLOCK INTERRUPT
REG(SK37,LCI);}1*LAST CLOCK INTERRUPT
*SK38 AND SK39 SAVED FOR EXPANSION OF TIME INTERRUPTS
REG(SK41,FREEL);}/*FREE LIST (BUF0 NOT ADDED)
REG(SK45,MP);}2*MULTIPLIER FOR BUFFER NUMBER
REG(SK49,MAXFB);}7*MAX. FREE BUFFERS FOR WAKEUP
REG(SK50,MINFB);}7*MIN FREE BUFFERS FOR WAKEUP
REG(SK51,UPAM);}8*EVERY UPAM*10 MS REAL TIME CLOCK IS UPDATED
REG(SK4,XLINE);}8*LARGEST LEGAL LINE NUMBER
REG(SK5,ICC);}2*INPUT CHARACTER COUNT
REG(SK7,OUTCC);}0*OUTPUT CHARACTER COUNT
*
*GLOBAL CONSTANTS THAT HAVE NO VALUE WHEN NOT PROCESSING A REQUEST
*
REG(SK58,BWORD);}7*WORD OF BITS BEING PROCESSED FOR LOCAL DEVICE
REG(SK12,CPUFLAG);}5*0: NORMAL, -1: IGNORE NON CPU REQUESTS
REG(SK13,WTCE2);}7*CONTAINS HIGH ORDER PART OF WTCE(2) FOR WRITE
REG(SK59,RTCE1);}7*CONTAINS HIGH ORDER PART OF RTCE(1)
REG(SK14,BFLAG);}6*FLAG TO INDICATE BUFFER STATUS
*}.*VALUES ARE 0) NORMAL: AVB, PRB SETUP CORRECTLY
*}.*4B7) BUFFER HAS BEEN USED OR RELEASED, USED AS 
*}.*A SIGNAL TO BLAKE TO SETUP POINTERS, AND PRP AND GRP
*}.*TO CORRECT BUFFER COUNT
REG(SK57,NSRFLAG);}4*VALUE OF NSR FOR CPU CALL
REG(SK15,LLINE);}7*LOCAL LINE NUMBER
REG(SK17,LINE);}8*LINE NUMBER NUMBER OF REQUEST
REG(SK18,CHAR);}8*CHARACTER BEING USED
REG(SK19,LBIT);}8*WORD CONTAINING BIT TO SET IN LOCAL DEVICE
REG(SK20,WD1);}1*FIRST WORD OF LINE ENTRY
REG(SK48,CHISC);}/*CHARACTER IS A CONTROL CHAR IF <0
REG(SK48,CHK360);}6*CHECK SUM USED ONLY AT RESTART TIME
REG(SK21,WD2);}1*TEMPORARY REGISTER FOR 0ND WORD OF LINE TABLE
REG(SK22,RBUF);}8*LOCATION OF LINK BUFFER SUBROUTINE
REG(SK23,WBUF);}8*LOCATION OF GET NEXT BUFFER SUBROUTINE.
*RCP}#SEE LOWER REGISTERS
*WCP}#SEE LOWER REGISTERS
*WCNT}"SEE LOWER REGISTERS
*RCNT}"SEE LOWER REGISTERS
REG(SK24,RWORD);}7*USED BY RCH SUBROUTINES
REG(SK25,WWORD);}7*USED BY WCH SUBROUTINES
REG(SK26,RCPEND);}6*USED BY RCH TO POINT TO END OF CHARACTERS
REG(SK27,BTIME);}7*POINTS TO WORD}"OF INPUT BITS
REG(SK42,AVB);}1*AVAILABLE BUFFER (BUF0 NOT ADDED) (<0 NOT AV.
REG(SK44,PRB);}1*PLACE TO PUT RELEASED BUFFERS (BUF0 NOT ADDED)
REG(SK46,PLINE);}7*NEXT LINE FOR POOR RESPONCE
REG(SK47,OBITS);}7*OUTPUT BITS SAME AS LAST POT TO TTYS
REG(SK16,LCWS1);}+*USED BY WKCQ A FLAG IF LAST CHAR WAS A SHIFT1
*
*TEMPORARIES OF SUBROUTINES
*
REG(SK40,XLINK);}7*LINE LINKED TO.}"ECHO LEVEL 2
REG(SK55,SWCNT);}/*SAVE WCNT ECHO LEVEL 2
REG(SK61,SWORD);}/*SAVE WWORD ECHO LEVEL 2
REG(SK62,SBFLAG);}/*SAVE BFLAG ECHO LEVEL 2
REG(SK63,SWCP);}/*SAVE WCP ECHO LEVEL 2
REG(SK56,TFWK);}1*TEMP FOR WKOL. WKOL LEVEL 1
REG(SK43,CHARI);}7*CHARACTER USED BY INLOGIC. LEVEL 3
REG(SK0,SVR4);}6*LINK FOR SUBS
REG(SK31,SVR1);}8*SUBROUTINE LINK
REG(SK30,SVR2);}8*SUBROUTINE LINK
REG(SK52,SVR3);}6*LINK FOR 3TH LEVEL SUBS
REG(SK54,SVR0);}8*SUBROUTINE LINK
*
*AVAILABLE SRATCH PAD REGS ARE: NONE
*
*
*

*
*LIST OF LOWER REGISTER ASSIGNMENTS
 REG(R6,VR);}6*VOLATILE LOWER REGISTER 
REG(R5,RCP);}3*READ CHARACTER POINTER
REG(R4,WCP);}3*WRITE CHARACTER POINTER
REG(R3,WCNT);}2*WRITE CHARACTER COUNT
REG(R1,MTCE);}1*ADDRESS OF ENTRY FOR LINE IN CHARACTER POINTER TABLE
REG(R2,RCNT);}2*READ CHARACTER COUNT
**PAGE
*
*LOCATIONS IN MEMORY THAT CONTAIN TEMPS FOR CHIO
*
*THESE ARE TAKEN RELATIVE TO BUF0 AND ARE NULL BUFFER
*
 DPM(ZZZ,0);}2*MUST CONTAIN ZERO
 DPM(ZRB,1);}1*THIS CONTAINS . USED AS NULL STRING
*DPM(SPARE,2);
*
 DF(OVTIM,0,4,4);}7*OVER FLOW TIME BIT
 DF(FTOSUB,0,0,3);}0*LOCATION TO GO ON WAKEUP
 DF(FTOTIM,0,4,23);}7*TIME OF WAKEUP
**PAGE
*LIST OF CONSTANTS REFERENCED BY CHIO 
 DPM(WKNONE,0);}**NO WAKEUP
 DPM(WKI,1);}1*WAKE FOR INPUT IF VIC IS ON
 DPM(WKB,2);}3*SAME AS WKI,(BREAK CHARACTER)
 DPM(WKQ,3);}3*WAKEUP FOR A WAIT
 DPM(WKX,4);}4*WAKEUP FOR AN ESCAPE CHARACTER
 DPM(WKN,5);}4*NORMAL WAKEUP
 DPM(WKBERT,6);}1*WAKEUP PROCESS IN Q (OTHERWISE LIKE WKW)
 DPM(WKO,7);}3*WAKEUP FOR OUTPUT IF WOC IS ON
 DPM(STFLAG,4B7);}/*BIT THAT SAYS POINTER MODIFIED
DPM(TOUTPUT,40B);}4*ALERT REQUEST FOR TTY OUTPUT
DPM(TINPUT,2B7+40);}1*ALERT REQUEST FOR TTY INPUT
DPM(RDCKL,2B7+20B);}0*READ CLOCK LOW ORDER BITS
DPM(RDCKH,2B7+41B);}8*READ CLOCK HIGH ORDER BITS
 DF(RCHAR,0,16,23);}6*RIGHT SIDE CHARACTER
 DF(LCHAR,0,0,7);}8*LEFT SIDE CHARACTER
 DF(MCHAR,0,8,15);}7*MIDDLE CHARACTER
 DPM(BLNG,10B);}0*BUFFER LENGTH
 DPM(SEC1H,50000D);
DPM(WHYAT2,2B7+20B);}3*ARG FOR ALERT TO DET. WHY ATT2
DPM(NULSB,4);}1*NULL SUBROUTINE ,CLOCK DRIVEN
*
*CONTROL CHARACTERS:
*
*SHIFT1 > SNULL > FLDCHAR > ALL OTHERS PRSENTLY DEFINED
 DPM(SHIFT1,37B);
 DPM(SNULL,35B);
 DPM(FLDCHAR,33B);
 DPM(CBREAK,32B);}.*CHARACTER SET IF BREAK IN THE LINE
 DPM(SUBI,31B);}0*INDEFINITE SUBSTITUTE FOR ERROR CHARACTER
 DPM(SUB,30B);}1*SUBSTITUTE FOR 1 ERROR CHAR
 DPM(CHAX,35B);}1*LOWEST LEGAL OUTPUT CONTROL CHARACTER
*
*OTHER CHARACTERS
*
 DPM(CRET,215B);}1*CARRAIGE RETURN FOR MODEL 35/37
 DPM(LINEFD,412B);}.*LINE FEED FOR MODEL 35/37
*
*BIT SCAN TIME INTERVALS * 10 MICROSECOND
*
 DPM(N35I,130);}0*10^5/770 
 DPM(N37I,96);}2*10^5/1050
 DPM(N2741,106);}0*1^5/7*
 DPM(PRTFL,2);}2*PROTECT USED FOR WAKEUP
 DPM(ATMS,2);}2*NO O THE MICROSCEDULER M. P. FOR ATTENTION
*
*WAKEUP TYPES
*
 DF(QWKW,0,5,5);}1*WAKEUP BIT FOR QUIT CHARACTER
 DF(XWKW,0,4,4);}1*WAKEUP BIT FOR ESCAPE
 DF(NWKW,0,7,7);}1*NORMAL WAKEUP BIT
*

*
*CPU TABLE AND ABSOLUTE CORE LOCATIONS
 DPM(WPL,15B);}3*WAKEUP POINTER LOCATION (USIBTOP)
 DPM(CPUIT,40B);}-*ADDRESS OF CPUIT INTERFACE TABLE(/32)
 DPM(RTHIGH,10B);}/*HIGH ORDER PART OF REAL TIME CLOCK
DPM(SRMEM,5B);}2*LOCATION TO STORE MEMORY SWITCHES
 DPM(RTLOW,11B);}1*LOW ORDER PART OF REAL TIME CLOCK
 DPM(RTHBASE,12B);}/*HIGH ORDER CLOCK ADJUST
 DPM(RTLBASE,13B);}/*LOW ORDER CLOCK ADJUST
 DPM(SRMEM,5);}8*LOCATION OF SWITCH REG FOR RESTART
 DPM(CHERRL,2550B);}4*TYPE OF ERROR FOR UTP (1,2,3,4)
*
*THE FOLLOWING CELLS CONTAIN INTERESTING VARIABLES
*ASSOCIATED WITH BUFFER UTILIZATION
 DPM(XIB,60B);}2*NO. OF EXTRA INPUT BUFFERS USED (/4)
 DPM(XOB,61B);}3*NUMBER OF EXTRA OUTPUT BUFFERS USED (=XIB+1)
DPM(BERTHOLD,62B);}4*PROCESS TO AWAKE IF BUFFER COUNTS HIGH
 DPM(BRECHT,63B);}-*FLAG TO INDICATE WHETHER BERTHOLD IS AWAKENED
 DPM(RECC,64B);}1*RATE ERROR CHARACTER COUNTS
 DPM(IDLCNT,65B);}6*INCREMNTED IF NOTHING TO DO
 DPM(F24C,66B);}4*FALSE 2400 BAUD LINE REQUEST COUNT
 DPM(TRECNT,67B);}2*COUNT OF TRANSMITTER RATE ERRORS
 DPM(PROB,70B);}2*INCREMENTED EVERY TIME PRUPDATE DOES NOTFINISH
 DPM(BADWK,71B);}1*NUMBER OF TIMES WAKEUP BUFFER FULL
 DPM(ILC24,72B);}/*ILLEGAL CONTROL CHAR TO 2400 BAUD LINE COUNT
 DPM(NULRQC,73B);}.*COUNT OF NULL REQUESTS
*
*
*
*360 INTERFACE CONSTANTS
*
DPM(ST360,183D);}7*TAPE START CONTROL CHARACTER
DPM(RS360,190D);}7*RESTART CONTROL CHARACTER
DPM(VCC,72D);}2*VALID CHECK CHARACTER
DPM(IVCC,65D);}1*INVALID CHECK CHARACTER
 DPM(NUL360,71D);}6*MAY BE IGNORED IN 360 INIT PROCESSDURE
DPM(CORCHK,52525252B);}2*CHECK SUM TOTAL
DPM(L360,2);}3*2400 BAUD LINE NUMBER FOR 360
*


*
*CONDITIONS USED FOR BRANCHING
*
BCNV(ATT2,34B,(QCALL* FB24H));}#*2340 BAUD LINE REQUEST
BCNV(ATT1,36B,());}8*ATTENTION 1
BCNV(ATT3,35B,());}8*ATTENTION 3 - HIGH PRIORITY ATTENTION
BCNVF(LB=0,LBZ,22B,());}'*BOOLEAN LEFT = 0
BCNVF(LB#0,LBNZ,23B,());}'*BOOLEAN LEFT # 0
BCNVF(Z<0,ZLZ,17B,());})*Z < 0
BCNVF(Z>=0,ZGEZ,16B,());}'*Z >= 0
BCNV(NOREQ,27B,(QCALL* FRQCPU)); *REQUEST FROM CPU
BCNV(NMOD8,21B,());}"*YBUS MOD 8 # 0 
BCNV(ASET,33B,());}(*BRANCH IF FLIP FLOP A SET
BCNV(ARESET,32B,());}&*BRANCH IF FLIP FLOP A RESET
 BC(IFUNPRO,30B,());}.*BRANCH IF UNPROTECTED
BCNV(ODD,25B,());}#*Y MOD 2 = 1
BCNV(NFAIL,31B,());}6*FAILURE LEVEL NOT TRUE
BCNV(NODD,24B,());}#*Y MOD 2 = 0
BC(IBREAK,45B,());}8*BREAKPOINT REACHED
*
*SPECIAL CONDITIONS USED
SCNV(SABORT,77B,(QCALL* FSABORT));}'*ABORT TO QSPL CODE
SCNV(SETA,30B,());}0*SET FLIP FLOP A
SCNV(RESETA,31B,());}.*RESET FLIP FLOP A
SC(PROTECT,25B,());
SC(UNPROTECT,20B,());
SCNV(TOCPU,76B,(QCALL FTOCPU));}**DEBUG CALL TO CPU
SCNV(SIGUTP,17B,(NOP));
SC(ALERT,14B,(QCALL QALERT));},*ALERT INPUT/OUTPUT DEVICE
SC(POT,15B,(QCALL QPOT));}3*POT
SC(PIN,16B,(QCALL QPIN));}3*PIN
SC(SETFAIL,33B,());}+*SEND STROBE 2 BECAUSE ABORT
SC(RESETFAIL,32B,());}2*RESET REQUEST STROBE 2
SC(RESETCPU,23B,());}3*RESET REQUEST STROBE LATCH 1
SCNV(RESETTU,26B,());}&*RESET 360
SCNV(SETBAS,52B,());}'*SELECT CTP SCRATCHPADS
*

*}&FREEZE
}'NOLIST INCLUDE;
}'END;
**BEGIN TABLE
**CENTER MULTIPLEXOR LINE TABLE (MXTA)
**SPACE 5
 DF(XIN,0,0,23);
 DF(XOUT,1,0,23);
**END TABLE
**SPACE 5
**LIST
**PPAGE
**PAGE
**BEGIN TABLE
**CENTER MULTIPLEXOR OUTPUT TABLE - IN PRIVATE MEMORY (MXOTA,MXTE)
**SPACE 5
}(EVALN(QQ,0);
 DF(EOST,QQ,0,1);}#*ERROR OUT STATE
**TAB}&* 0 NORMAL OUTPUT TO LINE AND ERROR BUFFER
**TAB}&* 1 NO OUTPUT ALLOWED}"- OUTPUT FROM ERROR BUFFER
**TAB}&* 2 RESYNC IN PROGRESS
 DF(OSLM,QQ,2,3);}0*OUTPUT STRING LENGTH MODE
 DF(OLDN,QQ,4,11);}/*OUTPUT LOCAL DEVICE NUMBER
 DF(XOCCNT,QQ,12,15);},*OUTPUT CHARACTER COUNT
 DF(XORCP,QQ,16,23);}/*OUTPUT READ POINTER
 EVALN(QQ,QQ+1);
 DF(XOWCP,QQ,0,7);}/*OUTPUT WRITE CHARACTER POINTER
 DF(CHKO1,QQ,8,15);}#*CHECKSUM ON OUTPUT TO POINT (CHAR 1)
 DF(CHKO2,QQ,16,23);}%*CHECKSUM ON OUTPUT TO POINT (CHAR 2)
 EVALN(QQ,QQ+1);
 DF(XOBN,QQ,0,7);}0*OUTPUT BLOCK NUMBER
 DF(XEEB,QQ,8,15);}/*END ERROR BLOCK
 DF(OBS,QQ,16,23);}/*OLDEST BLOCK SENT
 EVALN(QQ,QQ+1);
 DF(NCO,QQ,0,7);}%*NUMBER OF CHARCTER OUTPUT IN INTERVAL
 DF(NCSCD,QQ,16,23);}%*NUMBER OF CHARACTERS SENT TO CURRENT MEDIUM SPEED DEV. IN INTERVAL
 DF(NMSD,QQ,8,15);}%*NEXT MEDIUM SPEED DEVICE TO SEND CHARACTERS TO
 EVALN(QQ,QQ+1);
 DF(X3CB,QQ,0,23);}0*THREE CHARACTER BUFFER
 EVALN(QQ,QQ+1);
 DF(BITTB0,QQ,0,23);}#*FIRST WORD OF BIT TABLE
 DF(BITTB1,QQ+1,0,23);}&*SECOND WORD OF BIT TABLE
 DF(BITTB2,QQ+2,0,23);}%*THIRD WORD OF BIT TABLE
 DF(BITTB3,QQ+3,0,23);}&*LAST WORD OF BIT TABLE
 DF(BEBP,QQ+4,0,23);}2*FIRST WORD OF OUTPUT BLOCK BUFFER
**TAB}:*BUFFER IS 12 TIME N WORDS LONG 
**END TABLE
**SPACE 5
**LIST
**PPAGE
**PAGE
**BEGIN TABLE
**CENTER MULTIPLEXOR INPUT TABLE (MXITA,MXTE)
**SPACE 5
 EVALN(QQ,0);
 DF(IEC,QQ,0,1);}%*INPUT ERROR CONDITION
**TAB}&* 0 NORMAL INPUT INPUT FROM MULTIPLEXOR
**TAB}&* 1 IGNORE INPUT UNTIL RESYNC
**TAB}&* 2 RESYNC IN PROCESS
 DF(ISLM,QQ,2,3);}0*INPUT STRING LENGTH MODE
 DF(ILDN,QQ,4,11);}7*INPUT LOCAL DEVICE NUMBER
 DF(XICCNT,QQ,12,15);},*INPUT CHARACTER COUNT
 DF(XIRCP,QQ,16,19);}-*INPUT READ POINTER
 DF(XIWCP,QQ,20,23);}-*INPUT WRITE CHARCTER POINTER
 EVALN(QQ,QQ+1);
 DF(XIBN,QQ,0,7);}0*INPUT ERROR BLOCK NUMBER
 DF(CHKI1,QQ,8,15);}#*CHECKSUM ON INPUT TO POINT (CHAR 1)
 DF(CHKI2,QQ,16,23);}%*CHECKSUM ON INPUT TO POINT (CHAR 2)
 EVALN(QQ,QQ+1);
 DF(FWINB,QQ,0,23);}.*FIRST WORD OF INPUT BUFFER
 DF(LWINB,QQ+10,0,23);}+*LAST WORD OF INPUT BUFFER
}(EVALN(QQ,QQ+11);
 DF(FLNFD,QQ,0,11);}.*FIRST LINE NUMBER FOR LOCAL DEVICE;
 DF(SLNFD,QQ,12,23);}-*SECOND LINE NUMBER FOR LOCAL DEVICE
**END TABLE
**SPACE 5
**LIST
**PPAGE
**PAGE
**WORD LENGTH 16
**BEGIN TABLE
**CENTER MULTIPLEXOR LINE BUFFER
**SPACE 5
}(EVALN(QQ,0);
 DF(CBCP,QQ,0,7);}$*COMPUTER BOUND CHARACTER IN PROCESS
}(EVALN(QQ,QQ+1);
 DF(CBCR,QQ,0,7);}$*COMPUTER BOUND CHARACTER READY
}(EVALN(QQ,QQ+1);
 DF(CBD,QQ,1,7);}%*COMPUTER BOUND DEVICE
}(EVALN(QQ,QQ+1);
 DF(CBCBP,QQ,4,7);}%*BIT POSITION FOR COMPUTER BOUND CHARACTER
 DF(DBCBP,QQ,0,3);}%*BIT POSITION FOR DEVICE BOUND CHARACTER
}(EVALN(QQ,QQ+1);
 DF(DBCP,QQ,0,7);}$*DEVICE BOUND CHARACTER IN PROCESS
}(EVALN(QQ,QQ+1);
 DF(DBCR,QQ,0,7);}$*DEVICE BOUND CHARACTER READY
}(EVALN(QQ,QQ+1);
 DF(DBD,QQ,1,7);}%*DEVICE BOUND DEVICE
}(EVALN(QQ,QQ+1);
 DF(CHKI1R,QQ,0,7);}%*CHECKSUM ON INPUT TO POINT (CHAR 1)
 DF(CHKI2R,QQ+1,0,7);}#*CHECKSUM ON INPUT TO POINT (2 CHAR)
}(EVALN(QQ,QQ+1);}"EVALN(QQ,QQ+1);
 DF(CHKO1R,QQ,0,7);}%*CHECKSUM ON OUTPUT TO POINT (CHAR 1)
 DF(CHKO2R,QQ+1,0,7);}%*CHECKSUM ON OUTPUT TO POINT (2 CHAR)
}(EVALN(QQ,QQ+1); EVALN(QQ,QQ+1);
 DF(CIBNR,QQ,0,7);}**CURRENT INPUT BLOCK NUMBER
}(EVALN(QQ,QQ+1);
 DF(COBNR,QQ,0,7);}**CURRENT OUTPUT BLOCK NUMBER
}(EVALN(QQ,QQ+1);
 DF(BEBPR,QQ,0,7);}**BEGIN ERROR BUFFER POINTER
}(EVALN(QQ,QQ+1);
 DF(EEBPR,QQ,0,7);}**END ERROR BUFFER POINTER
}(EVALN(QQ,QQ+1);
 DF(NIECP,QQ,0,7);})*NEXT INPUT ERROR CHARACTER POINTER
*}"ODT PROGRAM
*}"DECLARATIONS
*}"BRANCH CONDITIONS

}'DEFINE BCONDITION X#0,XNE0_3,();
}'DEFINE BCONDITION X=0,XEQ0_2,();
}'DEFINE BCONDITION Y<0,YLT0_10B,();

*}"SPECIAL CONDITIONS

}'DEFINE SCONDITION ALERT_14B,(),NOVCY;
}'DEFINE SCONDITION POT_15B,(),NOVCY;
}'DEFINE SCONDITION PIN_16B,();

*}"PROGRAM PROPER
START: R3_0;
STARTP1: Z_4B7+2,ALERT;
}'Q_4B7,PIN,Z_E2;
}'GOTO STARTP1 ON Q AND Z#0,Q_177B;
}'Z_Q AND Z, Q_107B;
}'GOTO START ON ZEOR Q=0,Q_57B;
}'GOTO SLASH ON ZEOR Q=0,Q_15B;
}'GOTO CRLF ON ZEOR Q=0,Q_12B;
}'GOTO CRLF ON ZEOR Q=0,Q_170B;
}'M_Z AND Q,Q_60B;