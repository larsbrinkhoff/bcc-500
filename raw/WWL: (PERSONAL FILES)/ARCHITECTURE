.GL}"SUF-FIC-IENT SOME-TIMES REMAIN-DER PRO-JECT JAN-UARY
.GL FIF-TEEN FEB-RU-ARY
.GL}"UTIL-IZE SYS-TEMS STAND-BY SOFT-WARE SEPAR-ATE
.GL SECUR-ITY REFER-ENCES PROCES-SORS PROB-ABIL-ITY
.GL PHYSICAL-LY OPER-ATION NET-WORK NECES-SAR-ILY MULTIPORT
.GL MINI-MIZED MICRO-PRO-CES-SORS MEGA-WORDS LOGICAL-LY
.GL INFOR-MA-TION INEX-PEN-SIVE INDE-PEN-DENT-LY INCLU-SION
.GL IMPLE-MEN-TA-TION IDEN-TICAL HOW-EVER GENERAL-LY
.GL EXAM-PLE EQUIV-ALENT DEFIN-ITION DEDI-CA-TION CORPO-RA-TION
.GL CONTROL-LERS CON-TENTS CONSIDER-ATIONS CONFIG-URA-TION
.GL COMPUT-ING COMPAN-IES COMMUNI-CA-TION COMMUN-ICATE
.GL COM-MERCIAL CEN-TRAL CAPA-CITY AUTO-MAT-ICAL-LY
.GL ASSOC-IATED ADDRES-SING
.SP 5
.CENTER
^UTHE BCC 500 COMPUTING SYSTEM;

.CENTER
AN INTRODUCTION AND OVERVIEW^L
.SP 10
1.0}"^CINTRODUCTION
.SP 2
}'/THIS DOCUMENT DESCRIBES THE ARCHITECTURE OF THE ^CBCC 500
SYSTEM, STRESSING ITS MULTIPROCESSOR STRUCTURE AND THE EFFECTS OF
THIS STRUCTURE ON THE ORGANIZATION AND IMPLEMENTATION OF THE ^CBCC
500 OPERATING SYSTEM.
/DETAILS OF THE SYSTEM'S HARDWARE COMPONENTS AND DESCRIPTIONS OF
VARIOUS ASPECTS OF THE USER MACHINE PROVIDED BY THE SYSTEM ARE
FOUND IN OTHER DOCUMENTS AND PAPERS [LIST OF
REFERENCES].
/IN ORDER TO GIVE THE READER SOME ORIENTATION,
HOWEVER, THE REMAINDER OF THIS SECTION
IS DEVOTED TO A SHORT ACCOUNT OF THE SYSTEM'S ORIGINS.
/BRIEF MENTIONS OF ITS
INTENDED USES, ITS USER MACHINE FEATURES, AND ITS HARDWARE STRUCTURE
ARE GIVEN IN /APPENDIX /I.
.SP 2
.EJECT 15
1.1}"/BACKGROUND
.SP
}'/THE ARCHITECTURE OF THE ^CBCC 500 SYSTEM WAS LARGELY
DETERMINED BY A DESIGN TEAM WORKING UNDER /PROJECT ^CGENIE AT THE
/UNIVERSITY OF /CALIFORNIA, /BERKELEY IN 1968 [ANOTHER LIST OF OLD
/GENIE REFERENCES, 6700 DOCUMENTS, /VAN /TUYL'S THESIS, ETC.]*.
/THE /PROJECT'S GOAL AT THAT TIME WAS TO DEVELOP A BASIC, COST-EFFECTIVE
RESOURCE-SHARING SYSTEM STRUCTURE WHICH COULD SERVE AS THE NUCLEUS
FOR A NUMBER OF OPERATING SYSTEMS TAILORED TO SPECIFIC APPLICATIONS
AREAS.

.SP 2
-------------

*/THE /PROJECT WAS ASSOCIATED WITH SEVERAL COMMERCIAL ORGANIZATIONS IN
A JOINT VENTURE TO PRODUCE WHAT WAS THEN TERMED THE ^CSCC 6700.
.EJECT
}'/IN EARLY 1969 A NUMBER OF INDIVIDUALS FROM /PROJECT
^CGENIE JOINED WITH OTHERS TO FORM /BERKELEY /COMPUTER /CORPORATION
(^CBCC)
TO DEVELOP REMOTELY-ACCESSED RESOURCE-SHARING COMPUTING SYSTEMS.
/THE SYSTEM ARCHITECTURE CONCEPTS WERE CARRIED OVER FROM THE /PROJECT.
/THE SPECIFIC 500 HARDWARE AND SOFTWARE WERE DEVELOPED 
IN THE PERIOD /JANUARY 1969 THROUGH /JULY 1970 AS A PROTOTYPE FOR
THE COMPANY'S SUBSEQUENT LINE OF SYSTEMS.
^CBCC WAS UNABLE TO SECURE SUFFICIENT FUNDING TO ESTABLISH
A VIABLE MARKET BASED ON THE CONCEPT OF CENTRALIZED RESOURCE-SHARING
SYSTEMS
AND WAS FORCED TO TERMINATE OPERATIONS
IN /MARCH 1971.
/THE 500 SYSTEM WAS OPERATED, HOWEVER, FOR DEMONSTRATION
PURPOSES AND FOR ^CBCC'^ES OWN PROGRAMMING DEVELOPMENT
ACTIVITIES FROM MID-1970 TO THE COMPANY'S DEMISE.

}'/IN 1972 THE COMPANY'S HARDWARE ASSETS -- INCLUDING THE
500 PROTOTYPE -- WERE PURCHASED BY THE /UNIVERSITY OF /HAWAII, AND
THE EQUIPMENT WAS DISMANTLED AND MOVED TO /HONOLULU, WHERE IT WAS
REFURBISHED AND REASSEMBLED BY ^UTHE ALOHA SYSTEM^L /PROJECT
TO BE USED AS A RESEARCH AND COMPUTING TOOL.
/THE SYSTEM BECAME ACTIVE AGAIN IN /FEBRUARY 1973, AND IT HAS BEEN
USED SINCE THAT TIME BY THE /PROJECT, BY OTHER ^CARPA
CONTRACTORS (VIA THE ^CARPA NETWORK) AND
IN CLASSES OF THE /DEPARTMENT OF /ELECTRICAL /ENGINEERING.
.SP 2
.EJECT 15
.EJECT
2.0}"^USYSTEM ARCHITECTURE^L
.SP 2
}'/THE SIMPLEST VIEW OF THE 500 SYSTEM ARCHITECTURE IS SHOWN
IN /FIGURE 1.
/IN THE FIGURE WE SEE SIX PROCESSORS CLUSTERED AROUND A 
COMMON MEMORY.
/THE MULTIPROCESSING NATURE OF THE STRUCTURE DERIVES FROM
THE CONCURRENT USE OF THE PROCESSORS IN SUPPORT OF A COMMON TASK
AND THE USE OF A COMMON MEMORY FOR INTERPROCESSOR COMMUNICATION.
/THE COMMON TASK SUPPORTED BY THIS COMPUTING STRUCTURE IS, OF COURSE,
THE PROVISION TO EACH SYSTEM USER OF A FICTICIOUS, POWERFUL ^IVIRTUAL
^IMACHINE WHICH IS THE TARGET OF SYSTEMS PROGRAMMERS AS THEY PREPARE
COMPILERS AND OTHER LARGE SUB-SYSTEMS FOR THE CONVENIENCE OF THE USERS.
/PROVIDING AND CONTROLLING THE VIRTUAL MACHINE -- SYSTEM RESOURCE
ALLOCATION -- IS ONE OF THE MORE PROMINENT ROLES OF AN OPERATING SYSTEM
ON ANY TYPE OF COMPUTING STRUCTURE.

.FIGURE SPACING 24
.CENTER
/FIGURE 1.}"/B/C/C 500 /SYSTEM.
.SP 2
}'/THE SIX PROCESSORS ARE BUILT ALMOST IDENTICALLY.
/IN THE SYSTEM THEY ARE INDIVIDUALLY DEDICATED, HOWEVER, TO VARIOUS
ROLES.
/THE NATURE OF THIS DEDICATION AND ITS IMPLICATIONS ARE AMONG THE MORE
INTERESTING ASPECTS OF THE SYSTEM ARCHITECTURE.
/TWO OF THE PROCESSORS HAVE ENHANCED HARDWARE CAPABILITY AND ARE USED TO
IMPLEMENT THE MORE VISIBLE ASPECTS OF THE VIRTUAL MACHINE; THEY ARE CALLED
ACCORDINGLY ^CCPU^ES (ALTHOUGH THE TERM IS NOT ENTIRELY APT IN THIS 
CONTEXT).
/THE OTHER PROCESSORS ARE DEDICATED TO VARIOUS TASKS OF RESOURCE ALLOCATION.
.EJECT
2.1}"/PROCESSOR /ASSIGNMENTS
.SP
}'/FIGURE 2 SHOWS THE NAMES OF THE 500 SYSTEM PROCESSORS AND 
SUGGESTS THEIR ASSIGNMENTS.
.FIGURE SPACING 24
.CENTER
/FIGURE 2.}"/B/C/C /CENTRAL-SITE /PROCESSOR /ASSIGNMENTS.
.SP 3
/THE PROCESSORS ARE:
.SP 3
.RM 5,5
^I^CCPU^E^IS

}'/THE TWO /^IC^EENTRAL /^IP^EROCESSING /^IU^ENITS ARE USED ALMOST
EXCLUSIVELY TO EXECUTE THE CODE PROVIDED BY THE SYSTEM'S USERS.
/THE RATHER SIGNIFICANT ^CCPU POWER REQUIRED IN OTHER SYSTEMS FOR THE
SYSTEM'S OWN MANAGEMENT FUNCTIONS IS PROVIDED IN THE 500 SYSTEM BY MORE
SPECIALIZED PROCESSORS.
/IT IS NECESSARY, OF COURSE, FOR THE ^CCPU^ES TO COMMUNICATE WITH THE
OTHER PROCESSORS, AND IT IS UNREASONABLE TO REQUIRE THE USER OF THE SYSTEM TO
WRITE SUCH CODE INTO EACH OF HIS PROGRAMS (ESPECIALLY
WITHOUT ERROR).
/HENCE AS A FEATURE OF THE ^CCPU, CODE IS AUTOMATICALLY INCLUDED INTO
EACH USER'S PROGRAM TO DO THE REQUISITE
COMMUNICATION TASKS AND A NUMBER OF OTHERS WHICH ARE 
CONVENIENT TO THE USER.
/THIS SYSTEM-PROVIDED CODE IS CONSIDERED TO BE LOGICALLY A PART OF EACH
USER'S JOB - CALLED ^IPROCESS IN OUR TERMINOLOGY -- AND IS SHARED BY ALL
PROCESSES.
/IT IS FULLY PROTECTED BY VARIOUS ^CCPU HARDWARE FEATURES; IT
CANNOT BE INSPECTED OR MODIFIED BY USER CODE, BUT ONLY ENTERED AT
DISCRETE ENTRY POINTS IMPLEMENTED AS SYSTEM ^ICALLS^E.
/THESE CALLS TAKE ON THE NATURE OF VIRTUAL MACHINE "INSTRUCTIONS," 
CHECKING CAREFULLY THE USER'S INTENDED ACTIONS AND HIS AUTHORITY TO DO THEM
BEFORE INTERACTING IN ANY WAY WITH THE REST OF THE SYSTEM.

}'/BEYOND THE PROTECTION MECHANISMS ALLUDED TO ABOVE 
THE INSTRUCTION AND ADDRESSING CAPABILITIES OF THE ^CCPU^ES ARE OF
LITTLE IMPORTANCE TO THE SYSTEM ARCHITECTURE.
/IN THIS SYSTEM VIRTUALLY ANY ^CCPU COULD BE USED (ASSUMING
HARDWARE COMPATIBILITY WITH THE MEMORY SYSTEM AND THE REQUISITE
PROTECTION MECHANISMS).
.SP 2
^I^CCHIO

}'/THE ^C^ICH^EARACTER-ORIENTED /^II^E^//^IO PROCESSOR HAS TWO
MAIN FUNCTIONS:}"(1) TO COMMUNICATE AND MANAGE THE TERMINALS WHICH
MAY BE CONNECTED TO THE SYSTEM, AND (2) TO PERFORM A NUMBER OF FUNCTIONS
RELATED TO DYNAMIC BUFFERING OF CHARACTER /I^//O STREAMS TO AND FROM
THE USER PROCESSES ON THE ^CCPU^ES.
/ORIGINIALLY THE ^CCHIO WAS DESIGNED TO COMMUNICATE WITH A NUMBER OF REMOTELY
LOCATED COMPUTERS TERMED /DATA /COMMUNICATION /COMPUTERS (^CDCC^ES)
TO WHICH THE ACTUAL TERMINALS WERE CONNECTED.
/THUS IN CONNECTION WITH (1) THE ^CCHIO WAS TO SUPERVISE AND
CONTROL THE VARIOUS ^CDCC^ES, LOAD THEIR LOCAL MEMORIES, MULTIPLEX 
/I^//O FOR INDIVIDUAL TERMINALS, ACKNOWLEDGE CORRECT RECEIPT OF PACKETS
FROM ^CDCC^ES, INITIATE RETRANSMISSIONS TO ^CDCC^ES, ETC.
/IN /HAWAII IT WAS NOT NECESSARY TO IMPLEMENT A FULL-SCALE
COMMUNICATIONS NETWORK JUST TO ACCOMMODATE THE LOCAL TERMINALS; THEY WERE 
WIRED DIRECTLY TO THE ^CCHIO PROCESSOR AND ITS ACTIVITIES WERE MODIFIED TO 
DEAL WITH THE TERMINALS DIRECTLY.
/REMOTE TERMINALS ARE ACCOMMODATED BY MEANS OF THE ^CARPA NETWORK,
WHICH IS INTERFACED TO THE 500 SYSTEM THROUGH THE ^CCHIO PROCESSOR.
.SP 2
^I^CSCHED

}'/THE ^I^CSCHED^EULING PROCESSOR'S PRINCIPAL FUNCTION IS TO
SCHEDULE THE TWO ^CCPU^ES AMONGST THE VARIOUS ACTIVE PROCESSES.
/THUS IT IS RESPONSIBLE FOR FIELDING WAKEUP CONDITIONS AS THEY ARE
GENERATED AND FOR MAKING DECISIONS ON THE ORDER IN WHICH PROCESSES
ARE PASSED THROUGH THE CENTRAL MEMORY FROM, SAY, DRUM WHERE THEY
COMMONLY RESIDE.
/THIS INFORMATION IS PASSED TO THE MEMORY MANAGEMENT PORTION OF THE
SYSTEM FOR APPROPRIATE ACTION.
/ON A DIFFERENT LEVEL OF ACTIVITY THE ^CSCHED^EULER MAKES FINAL DECISIONS
AS TO WHICH OF SEVERAL PROCESSES READY TO RUN IN THE CENTRAL MEMORY 
IS ASSIGNED TO EACH ^CCPU.
/THIS DECISION IS NORMALLY MADE AS THE PROCESS ON EACH ^CCPU BLOCKS.
/IT IS POSSIBLE FOR THE ^CSCHED^EULER TO PRE-EMPT A RUNNING PROCESS ON
A ^CCPU; THIS DOES NOT NORMALLY HAPPEN, AS THE ALGORITHMS FOR
SCHEDULING ARE DESIGNED TO PERMIT ^CCPU TASKS NORMALLY TO DISMISS
THEMSELVES OR RUN TO THE END OF A PRESET TIME INTERVAL.
/THE ^CSCHED^EULER GENERATES ITS OWN REAL-TIME WAKEUP CONDITIONS.
.SP 2
^I^CMMP

}'/THE ^I/M^EEMORY /^IM^EANAGEMENT /^IP^EROCESSOR IS RESPONSIBLE
FOR MANAGEMENT OF THE ENTIRE SYSTEM MEMORY.
/WE DEFINE MEMORY HERE TO INCLUDE THE CONTENTS OF DRUM AND DISK AS
WELL AS CENTRAL MEMORY.
/THE ^CMMP TOGETHER WITH THE STORAGE UNDER ITS CONTROL CAN BE VIEWED
AS A SEPARATE SYSTEM WITH A TABLE-DRIVEN INTERFACE TO THE REST OF THE 
500 SYSTEM.
/THE MEMORY SYSTEM IS DESCRIBED MORE FULLY IN /SECTION 2.3 BELOW.
/HERE WE SIMPLY POINT OUT THAT THE FUNCTION OF THE ^CMMP IS TO GET
THE RIGHT INFORMATION INTO THE RIGHT PLACE AT THE PROPER TIME.
.SP 2
^I^CSMP

}'/THE ^I/S^EYSTEM /^IM^EONITORING /^IP^EROCESSOR CONTINUOUSLY
MONITORS A NUMBER OF INDICATORS WHICH ARE SET ON THE OCCURRENCE OF SOME
MALFUNCTION.
/IT IS EQUIPPED WITH A NUMBER OF SPECIAL CONTROL LINES LEADING TO
THE OTHER PROCESSORS AND HAS THE ABILITY TO CONTROL THESE PROCESSORS AS
WELL AS MONITORING THE SYSTEM'S HEALTH.
/THE ^CSMP MAY THUS EFFECT AUTOMATIC CRASH
RECOVERY PROCEDURES, IN MANY CASES BEFORE SIGNIFICANT DAMAGE TO THE CONTENTS
OF VARIOUS SYSTEM TABLES HAS BEEN DONE.
/THE ^CSMP ALSO CONTAINS A SPECIAL SYSTEM DIAGNOSTIC AND CONTROL ROUTINE
CALLED ^CSYSDDT.
/THIS ROUTINE IS EQUIPPED WITH AN INTERACTIVE INTERFACE VIA A SPECIAL
TERMINAL TO A SOFTWARE OR HARDWARE DIAGNOSTICIAN WHO CAN CONTROL
INDIVIDUAL PROCESSORS IN THE SYSTEM.
/IT CONTAINS A FULL EMULATION FACILITY, FOR EXAMPLE, FOR A ^CCPU.
/EITHER OF THE ^CCPU^ES, WHEN SUSPECTED OF BEING FAULTY, CAN BE
SINGLE-STEPPED BY ^CSYSDDT AND SIMULTANEOUSLY EMULATED SUCH THAT AFTER
THE EXECUTION OF EACH INSTRUCTION THE STATE OF THE REAL ^CCPU CAN BE
COMPARED WITH THAT OF THE EMULATED ONE.
/THIS PROVIDES THE ABILITY TO QUICKLY LOCATE ^CCPU
FAULTS.
^CSYSDDT IS A GENERAL-PURPOSE PROGRAM RUNNING FROM A PRIVATE MEMORY
MODULE ATTACHED TO THE ^CSMP.
/IT PERMITS OTHER DIAGNOSTIC PROCEDURES TO BE DESIGNED ON THE SPOT IF NEED BE
AND READILY INSERTED INTO THE PROCESSOR.
.ER
.EJECT
2.2}"/REALIZATION OF THE /DEDICATED /FUNCTIONS

}'/THE DETERMINING FACTOR FOR THE 500 SYSTEM ARCHITECTURE WAS THE
DEVELOPMENT OF A SIMPLE, BUT POWERFUL MICROPROCESSOR WHICH IS USED AS THE
BASIS OF ALL OF THE SYSTEM'S PROCESSORS.
/THE MICROPROCESSOR, LIKE MOST, HAS ACTIVE REGISTERS, SCRATCHPAD STORAGE,
BASIC ARITHMETIC AND LOGICAL PROCESSING ABILITY, AND AN INTERFACE BOTH TO
THE CENTRAL MEMORY AND TO A PRIVATE MEMORY.
/IT ALSO HAS APPROXIMATELY 2/K OF DIODE READ-ONLY MEMORY (^CROM) FROM
WHICH IT FETCHES ITS MICRO-INSTRUCTIONS.
/THE ^CROM HAS A MINIMUM CYCLE TIME OF ABOUT 65 NSEC; BUT THE ENTIRE
PROCESSOR IS OPERATED SYNCHRONOUSLY WITH A 100 NSEC CLOCK.
/THIS MEANS THAT EACH 100 NSEC A NEW MICRO-INSTRUCTION MAY BE FETCHED 
AND EXECUTED.

}'/EACH WORD IN THE ^CROM CONTAINS ONE MICRO-INSTRUCTION.
/THERE ARE 90 BITS IN EACH WORD, HOWEVER, SO THAT VERY LITTLE
ENCODING OF THE BITS IN THE MICRO-INSTRUCTION IS USED.
/THIS, TOGETHER WITH THE EXISTENCE OF SEVERAL BUSSES CONNECTING THE
VARIOUS STORAGE AND PROCESSING ELEMENTS, PERMITS UP TO THREE OR FOUR 
OPERATIONS TO BE DONE IN A GIVEN MICRO-INSTRUCTION.
/THUS THE PROCESSOR IS THEORETICALLY CAPABLE OF BURSTS OF COMPUTATION OF
UP TO 20 OR 30 MILLION OPERATIONS PER SECOND.
/IN PRACTICE THIS SPEED IS NOT ATTAINED FOR LONG DURATIONS, AS IT IS NOT
ALWAYS POSSIBLE TO CRAM THREE OR FOUR OPERATIONS INTO EVERY INSTRUCTION
AND THE PROCESSOR MUST WAIT FOR MEMORY RESPONSES WHEN IT REFERENCES
CENTRAL OR LOCAL MEMORY.
/ITS AVERAGE RATE OF PROCESSING IS CONSEQUENTLY SOMEWHAT LESS, DEPENDING ON THE
FREQUENCY WITH WHICH IT ACCESSES MEMORY.

}'/IT WAS DECIDED EARLY IN THE 500 SYSTEM DESIGN TO PLACE THE
DEDICATED FUNCTIONS OF EACH PROCESSOR DIRECTLY INTO THE PROCESSOR MICROCODE.
/THIS GIVES A DISTINCTIVE CAST TO THE SYSTEM, AS IT MEANS IN EFFECT THAT
THE BULK OF THE OPERATING SYSTEM EXISTS IN THE PROCESSOR HARDWARE
(MORE PRECISELY, THE ^IFIRMWARE).
/CLEARLY, THE PROCESSORS OPERATING IN THIS MODE HAVE HIGH CAPABILITY
(THEIR INSTRUCTION BANDWIDTH IS HIGH SINCE THEY REFER TO MEMORY ONLY FOR
DATA).
/BUT THE OPERATING SYSTEM ALGORITHMS ARE DIFFICULT TO CHANGE, AS THE
^CROM^ES CAN BE MODIFIED ONLY BY REMOVING AND INSERTING DIODES.

}'/THE DIFFICULTY OF CHANGING THE MICROCODE MAY BE VIEWED AS A
BENEFICIAL CONSTRAINT.
/IT IS THE SAME CONSTRAINT THAT REQUIRES A HARDWARE DESIGNER TO EXERCISE
EXTREME CARE AND REGULARITY IN HIS DESIGNS, YIELDING RESULTS WHICH ARE MORE 
NEARLY CORRECT AND MORE MAINTAINABLE.
/YET, IT IS PROBABLY UNFAIR TO PRESS THE ANALOGY TOO FAR.
/THUS, IN EACH PROCESSOR THERE IS FOUND MICROCODE WHICH, IN MORE CLASSICAL
FASHION EMULATES THE INSTRUCTION SET OF A SIMPLE, CONVENTIONAL PROCESSOR.
/THIS MICROCODE GOES TO MEMORY FOR INSTRUCTION FETCHING FOR THE EMULATED 
PROCESSOR; AND THUS EACH PROCESSOR CAN EXECUTE CONVENTIONAL SOFTWARE.

}'/IN PRACTICE, BOTH TECHNIQUES ARE USED.
/PLACED DIRECTLY INTO FIRMWARE ARE THOSE FUNCTIONS WHICH ARE FUNDAMENTAL,
CLEARLY-KNOWN, TIME-CONSUMPTIVE OPERATIONS.
/IN THE SOFTWARE ARE THOSE FUNCTIONS WHICH ARE NOT SO WELL DEFINED
INITIALLY OR WHICH ARE MOST SUBJECT TO CHANGE.
/THE EMULATED PROCESSOR HAS AN INSTRUCTION TO CALL MICROCODED SUBROUTINES
DIRECTLY, AND THE MICROCODE CAN ALSO START UP AND STOP THE EMULATED
PROCESSOR.
/THUS ONE CAN TAKE TWO VIEWS OF THIS HYBRID APPROACH: THE VIEW THAT THE
MICROPROCESSOR EMULATES A STANDARD PROCESSOR WHICH CONTAINS AN EXTRAORDINARY
SET OF ADDITIONAL INSTRUCTIONS (THE MICROCODED SUBROUTINES) TO HELP IT
PERFORM ITS DEDICATED TASKS, OR THE VIEW THAT THE MICROPROCESSOR PERFORMS
ITS TASKS DIRECTLY FROM MICROCODE, SOME OF WHICH IS SIMULATED BY
THE STANDARD PROCESSOR DUE TO THE NECESSITY TO CHANGE OR PARAMETERIZE IT.
/WE PREFER THE LATTTER VIEW, BUT EITHER RESULTS IN THE SAME END:
THE TIME-CONSUMPTIVE OPERATIONS ARE EXECUTED DIRECTLY FROM MICROCODE
WHILE THAT PORTION OF THE ALGORITHMS MOST SUBJECT TO CHANGE
IS KEPT IN SOFTWARE.
/THIS SOFTWARE RESIDES IN LOCAL MEMORIES FOR THOSE PROCESSORS SO
EQUIPPED; IT IS OTHERWISE FOUND IN DEDICATED AREAS OF THE CENTRAL MEMORY.
/SIMILARLY, DATA STORAGE REQUIRED FOR THE SOLE USE OF A GIVE PROCESSOR IS
KEPT IN PRIVATE MEMORY, WHEREAS CENTRAL MEMORY IS USED FOR THAT STORAGE
WHICH MUST BE SHARED BETWEEN PROCESSORS.
.EJECT
2.3}"/THE /MEMORY /SYSTEM

}'/FIGURE 3 SHOWS THE PRINCIPAL COMPONENTS OF THE MEMORY SYSTEM.
/THE PROCESSORS ACCESS ONLY THE CENTRAL MEMORY (^CCM), SHOWN IN THE
FIGURE AS A FOUR-PORT MEMORY (UP TO FOUR MEMORY TRANSFERS CAN OCCUR
EACH MEMORY CYCLE).
/THREE OF THE PORTS ARE USED FOR PROCESSOR ACCESS, AND THE FOURTH IS 
EXTERNALLY MULTIPLEXED TO ACCOMMODATE THE COLLECTIVE TRANSFERS OF THE
ROTATING MEMORY DEVICES.
/BECAUSE OF THE LARGE NUMBER OF USER PROGRAMS BEING ACCOMMODATED IT IS
NECESSARY TO TRANSFER LARGE QUANTITIES OF INFORMATION RAPIDLY BETWEEN
^CCM AND DRUM AND DISK.
/ONE VIEWPOINT WHICH CAN BE TAKEN OF THE MEMORY SYSTEM IS THAT THE
ROTATING MEMORY -- PRIMARILY DRUM -- CONSTITUTES THE SYSTEM'S
MAIN MEMORY AND THAT THE ^CCM IS BUT A WINDOW ON THIS MEMORY THROUGH 
WHICH THE ^CCPU^ES ARE PERMITTED TO ACCESS USER PROGRAMS SUBJECT
TO USUAL SCHEDULING CONSIDERATIONS.
/WITH SUCH A POINT OF VIEW (SEE /FIGURE 4) WE SEE THE DESIRABILITY FOR 
CONTINUOUS TRANSFER OF INFORMATION THROUGH THE ^CCM.

.FIGURE SPACING 24
.CENTER
/FIGURE 3.}"/B/C/C 500 /MEMORY /SYSTEM.
.SP 3
}'/IN /FIGURE 4 WE NOTE THAT USER PROGRAMS (MORE PRECISELY, PROCESSES)
FOUND IN THE ^CCN MAY BE CLASSED INTO ONE OF FOUR CATEGORIES:
.SP 2
.RM 7
1)}"INCOMING PROCESSES (PARTIALLY LOADED)
.SP
2)}"FULLY LOADED PROCESSES (READY TO RUN)
.SP
3)}"ACTIVE PROCESSES (BEING RUN BY A ^CCPU)
.SP
4)}"OUTGOING PROCESSES (PARTIALLY UNLOADED).
.SP 2
.ER
/CLEARLY THE INDIVIDUAL PROCESSES DO NOT MOVE PHYSICALLY THROUGH THE
^CCM AS /FIGURE 4 SUGGESTS.
.FIGURE SPACING 24
.CENTER
/FIGURE 4.}"/CONCEPTUALIZATION OF THE /MEMORY /SYSTEM OPERATION.
.SP 3
/THEY ARE PLACED INTO RANDOMLY AVAILABLE PAGE SLOTS BY THE ^CMMP AND MAPPED
INTO THEIR PROPER POSITION IN THE LOGICAL ADDRESS SPACE BY PAGE MAPS
ASSOCIATED WITH EACH ^CCPU.
/TO FACILITATE THE HANDLING OF PAGES IN CENTRAL MEMORY, THE DATA
FORMAT ON THE DRUMS AND DISKS WAS DESIGNED SO THAT PAGES ARE THE ONLY UNIT
OF INFORMATION TREATED AS ADDRESSIBLE ENTITIES WITHIN THE MEMORY SYSTEM.

}'/FIGURE 4 ILLUSTRATES HOW THE SIZE OF ^CCM IS MINIMIZED BY
THE RAPID SWAPPING:}"THE ^CCM NEED BE LARGE ENOUGH ONLY TO HOLD THE TWO
ACTIVE PROCESSES PLUS ENOUGH ADDITIONAL SPACE TO "BUFFER" THE PROCESSES UNDER
TRANSFER, I.E., TO ENSURE THAT WITH GOOD PROBABILITY THERE IS ALWAYS A
READY PROCESS TO WHICH TO ASSIGN A ^CCPU WHEN ITS CURRENT PROCESS BLOCKS.
(/THE SYSTEM ACTUALLY DEALS WITH ^IWORKING ^ISETS OF PAGES -- PAGES OF
A PROCESS ON WHICH ALL MEMORY REFERENCES ARE LOCALIZED DURING AN ACTIVE 
QUANTUM OF A PROCESS.)
/THE AMOUNT OF ^CCM USED TO BUFFER INCOMING AND OUTGOING PROCESSES IS KEPT 
LOW BY DYNAMICALLY ALLOCATING SPACE ON THE DRUMS.
/THE ^CMMP WRITES OUT PROCESS PAGES AT ANY SECTOR ADDRESS CURRENTLY 
AVAILABLE AND UNDER
THE READ^/WRITE HEADS; SIMILARLY IT READS IN PROCESSES IN THE ORDER IN
WHICH A PROCESS'S PAGES HAPPEN TO COME UNDER THE HEADS.

}'/THE IDENTITY OF THE PAGES IN A GIVEN PROCESS WORKING SET TOGETHER
WITH THEIR LOCATION IN THE MEMORY SYSTEM IS MAINTAINED BY THE ^CMMP IN
VARIOUS RESIDENT TABLES IN THE ^CCM.
(/THIS SPACE IS NOT SHOWN IN /FIGURE 4.)
/THE ^CMMP MUST REFER TO THESE TABLES CONSTANTLY AND TO THE ROTATIONAL
POSITION OF EACH OF THE 16 ROTATING DEVICES IN ORDER TO KEEP THE FLOW OF
PAGES MOVING AT AN OPTIMUM RATE.
.EJECT
3.0}"^USYSTEM OPERATION^L

}'/THE PURPOSE OF THE SYSTEM IS TO PROVIDE AN ENVIRONMENT FOR
THE EXECUTION OF USER PROCESSES WHICH, IN TURN, TYPICALLY ACCESS AND
MODIFY USER FILES.
/PROCESSES AND FILES ARE THUS PRINCIPAL SYSTEM OBJECTS 
CONSISTING OF PAGES OF INFORMATION CONTAINED WITHIN THE MEMORY SYSTEM
TOGETHER WITH ADDITIONAL DESCRIPTIVE INFORMATION.
/THE PROCESS CONSISTS OF SYSTEM CODE SHARED WITH ALL PROCESSES
(THAT CODE WHICH COMMUNICATES WITH THE MANAGEMENT PROCESSORS),
SYSTEM CODE WHICH MAY BE UNIQUE TO THE PROCESS OR SHARED WITH A 
NUMBER OF OTHER PROCESSES, USER CODE, AND ALL VARIABLE STORAGE.
/IT ALSO INCLUDES A SO-CALLED ^ICONTEXT ^IBLOCK CONTAINING
THE ^CCPU STATE WHEN THE PROCESS IS INACTIVE, UNIQUE NAMES OF ALL
THE PROCESS PAGES, CONSTITUTION OF THE PRESENT WORKING SET OF
PAGES (THOSE PAGES WHICH MUST BE LOADED INTO CENTRAL MEMORY BEFORE
THE PROCESS CAN BE CONSIDERED FOR ACTIVATION), AND MAPPING INFORMATION.
/THE FILE CONSISTS OF THOSE PAGES HOLDING THE FILE'S CONTENTS PLUS 
DIRECTORY INFORMATION, AGAIN NAMING THE PAGES AND ORDERING
THEM WITHIN THE FILE.

}'/THE FILES CAN BE CREATED AND DESTROYED (BY PROCESSES); 
IN THE MEANTIME THEY
RESIDE PERMANENTLY WITHIN THE SYSTEM.
/THE PLACE OF RESIDENCE OF INACTIVE FILES IS, OF COURSE, DISK.
/WHEN FILES ARE ACCESSED THE MEMORY SYSTEM MOVES THEM FIRST TO
DRUM AND THEN TO CENTRAL MEMORY FOR THE ACTUAL ACCESS.
/AS THE FILE IS NO LONGER ACCESSED AND ROOM ON THE DRUM IS NEEDED
FOR NEW FILES OR PROCESSES, THE FILE IS MOVED BY THE MEMORY SYSTEM
BACK TO DISK.

}'/PROCESSES ARE CREATED BY A
SINGLE SYSTEM SUBPROCESS BY USER REQUEST, USUALLY WHEN HE LOGS INTO
THE SYSTEM.
/EACH PROCESS HAS A SUBPROCESS STRUCTURE TO FACILITATE
BOTH THE SYSTEM DESIGN AND THE NEEDS OF THE USER.
/THE STRUCTURE IS A SIMPLE, LINEAR ONE IN WHICH EACH SUBPROCESS IS THE
INFERIOR OF AT MOST ONE OTHER SUBPROCESS AND IN TURN IS (IMMEDIATELY)
SUPERIOR TO AT MOST ONE SUBPROCESS.
/SUBPROCESSES MAY HAVE THEIR OWN MEMORY SPACES OR MAY SHARE PORTIONS
OR ALL OF MEMORY WITH OTHER SUBPROCESSES.
/THEY MAY
COMMUNICATE BY MEANS OF 
MESSAGES PASSED THROUGH SHARED MEMORY OR BY (SOFTWARE) INTERRUPTS.
/AT THE END OF A COMPUTATION THE PROCESS TERMINATES ITSELF OR IS 
TERMINATED BY THE USER WHEN HE LOGS OUT.
/AN OPTION PERMITS THE USER TO LOG OUT OF THE SYSTEM, LEAVING HIS
PROCESS UNDESTROYED BUT IN A DORMANT STATE.
/THE PROCESS THEN TAKES ON THE NATURE OF A FILE, I.E., IT TAKES ON A
SYMBOLIC NAME AND IS PLACED IN A DIRECTORY FOR LATER REFERENCE.
/AT A LATER TIME A SIMILAR OPTION AT LOG-IN PERMITS THE USER TO
RE-ATTACH HIMSELF TO THE DORMANT PROCESS OR ESTABLISH A NEW ONE.

}'/IT HAS BEEN IMPLIED IN ALL OF THE FOREGOING WHAT EACH OF THE
PROCESSORS DOES WITH RESPECT TO A PROCESS OR A FILE.
/WE STATE HERE MORE EXPLICITLY THE ACTIVITIES OF EACH MANAGEMENT
PROCESSOR RELATIVE TO PROCESSES AND FILES.
.SP 2
.RM 5,5
^I^CCHIO

}'/THE ^CCHIO PASSES CHARACTER STREAMS BETWEEN PROCESSES AND 
^CI^/O TERMINALS.
/IT ALSO PASSES FILES BETWEEN THE SYSTEM AND EXTERNAL STORAGE
MEDIA SUCH AS MAGNETIC TAPE OR SPECIAL /I^//O DEVICES SUCH AS LINE
PRINTERS.
/THE ^CCHIO PROCESSOR ALSO COMMUNICATES WITH THE ^CARPA NETWORK.
.SP 2
^I^CSCHED

}'/THE ^CSCHED^EULER SELECTS PROCESSES FOR RUNNING AND DIRECTS THIS
INFORMATION TO THE ^CMMP.
/IT ALSO ATTACHES PROCESSES LOADED AND READY TO RUN TO ^CCPU^ES.
/IT DOES THIS BY PLACING A POINTER TO THE PROCESS CONTEXT BLOCK IN A
SPECIAL CENTRAL MEMORY LOCATION AND SETTING A REQUEST LATCH IN THE
GIVEN ^CCPU, WHICH THEN PROCEEDS TO LOAD ITS OWN STATE FROM THE CONTEXT
BLOCK AND RESUME COMPUTATION.
/THE ^CSCHED^EULER SETS IN THIS STATE A TIME INTERVAL WHICH IS PICKED
UP BY THE ^CCPU AND COUNTED DOWN IN REAL TIME, AT WHICH TIME THE ^CCPU
BLOCKS THE PROCESS, DUMPS ITS STATE IN THE CONTEXT BLOCK AND NOTIFIES
THE ^CSCHED^EULER THAT IT HAS BLOCKED.
/THE ^CSCHED PROCESSOR DOES NOT DEAL WITH FILES.
.SP 2

^C^IMMP

}'/THE ^CMMP SWAPS PROCESSES AND FILES OR PORTIONS OF FILES
INCLUDED IN A PROCESS WORKING SET.
/IT ALSO GOES TO DISK WHEN REQUIRED TO MOVE FILES OR PROCESSES TO DRUM,
AND VICE VERSA.
/BOTH CORE AND DRUM ARE DYNAMICALLY ALLOCATED.
/THE LOCATIONS OF PAGES IN THESE AREAS ARE KEPT TRACK OF IN SPECIAL
HASH TABLES IN CENTRAL MEMORY KEYED BY THE PAGE UNIQUE NAMES.
/DISK, ON THE OTHER HAND IS ALLOCATED IN A MORE STATIC FASHION: EACH PAGE
EXISTING IN THE SYSTEM HAS A FIXED, PERMANENT RESIDENCE ON DISK.
/THE LOCATION OF EACH PAGE ON DISK IS DETERMINED WHEN THE PAGE IS CREATED
AND REMAINS SO UNTIL THE PAGE IS DESTROYED.

.ER
.EJECT
3.1}"/INTERPROCESSOR /COMMUNICATION
.SP 2
}'/IN A MULTIPROCESSOR SYSTEM THE PROCESSORS BY DEFINITION
INTERACT.
/THE NEXT SEVERAL SECTIONS EXPLORE THE NATURE OF THE COMMUNICATION
BETWEEN THE 500 SYSTEM PROCESSORS.}"/THIS COMMUNICATION CLOSELY
PARALLELS THAT BETWEEN DIFFERENT MODULES OF A CONVENTIONAL OPERATING
SYSTEM.

}'/BASICALLY THE PROCESSORS COMMUNICATE BY MEANS OF CENTRAL
MEMORY, I.E., BY CHANGING BITS IN SHARED TABLES.
/TO SPEED UP A PROCESSOR'S HAVING TO LOOK THROUGH EXTENSIVE TABLES FOR
CHANGES, A HARDWARE FLAG SYSTEM IS PROVIDED.
/THIS MECHANISM CONSISTS OF A SMALL NUMBER OF LATCHES IN EACH PROCESSOR
WHICH CAN BE SET BY ONE OR MORE OTHER PROCESSORS.
/THE LATCHES -- CALLED ^IREQUEST ^ISTROBES -- ARE TESTED AND RESET
BY EACH PROCESSOR'S MICROCODE.
/FLAGS IN CENTRAL MEMORY AUGMENT THIS RUDIMENTARY FACILITY INTO A
MORE GENERAL ONE.

.SP 5
.EJECT 20
3.2}"/PROCESSOR /INTERLOCKING
.SP 2

}'/WHEN MORE THAN ONE PROCESSOR ACCESSES A DATA STRUCTURE IT IS
GENERALLY NECESSARY TO UTILIZE AN INTERLOCK MECHANISM -- A MEANS BY 
WHICH ONLY ONE PROCESSOR AT A TIME CAN MODIFY THE DATA STRUCTURE INTO A
NEW STATE WHICH IS MEANINGFUL TO ALL PROCESSORS.}"
(/IN EFFECT AN INTERLOCK ALLOWS A PROCESSOR TO SEIZE A GIVEN DATA
STRUCTURE, RENDERING IT INACCESSIBLE TO ALL OTHER PROCESSORS UNTIL THE
PROCESSOR HAS COMPLETED ITS UPDATING TASK).
/IN THE 500 SYSTEM SPECIAL HARDWARE INTERLOCKS OPERATING AT MICROCODE
SPEEDS ARE PROVIDED.
/THESE INTERLOCKS -- CALLED ^IPROTECTS -- CONSIST OF EIGHT CENTRAL LATCHES
WHICH MAY BE SET OR RESET BY ANY PROCESSOR BUT BY ONLY ONE AT A TIME.
/THAT IS, IF MORE THAN ONE PROCESSOR ATTEMPTS TO ACQUIRE THE SAME PROTECT
AT THE SAME TIME OR IF THE PROTECT IS ALREADY SET, A HARDWARE CONTENTION
CIRCUIT RESOLVES THE CONFLICT AND ISSUES A POSITIVE OR NEGATIVE ACKNOWLEDGEMENT
TO THE APPROPRIATE PROCESSOR.
/PROCESSORS RECEIVING POSITIVE ACKNOWLEDGEMENTS TO PROTECT REQUESTS THEN
"OWN" THE PROTECT (AND THE DATA STRUCTURE ASSOCIATED WITH IT)
UNTIL THEY VOLUNTARILY RELINQUISH IT.

}'/THE PARTICULAR PROTECT MECHANISM USED IS GREATLY SIMPLIFIED BY
THE FACT THAT EACH PROCESSOR (AND IN FACT, ^IEVERY SYSTEM COMPONENT)
IS OPERATED WITH A COMMON CLOCK.
/THUS PROCESSORS MAKE PROTECT REQUESTS IN EXACT SYNCHRONISM.
/THE HARDWARE CONTENTION CIRCUIT SHIFTS ITS NOTIONS OF CONTENTION
PRIORITY IN SUCH A WAY THAT EACH PROCESSOR IS TREATED WITH THE SAME PRIORITY
ON THE AVERAGE.

.EJECT
3.3}"/ILLUSTRATION OF /PROCESSOR /INTERACTION
.SP 2
}'/FIGURE 5 SHOWS THE PROCESSORS (EXCEPT ^CSMP) AND SOME OF
THE MORE IMPORTANT COMMUNICATION SIGNALS BETWEEN THEM.
/EACH PROCESSOR IS DEDICATED TO ITS OWN TASK AND IS DESIGNED
TO OPERATE AUTONOMOUSLY, INDEPENDENT OF THE OTHER PROCESSORS.
/NO ONE PROCESSOR IS "IN CNTROL" OF THE OTHER PROCESSORS OR OF THE
SYSTEM (EXCEPT FOR, THAT IS, THE ^CSMP WHICH EXERCISES ITS PRIVILEGES
ONLY WHEN A PROBLEM DEVELOPS -- SEE /SECTION XXXX ON RESTARTS).
.FIGURE SPACING 24
.CENTER
/FIGURE 5.}"/SCHEMATIC OF /PROCESSOR /INTERACTION
.SP 2
}'/CONSIDER THE ACTIONS OF THE PROCESSORS AND THE COMMUNICATION
BETWEEN THEM IN RESPONSE TO AN INTERACTIVE USER TYPING A COMMAND ON
HIS TERMINAL.
/WE WILL ASSUME THAT AT THIS TIME HIS PROCESS IS BLOCKED FOR REASONS
OF /I^//O AND THAT THE PROCESS IS PHYSICALLY LOCATED ON DRUM.

.RM 5,5
.SP 2
1.}"^CCHIO

}'/AS THE USER TYPES, HIS CHARACTERS ARE ACCUMULTED BY THE ^CCHIO.
(/IN /HAWAII THE ^CCHIO ALSO ECHOES THESE CHARACTERS; THE ^CDCC^ES WERE
ORIGINALLY DESIGNED FOR THIS UNDER CONTROL OF THE ^CCHIO.)
/AS PART OF ITS WORK THE ^CCHIO CHECKS EACH CHARACTER TO SEE IF IT IS A
"WAKEUP" CHARACTER.
(/WAKEUP CHARACTERS ARE DEFINED FOR THE ^CCHIO BY THE PROGRAM THE USER
IS INTERACTING WITH.)
/UNTIL A WAKEKUP CHARACTER IS RECEIVED BY THE ^CCHIO IT SIMPLY BUFFERS
AND ECHOES THE CHARACTERS BEING TYPED.
/WHILE THIS IS GOING ON, ^IONLY THE ^CCHIO GIVES ATTENTION TO THE USER.
/NO OTHER PROCESSORS -- IN PARTICULAR, THE ^CCPU^ES -- ARE INVOLVED.
/THEY ARE EXECUTING CODE FOR OTHER USERS.

}'/WHEN THE ^CCHIO RECEIVES A WAKEUP CHARACTER (SAY, ^CEOL IN OUR
CASE), IT INITIATES THE SEQUENCE OF EVENTS WHICH ARE REQUIRED TO BRING
INTO EXECUTION THE PROGRAM THE USER IS INTERACTING WITH.
/THE ^CCHIO DOES THIS BY PASSING A SIMPLE MESSAGE TO THE ^CSCHED^EULER;
A POINTER TO THE APPROPRIATE PROCESS IS PLACED INTO A SMALL QUEUE.
.SP 2

2.}"^CSCHED^EULER

}'/THE MESSAGE FROM THE ^CCHIO IS RETRIEVED BY A DISPATCHER TASK
IN THE ^CSCHED^EULER AND PASSED TO THE ^CSCHED^EULER'S ^CWAKEUP TASK.
/THIS TASK JUST (1) RECORDS A BIT WHICH IDENTIFIES THE SOURCE OF THE
WAKEUP AND (2) QUEUES THE PROCESS ON A QUEUE CALLED
THE ^CWAKEUP QUEUE.

}'/AN INDEPENDENT TASK (THE ^CSCHEDULING TASK) LATER REMOVES THE
PROCESS FROM THE ^CWAKEUP QUEUE AND PLACES IT ON THE APPROPRIATE ONE OF
SEVERAL ^CSCHEDULER QUEUES.
/STILL ANOTHER TASK REMOVES THE PROCESS FROM THIS QUEUE AND SENDS A MESSAGE
TO THE ^CSWAPPER TASK IN THE ^CMMP, REQUESTING THAT THE PROCESS BE LOADED
INTO CENTRAL MEMORY.

.SP 2
3.}"^CMMP

}'/THE ^CMMP, IN RESPONSE TO THE REQUEST FROM THE ^CSCHED^EULER, SETS
ABOUT THE TASK OF READING THE PROCESS WORKING SET OF PAGES INTO
CENTRAL MEMORY.
/WHEN THIS RATHER COMPLEX ACTION HAS BEEN COMPLETED, THE ^CMMP NOTES
BACK TO THE ^CSCHED^EULER THAT THE PROCESS IS LOADED.
/NOTE THAT DURING THE TIME THE ^CMMP IS READING PAGES OF THE PROCESS
INTO MEMORY, ^IONLY THE ^CMMP IS CONCERNED WITH THE PROCESS.
/IN PARTICULAR, AGAIN, THE ^CCPU^ES ARE RUNNING OTHER PROCESSES.

.SP 2
4.}"^CSCHED^EULER

}'/LOADED PROCESSES BECOME THE RESPONSIBILITY OF THE ^CSCHED^ELER
TASK CALLED THE ^CMICRO-SCHEDULER.
/THIS IS THE MODULE THAT ACTUALLY CONTROLS THE ^CCPU^ES.
/IT KEEPS TRACK OF THE "PRIORITIES" OF THE PROCESSES EXECUTING ON THE
^CCPU^ES AND OF THE PROCESSES WHICH ARE LOADED AND READY TO BE EXECUTED.
/WHEN A ^CCPU BECOMES AVAILABLE FOR OUR PROCESS (BY VIRTUE OF ITS BEING
FREE OR BECAUSE ITS CURRENT PROCESS HAS LOWER PRIORITY THAN OURS)
THE ^CMICRO-SCHEDULER HANDS THE PROCESS TO THE ^CCPU AND TELLS IT TO RUN.
.SP 2
5.}"^CCPU

}'/WHEN THE ^CCPU RECEIVES THE "SWITCH PROCESSES" MESSAGE FROM THE
^CSCHED^EULER IT PICKS UP THE STATE OF OUR PROCESS FROM ITS CONTEXT
BLOCK AND STARTS EXECUTING IT.
/IF IT IS RUNNING A PROCESS ALREADY, IT WAITS UNTIL THE PROCESS IS
NOT EXECUTING FROM ITS SYSTEM CODE;
AND AS SOON AS THIS IS TRUE IT STORES THE STATE OF THE
^CCPU INTO THE CONTEXT BLOCK OF THE PROCESS.
/IT THEN SENDS A MESSAGE TO THE ^CSCHED^EULER, LETTING IT KNOW THAT
THE ^CCPU HAS BLOCKED THE PROCESS IT WAS RUNNING.
/ON PICKING UP OUR PROCESS, THE ^CCPU THEN COMMUNICATES WITH THE ^CCHIO TO
RECEIVE THE MESSAGE TYPED BY THE USER WHICH EVOKED ALL THIS ACTIVITY.

.ER
.EJECT
3.4}"/EXPLICIT /COMMUNICATION /BETWEEN THE /PROCESSORS

}'/IN THIS SECTION WE CONSIDER THE PROCESSOR COMMUNICATION
INTERFACES IN MORE DETAIL.
/WE CONSIDER THE VARIOUS POSSIBLE PAIRWISE COMBINATIONS.
.SP 2
1.}"^CCHIO - ^CCPU^ES

}'/IN THESE BI-DIRECTIONAL EXCHANGES THE SYSTEM CODE RUNNING ON
A ^CCPU IS ALWAYS THE INITIATOR.
/AT THE COMMAND OF A USER PROGRAM, THE SYSTEM CODE REQUESTS THE ^CCHIO
TO ACCEPT SOME CHARACTERS FOR DELIVERY TO A TERMINAL, TO DELIVER TO
THE ^CCPU CHARACTERS WHICH THE ^CCHIO HAS RECEIVED AND BUFFERED, OR TO
CHANGE THE STATE OF SOME TERMINAL PARAMETER SUCH AS ECHO STRATEGY,
WAKEUP STRATEGY, ETC.
/THE SYSTEM CODE PUTS ITS REQUEST, TOGETHER WITH ANY ASSOCIATED DATA, INTO
THE ^CCHIO'^ES REQUEST BUFFER (A BLOCK OF WORDS IN CENTRAL MEMORY), SETS
A "REQUEST WAITING" FLAG ASSOCIATED WITH THIS BUFFER (A BIT IN ^CCM), AND
SETS THE ^CCHIO'^ES REQUEST STROBE LATCH TO LET IT KNOW IT SHOULD LOOK
AT ITS REQUEST BUFFER.
/IF THE NATURE OF THE REQUEST IS SUCH THAT NO REPLY OR RESPONSE FROM
THE ^CCHIO IS EXPECTED, THIS COMPLETES THE INTERACTION.
/THE SYSTEM CODE RETURNS CONTROL TO THE USER CODE THAT CALLED IT.
/THE ^CCHIO PROCEDES AT ITS LEISURE (ALTHOUGH VERY QUICKLY) TO PERFORM
THE REQUESTED OPERATION.
/WHEN IT FINISHES, IT RESETS THE "REQUEST WAITING" FLAG.
/FOR THOSE REQUESTS TO WHICH THE SYSTEM CODE IN THE ^CCPU DOES EXPECT
A REPLY (SUCH AS ONE WHICH ASKS FOR THE DELIVERY OF ANY CHARACTERS
WHICH MAY HAVE COME IN FROM A GIVEN TERMINAL), THE SYSTEM CODE WAITS WHILE
THE ^CCHIO PERFORMS THE REQUEST.
/THE ^CCHIO PUTS ITS RESPONSE IN THE SAME MESSAGE BUFFER AND RESETS THE
"REQUEST WAITING" FLAG TO LET THE SYSTEM CODE KNOW THAT THE RESPONSE
IS READY.}"
/THE SYSTEM CODE THEN DELIVERS THE RESPONSE AND POSSIBLY THE CHARACTERS
TO THE USER CODE.

.SP 2
2.}"^CCHIO - ^CSCHED

}'/THIS COMMUNICATION IS ONLY ONE WAY: FROM THE ^CCHIO TO THE
^CSCHED.
/WHEN THE ^CCHIO FINDS THAT IT HAS COLLECTED A COMPLETE MESSAGE FOR
A PROCESS, I.E., WHEN IT GETS A WAKEUP CHARACTER FROM A TERMINAL, THE
^CCHIO SENDS A NOTIFICATION TO THE ^CSCHED.
/IT DOES THIS BY PLACING A SHORT MESSAGE CONTAINING THE PROCESS' ^CID
INTO THE ^CSCHED^E'S MESSAGE INPUT BUFFER.
/THIS BUFFER IS ALSO USED BY THE OTHER PROCESSORS IN COMMUNICATING WITH
THE ^CSCHED TO COMMUNICATE A VARIETY OF THINGS.
/A "WAKEUP MESSAGE" FROM THE ^CCHIO MUST THUS CONTAIN MORE THAN JUST
THE ^CID OF THE PROCESS FOR WHOM THE ^CCHIO HAS COLLECTED A MESSAGE.
/IT CONTAINS AN "OPCODE" WHICH MEANS THAT THE MESSAGE IS A WAKEUP MESSAGE
PLUS A SPECIFICATION OF THE REASON FOR THE WAKEUP MESSAGE.

}'/THE ^CCHIO SENDS WAKEUP MESSAGES TO THE ^CSCHED FOR OTHER REASONS
ALSO.
/AMONG THEM ARE
.RM 5
.SP

.UN 2
- THE INPUT BUFFERS ALLOCATED TO A PROCESS ARE (NEARLY) FULL

.SP
.UN 2
- THE OUTPUT BUFFERS ALLOCATED TO A PROCESS ARE EMPTY ENOUGH THAT THE
PROCESS CAN PROCEED TO DO MORE OUTPUT

.SP
.UN 2
- A SPECIAL CONTROL CHARACTER(A ^CQUIT OR ^CESCAPE CHARACTER) HAS BEEN
RECEIVED FROM THE PROCESS' TERMINAL.

.ER

}'/THE ^CSCHED'^ES MESSAGE INPUT BUFFER IS USED BY ALL THE SYSTEM
PROCESSORS.
/IT IS PROTECTED FROM SIMULTANOUS ACCESS BY MEANS OF ONE OF THE HARDWARE
^CPROTECT^ES.
/THUS, WHENEVER A PROCESSOR WANTS TO REFERENCE THIS BUFFER, IT FIRST
ACQUIRES THE ASSOCIATED ^CPROTECT, MAKES ITS REFERENCE (WHICH ONLY
REQUIRES FOUR OR FIVE MEMORY REFERENCES), AND THEN RELEASES THE ^CPROTECT.
/AFTER PLACING A REQUEST IN THE BUFFER, THE PROCESSOR SETS A REQUEST
STROBE LATCH IN THE ^CSCHED TO LET IT KNOW THAT THERE IS A MESSAGE FOR IT.

.SP 2
3.}"^CCHIO - ^CMMP

}'/THESE TWO PROCESSORS HAVE NO NEED TO COMMUNICATE WITH EACH
OTHER.

.SP 2
4.}"^CCPU^ES - ^CMMP

}'/MESSAGE EXCHANGE BETWEEN THESE TWO PROCESSORS IS ALWAYS INITIATED
BY THE SYSTEM CODE IN A ^CCPU MAKING A REQUEST ON THE ^CMMP.
/MESSAGES FROM THE ^CMMP TO THE ^CCPU ARE ALWAYS RESPONSES TO SUCH REQUESTS.

}'/WHAT THE TWO PROCESSORS TALK ^IABOUT ARE PAGES OF MEMORY.}"
/EACH PAGE IN THE MEMORY SYSTEM HAS BEEN GIVEN A UNIQUE NAME AT CREATION
TIME. 
/PAGES ARE ALWAYS REFERRED TO BY NAME.
/FOR EXAMPLE THE SYSTEM CODE IN THE ^CCPU MAKES SUCH REQUESTS AS

.RM 3

.SP
- CREATE A NEW PAGE

.SP
- DESTROY A PAGE

.ER

}'/THE ^CMMP HAS THREE SEPARATE MESSAGE INPUT "PORTS."}"
/EACH PORT CORRESPONDS TO A MAJOR TASK STRUCTURE IN THE ^CMMP.
/ONE IS FOR THE ^CSWAPPER, ONE FOR A DIRECT /I^//O CAPABILITY (NOT A
NORMAL USER'S FACILITY), AND ONE IS A UTILITY TASK.

}'/TO MAKE A REQUEST ON THE ^CMMP, THE ^CCPU SYSTEM CODE FIRST
CONSTRUCTS A REQUEST IN THE FORM EXPECTED BY THE ^CMMP, THEN COPIES THE
REQUEST ONTO THE END OF A QUEUE AT THE APPROPRIATE PORT, AND FINALLY
REQUEST STROBES THE ^CMMP TO LET IT KNOW THERE'S A MESSAGE WAITING FOR IT.
/CLEARLY, THE COPYING OPERATION IS DONE UNDER A ^CPROTECT.

}'/SOME REQUESTS REQUIRE NO RESPONSE, AND THE SYSTEM CODE IN THE ^CCPU
IS FINISHED ONCE IT HAS DONE THE REQUEST STROBE.
/OTHER REQUESTS INITIATE ACTIONS WHICH REQUIRE EXPLICIT RESPONSES
AND SOME OF THESE CALL FOR IMMEDIATE
RESPONSES WHILE OTHERS, TAKING LONGER TO PROCESS, PRODUCE A DELAYED 
RESPONSE.

}'/IN THE IMMEDIATE RESPONSE CASE, THE SYSTEM CODE WAITS FOR THE
^CMMP TO REPLY IN A COMMUNICATION AREA DEDICATED TO THIS PURPOSE.
/IN THE OTHER CASE, THE SYSTEM CODE BLOCKS THE ^CCPU PROCESS.
/WHEN THE ^CMMP HAS THE RESPONSE READY IT WILL PUT ITS MESSAGE IN AN
AREA LOCAL TO THE PROCESS FROM WHICH THE ORIGINATING MESSAGE CAME,
AND SEND A MESSAGE TO THE ^CSCHED TELLING IT TO WAKE UP THE PROCESS
BECAUSE THERE'S A MESSAGE FOR IT.
/IN DUE COURSE THIS WILL RE-START THE BLOCKED SYSTEM CODE, WHICH WILL
THEN GO AND READ THE ^CMMP'^ES MESSAGE.

.SP 2
5.}"^CMMP - ^CSCHED

}'/THE ^CMMP SENDS MESSAGES TO THE ^CSCHED IN THE SAME WAY FOR
THE SAME BASIC REASON THE THE ^CCHIO DOES, I.E., TO LET THE ^CSCHED
KNOW THAT SOME EVENT OF INTEREST TO A PROCESS HAS OCCURRED.
/THUS MESSAGES FROM THE ^CMMP TO THE ^CSCHED ARE NORMALLY REQUESTS TO
WAKE UP A SPECIFIED PROCESS.
/USUALLY, SOME SMALL AMOUNT OF DATA FOR USE BY THE PROCESS
ACCOMPANIES THESE MESSAGES.

}'/THE ^CSCHED SENDS MESSAGES TO THE ^CMMP TO REQUEST THE SWAPPING
INTO OR OUT OF CENTRAL MEMORY OF THE WORKING SET OF A PROCESS.
/IT GIVES REQUESTS TO THE ^CMMP THE SAME WAY THE ^CCPU DOES -- BY FORMING
A MESSAGE, APPENDING IT TO THE APPROPRIATE ONE OF THE ^CMMP'^ES MESSAGE
INPUT QUEUES (UNDER A ^CPROTECT), AND THEN REQUEST STROBING THE ^CMMP.

.SP 2
6.}"^CCPU - ^CSCHED

}'/THE ^CCPU COMMUNICATES WITH THE ^CSCHED FOR VARIOUS REASONS.
/THE ^CSCHED IMPLEMENTS A REAL-TIME INTERRUPT^/WAKEUP FACILITY FOR THE
USE OF USER PROCESSES.
/AT THE REQUEST OF SUCH PROCESSES, THE SYSTEM CODE IN THE ^CCPU CALLS
THIS FUNCTION IN THE ^CSCHED TO ARRANGE THAT THE PROCESS BE AWAKENED
AND NOTIFIED AT A CERTAIN REAL TIME.
/THESE REQUESTS ARE MADE BY THE ^CCPU IN THE SAME WAY THAT THE ^CCHIO
AND ^CMMP SEND WAKEUP MESSAGE TO THE ^CSCHED.
/THE ^CCPU SEIZES THE APPROPRIATE ^CPROTECT, PUTS A SHORT MESSAGE INTO 
THE ^CSCHED'^ES MESSAGE INPUT BUFFER, RELEASES THE ^CPROTECT, AND
REQUEST STROBES THE ^CSCHED.


.EJECT
4.0}"^UDISCUSSION^L
.SP 3
}'/THE USE OF MULTIPLE PROCESSORS PERMITTED THE ^CBCC 500 TO BE A
MORE CAPABLE SYSTEM THAN THE USE OF A SINGLE PROCESSOR -- EVEN A
CONSIDERABLY FASTER ( AMD MORE EXPENSIVE) ONE.
/THE VARIOS PROCESSORS IN THE SYSTEM, WHILE SIMILAR IN HARDWARE,
ARE DEDICATED TO THEIR ASSIGNED FUNCTIONS:}"THREE DEDICATED TO SYSTEM
MANAGEMENT AND TWO TO RUNNING THE USER CODES.
/THERE ARE SEVERAL CONSEQUENCES OF THIS DECISION WHICH SHOULD BE
MENTIONED.
/FIRST, THERE IS NO NEED FOR COMPLEX TIME-SHARING AND SCHEDULING 
OF THE VARIOUS PROCESSORS OVER THE MANY SYSTEM AND USER TASKS.
/THE TASKS CAN THUS BE DESIGNED TO RUN TO COMPLETION, IE.E, WITH
LITTLE CONCERN FOR INTERRUPTION BY HIGHER PRIORITY TASKS.

}'/PUTTING THE SYSTEM TASKS INTO SEPARATE PROCESSORS HAS THE RESULT
THAT THE OPERATING SYSTEM GETS MODULARIZED IN A "REAL" WAY.
/MODULARIZATION IS ALWAYS A PROBLEM IN ANY OPERATING SYSTEM DESIGN:
THE ACTUAL CHOICE OF MODULES IS FREQUENTLY DIFFICULT, AND PROGRAMMERS ARE
OFTEN LED TO "CHEAT," I.E., TO CUT ACROSS MODULE BOUNDARIES AGAINST 
THERI OWN DEFINITIONS OF THOSE BOUNDARIES.
/ALTHOUGH THIS CAN BE REMEDIED BY SUFFICIENT SELF-DISCIPLINE, HAVING
SEPARATE PROCESSORS FORCES THE ISSUE, WITH THE CONSEQUENCE OF CLEAN,
IMPOSSIBLE-TO-CHEAT-ON MODULARIZATION.
/THE MODULARIZATION IS READILY COMPREHENSIBLE, EVEN TO A TECHNICIAN, SAY,
BECAUSE HE CAN IDENTIFY A MODULE ( AND ITS FUNCTION) WITH A KNOWN PIECE
OF HARDWARE.
/THIS HAS DISTINCTLY BENEFICIAL RAMIFICATIONS TOWARD MAINTAINABILITY.

}'/IN ADDITION TO ERROR ANALYSIS THE USE OF SEPARATE, DEDICATED 
PROCESSORS IN GENERAL MAKES CHECKOUT AND PERFORMANCE MONITORING 
EASIER.
/THE MODULES AREBASICALLY INDEPENDENT AND ARE DRIVEN BY THE CONTENTS
OF MEMORY TABLES BY WHICH THEY COMMUNICATE AND INTERACT.
/THUS THEY CAN BE READILY TESTED INDEPENDENTLY.
(/CHECKOUT IS A SERIOUS PROBLEM NORMALLY IN COMPLEX OPERATING SYSTEMS
BECAUSE OF THE MANY MODULE INTERACTIONS.)
/IN THE CHECKOUT OF THE 500, FOR EXAMPLE, THE ENTIRE ^CMMP FUNCTION
WAS DEVELOPED AND CHECKED OUT BEFORE THE ^CCPU^ES EXISTED.

}'/BECAUSE SO MUCH FIXED-ALGORITHM COMPUTATIONAL POWER EXISTS IN
THE SEVERAL MANAGEMENT PROCESSORS, IT IS POSSIBLE TO CONSIDER -- WITHIN
THOSE PROCESSORS -- THE USE OF ALGORITHMS FOR VARIOUS OPERATING SYSTEM
FUNCTIONS WHICH ARE TOO COMPLEX (I.E., TIME-SONSUMPTIVE) TO UTILIZE
EVEN OV VERY FAST ^CCPU^ES.
/ANOTHER CONSEQUENCE OF THE USE OF MULTIPLE MICROPROCESSORS FOR SYSTEM
MANAGEMENT IS THE ABILITY TO UTILIZE MORE STRAIGHTFORWARD CODING
TECHNIQUES (SINCE, FOR EXAMPLE, MANY "TRICKS" ARE USED IN CONVENTIONAL
OPERATING SYSTEMS FOR EFFICIENCY).
/THE CODING IS EASIER TO DO, IS MOR EASILY ANALYZED, AND OF COURSE
IS LESS LIKELY TO FAIL.
/FINALLY, IT IS POSSIBLE TO INCLUDE ON A PRACTICAL SCALE THE USE OF 
REDUNDANT COMPUTATIONS FOR OPERATING SYSTEM MANAGEMENT WHICH MAKE ERROR
DETECTION MORE IMMEDIATE, GIVE THE SYSTEM MORE SURVIVABILITY (IS THIS
THE RIGHT TERM?), AND GREATER FAULT LOCATABILITY.

}')/HOW DO WE DISCUSS BRINGING UP THE 2ND ^CCPU?)

}'/THERE ARE, OF COURSE, SOME DRAWBACKS TO THE ^CBCC 500
ARCHITECTURE, EXPECIALLY THAT OF THE EXISTING PROTOTYPE.
/MOSTLY THESE RELATE IN ONE WAY OR ANOTHER TO THE PURELY READ-ONLY NATURE
OF THE MICROPROCESSORS' CONTROL STORES.
/BECAUSE EACH OF THE MANAGEMENT PROCESSORS EXECUTES UNIQUE FUNCTIONS
AS DETERMINED BY THE (FIXED) ^CROM^ES, THERE IS NO WAY TO CONTINUE
OPERATION OF THE SYSTEM WHEN A PROCESSOR FAILS.
/THIS DOES NOT RELATE TO THE BASIC ARCHITECTURE, IE.E, TO THE USE OF
DEDICATED, MULTIPLE PROCESSORS, AS THE USE OF WRITEABLE CONTROL STORES
WOULD EASILY PERMIT STANDBY PROCESSORS TO BE PHASED IN TO REPLACE
A GIVEN MANAGEMENT PROCESSOR WHICH HAS HAILED.

}'/BHE ^CBCC 500 SYSTEM DESIGNERS WERE ENCOURAGED TOWARD THE
USE OF MULTIPLE PROCESSORS BY THEIR CONSIDERATIONS OF THE SYSTEM'S
POTENTIAL NEED FOR DATA SECURITY.
/IN THE EARLIER EXAMPLE OF HOW THE PROCESSORS EXECUTING THEIR
SEPARATE FUNCTIONS COMMUNICATE AND COOPERATE, WE SAW HOW THEY UTILIZED
COMMON, RESIDENT MEMORY TABLES AS THEIR COMMUNICATION MEDIUM.
/THE ACCESS OF ANY ONE PROCESSOR INTO THESE TABLES IS HIGHLY RESTRICTED
BY THE MICROCODE WHOSE BEHAVIORAL PROPERTIES ARE MORE AMENABLE TO
STUDY THAN THE MORE UNSTRUCTURED CODE OF USERS OR SYSTEMS PROGRAMMERS.
/THE ^CCPU (EXCEPT ITS MICROCODED ROUTINES) IS GENERALLY PREVENTED
FROM INSPECTING THESE TABLES DIRECTLY -- EVEN IN ITS SYSTEM MODE.
/THUS THE SEPARATION OF FUNCTIONS INTO PROCESSORS HAS CLEAR RAMIFICATIONS
ON THE POTENTIAL SECURITY OF THE OPERATING SYSTEM; IT IS MUCH MORE 
DIFFICULT FOR A PENETRATOR TO INDUCE A DIFFERENT PROCESSING RUNNING
FIXED CODE TO INSPECT CRITICAL INFORMATION AND THEREBY CAUSE AN
ABRIDGMENT OF SECURITY.
/THIS ASPECT OF THE ARCHITECTURE MAKES IT APPEAR FAVORABLE FOR
APPLICATIONS IN WHICH SECURITY IS A CONCERN; AT LEAST, COMPARTMENTALIZATION
IS A CLASSICAL (NON-COMPUTING) MEANS FOR IMPLEMENTING SECURITY.
.EJECT
.SP 4
.CENTER
^UAPPENDIX I^L
.SP 2
1.0}"/INTENDED /AREA OF /APPLICATIONS
.SP
}'/A GOAL OF ^CBCC WAS TO DEVELOP SYSTEMS
WHICH COULD BE USED BY ^ICOMPUTER ^IUTILITIES, I.E., COMPANIES
OFFERING APPROPRIATELY PACKAGED COMPUTING POWER AND SERVICES
BY MEANS OF TELECOMMUNICATIONS AND REMOTE TERMINALS.
/THE 500 SYSTEM WAS INTENDED TO SERVE THIS PURPOSE PARTICULARLY WHERE
THE COMPUTING JOBS INDIVIDUALLY REQUIRE SMALL AMOUNTS OF COMPUTATION;
THAT IS, THE SYSTEM ARCHITECTURE WAS ^IBIASED TOWARD ACCOMMODATING
LARGE NUMBERS OF RELATIVELY SMALL JOBS.
/COMMON EXAMPLES OF INTENDED APPLICATIONS WERE SMALL 
SCIENTIFIC COMPUTATIONS (E.G., SMALL ^CBASIC PROGRAMS),
BANK-TELLER SYSTEMS, RESERVATIONS SYSTEMS, REAL-ESTATE SYSTEMS,
ETC.
/MANY OF THESE SYSTEMS, WHILE NOT REQUIRING LARGE
AMOUNTS OF COMPUTATION, DO REQUIRE A LARGE MACHINE -- LARGE IN THE
SENSE OF FILE CAPACITY AND MEMORY ADDRESS SPACE.
/THUS A MINI-COMPUTER, FOR EXAMPLE, WOULD BE ILL-SUITED TO THE
APPLICATION, WHILE A LARGE MACHINE MIGHT NOT BE JUSTIFIABLE ON
ECONOMIC GROUNDS.
.SP 2
[MORE: SEPARATE UTILITIES, WHOLESALING, GUARANTEED SERVICE, DATA SECURITY]
.EJECT 15
.SP 4
1.1}"/USER /MACHINE AND /OPERATING /SYSTEM

}'/THE OPERATING IS PARTITIONED INTO FUNCTIONAL AREAS AND IS
EXECUTED ON DIFFERENT PROCESSORS CONCURRENTLY.
/THESE PROCESSORS ARE DEDICATED TO THEIR TASKS.
/ONE TYPE OF PROCESSOR IS "DEDICATED," OF COURSE, TO THE RUNNING
OF GENERAL-PURPOSE (I.E., USER-SPECIFIED) CODE.
/THIS PROCESSOR, CALLED A ^ICENTRAL ^IPROCESSOR, ALSO EXECUTES
PORTIONS OF THE OPERATING SYSTEM, ALWAYS ON BEHALF OF ITS ACTIVE
USER.
/THOSE /C/P CHARACTERISTICS OF MOST INTEREST FROM THE OPERATING SYSTEM
VIEWPOINT ARE BRIEFLY LISTED BELOW:
.SP
.RM 8,5
.UN 3
- /THE /C/PS ARE DESIGNED TO BE PROGRAMMED ONLY IN HIGHER-LEVEL
LANGUAGES.}"/THERE IS NO ASSEMBLER FOR THE /C/P.
.SP
.UN 3
- /VIRTUAL MEMORY:}"/THE /C/PS SEE A VIRTUAL MEMORY OF 256/K WORDS
IN PAGES OF 2/K EACH.
.SP
.UN 3
- /HIERARCHICAL, RING-STRUCTURED PROTECTION MECHANISMS:}"3 PROTECTION
RINGS DESIGNED TO ACCOMMODATE TWO LEVELS OF OPERATING SYSTEM AND ONE
FOR SUBSYSTEMS AND USER CODE.}"/INTER-RING REFERENCES ACQUIRE THE
PROTECTION OF THE RING BEING ADDRESSES.
.SP
.UN 3
- /NUMEROUS ADDRESSING MODES DESIGNED TO FACILITATE EFFICIENT
RUNNING OF COMPILER-GENERATED CODE.}"/HEAVY EMPHASIS IS MADE ON THE USE
OF DESCRIPTORS FOR COMMON DATA STRUCTURES SUCH AS STRINGS, FIELDS, AND 
ARRAYS.
.SP
.UN 3
- /COMPREHENSIVE FUNCTION CALL AND RETURN MECHANISM.}"/COPIES ARGUMENTS
BETWEEN ENVIRONMENTS, CREATES AND STACKS ENVIRONMENTS.
.SP
.UN 3
- /C/P TRAPS DIRECTLY UNDER USER CONTROL.
.SP 2
.UN 8
/THE PRINCIPAL FEATURES OF THE OPERATING SYSTEM ARE:
.SP
.UN 3
- /A ^IMONITOR, COMMON TO ALL USER PROCESSES.}"/CONTAINS A BARE MINIMUM
OF CALLS AND IS AS GENERAL AS POSSIBLE.}"/IS INTENDED TO BE A "KERNEL"
FOR ADDITIONAL OPERATING SYSTEM CODE.}"/EXISTS IN HIGHEST PROTECTION
RING.
.SP
.UN 3
- /A ^IUTILITY, WHICH CAN BE TAILORED FOR INDIVIDUAL USERS.}"/IMPLEMENTS
ALL OF THE USER MACHINE CHARACTERISTICS AND EXECUTIVE COMMAND LANGUAGE.
/RUNS IN MIDDLE PROTECTION RING.
.SP
.UN 3
- /SUBSYSTEMS AND USER CODE, RUNNING IN LOWEST RING, CAN CALL UTILITY
OR MONITOR JUST LIKE THEY CALL THEIR OWN FUNCTIONS, SUBJECT TO THE
RING PROTECTION.
.SP 2
.UN 8
/FINALLY, THE VIRTUAL MACHINE SEEN BY USER CODE (THE USER MACHINE)
HAS THE FOLLOWING GENERAL APPEARANCE:
.SP
.UN 3
- /A 128/K ADDRESS SPACE
.SP
.UN 3
- /THE USUAL TYPES OF OPERATING SYSTEM CALLS.
.SP
.UN 3
- /SOME UNUSUAL CALLS SUCH AS:
.RM 5
.UN 2
- /USER CONTROL OVER PROCESS WORKING SET
.SP
.UN 2
- /SCHEDULING DECISIONS LIKE WHETHER TO BLOCK FOR /I^//O.
.ER
.EJECT
.ER
1.2}"/HARDWARE
.SP
}'/THE SYSTEM AS IT EXISTS AT THE /UNIVERSITY OF /HAWAII
INCLUDES SIX PROCESSORS
CONNECTED TO
A HIGH-BANDWIDTH MULTI-PORT, MULTI-MODULE 128/K CENTRAL MEMORY; TWO
LARGE DRUMS, TWO LARGE DISK FILES, WITH THEIR ASSOCIATED 
CONTROLLERS; AND CENTRALIZED CONTROL, SYNCHRONIZATION, AND COMMUNICATION
LOGIC.
/THESE RESOURCES ARE CAPABLE OF SIGNIFICANT COMPUTATION.
/THE ORIGINAL SYSTEM DESIGN, HOWEVER, CALLED FOR A 256/K CENTRAL MEMORY
AND ALLOWED FOR A SIGNIFICANT EXPANSION OF BOTH DRUM AND DISK STORAGE.
/MORE IMPORTANTLY, THE BASIC DESIGN INCLUDED
A NUMBER OF REMOTE PROCESSORS FOR TERMINAL AND
COMMUNICATIONS HANDLING, CONNECTED TO THE CENTRAL SITE BY A NETWORK
OF COMMUNICATION LINES.
/THREE OF THESE REMOTE PROCESSORS WERE CONSTRUCTED AND BROUGHT TO
/HONOLULU.
/THEY WERE NOT INCLUDED IN THE PRESENT CONFIGURATION, HAVING BEEN
"REPLACED" IN FUNCTION BY A CONNECTION THROUGH ONE OF THE CENTRAL-SITE
PROCESSORS TO THE ^CARPA NETWORK.

}'/ALL OF THE PROCESSORS -- THE CENTRAL-SITE PROCESSORS AND THE
REMOTE-SITE PROCESSORS -- ARE IMPLEMENTED AROUND A BASIC MICROPROCESSOR
DESIGNED BY /B/C/C FOR USE IN THE SYSTEM.
/THE MICROPROCESSORS USED IN THE CENTRAL SITE HAVE 24-BIT WIDE ARITHMETIC
UNITS, AND EACH EXECUTES AT A MAXIMUM RATE OF ABOUT TWELVE MILLION
OPERATIONS PER SECOND.
/THE REMOTE-SITE PROCESSORS HAD 16-BIT ARITHMETIC UNITS
AND WERE SLOWER.
/EACH VERSION USES DISCRETE DIODE CIRCUIT BOARDS FOR THEIR CONTROL
MEMORY, WHICH
CONTAINS 2/K X 90-BIT WORDS.

}'/THE CENTRAL MEMORY TO WHICH THE SIX
PROCESSORS ARE CONNECTED
IS A FOUR-PORT, EIGHT-MODULE MEMORY
CAPABLE OF SUSTAINING AN AVERAGE DATA TRANSFER RATE OF SIXTEEN
MEGAWORDS PER SECOND.
/EACH MODULE CONTAINS 8/K DOUBLE-WORDS OF ONE-MICROSECOND CORE STORAGE AND
TWO DOUBLE-WORDS OF ACTIVE STORAGE TOGETHER WITH ASSOCIATED LOGIC.
/THE ACTIVE STORAGE AND THE LOGIC ASSOCIATED WITH IT ARE CALLED THE
/FAST /MEMORY (/F/M).
/THE /F/M FUNCTIONS AS A TEMPORARY REPOSITORY FOR DATA AS IT PASSES
TO AND FROM THE CORE MODULE,
AND AS A GATHERING POINT FOR MEMORY REQUESTS FOR BETTER ASSIGNMENT OF
AVAILABLE MEMORY BANDWIDTH IN THE FACE OF CONTENTION
BETWEEN THE PROCESSORS AND CONTROLLERS.
/THE /F/M PROVIDES A SMALL AMOUNT OF LOOK-BEHIND CAPABILITY.

}'/THE DRUM AND DISK MEMORY UNITS ARE INTERFACED WITH THE CENTRAL
MEMORY BY RATHER SIMPLE CONTROLLERS TERMED "TRANSFER UNITS."
/EACH DRUM IS EQUIPPED FOR FULL PARALLEL TRANSFER AT THE RATE OF
TWO MEGAWORDS PER SECOND (SIX MEGABYTES PER SECOND).
/THE DISK UNITS TRANSFER APPROXIMATELY TEN TIMES MORE SLOWLY, OR AT ABOUT
600 KILOBYTES PER SECOND.
.SP 5
[/THE /AUX /MEM IS CONSIDERED TO BE PART OF THE SYSTEM "MAIN MEMORY"
(AS OPPOSED TO BEING /I^//O UNITS), AND THE DATA FORMAT ...
PAGES, UNIQUE NAMES, ETC.]
.EJECT