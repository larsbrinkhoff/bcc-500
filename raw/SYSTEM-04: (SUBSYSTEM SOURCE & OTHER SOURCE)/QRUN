**  (LOWER CASE)
* QSPL RUNTIME, ASSEMBLE WITH NARP
QR}%IDENT

ORG}$HLT *
}'HLT *

* ENTRY POINT TRANSFER VECTOR -- DO NOT REORDER
EP}%MACRO L;XX NARG; RPT (YY=1,XX)
$L(YY) ZRO E.&L(YY); ENDR
}'ENDM

}'EP INIT,FTLERR,CSN,IIN,SOUT,CRLF
}'EP INNAME,OUTNAME,INFILE,OUTFILE
}'EP SETUP,SCOPY,APPEND,BCOPY,SETARRAY
}'EP MAKE,FREE,LOCK,UNLOCK,BPUT,BGET
}'EP PFLUSH,GCAT,PMAKE

* MACROS AND OPDS
BSS}$LMACRO N
N(0)}#EQU ENDTS;ENDTS EQU ENDTS+N(1)
}'ENDM
M}&MACRO X
}'LDA X(1); STA X(2)
}'ENDM
PUSHZ}"MACRO X;XX NARG
}'IF XX; LD.&X(1) 0; ST.&X(1)* ZP
}'ELSE; LDA 0; STA* ZP; ENDF; MIN ZP
}'ENDM
POPZ}#MACRO; BRU POPZ; ENDM
POPZ1}"MACRO; BRU POPZ1; ENDM
ZZ}%EQU 100B5
DPOP}#MACRO L;XX NARG; RPT (YY=1,XX)
}'DATA 1B5+L(YY)P;L(YY) OPD ZZ;ZZ EQU ZZ+1B5; ENDR
}'ENDM
}'DPOP CALL,NSC,MSG,FIO,RERR,RCN,RCS,WCS
}'DPOP RCB,WCB,RSD,LNG,RSR,RSW,ESC,CEA
}'DPOP CEI,CEAS,CEIS,RCALL,RRET
}'FRGT XX,YY,ZZ
EPOPS}"EQU *
NPOPS}"EQU ZZ/1B5-100B

$ENDTS EQU 225B

* GLOBAL STORAGE
$ERROR BSS 1}#GENERAL ERROR CODE CELL
$FTYPE BSS 1}#FILE TYPE RETURNED BY OIF AND OOF
$SARRAY BSS 1}"END OF PROGRAM +1 FOR AVB
$EARRAY BSS 1}"END OF AVAILABLE SPACE
$BSTORG BSS 1}"BOTTOM OF CORE SPACE
$ESTORG BSS 1}"TOP OF CORE SPACE
$PADDR BSS 1}#DRUM ADDRESS FROM 'UNLOCK'
$NPL}#BSS 1}#LOG2(PAGE SIZE)
$NPB}#BSS 1}#NUMBER OF BUFFERS
$NPG}#BSS 1}#NUMBER OF PAGES
$PM}$BSS 1}#+=PAGE ON NRH, -=ON FILE
$NPC}#BSS 1}#NUMBER OF PAGE CATEGORIES
$PCAT}"BSS 1}#CATEGORY FOR CURRENT APB
$NUP}#BSS 1}#NUMBER OF UNLOCKED PAGES
$NMAPS BSS 1}#NUMBER OF MAPPED REFERENCES
$NSTRS BSS 1}#NUMBER OF MAPPED STORES
$NRDS}"BSS 1}#NUMBER OF PAGE READS
$NWRS}"BSS 1}#NUMBER OF PAGE WRITES
$RECSTK BSS 1}"ACQUIRE BLOCK FOR STACK
$RECUNS BSS 1}"RELEASE BLOCK FOR STACK
$TOPRST BSS 1}"STACK POINTER
$RECLNK BSS 1}"SAVED (0),
$ARG1}"BSS 1}#(A),
$ARG2}"BSS 1}#(B),
$ARG3}"BSS 1}#(X) ON RECURSIVE CALL
$ZP}$BSS 1}#STACK FOR (0)
DDTM}#BSS 2}#MAP FOR DDT
DDTM1}"EQU DDTM+1
XXSP}#BSS 4}#STRING DESCRIPTOR FOR XXSB
XXSP1}"EQU XXSP+1
XXSP2}"EQU XXSP+2
XXSP3}"EQU XXSP+3
XXSB}#BSS 20}"SCRATCH STRING FOR CONVERSION AND FILE OPERATORS
XXSE}#BSS 0
XXSN}#EQU 3*[XXSE-XXSB]

* LOCAL STORAGE
RETT}#BSS 1}#RETURNED VALUE FOR RRET
SNCSP}"BSS 2}#STRING POINTER FOR SNC
SNCV}#BSS 1}#ACCUMULATED VALUE FOR SNC
SNCS}#BSS 1}#SIGN FOR SNC: -1=+, 0=-
NSCA}#BSS 1}#DESCRIPTOR ADDRESS FOR NSC
NSCV}#BSS 1}#VALUE FOR NSC
NSCB}#BSS 1}#RADIX FOR NSC
NSCX}#BSS 1}#FIELD WIDTH FOR NSC
NSCD}#BSS 25}"DIGIT BUFFER FOR NSC
NSCL}#BSS 0
NSCS}#BSS 1}#SIGN FOR NSC
NSCC}#BSS 1}#BLANK COUNT FOR NSC
CRLFC}"BSS 1}#COUNT FOR CRLF
CRLFF}"BSS 1}#FILE FOR CRLF
FIOF}#BSS 1}#FILE FOR FIO
FIOT}#BSS 1}#TEMPORARY (0) FOR FIO
AIFS}#BSS 1}#STRING DESCRIPTOR ADDRESS OF AIF,AOF
AIFC}#BSS 1}#TERMINATING CHARACTER FOR AIF,AOF
AIFT}#BSS 1}#TEMPORARY FOR AIF
WCSA}#BSS 1}#SAVE CHARACTER BEING WRITTEN BY WCS
ISDL}#BSS 1}#STRING LENGTH FOR ISD
ISDA}#BSS 1}#DESCRIPTOR POINTER ADDRESS FOR ISD
ISDO}#BSS 1}#STRING ORIGIN FOR ISD
CPSSP}"BSS 2}#SOURCE STRING FOR CPS
CPSD}#BSS 1}#DESTINATION STRING FOR CPS
CPSC}#BSS 1}#CHARACTER FOR CPS
CPYS}#BSS 1}#SOURCE FOR CPY
CPYD}#BSS 1}#DESTINATION FOR CPY
AVBU}#BSS 1}#BEAD END FOR AVB
IVBF}#BSS 1}#FREELIST BEING CONSTRUCTED BY IVB
IVBA}#BSS 1}#ARRAY ORIGIN FOR IVB
IVBC}#BSS 1}#BEAD COUNT FOR IVB
IVBS}#BSS 1}#BEAD SIZE FOR IVB
RBFB}#BSS 1}#BEAD ADDRESS FOR RBF
PBFB}#BSS 1}#BEAD ADDRESS FOR PBF
PBFF}#BSS 1}#FREELIST ORIGIN FOR PBF
PBFS}#BSS 1}#BEAD SIZE FOR PBF
AVBS}#BSS 1}#BEAD SIZE FOR AVB
AVBA}#BSS 1}#ARRAY ORIGIN FOR AVB
AVBB}#BSS 1}#BEAD ADDRESS FOR AVB
RVBB}#BSS 1}#BEAD TO BE RELEASED BY RVB
RVBA}#BSS 1}#ARRAY ORIGIN FOR RVB
RVBT}#BSS 1}#NEXT LOWER BEAD FOR RVB
$CECA}"BSS 1}#SAVE (A) FOR CEC GROUP (CEA,CEI,CEAS,CEIS)
$CECR}"BSS 1}#SAVE (0) WHILE IN PAGE TURNER
$CECU}"BSS 1}#UPPER LIMIT OF VIRTUAL ADDRESSES
$NPS}#BSS 1}#PAGE SIZE
$PF}$BSS 1}#FILE FOR PAGING
$BXT}#BSS 1}#ORIGIN OF PAGE DISPATCHER
$EBXT}"BSS 0
$BCT}#BSS 1}#ORIGIN OF CATEGORY TABLE
$EBCT}"BSS 0
$BPT}#BSS 1}#ORIGIN OF CURRENT IN-CORE PAGE NUMBERS
$EBPT}"BSS 0
$BAT}#BSS 1}#ORIGIN OF AGING WORDS
$EBAT}"BSS 0
$BUT}#BSS 1}#ORIGIN OF REFERENCE FLAGS
$EBUT}"BSS 0
$BMT}#BSS 1}#ORIGIN OF STORED-INTO FLAGS
$EBMT}"BSS 0
$BOT}#BSS 1}#ORIGIN OF BUFFER ADDRESSES
$EBOT}"BSS 0
$BLT}#BSS 1}#ORIGIN OF BUFFER LOCK COUNTS
$EBLT}"BSS 0
$PATAB BSS 1}#ORIGIN OF DRUM ADDRESSES
$EPATAB BSS 1
$EXCT}"BSS 1}#EXU TO CATEGORY TABLE
$OBF}#BSS 1}#ORIGIN OF BUFFERS
$PAGE}"BSS 2}#ENTRY TO PAGE TURNER
$LPAGE EQU PAGE+1
$PGB}#BSS 1}#SAVE (B) FOR PAGE TURNER
$PGX}#BSS 1}#SAVE (X) FOR PAGE TURNER
$PGT}#BSS 1}#PAGE NUMBER TO BE BROUGHT IN
$PGM}#BSS 1}#CURRENT SMALLEST AGING WORD
$PGN}#BSS 1}#BUFFER NUMBER FOR PAGE SWAP
$PGL}#BSS 1}#LOCATION OF BUFFER FOR PAGE SWAP
$PGZ}#BSS 1}#END OF BUFFER BEING ZEROED
$PGC}#BSS 1}#CATEGORY OF PAGE TO BE READ
$XGDA}"BSS 1}#SUBROUTINE LINK FOR GDA
$GDS}#BSS 1}#LOW BITS OF PAGE NUMBER FOR GDA
$GDH}#BSS 1}#HALF-WORD FLAG IN PATAB
$GDD}#BSS 1}#DRUM ADDRESS OF NEWLY ASSIGNED 2K PAGE
$XCKB}"BSS 1}#SUBROUTINE LINK FOR CKB,MFDUMP
$XPWR}"BSS 1}#SUBROUTINE LINK FOR PWR
$PWRX}"BSS 1}#BUFFER NUMBER TO FLUSH
$XRIO}"BSS 1}#SUBROUTINE LINK FOR RFI,RFO
$APBA}"BSS 1}#PAGE ADDRESS FOR APB SEARCH
$APBC}"BSS 1}#SIZE OF FREE AREA IN APB SCAN
$APBL}"BSS 1}#BEAD SIZE CEILING FOR APB SEARCH
$APBO}"BSS 1}#BEAD ORIGIN FROM APB
$APBS}"BSS 1}#BEAD SIZE FOR APB
$RPBA}"BSS 1}#BEAD TO BE RELEASED BY RPB
$RPBS}"BSS 1}#BEAD SIZE FOR RPB

* DRIVER FOR RUNTIME

RUN0}#LDX =-100B; LDA UUOB; STA 200B,2; BRX *-1
}'LDX =-NPOPS; LDA EPOPS,2; STA 100B+NPOPS,2; BRX *-2
}'BRS 43; XAB; ETR =@77B2; XAB; BRS 117
}'CBA; MRG =4B7; BRS 80}"*** ONLY IF NON-COMMON ***
}'CLA; LDX =-1; LDB =DDTP; BRS 100; HLT
}'RCY 12; LRSH 36; STP DDTM
}'CXA; ETR =37777B; SKE =30000B; HLT
}'LDX =-4000B; LDA ORG,2; STA 10000B,2; BRX *-2
}'BRS 43; LCY 6; ETR =77B6; ADM DDTM
}'RCY 18; ETR =77B4; ADM DDTM1; CAX
}'BRS 43; COPY AB,BA,XA; XAB; BRS 44
}'LDP DDTM; LDX =1; BRU *+1-10000B
}'BRS 44; COPY XB,A; BRU 30001B

DDTP}#DATA 3*DDTS-1,3*DDTS+2
DDTS}#ASC 'DDT'

* ONCE-ONLY INITIALIZATION

IRUN}#CLA; LDX =-1; LDB =DDTP; BRS 100; HLT
}'STP 104B; CLA; LDB =1; STP 101B; STX 100B
}'CLEAR; BRS 117; LDA =72000100B; BRS 9; BRS 31
}'LDA 104B; ETR =77B6; LRSH 12; CAX
}'BRS 43; COPY BA,XA; ABC; BRS 10

* MISCELLANEOUS OPERATORS

* INITIALIZE RUNTIME
* (A),(B),(X) CLEARED
EINIT}"M 0,1; M =2,ZP; M =ORG,EARRAY
}'LDA SARRAY; SKE =0; BRU INIT2
}'BRS 43; LRSH 6; LDX =100B
INIT3}"EAX -4000B,2; RCY 6; SKA =77B6; BRU *+2; BRU INIT3; CLA
INIT4}"EAX -1,2; SKE -100B,2; BRU *+2; BRU INIT4; STX SARRAY
INIT2}"M =MAKE0,RECSTK; M =FREE0,RECUNS
}'LDA NPG; SKG =0; BRU INIT1; CALL PGINIT; RERR 6
INIT1}"LDA EARRAY; SUB SARRAY; LDX SARRAY; STA -1,2
}'COPY XB,A; CALL* SETARRAY
}'LDA =XXSP; LDB =XXSN; LDX =XXSB; CALL* SETUP; POPZ

* CALL SUBROUTINE
CALLP}"EQU 40000B

* POP 0 AND RETURN
POPZ}#SKR ZP; BRR* ZP
POPZ1}"SKR ZP; MIN* ZP; BRR* ZP

* RECURSIVE CALL ENTRY.}"(A)=SAVED (0), (ARG1)=SAVED (A),
* Q=NUMBER OF VARIABLES TO BE SAVED.
RCALLP STA RECLNK; STB ARG2; STX ARG3; PUSHZ
}'EAX* 0; CXA; ETR =37777B; ADD =2; CALL* RECSTK
}'CAX; XMA TOPRST; STA 1,2
}'M RECLNK,/0; LDB ARG2; POPZ

* RECURSIVE CALL RETURN, (A)=VALUE
RRETP}"STA RETT; M /0,RECLNK
}'LDA 1,2; XMA TOPRST; CALL* RECUNS; LDA RETT; BRR RECLNK

* RUN-TIME ERROR (Q)
UUOB}#BRU UUOE
UUOE}#EAX 7; BRU ERRET
EFTLERR CLX; BRU ERRET
RERRP}"EAX* 0
ERRET}"M 0,_ZP; MSG* ERRLST,2; MSG ERRMSG
}'LDA* ZP; LDB =34000B; SKM =ORG; BRU *+2; LDA 1
}'ETR =37777B; LDB =10B; LDX =1; BRS 36; BRS 10
ERRMSG ASC ' AT /'
ERRLST DATA FTEERR,STRERR,SNCERR,AFBERR,AVBERR,CECERR
}'DATA PGIERR,UUOERR,RVBERR,ULKERR,APLERR
FTEERR ASC '$FATAL ERROR/'
STRERR ASC '$NO DESCRIPTOR FOR STRING/'
SNCERR ASC '$NON-NUMERIC STRING/'
AFBERR ASC '$BAD SIZE FOR "MAKE"/'
AVBERR ASC '$OUT OF ROOM/'
CECERR ASC '$ILLEGAL VIRTUAL ADDRESS/'
PGIERR ASC '$ILLEGAL VALUES FOR PAGER/'
UUOERR ASC '$UNDEFINED POP/'
RVBERR ASC '$ILLEGAL CALL OF "FREE"/'
ULKERR ASC '$ILLEGAL "UNLOCK"/'
APLERR ASC '$ALL BUFFERS LOCKED/'

* I/O AND CONVERSION OPERATORS

* STRING ((A)...(A)+3) TO INTEGER (A) CONVERSION, BASE 10
* STRING POINTER IS NOT AFFECTED
* (B),(X) DESTROYED
ECSN}#AXC; STA SNCV; M =-1,SNCS; LDP 1,2; STP SNCSP
SNC1}#GCI SNCSP; BRU SNC2; SKG =0; BRU SNC1
}'SKE ='}#+'; BRU *+2; BRU SNC3
}'SKE ='}#-'; BRU SNC4; MIN SNCS
SNC3}#GCI SNCSP; BRU SNC2; SKG =0; BRU SNC3; BRU SNC4
SNC5}#GCI SNCSP; BRU SNC2
SNC4}#SKG ='}#9'; SKG ='}#0'-1; BRU SNC6
}'SUB ='}#0'; XMA SNCV; MUL =24B6; LSH 4
}'XMA SNCV; ADM SNCV; BRU SNC5
SNC2}#LDA SNCV; SKN SNCS; CNA; BRR 0
SNC6}#EAX 2; BRU ERRET

* INTEGER (Q) TO STRING ((A)...(A)+3) CONVERSION, BASE (B)
* FIELD WIDTH IN (X): IF <1 THEN FREE FORMAT
* FIELD OVERFLOW REPLACES THE FIRST CHARACTER WITH *
* (A),(B),(X) CLEARED
NSCP}#STA NSCA; STB NSCB; STX NSCX; LDX* 0; COPY XB,AX,BA
}'SKG =127; SKG =1; BRU EFTLERR
}'LDA 0,2; STA 1,2; STA 2,2
}'CNA; ADD 3,2; SKG NSCX; STA NSCX; LDX =77740000B
}'SKB =4B7; BRU NSC1; STX NSCS
NSC2}#CLA; LSH 1; DIV NSCB; EAX -1,2
}'XAB; MRG ='}#0'; STA NSCL,2; SKB =-1; BRU NSC2
}'PUSHZ; SKN NSCS; BRU NSC3
NSC4}#CXA; STA NSCB; ADD NSCX; SKG =-1; BRU NSC5
}'STA NSCC; BRU NSC8
NSC7}#LDA NSCA; WCS =0; HLT
NSC8}#SKR NSCC; BRU NSC7; LDX NSCB
NSC6}#LDA NSCA; STX NSCB; WCS NSCL,2; HLT
}'LDX NSCB; BRX NSC6; CLEAR; POPZ
NSC3}#EAX -1,2; LDA ='}#-'; STA NSCL,2; BRU NSC4
NSC5}#LDA NSCX; SKG =0; BRU NSC6
}'CNA; CAX; LDA ='}#*'; STA NSCL,2; BRU NSC6
NSC1}#CBA; CNA; ABC; STA NSCS; BRU NSC2

* TYPE MESSAGE (Q)
* (A),(B),(X) DESTROYED
MSGP}#EAX* 0; CXA; ETR =37777B
}'LDB =-1; LDX =1; BRS 34; BRR 0

* FORMATTED INTEGER OUTPUT (Q) TO FILE (A)
* RADIX IN (B), FIELD LENGTH IN (X) AS FOR NSC
* (A),(B),(X) CLEARED
FIOP}#STA FIOF; PUSHZ; M _0,FIOT; LDA =XXSP; NSC FIOT
}'LDA XXSP2; SUB XXSP1; CAX
}'GCI XXSP1; BRU *+3; CIO FIOF; BRU *-3
}'COPY XA,X,B; POPZ

* FREE FORMAT INTEGER INPUT TO (A)
* RADIX IN (B), FILE IN (A)
* (B) HAS TERMINATOR, (X) DESTROYED
EIIN}#AXC; BRS 38; BRR 0

* STRING OUTPUT ((A)...(A)+3) TO FILE (B)
* (A),(B),(X) CLEARED
ESOUT}"CAX; STB SNCV; LDP 1,2; STP SNCSP
}'GCI SNCSP; BRU *+3; CIO SNCV; BRU *-3
}'CLEAR; BRR 0

* OUTPUT (A) CRLF'S TO FILE (B)
* (A),(B) CLEARED
ECRLF}"STA CRLFC; STB CRLFF; BRU CRLF2
CRLF1}"LDA =155B; CIO CRLFF; LDA =152B; CIO CRLFF
CRLF2}"SKR CRLFC; BRU CRLF1; CLAB; BRR 0

* FILE HANDLING OPERATORS

* ACCEPT INPUT FILE NAME, WRITE IN ((A)...(A)+3)
* TERMINATOR RETURNED IN (A)
* (B),(X) DESTROYED
* NO-SKIP RETURN ON ERROR
EINNAME STA AIFS; LDA XXSP; STA XXSP1
}'LDA =2B7; LDB AIF1; CLX; BRS 15; BRU OIF1
AIF5}#PUSHZ; STB AIFC; LDX AIFS
}'LDA 0,2; STA 1,2; STA 2,2
AIF2}#GCI XXSP1; BRU AIF3; STA AIFT
}'LDA AIFS; WCS AIFT; BRU AIF4; BRU AIF2
AIF4}#LDA ='}#?'; CIO =1; CLX; STX ERROR; POPZ
AIF3}#LDA AIFC; POPZ1
AIF1}#ZRO XXSP1,4

* ACCEPT OUTPUT FILE NAME, SAME CONVENTIONS AS AIF
* (B),(X) DESTROYED
EOUTNAME STA AIFS; LDA XXSP; STA XXSP1
}'LDA =2B7; LDB AIF1; CLX; BRS 16; BRU OIF1; BRU AIF5

* OPEN FILE ((A)...(A)+3) FOR INPUT, FILE NUMBER TO (A)
* NO-SKIP RETURN ON ERROR, ERROR CODE IN $ERROR
* TYPE PUT IN $FTYPE
* (B),(X) DESTROYED
EINFILE ETR =37777B; ADD =1; CAB
}'LDX =-1; LDA =1B7; BRS 15; BRU OIF1
}'STX FTYPE; MIN 0; BRR 0
OIF1}#STX ERROR; BRR 0

* OPEN FILE ((A)...(A)+3) FOR OUTPUT, OPTIONS IN (B), FILE NUMBER TO (A)
* NO-SKIP RETURN ON ERROR, ERROR CODE IN $ERROR
* (B),(X) DESTROYED
EOUTFILE ETR =37777B; ADD =1; XAB
}'LDX =-1; ETR =47777777B; MRG =1B7
}'BRS 16; BRU OIF1; STX FTYPE; MIN 0; BRR 0

* STRING OPERATORS

* READ CHARACTER FROM STRING ((Q)...(Q)+3) TO (A)
* NO-SKIP RETURN IF EXHAUSTED, (A) DESTROYED
* (B) DESTROYED OTHERWISE
* FORMAT OF STRING DESCRIPTOR: (Q)=START OF STRING AREA,
*}>(Q+1)=READER, (Q+2)=WRITER,
*}>(Q+3)=END OF STRING AREA
RCSP}#LDX* 0; MIN 1,2; LDA 1,2
}'SKG 2,2; BRU RCN1; SKR 1,2; BRR 0
* READ CURRENT CHARACTER FROM STRING ((Q)...(Q)+3) TO (A)
* (B),(X) DESTROYED
RCNP}#LDX* 0; LDA 1,2; ADD =1; BRU *+2
RCN1}#MIN 0; MUL =12525253B; COPY AX,BA,B; LCY 2
}'LDA 0,2; COPY BX,AB; EXU RCN2,2; ETR =377B; BRR 0
RCN2}#LCY 8; LCY 16; XAB
* READ LAST CHARACTER FROM STRING ((Q)...(Q)+3) TO (A)
* (B),(X) DESTROYED
RCBP}#LDX* 0; LDA 2,2; SKG 0,2; BRR 0
}'SKG 1,2; SKR 1,2; SKR 2,2; BRU RCN1

* WRITE CHARACTER (Q) ON ((A)...(A)+3)
* NO-SKIP RETURN IF FULL
* (B) DESTROYED OTHERWISE
* (A)_(Q) MASKED TO LAST 8 BITS, (X) DESTROYED IN ANY CASE
WCSP}#LDX* 0; XXA; ETR =377B; STA WCSA
}'MIN 2,2; LDA 2,2; SKG 3,2; BRU WCS1; SKR 2,2
WCS3}#LDA WCSA; BRR 0
WCS1}#MUL =12525253B; AXC; LCY 2
}'LDB 0,2; XXA; EXU RCN2,2; ETR =77777400B
}'MRG WCSA; EXU WCS2,2; CAX; STB 0,2
}'LDA WCSA; MIN 0; BRR 0
WCS2}#RCY 8; RCY 16; XAB
* WRITE (Q) AS FIRST CHARACTER ON STRING ((A)...(A)+3)
* (B),(X) DESTROYED
WCBP}#LDX* 0; XXA; ETR =377B; STA WCSA
}'LDA 1,2; SKG 0,2; BRU WCS3; SKR 1,2; BRU WCS1

* INITIALIZE STRING DESCRIPTOR ((A)...(A)+3)
* WORD ADDRESS IN (X), LENGTH IN (B)
* (A)=0 IS AN ERROR
* (X)=0 MEANS ALLOCATE STRING FROM SARRAY
* (A),(B),(X) CLEARED
ESETUP STB ISDL; STA ISDA; CXA; ETR =37777B; STA ISDO
ISD4}#PUSHZ; LDA ISDA; SKE =0; BRU ISD3; RERR 1
ISD3}#LDA ISDO; SKE =0; BRU ISD1
}'SKN ISDL; BRU ISD2; LDA =1; BRU ISD1
ISD2}#LDA ISDL; ADD =2; MUL =12525253B; LDB SARRAY; CALL* MAKE
ISD1}#MUL =3B7; LSH 2; SUB =1
}'LDX ISDA; STA 0,2; STA 1,2; STA 2,2
}'SKN ISDL; ADD ISDL; STA 3,2; CLEAR; POPZ

* ESTABLISH STRING DESCRIPTOR POINTING TO CONSTANT
* NUMBER OF CHARACTERS FOLLOWS CALL, AND THE CONSTANT ITSELF,
* 3 CHARACTERS / WORD, FOLLOWS THAT.
* (A),(B),(X) CLEARED
ESCP}#LDA* 0; STA ISDA
}'LDX 0; LDA 1,2; STA ISDL; ADD =5; MUL =12525253B
}'ADM 0; PUSHZ; CXA
}'ETR =37777B; ADD =2; STA ISDO; CALL ISD4
}'LDX ISDA; LDA 3,2; STA 2,2
}'CLEAR; POPZ

* RESET STRING DESCRIPTOR ((Q)...(Q)+3)
* POSITION OF READER IN (A), WRITER IN (B)
* SETTINGS WILL BE FORCED TO BE BETWEEN 0 AND THE STRING LENGTH
* THE READER POINTER WILL BE FORCED TO <= THE WRITER POINTER
* (A),(B),(X) CLEARED
RSDP}#LDX* 0; XAB; SKG =-1; CLA; ADD 0,2
}'SKG 3,2; BRU *+2; LDA 3,2; STA 2,2; CBA
RSD1}#SKG =-1; CLA; ADD 0,2
}'SKG 2,2; BRU *+2; LDA 2,2; STA 1,2; CLEAR; BRR 0

* RESET READER OF ((Q)...(Q)+3) TO (A)
* (A),(B),(X) CLEARED
RSRP}#LDX* 0; BRU RSD1

* RESET WRITER OF ((Q)...(Q)+3) TO (A)
* (A),(B),(X) CLEARED
RSWP}#LDX* 0; SKG =-1; CLA; ADD 0,2
}'SKG 3,2; BRU *+2; LDA 3,2; STA 2,2
}'SKG 1,2; STA 1,2; CLEAR; BRR 0

* LENGTH OF STRING ((Q)...(Q)+3) TO (A)
* (X) DESTROYED
LNGP}#LDX* 0; LDA 2,2; SUB 0,2; BRR 0

* COPY STRING ((B)...(B)+3) ONTO ((A)...(A)+3)
* (A),(B),(X) CLEARED
* NO-SKIP RETURN IF NO ROOM
ESCOPY CAX; M /0,/1; STA 2,2; CXA
EAPPEND ETR =37777B; STA CPSD; PUSHZ
}'CBX; LDP 1,2; STP CPSSP
CPS1}#GCI CPSSP; BRU CPS2; STA CPSC
}'LDA CPSD; WCS CPSC; BRU CPS3; BRU CPS1
CPS2}#CLEAR; POPZ1
CPS3}#CLEAR; POPZ

* COPY BEAD (B) THROUGH (B)+(X)-1
* TO (A) THROUGH (A)+(X)-1
* (A),(B),(X) CLEARED
EBCOPY ETR =37777B; STA CPYD; COPY BA,BX,XB; ETR =37777B; STA CPYS
}'CBA; SKE =-1; BRU CPY2; LDA -1,2; SUB =1
CPY2}#ETR =37777B; SKG =0; BRU CPY3
}'CNA; COPY AX,N; MRG =2B7; ADM CPYS; ADM CPYD
CPY1}#LDA* CPYS; STA* CPYD; BRX CPY1
CPY3}#CLEAR; BRR 0

* FREE STORAGE OPERATORS

* INITIALIZE ARRAY (B) FOR BEAD SIZE (A)
* BEAD SIZE 0 MEANS SIZE IS VARIABLE
* (A),(B),(X) CLEARED
ESETARRAY CBX; SKG =0; BRU IVB3; STA 0,2; STA IVBS
}'CXA; ETR =37777B; STA IVBA; CAX
}'LDA =-1; STA IVBF; LDA -1,2; SUB =4; RSH 23
}'DIV IVBS; STA IVBC; EAX 3,2; BRU IVB2
IVB1}#CXA; ADD IVBS; XXA; XMA IVBF; STA* IVBF
IVB2}#SKR IVBC; BRU IVB1; LDX IVBA; LDA =FSI1; STA 1,2
}'LDA IVBF; STA 2,2; CLEAR; BRR 0
* VARIABLE SIZE
IVB3}#CLA; STA 0,2; CXA; ETR =37777B; STA 4,2
}'ADD =4; STA 2,2; LDA =FSI1; STA 1,2
}'LDA -1,2; ADD =4B7-4; STA 3,2
}'LDA =-1; STA 5,2; STA 6,2
}'CXA; ADD -1,2; CAX
}'LDA =2B7; STA -1,2; CLEAR; BRR 0
FSI1}#EAX 4; BRU ERRET

* REMOVE BEAD (X) FROM FREELIST
* (A),(B),(X) CLEARED
* FREELIST MASTER BEAD: (Q-1)=SIZE, (Q)=POINTER TO PREVIOUS MASTER BEAD,
*}7(Q+1)=POINTER TO SUBLIST, (Q+2)=POINTER TO NEXT
*}7MASTER BEAD IF (Q-1)>3
* SUBLIST BEAD: (Q-1)=SIZE, (Q)=POINTER TO PREVIOUS BEAD,
*}/(Q+1)=POINTER TO NEXT BEAD
RBF}$STX RBFB; LDA -1,2; ETR =37777B; STA -1,2
}'CAB; ADD RBFB; CAX; LDA =-2B7; ADM -1,2
}'CBA; LDX* RBFB; EOR -1,2; SKA =37777B; BRU RBF2
* NOT MASTER BEAD, DELETE FROM FREELIST FOR THIS SIZE
}'LDX 1,2; LDA 1,2; LDX 0,2; XMA 1,2
}'SKN 1,2; BRU *+2; BRR 0; XXA
}'LDX 1,2; STA 0,2; BRR 0
* MASTER BEAD, DELETE FROM MAIN FREELIST
RBF2}#LDX 2,2; LDA -1,2; SKN 1,2; BRU RBF3; SKG =3; BRU RBF4
* NO OTHER BEADS OF THIS SIZE, CLOSE UP MAIN FREELIST
}'LDA 0,2; SKN 2,2; STA* 2,2; LDA 2,2
}'LDX* RBFB; STA 2,2; BRR 0
* SPECIAL CASE OF SIZE 2 BEAD
RBF4}#LDX 0,2; LDA =-1; STA 2,2; BRR 0
* POP UP FREELIST FOR THIS SIZE BEAD
RBF3}#SKG =3; BRU RBF5; LDA 0,2; LDB 2,2; LDX 1,2
}'STA 0,2; STB 2,2; STX* 2,2; XXA; STA 2,2; BRR 0
* SPECIAL CASE OF SIZE 2 BEAD
RBF5}#LDA 0,2; STA* 1,2; LDB 1,2; CAX; STB 2,2; BRR 0

* PUT BEAD (X) ONTO FREELIST (A)
* (A),(B),(X) CLEARED
PBF}$STX PBFB; STA PBFF; LDA -1,2; MRG =4B7; STA -1,2; CAB
}'ADD PBFB; CAX; LDA -1,2; MRG =2B7; STA -1,2
}'CBA; ETR =37777B; STA PBFS; CNA; STA -2,2; LDX PBFF
PBF1}#SKN 2,2; BRU PBF2; LDA PBFB; STA 2,2
* MAKE NEW MASTER BEAD AT END OF LIST
}'XXA; STA 0,2; LDB =-1; STB 1,2
}'LDA PBFS; SKE =3; STB 2,2; BRR 0
PBF2}#LDX 2,2; LDA -1,2; ETR =37777B; SKG PBFS; BRU PBF3; BRU PBF1
PBF3}#SKE PBFS; BRU PBF4
* LIST FOR THIS SIZE BEAD ALREADY EXISTS
}'LDA PBFB; SKN 1,2; STA* 1,2; XMA 1,2; CXB
}'LDX PBFB; STA 1,2; STB 0,2; BRR 0
* NO LIST FOR THIS SIZE, SO MAKE MASTER
PBF4}#LDA PBFB; XMA 0,2; XXA; LDB PBFB; STB 2,2
}'XXB; STA 2,2; STB 0,2; LDA =-1; STA 1,2; BRR 0

* ALLOCATE BEAD OF SIZE (A) IN ARRAY (B) TO (A)
* ASSUME ARRAY SIZE IN ((B)-1), FREELIST IN ((B)+2),
* BEAD SIZE IN ((B)), RETURN FOR SPACE EXHAUSTED IN ((B)+1)
* (B),(X) DESTROYED
MAKE0}"LDB SARRAY
EMAKE}"SKG =2; LDA =2; CBX; SKE 0,2; BRU AVB6
}'LDA 2,2; SKG =0; BRU AVB10
}'LDA* 2,2; XMA 2,2; LDB 0,2; STB AVBU
AVB7}#CAB; MRG =2B7; XMA AVBU; ADM AVBU
}'CNA; COPY AX,BA,B
AVB8}#STB* AVBU; BRX AVB8; BRR 0
AVB10}"LDA 0,2; CXB; BRU* 1,2
* NOT FIXED-SIZE BEAD ARRAY
AVB6}#ADD =1; STA AVBS; CXA
}'ETR =37777B; STA AVBA; AXC; SKE 0,2; BRU AVB9
}'SKN 2,2; BRU AVB11; CXB
}'LDA AVBS; SUB =1; BRU* 1,2
AVB11}"PUSHZ
AVB1}#LDX 2,2; LDA -1,2; ETR =37777B; SKG AVBS; BRU AVB2
}'SKN 2,2; BRU AVB1; BRU AVB4+1
AVB2}#SKE AVBS; BRU AVB3
* EXACT MATCH, RETURN A BEAD FROM THIS SUBLIST
}'SKN 1,2; LDX 1,2; STX AVBB; CALL RBF; BRU AVB5
* NOT EXACT MATCH, FIND A BEAD TO BUST
AVB3}#LDA 0,2; SKE AVBA; BRU AVB4
}'COPY AB,AX; LDA AVBS; SUB =1; BRU* 1,2
AVB4}#LDX 0,2; LDA -1,2; ETR =37777B
}'SUB =2; SKG AVBS; BRU AVB3; ADD =0 (CLEAR X0)
* FOUND BEAD, REMOVE FROM ITS FREELIST AND MAKE NEW
}'SKN 1,2; LDX 1,2; STX AVBB; CALL RBF
}'LDX AVBB; LDA AVBS; LDB -1,2; STA -1,2
}'ADD AVBB; COPY AX,AB,BA; SUB AVBS; STA -1,2
}'LDA AVBA; CBX; CALL PBF
AVB5}#LDX AVBB; LDA -1,2; SUB =1; STA AVBU
}'LDA AVBB; CALL AVB7; POPZ
* SIZE ERROR
AVB9}#EAX 3; BRU ERRET

* RELEASE BEAD (A) TO ARRAY (B)
* (A),(B),(X) CLEARED
FREE0}"LDB SARRAY
EFREE}"COPY BX,AB,A; SKE 0,2; BRU RVB3; PUSHZ
}'CBA; ETR =7777777B; SKA =7740000B; BRU RVB5
}'STA RVBB; XXA; ETR =37777B; STA RVBA
}'LDA RVBB; SKG RVBA; RERR 8
}'LDX RVBA; LDA -1,2; ETR =37777B; ADD RVBA
}'SKG RVBB; RERR 8; LDX RVBB
}'COPY XA,XB; ADD -1,2; ETR =37777B; CAX; SKN -1,2; BRU RVB1
* NEXT HIGHER BEAD WAS FREE, SO MERGE
}'LDA -1,2; ETR =37777B; XXB; ADM -1,2; CBX; CALL RBF
RVB1}#LDX RVBB; LDA -1,2; SKG =2B7; BRU RVB2
* NEXT LOWER BEAD WAS FREE, SO MERGE
}'LDA -2,2; SKG =-2; BRU RVB4
}'LDA =-3; SKN -4,2; LDA =-4
RVB4}#ADD RVBB; STA RVBT; CAX; CALL RBF; LDX RVBB
}'LDA -1,2; ETR =37777B; LDX RVBT; ADM -1,2; STX RVBB
* PUT BLOCK ON FREELIST
RVB2}#LDA RVBA; LDX RVBB; CALL PBF; CLEAR; POPZ
* FIXED-SIZE BEAD ARRAY
RVB3}#CBA; XMA 2,2; STA* 2,2; CLEAR; BRR 0
* OUT OF BOUNDS
RVB5}#LDB NPG; SKB =-1; BRU RPB0

QP}%IDENT

* PAGING LOGIC FOR QR

* USE OF CATEGORY NUMBERS:
* 0 NEVER REFERENCED
* 1 USED BUT NOT BY ALLOCATOR
* 2 UPPER PART OF MULTI-PAGE ARRAY
* 3-7 RESERVED FOR FUTURE EXPANSION
* 8 =USER CATEGORY 0

CHECK}"MACRO X
}'ETR =1B7-1; SKG CECU; SKG =2B6-1; BRU X(1)
}'ENDM

}'RELORG}"ENDTS

* CONVERT VIRTUAL ADDRESS (Q) TO CORE ADDRESS (X)
* (B) DESTROYED
$CEAP}"STA CECA; LDA* 0; CHECK CEC1
CEARS}"RSH 0; AXC
CEAXU}"EXU *,2
CEAIU}"MIN *,2
CEALS}"LSH 0
CEAAO}"ADD *,2; CAX; LDA CECA; BRR 0

* CONVERT VIRTUAL ADDRESS (Q)+(X) TO CORE ADDRESS (X)
* (B) DESTROYED
$CEIP}"STA CECA; CXA; ADD* 0; CHECK CEC1
CEIRS}"RSH 0; AXC
CEIXU}"EXU *,2
CEIIU}"MIN *,2
CEILS}"LSH 0
CEIAO}"ADD *,2; CAX; LDA CECA; BRR 0

* CONVERT VIRTUAL ADDRESS (X) TO CORE ADDRESS (X)
* AND MARK PAGE AS STORED INTO
* (B) DESTROYED
$CEASP STA CECA; LDA* 0; CHECK CEC1
CEASRS RSH 0; AXC
CEASXU EXU *,2
CEASIM MIN *,2
CEASLS LSH 0
CEASAO ADD *,2; CAX; LDA CECA; BRR 0

* CONVERT VIRTUAL ADDRESS (Q)+(X) TO CORE ADDRESS (X)
* AND MARK PAGE AS STORED INTO
* (B) DESTROYED
$CEISP STA CECA; CXA; ADD* 0; CHECK CEC1
CEISRS RSH 0; AXC
CEISXU EXU *,2
CEISIM MIN *,2
CEISLS LSH 0
CEISAO ADD *,2; CAX; LDA CECA; BRR 0

ENDTS}"EQU *
}'RETREL
ENDTI}"EQU *

* OUT OF BOUNDS
CEC1}#EAX 5; BRU ERRET

* CONVERT VIRTUAL ADDRESS (Q) TO CORE ADDRESS (A),
* MARK PAGE AS STORED INTO,
* AND INCREMENT LOCK
* (B),(X) DESTROYED
$ELOCK}"CHECK CEC1
}'EXU CEASRS; AXC; EXU CEASXU
}'SKN* BLT; BRU *+2; SKR NUP; NOP
}'MIN* BLT; EXU CEASIM
}'EXU CEASLS; EXU CEASAO; BRR 0

* UNLOCK BUFFER (A), RETURN OLD COUNT AS (A),
* DRUM ADDRESS IN PADDR
* (B),(X) DESTROYED
$EUNLOCK SBRM CKB
}'LDA* BPT; EXU CEALS; MRG =2B6; STA PADDR
}'LDA* BLT; SKE =-1; SKR* BLT; BRU *+2; MIN NUP
}'ADD =1; BRR 0

* RELEASE OR REASSIGN PAGE BUFFER (A)
$EBPUT}"SBRM CKB; SBRM PWR; LDA =2B7; STA* BLT
}'CLEAR; BRR 0
$EBGET}"SBRM CKB; LDA* BLT; SKE =2B7; BRU BGET1
}'LDA =-1; STA* BLT
BGET1}"CLEAR; BRR 0

* DUMP ALL INFORMATION
$EPFLUSH LDX NPB; STX PWRX; PUSHZ; BRU DUMP1
DUMP2}"LDX PWRX; SBRM PWR
DUMP1}"SKR PWRX; BRU DUMP2; CLA; SBRM GDA
}'SUB NPS; CAB; LDA NPG; LDX BXT
}'SBRM RFO; CLEAR; POPZ

* GET CATEGORY NUMBER
$EGCAT}"CHECK CEC1; EXU CEARS; CAX; LDA* CEAXU
}'LDB =177B5; SKM WEXU; BRU GCAT1; SUB EXCT; BRU GCAT2
GCAT1}"CAX; LDA* BPT; LRSH 15
GCAT2}"SUB =8; BRR 0

* CHECK BUFFER ADDRESS
CKB}$ZRO XCKB; ETR =37777B; SUB OBF
}'EXU CEARS; COPY AX,B; ADD =1
}'SKG NPG; SKG =0; BRU CKB1; SBRR CKB
CKB1}#EAX 9; BRU ERRET

* PAGE TURNING ROUTINE
* CALLED FROM PAGE DISPATCHER WITH (X)=PAGE NUMBER,
* HIGH BITS OF (B)=WORD NUMBER, (A)=0
WPAGE}"BRM PAGE
BPAGE}"BRU EPAGE
EPAGE}"STB PGB; STX PGX; LDA 0; STA CECR
}'CXA; EXU CEALS; EOR =2B6; EXU CEARS; STA PGT
}'LDA* PAGE; ADD PGX; CAX
}'LDA 0,2; SUB EXCT; STA PGC
}'LDA NPB; CNA; CAX; LDA =37777777B; STA PGM
PG1}$LDA* EBAT; LRSH 1; SKN* EBUT; BRU PG2
}'SKN* EBMT; BRU PG2
}'STA* EBAT; SKG PGM; BRU PG4
}'SKN* EBMT; BRU PG6; BRX PG1
PG5}$LDA PGM; EAX 10; SKA =2B7; BRU ERRET
}'LDX PGT; LDA PGN; MRG =4B7
}'ADD NPB; ADD WEAX; STA* BXT
}'CAX; SBRM PWR; LDA* BOT; STA PGL
}'LDB PGC; LSH 39; MRG PGT; STA* BPT
}'SBRM GDA; LDA PGC; SKE =0; BRU PG8
}'CLEAR; SUB NPS; COPY AX,N
}'ADD PGL; ETR =37777B; MRG =2B7; STA PGZ
}'STB* PGZ; BRX *-1; LDX PGN; MIN* EBMT
}'LDA =1B5; ADM* EBPT; BRU PG9
PG8}$MIN NRDS; LDA NPS; LDX PGL; SBRM RFI
PG9}$LDA CECR; STA 0; CLA; LDB PGB; LDX PGX; BRU* PAGE
PG2}$MRG =1B7; STA* EBAT; SKG PGM; BRU PG4
PG3}$LDA =-1; XMA* EBUT; ADD =1; ADM NMAPS
}'SKN* EBMT; BRU PG6; BRX PG1; BRU PG5
PG6}$CLA; XMA* EBMT; ADM NSTRS; ADM NMAPS; BRX PG1; BRU PG5
PG4}$SKN* EBLT; BRU PG3; STA PGM; STX PGN; BRU PG3
* BLOCK INPUT FROM PAGE STORAGE
RFI}$ZRO XRIO; SKN PM; BRU RFI1
}'DBI PF; SKN PF; SBRR RFI
RFI2}#MSG DRDERR; SBRR RFI
RFI1}#XXA; BRS 124; BRU RFI2; SBRR RFI
* BLOCK OUTPUT TO PAGE STORAGE
RFO}$ZRO XRIO; SKN PM; BRU RFO1
}'DBO PF; SKN PF; SBRR RFO
RFO2}#MSG DWRERR; SBRR RFO
RFO1}#XXA; BRS 125; BRU RFO2; SBRR RFO
* WRITE PAGE IF NECESSARY
PWR}$ZRO XPWR; STX PWRX; SKN* BMT; BRU PWR1
PWR2}#LDX PWRX; LDA =-1; XMA* BPT; SKG =-1; BRU PWR3
}'CAX; LRSH 15; ADD EXCT; STA* BXT; LDX PWRX
PWR3}#MIN* BUT; SBRR PWR
PWR1}#LDA =-1; XMA* BMT; ADD =1; ADM NSTRS
}'MIN NWRS; LDA* BPT; SBRM GDA
}'LDX PWRX; LDX* BOT; LDA NPS; SBRM RFO; BRU PWR2
* CONVERT PAGE NUMBER TO DRUM ADDRESS
GDA}$ZRO XGDA; ETR =77777B; ADD =1; CLB; EXU CEALS
}'SKN PM; BRU *+2; BRU GD4; RSH 11; STB GDS; RSH 1
}'CAX; LDA* PATAB; SKB =4B7; LCY 12; LRSH 12
GD3}$SKG =0; BRU GD1; LDB GDS; LSH 11
GD4}$CAB; SBRR GDA
* GET NEW PAGE
GD1}$BRS 126; BRU GD2; STB GDH; MUL =1B4; STA GDD
}'SKN GDH; LCY 12; ADM* PATAB; LDA GDD; BRU GD3
GD2}$MSG DSEERR; BRS 10
* ERROR MESSAGES
DRDERR ASC '$DRUM R.E./'
DWRERR ASC '$DRUM W.E./'
DSEERR ASC '$NO ROOM ON DRUM/'

* PAGED STORAGE ALLOCATION OPERATORS

* ALLOCATE BEAD OF SIZE (A) NEAR (B) TO (A)
* BEAD WILL OVERLAP PAGE BOUNDARY IF (A)>(NPS)-6
* (B),(X) DESTROYED
$EPMAKE STA APBS; PUSHZ X
}'SUB =5; SKG NPS; BRU APB1
* BLOCK WILL NOT FIT ON ONE PAGE
}'CLA; STA APBC; LDA =2B6
APB2}#STA APBO; EOR =2B6; EXU CEARS; CAX
}'LDA* BXT; SKE EXCT; BRU APB3
}'LDA APBC; ADD NPS; STA APBC; SKG APBS; BRU APB4
* FOUND A LARGE ENOUGH FREE AREA
}'LDA =1; ADD NPS; SUB APBC; ADD APBO; STA APBL
}'CEAS APBL; LDA APBS; MRG =1B7; STA -1,2
APB19}"CEAS APBO; LDA NPS; CNA; ADM APBO
}'ADD APBC; STA APBC; SKE =0; BRU APB19
}'LDA APBL; POPZ
APB3}#CLA; STA APBC
APB4}#LDA APBO; ADD NPS; SKG CECU; BRU APB2; BRU FSI1
* BLOCK FITS ON ONE PAGE
APB1}#CBA; CHECK APB5
APB7}#EXU CEARS; CLB; EXU CEALS; STA APBC
APB9}#STA APBA; EOR =2B6; EXU CEARS; CAX
}'LDA* BXT; SKE EXCT; BRU APB6
* FOUND AN UNUSED PAGE
}'CEAS APBA; LDA NPS; SUB =3; STA 0,2
}'SUB =1-4B7; STA 1,2
* CHECK FOR SPACE ON CURRENT PAGE
APB6}#LDA =-1; STA APBO; LDA NPS; STA APBL
}'LDA APBA; ADD =2; STA APBC
}'CEA APBA; LDA 0,2; SKA =1B7; BRU APB20
APB11}"CEA APBC; LDA -1,2; SKG =0; BRU APB12
* BLOCK IN USE
}'ADD =1; ADM APBC; BRU APB11
APB12}"SKE =0; BRU APB13; SKN APBO; BRU APB14; BRU APB0
* LARGER BLOCK WAS FOUND IN SCAN
APB14}"CEAS APBO; LDA APBS; XMA -1,2; SUB APBS; SUB =1
}'LDX APBS; CEIS APBO; STA 0,2; LDA APBO; POPZ
* FREE BLOCK, CHECK FOR MERGE
APB13}"CAX; CEI APBC; SKN 0,2; BRU APB15; CLA
* MERGE WITH NEXT HIGHER BLOCK
}'XMA 0,2; SUB =4B7-1; CEAS APBC; ADM -1,2; BRU APB11+1
* NO MERGE, CHECK SIZE
APB15}"SUB =4B7+2; SKG APBS; BRU APB16; SKG APBL; BRU APB17
APB18}"CEA APBC; LDA -1,2; SUB =4B7-1; ADM APBC; BRU APB11
* BEST LARGER BLOCK SO FAR
APB17}"ADD =2; STA APBL; LDA APBC; STA APBO; BRU APB18
* NOT LARGER, CHECK FOR EXACTLY RIGHT
APB16}"ADD =1; SKE APBS; BRU APB18; CEAS APBC
}'LDA =4B7; ADM -1,2; LDA APBC; POPZ
APB5}#LDA APBA; CHECK APB10; BRU APB7
* NO ROOM ON PAGE, LOOK FOR ANOTHER
APB10}"LDA =2B6; BRU APB9-1
APB0}#LDA APBA; ADD NPS; SKG CECU; BRU APB8; LDA =2B6
APB8}#SKE APBC; BRU APB9; BRU FSI1
* SKIP OVER LARGE OCCUPIED BLOCK
APB20}"LDA NPS; SUB =1; MRG 0,2
}'ADD =1-1B7; ADD APBA; BRU APB0+2

* RELEASE PAGED BLOCK (A) (FROM RVB)
* (A),(B),(X) CLEARED
$RPB0}"CHECK CEC1; STA RPBA; CEAS RPBA
}'LDB -1,2; SKB =1B7; BRU RPB1
* BLOCK LIES ON A SINGLE PAGE
}'CXA; ADD -1,2; MRG =2B7; STA RPBA
}'CBA; MRG =4B7; STA -1,2; CNA; COPY AX,A,B
RPB5}#STA* RPBA; BRX RPB5; POPZ
* BLOCK MAY OVERLAP PAGE BOUNDARIES
RPB1}#STA RPBS; SKR RPBA
RPB2}#LDA RPBA; EOR =2B6; EXU CEARS; CAX
* RELEASE PAGE
}'LDA EXCT; XMA* BXT; SKE WPAGE; BRU RPB3
RPB4}#LDA NPS; ADM RPBA; CNA; ADM RPBS
}'SKN RPBS; BRU RPB2; CLEAR; POPZ
RPB3}#AXC; STA* BAT; LDA =-1
}'STA* BPT; STA* BUT; STA* BMT; BRU RPB4

* INITIALIZE PAGING ROUTINES
* ASSUME SARRAY,NPL,NPG,NPB,NPC ALREADY SET UP
* NO-SKIP RETURN IF NOT ENOUGH ROOM
* SPACE REQUIRED IS NPB*(NPS+6)+NPG+NPC
* ADD NPG*NPS/10000B IF USING NRH
* MUST HAVE 8<=NPL<=11
$PGINIT PUSHZ
* CHECK PARAMETERS
}'LDA NPL; SKG =11; SKG =7; POPZ
}'LDA NPB; SKG =40000B/400B-1; SKG =-1; POPZ
}'SKG =0; MIN NPB
}'LDA NPG; SKG =37777B; SKG =0; POPZ
}'LDA NPC; SKG =167B; SKG =-1; POPZ
}'SKG =0; MIN NPC; CLA; STA PCAT
* CHECK FOR SUFFICIENT CORE SPACE
}'LDX NPL; LDB =1; LSH 24,2; STA NPS
}'MUL NPB; RSH 1; STB OBF
}'LDA =6; MUL NPB; RSH 1; STB CECU
}'LDA NPG; ADD =1; MUL NPS; LSH 11; STA EPATAB
}'LSH 12; ADD =4000B; STA CECA
}'SKN PM; BRU *+2; CLA
}'RSH 12; ADD NPG; ADD NPC; ADD =8; ADD CECU
}'CNA; ADD =2B7-1; ADD EARRAY; LDX NPL
}'RSH 0,2; CLB; LSH 0,2; STA BXT
}'ETR =37777B; SUB OBF; STA OBF
}'SUB =6; SKG SARRAY; POPZ
* INITIALIZE FILE OR NRH
}'SKN PM; BRU PGI5; LDA PM; SKA =37777B; BRU PGI7
}'LDA =52B6; LDX =-1; LDB =PGNAME; BRS 16; POPZ
PGI7}#ETR =37777B; STA PF; BRU PGI5
PGNAME DATA 3*PGNAME+5,3*PGNAME+13; ASC '/$QPDATA'
* SET UP TABLE ADDRESSES
PGI5}#LDA BXT; ADD NPG; STA BCT; ADD NPC; ADD =8
}'STA BPT; ADD NPB; STA BAT; ADD NPB
}'STA BUT; ADD NPB; STA BMT; ADD NPB
}'STA BOT; ADD NPB; STA BLT
}'ADD NPB; STA PATAB; ADM EPATAB
}'LDA CECA; ADD =1773777B; STA CECU
}'LDA NPB; STA NUP; LDA OBF; STA EARRAY
}'LDX =CEAP-ENDTS; LDA ENDTI,2; STA ENDTS,2; BRX *-2
* SET UP SHIFT INSTRUCTIONS
}'LDA NPL; MRG WRSH; STA CEARS; STA CEIRS
}'STA CEASRS; STA CEISRS; LDA NPL; MRG WLSH
}'STA CEALS; STA CEILS; STA CEASLS; STA CEISLS
* SET UP INSTRUCTIONS WHICH REFER TO TABLES
}'LDA BUT; MRG WMIN; STA CEAIU; STA CEIIU
}'LDA BOT; MRG WADD
}'STA CEAAO; STA CEIAO; STA CEASAO; STA CEISAO
}'LDA BMT; MRG WMIN; STA CEASIM; STA CEISIM
}'LDA =-2B6; EXU CEARS; ADD BXT; ETR =37777B; MRG WEXUX
}'STA CEAXU; STA CEIXU; STA CEASXU; STA CEISXU
* INITIALIZE TABLES
}'LDA OBF; ETR =37777B; ABC; SUB NPB; COPY AX,BA
PGI1}#STA* EBOT; ADD NPS; CLB; STB* EBAT
}'LDB =-1; STB* EBPT; STB* EBUT; STB* EBMT
}'STB* EBLT; BRX PGI1
}'LDA NPG; CNA; CAX; LDA BCT; EOR WEXUX; STA EXCT
PGI2}#STA* EBXT; BRX PGI2
}'LDA =-8; SUB NPC; CAX; LDP WPAGE; STB LPAGE
PGI6}#STA* EBCT; BRX PGI6; LDA PM; SKA =6B7; BRU PGI4
}'LDA PATAB; SUB EPATAB; AXC
PGI3}#STA* EPATAB; BRX PGI3
PGI4}#LDA PM; SKA =2B7; BRU PGG; SKN PM; BRU PGI8
}'LDA PF; BRS 66; BRU PGGX
PGI8}#CLA; BRS 7; BRU PGGX
PGG}$CLA; SBRM GDA; SUB NPS; CAB
}'LDA NPG; LDX BXT; SBRM RFI
PGGX}#POPZ1
* INSTRUCTION CONSTANTS
WRSH}#RSH 0
WLSH}#LSH 0
WMIN}#MIN 0
WADD}#ADD 0
WEXUX}"EXU 0,2
WEXU}#EXU 0
WEAX}#EAX 0
}'END
1,:$PADDR:-1C.**  (LOWER CASE)
PAGER}"IDENT
* PAGING ROUTINES FROM QSPL RUNTIME

* GLOBAL STORAGE
$SARRAY BSS 1}"LOWEST ADDRESS USABLE BY PAGER
$EARRAY BSS 1}"LOWEST ADDRESS USED BY PAGER (START OF BUFFERS)
:XXSP:,:$CECA:-1C.* LOCAL STORAGE
:$APBA:,:CHECK:-1C.
* MACROS AND OPDS
VCALL}"EQU 100B5
VCEA}#EQU 140B5
VCEI}#EQU 141B5
VCEAS}"EQU 142B5
VCEIS}"EQU 143B5
MSG}$MACRO X
}'LDA =X(1); LDB =-1; LDX =1; BRS 34
}'ENDM
:DSEERR:1,[INITIALIZE PAGING ROUTINES]-2D.
[}'END
],$C.}'END
:CKB1:C.CKB1}#MSG CKBE; BRS 10
CKBE}#ASC '$ILLEGAL BUFFER ADDRESS/'
:CEC1:C.CEC1}#MSG CECE; BRS 10
CECE}#ASC '$ILLEGAL VIRTUAL ADDRESS/'
:$CEAP:I.CEA}$POPD VCEA
:$CEIP:I.CEI}$POPD VCEI
:$CEASP:I.CEAS}#POPD VCEAS
:$CEISP:I.CEIS}#POPD VCEIS
:$PGINIT:M.; LDA =140000B (BRU* 0); STA VCALL/1B5;CALL OPD VCALL