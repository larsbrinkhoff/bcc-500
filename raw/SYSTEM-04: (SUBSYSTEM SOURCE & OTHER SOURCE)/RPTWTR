}'IDENT REPORT;


}'****************************************************************
}'*}^*
}'*}"THIS PROGRAM'S PUPOSE IS TO PRODUCE REPORTS RELATING TO}%*
}'*}"COMPUTER USE SO WE CAN BILL PEOPLE FOR}"$MONEY$ .}+*
}'*}"IT HAS 2 INPUT FILES. ONE IS CALLED "OLD MASTERFILE" WHICH}"*
}'*}"IS THE OUTPUT OF THE PROGRAM "UPDATE".}"THIS FILE CONTAINS}"*
}'*}"ALL THE DATA FROM WHICH THE REPORTS ARE PRODUCED, AND IS}$*
}'*}"SORTED IN ASCENDING USER NUMBERS.}"THE FIRST RECORD OF A}$*
}'*}"USER IS ALWAYS GRAND TOTAL HE HAS USED SINCE THE BEGINNING}"*
}'*}"OF THE YEAR.}"ANYTHING AFTER THAT IS THE INDIVIDUAL})*
}'*}"TERMINAL SESSION TOTALS WHICH GETS PROCESSED BY THIS PRO-}#*
}'*}"GRAM.}"THE OTHER OPTIONAL INPUT FILE IS FOR SPECIFYING}&*
}'*}"FOR WHICH USER WE WANT TO PRINT A BILL FOR.}1*
}'*}"THIS PROGRAM HAS 4 OUTPUT FILES.}"THEY ARE:}1*
}'*}%1)"BILLS"}%-ACTUAL BILL SENT TO USERS.}"THIS REPORT}#*
}'*}4HAS 2 OPTIONS. THEY ARE:}2*
}'*}7A) IF IT IS TO BE PRODUCED}-*
}'*}7B) WHICH USERS ARE TO BE BILLED.}'*
}'*}:(SPECIFIED BY SPEC FILE WHICH}'*
}'*};MUST CONTAIN 1 USER NUMBER PER}%*
}'*};LINE & END WITH A -1)}.*
}'*}%2)"STATUS"}$-EXACTLY THE SAME AS "BILLS", BUT ALWAYS}#*
}'*}4LISTS ALL THE USE COMPLETELY}.*
}'*}%3)"SUMMARY"}#-SUMMARY OF ONLY THE CURRENT TOTALS FOR}$*
}'*}4ALL USERS}A*
}'*}^*
}'*}"IN ADDITION, THIS PROGRAM ALSO PRODUCES A NEW MASTERFILE}$*
}'*}"FOR INPUT INTO THE NEXT BILLING PERIOD PROCESSING.}**
}'*}^*
}'****************************************************************


}'DECLARE INTEGER OMFNO;}#*OLD MASTERFILE FILE NUMBER
}'DECLARE INTEGER NMFNO;}#*NEW MASTERFILE FILE NUMBER
}'DECLARE INTEGER SPCFNO;}"*BILL WHICH USER SPECIFICATION FILE NUMBER
}'DECLARE INTEGER BILFNO;}"*BILLS FILE NUMBER
}'DECLARE INTEGER INVFNO;}"*INVOICE FILE NUMBER
}'DECLARE INTEGER STFNO;}#*STATUS FILE NUMBER
}'DECLARE INTEGER SUMFNO;}"*SUMMARY FILE NUMBER
}'DECLARE INTEGER CHAR;}$*TEMPORARY CHARACTER STORAGE
}'DECLARE INTEGER I;}'*A LOOP COUNTER
}'DECLARE INTEGER IDATE;}#*FOR COMPUTING BILLING DATE
}'DECLARE INTEGER LENSTR;}"*LENGTH OF A GIVEN STRING
}'DECLARE INTEGER BLWANT;}"*FLAGS: SET IF BILLS REPORT IS WANTED
}'DECLARE INTEGER BLPART;}"*}'SET IF JUST A PORTION OF BILLS WANTED
}'DECLARE INTEGER STWANT;}"*}'SET IF STATUS REPORT WANTED
}'DECLARE INTEGER SMWANT;}"*}'SET IF SUMMARY REPORT WANTED
}'DECLARE INTEGER USRNO;}#*USER NUMBER OF CURRENT LINE READ FROM OLD MASTERFILE
}'DECLARE INTEGER CURUNO;}"*CURRENT USER NUMBER BEING PROCESSED
}'DECLARE INTEGER ALOCAT;}"*DOLLAR ALLOCATED TO THE USER
}'DECLARE INTEGER REMAIN;}"*REMAINING DOLLAR ALLOCATION
}'DECLARE INTEGER TTYLINE; *TTY LINE NUMBER USED FOR TERMINAL SESSION
}'DECLARE INTEGER SUMLINE; *LINES PRINTED SO FAR ON 1 PAGE OF SUMMARY REPORT
}'DECLARE INTEGER STBLINE; *LINES PRINTED SO FAR ON 1 PAGE OF STATUS AND BILLS REPORT
}'DECLARE INTEGER USRLINE; *LINES PRINTED SO FAR FOR ONE USER
}'DECLARE INTEGER USERPG;}"*NUMBER OF PAGES PRINTED FOR USER SO FAR ON STATUS REPORT
}'DECLARE INTEGER BILLPG;}"*PAGES PRINTED FOR ONE USER SO FAR OF BILLS REPORT
}'DECLARE INTEGER STATPG;}"*PAGES PRINTED SO FAR ON STATUS REPORT
}'DECLARE INTEGER SUMPG;}#*PAGES PRINTED SO FAR ON SUMMARY REPORT
}'DECLARE INTEGER OVRFLW;}"*TAKES CARE OF OVERFLOW IN SYSTOT[PGFALT]

}'DECLARE FIELD MONTH(0:8,15);}"*FOR USE WITH BRS 39
}'DECLARE FIELD DAY(0:16,23);}#*FOR USE WITH BRS 39
}'DECLARE FIELD YEAR(0:0,7);}$*FOR USE WITH BRS 39

}'DECLARE STRING TEMP(132);}#*TEMPORARY STORAGE STRING
}'DECLARE STRING LINE(500);}#*USED TO READ & WRITE LINES TO &FROM
}C*ALL THE FILES. A GENERAL WORKING STRING.
}'DECLARE STRING CURADDR(100); *HOLDS MAILING ADDRESS FOR CURRENT USER
}'DECLARE STRING ADDRESS(100); *MAILING ADDRESS JUST READ FROM OLD MASTER
}'DECLARE STRING CURIADD(100); *INVOICE MAILING ADDR FOR CURRENT USER
}'DECLARE STRING INVADDR(100); *INVOICE MAILING ADDR JUST READ
}'DECLARE STRING CURACCT(30);}"*HOLDS UH ACCT CODE FOR CURRENT USER
}'DECLARE STRING ACCTCODE(30); *UH ACCT CODE JUST READ FROM OLD MASTER
}'DECLARE STRING PERIOD(50);}"*HOLDS HEADING INFO ON BILLING PERIOD
}'DECLARE STRING CURNAME(35); *CURRENT USER NAME BEING PROCESSED
}'DECLARE STRING NAME(30);}$*USER NAME JUST READ FROM OLD MASTER
}'DECLARE STRING CURJOB(20);}"*JOB NUMBER BEING PROCESSED
}'DECLARE STRING JOBNO(20);}#*JOB NUMBER JUST READ FROM OLD MASTER
}'DECLARE STRING MESSAGE(30); *HOLDS COMMENTS FOR SUMMARY REPORT
}'DECLARE STRING INVDATE(12); *BILLING DATE
}'DECLARE STRING DATE(15);}$*DATE OF TERMINAL SESSION
}'DECLARE STRING TTYTIM(20);}"*LOGIN, LOGOUT TIME OF TERMINAL SESSION
}'DECLARE STRING USER(30);}$*OPTIONAL ACCOUNT INFO UPON LOGIN
}'DECLARE STRING SNMFNO(7);}#*FILE NAME OF NEW MASTER FILE

}'DECLARE STRING ARRAY STMON[13] _ "NULL",
}*"JAN", "FEB", "MAR", "APR", "MAY", "JUN",
}*"JUL", "AUG", "SEP", "OCT", "NOV", "DEC";

}'DECLARE PARAMETER TTY}$_ 0;}$*FILE NUMBER OF TTY INPUT
}'DECLARE PARAMETER FALSE}"_ 0;}$*FALSE FLAG
}'DECLARE PARAMETER EOFCHR _ 137B; *END OF FILE CHARACTER
}'DECLARE PARAMETER MBCHR}"_ 135B; *MULTIPLE BLANK CHARACTER
}'DECLARE PARAMETER CRCHR}"_ '&M'; *CARRIAGE RETURN CHARACTER
}'DECLARE PARAMETER BLONLY _ 1;}$*PRINT ONLY HEADING FOR BILLS
}'DECLARE PARAMETER STONLY _ 2;}$*PRINT ONLY HEADING FOR STATUS
}'DECLARE PARAMETER INVONLY _ 3;}#*PRINT ONLY HEADING FOR INVOICES

}'****************************************************************
}'*}^*
}'*}#THE PARAMETERS BELOW ARE INDEXES TO 7 DIFFERENT ARRAYS}%*
}'*}#THAT STORES A DIFFERENT TYPE OF TOTAL.}"HOWEVER, THE 10}$*
}'*}#SUBCHARGES STORED IN EACH OF THE 7 ARRAYS CONTAIN THE SAME *
}'*}#THING.}"THIS STRUCTURE WAS USED BECAUSE IT MAKES IT EASY}#*
}'*}#TO INITIALIZE OR COPY 1 SET OF TOTALS TO ANOTHER.}**
}'*}^*
}'****************************************************************

}'DECLARE PARAMETER CNTHR}"_ 0;}$*CONNECT HOUR
}'DECLARE PARAMETER CNTMIN _ 1;}$*CONNECT MINUTES
}'DECLARE PARAMETER CNTSEC _ 2;}$*CONNECT SECONDS
}'DECLARE PARAMETER CPUHR}"_ 3;}$*CPU}%HOUR
}'DECLARE PARAMETER CPUMIN _ 4;}$*CPU}%MINUTES
}'DECLARE PARAMETER CPUSEC _ 5;}$*CPU}%SECONDS
}'DECLARE PARAMETER PGFALT _ 6;}$*PAGE FAULTS
}'DECLARE PARAMETER PAPERU _ 7;}$*PAPER USE ON LINE PRINTER
}'DECLARE PARAMETER CHGDLR _ 8;}$*DOLLAR CHARGED
}'DECLARE PARAMETER CHGCNT _ 9;}$*CENTS}"CHARGED

}'DECLARE FIXED STRING ARRAY MO[12] _ "JAN", "FEB", "MAR",
}K"APR", "MAY", "JUN",
}K"JUL", "AUG", "SEP",
}K"OCT", "NOV", "DEC";
}'DECLARE FIXED ARRAY SYSPREV[10]; *SYSTEM'S PREVIOUS BALANCE
}'DECLARE FIXED ARRAY PREVBAL[10]; *USER'S PREVIOUS BALANCE
}'DECLARE FIXED ARRAY TERMSES[10]; *TERMINAL SESSION TOTAL
}'DECLARE FIXED ARRAY TOTBIL [10]; *TOTAL OF ALL TERMINAL SESSIONS
}'DECLARE FIXED ARRAY CURBAL [10]; *USER'S CURRENT BALANCE (PREVBAL+TOTBIL)
}'DECLARE FIXED ARRAY SYSTEM [10]; *SYSTEM USE TOTAL FOR 1 BILLING PERIOD
}'DECLARE FIXED ARRAY SYSTOT [10]; *SYSTEM TOTAL USE FOR 1 YEAR.
}'DECLARE FIXED ARRAY BILUSR[129]; *IF ELEMENT SET, WILL PRINT A BILL


}'SOUT("REPORT WRITER}$VERSION 12/1/78"); CRLF(1);
}'IDATE _ BRS(39);
}'CNS(IDATE$DAY,INVDATE); WCI(' ',INVDATE);
}'APPEND(INVDATE,MO[IDATE$MONTH-1]); WCI(' ',INVDATE);
}'CNS(IDATE$YEAR+1900,TEMP);
}'APPEND(INVDATE,TEMP);

}'****************************************************************
}'*}^*
}'* OPEN OLD MASTER FILE AND NEW, INITIALIZED MASTERFILE FOR}%*
}'* NEXT BILLING PERIOD.}I*
}'*}^*
}'****************************************************************

OPENCM:CRLF(1);
}'SOUT("OLD MASTERFILE:}"");
}'INNAME(TEMP:OPENCM);
}'OMFNO _ INFILE(TEMP:OPENCM);

OPENNM:CRLF(1);
}'SETS(TEMP,0,0);
}'SOUT("NEW MASTERFILE: ");
}'OUTNAME(TEMP:OPENNM);

}'* CHECK FOR RIGHT FORMAT OF NEW MASTERFILE FILE NAME *
}'* FORMAT IS: MONXX}$1) MON -3 LETTER ABBREV OF A MONTH
}'*}52) XX}"-NUMERIC DIGITS (LIKE 02 OR 34)

}'GCI(TEMP); GCD(TEMP);
}'IF LENGTH(TEMP)-1 # 5 DO;}"*LENGTH FUNCTION DOESNT WORK RIGHT.
}*SOUT("}"**FILE NAME MUST BE 5 CHARS LONG.");
}*GOTO OPENNM;
}'ENDIF;
}'SETS(LINE,0,0);
}'WCI(GCI(TEMP),LINE) FOR I _ 1 TO 3;
}'FOR I _ 1 TO 12 DO;
}*I _ 100 IF EQSTR(LINE,STMON[I]);
}'ENDFOR;
}'IF I<100 DO;
}*SOUT("}"**1ST 3 CHARS MUST BE A MONTH ABBREVIATION.");
}*GOTO OPENNM;
}'ENDIF;
}'SCOPY(LINE,TEMP);
}'FOR I _ 1 TO 2 DO;
}*CHAR _ GCI(LINE);
}*IF CHAR<'0' OR CHAR>'9' DO;
}-SOUT("}"**LAST 2 CHARS MUST BE NUMERIC DIGITS.");
}-GOTO OPENNM;
}*ENDIF;
}'ENDFOR;

}'SETR(TEMP,0); SETW(TEMP,7);
}'SCOPY(SNMFNO,TEMP);
}'NMFNO _ OUTFILE(TEMP,3B6:OPENNM);
}'CRLF(2);

}'****************************************************************
}'*}^*
}'*}+DETERMINE WHICH OF THE REPORTS ARE DESIRED})*
}'*}^*
}'****************************************************************

}'IF ASK("NORMAL PROCESSING DESIRED? ") DO;
}*BLWANT_1;}"BLPART_1;
}*STWANT}"_1;
}*SMWANT _1;
}'ELSE DO;
}*SOUT("}#ENTER PARAMETERS FOR REPORTS:");}"CRLF(1);
}*IF ASK("}#BILLS WANTED?}#") DO;
}-BLWANT _ 1;
}-BLPART _ 1 IF ASK("}#BILL ONLY CERTAIN USERS? ") ELSE BLPART _ 0;
}*ELSE DO;
}-BLWANT _ 0;
}-BLPART _ 0;
}*ENDIF;

}*STWANT _ 1 IF ASK("}#STATUS}"WANTED? ") ELSE STWANT _ 0;
}*SMWANT _ 1 IF ASK("}#SUMMARY WANTED? ") ELSE SMWANT _ 0;
}'ENDIF;

}'****************************************************************
}'*}^*
}'*}3OPEN ALL ASKED FOR FILES}3*
}'*}^*
}'****************************************************************

}'BILFNO _ OUTFIL("BILLS",3B6:FAILED) IF BLWANT;
}'INVFNO _ OUTFIL("INVOICES",3B6:FAILED) IF BLWANT;
}'IF BLPART DO;
SPECFL:}#SOUT("BILL CERTAIN USERS SPECFILE: ");
}*SETS(TEMP,0,0);
}*INNAME(TEMP:SPECFL);
}*CRLF(1);
}*SPCFNO _ INFILE(TEMP:SPECFL);
}** READ FILE INTO USER NUMBER ARRAY *
}*USRNO _ IIN(SPCFNO);
}*WHILE USRNO # -1 DO;}%* SPECFILE MUST END WITH A -1 *
}-IF (USRNO>=1 AND USRNO<=128) DO;
}0IF BILUSR[USRNO]=1 DO;
}3SOUT("*USER #"); IOUT(USRNO); SOUT(" DUPLICATED IN SPECFILE&M&J");
}0ELSE DO;
}3BILUSR[USRNO] _ 1;
}0ENDIF;
}-ELSE DO;
}0SOUT("*USER #"); IOUT(USRNO); SOUT(" OUT OF RANGE&M&J");
}-ENDIF;
}-CIN(SPCFNO);}#*BYPASS LINEFEED CHARACTER
}-USRNO _ IIN(SPCFNO);
}*ENDFOR;
}*CLOSE(SPCFNO);
}'ELSEIF BLWANT DO;
}*FOR I _ 1 TO 128 DO;
}-BILUSR[I] _ 1;
}*ENDFOR;
}'ENDIF;

}'STFNO _ OUTFIL("STATUS", 3B6:FAILED) IF STWANT;
}'SUMFNO_ OUTFIL("SUMMARY",3B6:FAILED) IF SMWANT;

}'****************************************************************
}'*}^*
}'*}7INITIALIZATION}9*
}'*}^*
}'****************************************************************

GETPRD:SOUT("&M&JBILLING PERIOD FOR: ");
}'* READ IN THE BILLING PERIOD STRING CHARACTER BY CHARACTER *
}'CHAR _ CIN(TTY);
}'WHILE CHAR#'.' AND CHAR#CRCHR DO;
}*IF CHAR # '&A' DO;
}-WCI(CHAR,PERIOD);
}*ELSE DO;
}-COUT('^');
}-GCD(PERIOD:GETPRD);
}*ENDIF;
}*IF CHAR = '&Q' DO;
}-SETS(PERIOD,0,0);
}-COUT('_');
}-GOTO GETPRD;
}*ENDIF;
}*CHAR _ CIN(TTY);
}'ENDFOR;
}'CRLF(1);

}'BILLPG _ -1;
}'STATPG _ SUMPG}"_ 0;}-*INITIALIZE PAGES PRINTED TO ZERO
}'FOR I _ 0 TO 9 DO;}/*DO THE SAME FOR TOTAL TERM SESSION
}*TOTBIL[I] _ 0;
}'ENDFOR;
}'OVRFLW _ CURUNO _ 0;
}'SUMHDR();




}'****************************************************************
}'*}^*
}'*}4MAIN PROCESSING LOOP}6*
}'*}^*
}'****************************************************************

}'WHILE 1 DO;

}*RDLINE(:EOF);
}*IF CURUNO # USRNO DO;}"*1ST RECORD OF USER # CONTAINS CUMULATIVE TOTALS
}-TOTCHG() IF CURUNO#0;
}-* SAVE THE OLD BALANCE SO CAN ADD TO IT *
}-CURUNO _ USRNO;
}-SCOPY(CURNAME,NAME);
}-SCOPY(CURJOB,JOBNO);
}-SCOPY(CURADDR,ADDRESS);
}-SCOPY(CURIADD,INVADDR);
}-SCOPY(CURACCT,ACCTCODE);
}-FOR I _ 0 TO 9 DO;
}0PREVBAL[I] _ TERMSES[I];
}-ENDFOR;
}-* OPTIONAL ACCOUNT INFO OF 1ST RECORD ALWAYS
}-* CONTAINS DOLLAR ALLOCATION FOR THE USER
}-GCD(USER); GCD(USER);
}-ALOCAT _ CSN(USER);
}-APPEND(USER, "&M&J");
}-IF EQSTR(CURNAME,"-----")=FALSE DO;
}0BGNBAL(INVONLY);
}0BGNBAL(BLONLY);
}-ENDIF;
}-STBLINE _ USRLINE _ 0;
}*ELSE DO;
}-IF EQSTR(CURNAME,NAME)=FALSE DO;
}0IF EQSTR(CURNAME,"-----") DO;
}3SCOPY(CURNAME,NAME);
}3SCOPY(MESSAGE,"INITIALIZED");
}3SOUT("NEW USER "); SOUT(CURNAME); SOUT("... ENTER DOLLAR ALLOCATION: ");
}3ALOCAT _ IIN(TTY); CRLF(1);
}3RDJOB();
}3SCOPY(CURJOB,JOBNO);
}3SCOPY(CURADDR,ADDRESS);
}3SCOPY(CURIADD,INVADDR);
}3SCOPY(CURACCT,ACCTCODE);
}3BGNBAL(INVONLY);
}3BGNBAL(BLONLY);
}0ELSE DO;
}3SOUT("DIFFERENT USER NAMES... ");
}3SOUT(CURNAME); SOUT(" <---> "); SOUT(NAME);
}3IF ASK("}$SAME USER? ") DO;
}6SCOPY(MESSAGE,"NEW NAME}"(WAS ");
}6APPEND(MESSAGE,CURNAME);
}6APPEND(MESSAGE,")");
}6SCOPY(CURNAME,NAME);
}3ELSE DO;
}6SCOPY(MESSAGE,"ACCOUNT CLOSED");
}6TOTCHG();
}6SCOPY(CURNAME,NAME);
}6SOUT("}#IS USER "); SOUT(NAME); COUT(' ');
}6IF ASK("PREVIOUSLY KNOWN TO THE SYSTEM? ") DO;
}9SOUT("}#ENTER USER'S PREVIOUS BALANCE:"); CRLF(1);
}9SOUT("}&CONNECT TIME:");
}<SOUT("}$HOUR: "); PREVBAL[CNTHR]}"_ IIN(TTY);
}<SOUT("}$MIN: ");}"PREVBAL[CNTMIN] _ IIN(TTY);
}<SOUT("}$SEC: ");}"PREVBAL[CNTSEC] _ IIN(TTY);
}9SOUT("&M&J}&CPU TIME:}$");
}<SOUT("}$HOUR: "); PREVBAL[CPUHR]}"_ IIN(TTY);
}<SOUT("}$MIN: ");}"PREVBAL[CPUMIN] _ IIN(TTY);
}<SOUT("}$SEC: ");}"PREVBAL[CPUSEC] _ IIN(TTY); CRLF(1);
}9SOUT("}&PAGE FAULTS: "); PREVBAL[PGFALT] _ IIN(TTY);
}9SOUT("}%PAPER USED: ");}"PREVBAL[PAPERU] _ IIN(TTY); CRLF(1);
}9SOUT("}&DOLLAR CHG: ");}"PREVBAL[CHGDLR] _ IIN(TTY);
}9SOUT("}$CENTS CHG: ");}#PREVBAL[CHGCNT] _ IIN(TTY);
}9SCOPY(MESSAGE, "RE-INSTALLED"); CRLF(1);
}6ELSE DO;
}9FOR I _ 0 TO 9 DO;
}<PREVBAL[I] _ 0;
}9ENDFOR;
}9SCOPY(MESSAGE,"NEW USER");
}6ENDIF;
}6SOUT("}&DOLLAR ALLOCATION: ");
}6ALOCAT _ IIN(TTY);
}6CRLF(1);
}6RDJOB();
}6SCOPY(CURJOB,JOBNO);
}6SCOPY(CURADDR,ADDRESS);
}6SCOPY(CURIADD,INVADDR);
}6SCOPY(CURACCT,ACCTCODE);
}6BGNBAL(INVONLY);
}6BGNBAL(BLONLY);
}6STBLINE _ USRLINE _ 0;
}3ENDIF;
}0ENDIF;
}-ENDIF;

}-**********************************************************
}-*}X*
}-*}3ACCUMULATE CHARGES}3*
}-*}X*
}-**********************************************************

}-FOR I _ 0 TO 9 DO;
}0TOTBIL[I] _ TOTBIL[I]+TERMSES[I];
}-ENDFOR;
}-WRLINE();
}*ENDIF;

}'ENDFOR;

}'****************************************************************
}'*}^*
}'*}#END OF MASTERFILE REACHED. CLEAN THINGS UP AND CLOSE ALL}#*
}'*}^*
}'****************************************************************

EOF:}#TOTCHG();

}'* PRINT SUMMARY TOTAL *
}'IF SMWANT DO;
}*SCOPY(LINE,"}3** TOTAL **}%");
}*WRPARM(SYSTEM);
}*CRLF(2,SUMFNO);
}*SOUT(LINE,SUMFNO);

}*SCOPY(LINE,"},FROM LAST BILLING}&");
}*WRPARM(SYSPREV);
}*CRLF(4,SUMFNO);
}*SOUT(LINE,SUMFNO);

}*SCOPY(LINE,"},FROM THIS BILLING}&");
}*WRPARM(SYSTEM);
}*CRLF(2,SUMFNO);
}*SOUT(LINE,SUMFNO);

}*SCOPY(LINE,"},YEAR TO DATE}+");
}*WRPARM(SYSTOT);
}*CRLF(2,SUMFNO);
}*SOUT(LINE,SUMFNO);
}'ENDIF;

}'COUT(EOFCHR,NMFNO);
}'COUT(EOFCHR,BILFNO) IF BLWANT;
}'COUT(EOFCHR,INVFNO) IF BLWANT;
}'COUT(EOFCHR,STFNO) IF STWANT;
}'COUT(EOFCHR,SUMFNO) IF SMWANT;
}'CLOSALL();

}'CRLF(2);
}'SOUT("PROCESSING COMPLETE.}"SAVE ");
}'SOUT(SNMFNO);
}'SOUT(" ON PFS!");
}'EXIT();

FAILED:SOUT("FAILED!!");
}'HALT();

}'FUNCTION STBHDR(INTEGER WCHONE);

* THIS FUNCTION PRODUCES THE HEADINGS FOR THE 2 REPORTS: "BILLS" AND
* "STATUS", WHICH ARE BOTH EXACTLY ALIKE EXCEPT FOR THE PAGE NUMBERINGS.
* THE PARAMETER WCHONE (WHICH ONE) DETERMINES WHICH REPORT THE HEADING GOES.

}'DECLARE STRING
}*ADSTR1(30),
}*ADSTR2(30),
}*ADSTR3(30),
}*ADSTR4(30),
}*TEMPSTR(100),
}*RUNOFF _ "**RUNOFF&M&J&L&M&J",
}*HEDR0}"_ "&L&M&J",
}*HEDR1}"_ "&135OSTATEMENT OF USE",
}*HEDR2}"_ "&135KPAGE ",
}*HEDR3}"_ "&M&J&J&135OBCC 500}"SYSTEM",
}*HEDR4}"_ "&M&J&135O491 HOLMES HALL",
}*HEDR5}"_ "&M&J&135MUNIVERSITY OF HAWAII",
}*HEDR6}"_ "&M&J&J&JDATE:}$",
}*HEDR6A _ "UH ACCT CODE: ",
}*HEDR6B _ "MAIL TO: ",
}*HEDR7}"_ "&M&JUSER:}$",
}*HEDR8}"_ "&M&JJOB NO:}"",
}*HEDR9}"_ "&M&JPERIOD:}"",
}*HEDR10 _ "&M&J&J&135%DATE&135(LINE&135$LOGIN&135$LOGOUT&135'CONNECT",
}*HEDR11 _ "}'CPU&135'PAGE&135#PAPER&135#CHARGES&135'ACCOUNT (IF ANY)",
}*HEDR12 _ "&M&J&1359TIME}&TIME}*TIME}(TIME&135%FAULTS}#USE&M&J&J",
}*HEDR13 _ "&135TINVOICE",
}*HEDR14 _ "&M&J&J&135)&135,&135)&135*&135'CONNECT",
}*HEDR15 _ "}'CPU&135'PAGE&135#PAPER&135#CHARGES",
}*HEDR16 _ "&M&J&1359}8TIME}(TIME&135%FAULTS}#USE&M&J&J";

}'IF BLWANT AND BILUSR[CURUNO] AND WCHONE=BLONLY DO;
}*SOUT(RUNOFF,BILFNO) IF BILLPG =-1;}"*PREVENTS REGULAR HEADING
}*SOUT(HEDR0,BILFNO) IF BILLPG # -1;
}*BILLPG _ 0 IF BILLPG = -1;
}*BILLPG _ BILLPG + 1;
}*SOUT(HEDR1,BILFNO); SOUT(HEDR2,BILFNO); IOUT(BILLPG,BILFNO);
}*SOUT(HEDR3,BILFNO); SOUT(HEDR4,BILFNO); SOUT(HEDR5,BILFNO);
}*NEXTLINE(CURADDR);
}*SOUT(HEDR6,BILFNO); SOUT(INVDATE,BILFNO);
}*COUT(' ',BILFNO) FOR I_1 TO (30-LENGTH(INVDATE));
}*SOUT(HEDR6A,BILFNO); SOUT(CURACCT,BILFNO);
}*COUT(' ',BILFNO) FOR I_1 TO (24-LENGTH(CURACCT));
}*SOUT(HEDR6B,BILFNO); SOUT(ADSTR1,BILFNO);
}*SOUT(HEDR7,BILFNO); SOUT(NAME,BILFNO);
}*COUT(' ',BILFNO) FOR I_1 TO (77-LENGTH(NAME));
}*SOUT(ADSTR2,BILFNO);
}*SOUT(HEDR8,BILFNO); SOUT(CURJOB,BILFNO);
}*COUT(' ',BILFNO) FOR I_1 TO (77-LENGTH(CURJOB));
}*SOUT(ADSTR3,BILFNO);
}*SOUT(HEDR9,BILFNO); SOUT(PERIOD,BILFNO);
}*COUT(' ',BILFNO) FOR I_1 TO (77-LENGTH(PERIOD));
}*SOUT(ADSTR4,BILFNO);
}*SOUT(HEDR10,BILFNO); SOUT(HEDR11,BILFNO); SOUT(HEDR12,BILFNO);
}*STBLINE _ 0;
}'ENDIF;

}'IF BLWANT AND BILUSR[CURUNO] AND WCHONE=INVONLY DO;
}*SOUT(RUNOFF,INVFNO) IF BILLPG =-1 ELSE SOUT(HEDR0,INVFNO);
}*SOUT(HEDR13,INVFNO);
}*SOUT(HEDR3,INVFNO); SOUT(HEDR4,INVFNO); SOUT(HEDR5,INVFNO);
}*NEXTLINE(CURIADD);
}*SOUT(HEDR6,INVFNO); SOUT(INVDATE,INVFNO);
}*COUT(' ',INVFNO) FOR I_1 TO (30-LENGTH(INVDATE));
}*SOUT(HEDR6A,INVFNO); SOUT(CURACCT,INVFNO);
}*COUT(' ',INVFNO) FOR I_1 TO (24-LENGTH(CURACCT));
}*SOUT(HEDR6B,INVFNO); SOUT(ADSTR1,INVFNO);
}*SOUT(HEDR7,INVFNO); SOUT(NAME,INVFNO);
}*COUT(' ',INVFNO) FOR I_1 TO (77-LENGTH(NAME));
}*SOUT(ADSTR2,INVFNO);
}*SOUT(HEDR8,INVFNO); SOUT(CURJOB,INVFNO);
}*COUT(' ',INVFNO) FOR I_1 TO (77-LENGTH(CURJOB));
}*SOUT(ADSTR3,INVFNO);
}*SOUT(HEDR9,INVFNO); SOUT(PERIOD,INVFNO);
}*COUT(' ',INVFNO) FOR I_1 TO (77-LENGTH(PERIOD));
}*SOUT(ADSTR4,INVFNO);
}*SOUT(HEDR14,INVFNO); SOUT(HEDR15,INVFNO); SOUT(HEDR16,INVFNO);
}'ENDIF;

}'IF STWANT AND WCHONE=STONLY DO;
}*SOUT(RUNOFF,STFNO) IF STATPG=0;
}*SOUT(HEDR0,STFNO) IF STATPG#0;
}*STATPG _ STATPG+1;
}*SOUT(HEDR1,STFNO); SOUT(HEDR2,STFNO); IOUT(STATPG,STFNO);
}*SOUT(HEDR3,STFNO); SOUT(HEDR4,STFNO); SOUT(HEDR5,STFNO);
}*NEXTLINE(CURADDR);
}*SOUT(HEDR6,STFNO); SOUT(INVDATE,STFNO);
}*COUT(' ',STFNO) FOR I_1 TO (30-LENGTH(INVDATE));
}*SOUT(HEDR6A,STFNO); SOUT(CURACCT,STFNO);
}*COUT(' ',STFNO) FOR I_1 TO (24-LENGTH(CURACCT));
}*SOUT(HEDR6B,STFNO); SOUT(ADSTR1,STFNO);
}*SOUT(HEDR7,STFNO); SOUT(NAME,STFNO);
}*COUT(' ',STFNO) FOR I_1 TO (77-LENGTH(NAME));
}*SOUT(ADSTR2,STFNO);
}*SOUT(HEDR8,STFNO); SOUT(CURJOB,STFNO);
}*COUT(' ',STFNO) FOR I_1 TO (77-LENGTH(CURJOB));
}*SOUT(ADSTR3,STFNO);
}*SOUT(HEDR9,STFNO); SOUT(PERIOD,STFNO);
}*COUT(' ',STFNO) FOR I_1 TO (77-LENGTH(PERIOD));
}*SOUT(ADSTR4,STFNO);
}*SOUT(HEDR10,STFNO); SOUT(HEDR11,STFNO); SOUT(HEDR12,STFNO);
}*STBLINE _ 0;
}*USERPG _ USERPG+1;
}'ENDIF;


}'RETURN;



}'FUNCTION NEXTLINE(INTEGER STRPTR);

* THIS FUNCTION BREAKS UP A MAILING ADDRESS STRING INTO FOUR SEPARATE
* STRINGS...ONE FOR EACH PRINT LINE.

}'SETS(ADSTR1,0,0); SETS(ADSTR2,0,0);
}'SETS(ADSTR3,0,0); SETS(ADSTR4,0,0);
}'SCOPY(TEMPSTR,STRPTR);
}'WCI(CHAR,ADSTR1) WHILE (CHAR_GCI(TEMPSTR:NXTL1)) # CRCHR;
}*GCI(TEMPSTR);
}'WCI(CHAR,ADSTR2) WHILE (CHAR_GCI(TEMPSTR:NXTL1)) # CRCHR;
}*GCI(TEMPSTR);
}'WCI(CHAR,ADSTR3) WHILE (CHAR_GCI(TEMPSTR:NXTL1)) # CRCHR;
}*GCI(TEMPSTR);
}'WCI(CHAR,ADSTR4) WHILE (CHAR_GCI(TEMPSTR:NXTL1)) # CRCHR;
}*GCI(TEMPSTR);
NXTL1: RETURN;

}'FUNCTION SUMHDR();

* THIS FUNCTION PRODUCES THE HEADINGS FOR THE "SUMMARY" REPORT.

}'DECLARE STRING
}*SUMHD1 _ "&135OSUMMARY BALANCES&135FPAGE ",
}*SUMHD2 _ "&M&J&135OOF CURRENT USERS&M&J&JPERIOD: ",
}*SUMHD3 _ "&M&J&J&J&135+USER}"BILLED&135#USER&135)CONNECT&135'CPU&135'PAGE&135#PAPER",
}*SUMHD4 _ "&135$CHARGES&135'COMMENTS&M&J&135*NUMBER&135*NAME&135+TIME&135(TIME&135%FAULTS}#USE&M&J&J";

}'RETURN IF SMWANT=FALSE;

}'SOUT(RUNOFF,SUMFNO) IF SUMPG = 0;}"*PREVENTS REGULAR HEADING
}'SOUT(HEDR0,SUMFNO) IF SUMPG #0;
}'SUMPG _ SUMPG+1;

}'SOUT(SUMHD1,SUMFNO); IOUT(SUMPG,SUMFNO);
}'SOUT(SUMHD2,SUMFNO); SOUT(PERIOD,SUMFNO);
}'SOUT(SUMHD3,SUMFNO); SOUT(SUMHD4,SUMFNO);

}'SUMLINE _ 0;

}'RETURN;

}'FUNCTION BGNBAL(INTEGER WCHRPT);

* THIS FUNCTION PRINTS THE BEGINNING BALANCE READ FROM THE OLD MASTERFILE
* ONTO EITHER THE "STATUS" AND "BILLS" REPORTS, DEPENDING ON WCHRPT (WHICH REPORT)

}'DECLARE STRING DETUSE _ "&135%DETAILED USE DURING PERIOD...&M&J";

}'BILLPG _ 0 IF (BILLPG # -1 AND WCHRPT = BLONLY);
}'STBHDR(WCHRPT);
}'SCOPY(LINE,"&135%CUMULATIVE USE TO BEGINNING OF PERIOD");
}'WRPARM(PREVBAL);

}'IF BLWANT AND BILUSR[CURUNO] AND WCHRPT=BLONLY DO;
}*SOUT(LINE,BILFNO);
}*CRLF(2,BILFNO);
}*SOUT(DETUSE,BILFNO);
}'ENDIF;

}'IF BLWANT AND BILUSR[CURUNO] AND WCHRPT=INVONLY DO;
}*SOUT(LINE,INVFNO);
}*CRLF(2,INVFNO);
}'ENDIF;

}'IF STWANT AND WCHRPT=STONLY DO;
}*SOUT(LINE,STFNO);
}*CRLF(2,STFNO);
}*SOUT(DETUSE,STFNO);
}'ENDIF;

}'RETURN;

}'FUNCTION RDJOB();

* THIS FUNCTION READS A BCC JOB NUMBER FROM THE TERMINAL AND PUTS
* IT IN THE STRING JOBNO.}"IT ALSO READS THE MAILING ADDRESS AND
* UH ACCT CODE FOR THE BILLING.

GETJOB:SOUT("&M&JENTER JOB NUMBER: ");
}'RDSTRG(JOBNO,155B:GETJOB);
GETADR:SOUT("&M&JMAILING ADDRESS FOR USE STATEMENT (CTRL-D):&M&J");
}'RDSTRG(ADDRESS,'&D':GETADR);
GETIAD:SOUT("&M&JMAILING ADDRESS FOR INVOICE (CTRL-D):&M&J");
}'RDSTRG(INVADDR,'&D':GETIAD);
GETACT:SOUT("&M&JENTER UH ACCT CODE: ");
}'RDSTRG(ACCTCODE,155B:GETACT);

}'CRLF(1);
}'RETURN;



}'FUNCTION RDSTRG(SPTR,TRMCHR);

* THIS FUNCTION COLLECTS THE STRING FROM THE TERMINAL.

}'SETS(SPTR,0,0);
}'IF TRMCHR # '&D' DO;
}*WHILE (CHAR_CIN(TTY))#'.' AND CHAR#TRMCHR DO;
}-IF CHAR # '&A' DO;
}0WCI(CHAR,SPTR);
}0WCI(152B,SPTR) IF CHAR = 155B;
}-ELSE DO;
}0COUT('^');
}0GCD(SPTR:RDNX1);
RDNX1:}'ENDIF;
}-IF CHAR = '&Q' DO;
}0COUT('_');
}0RETURN;
}-ENDIF;
}*ENDFOR;
}'ELSE DO;
}*WHILE (CHAR_CIN(TTY))#TRMCHR DO;
}-IF CHAR # '&A' DO;
}0WCI(CHAR,SPTR);
}0WCI(152B,SPTR) IF CHAR = 155B;
}-ELSE DO;
}0COUT('^');
}0GCD(SPTR:RDNX2);
RDNX2:}'ENDIF;
}-IF CHAR = '&Q' DO;
}0COUT('_');
}0RETURN;
}-ENDIF;
}*ENDFOR;
}'ENDIF;

}'SRETURN SPTR;

}'FUNCTION RDLINE();

* THIS FUNCTION READS ONE LINE FROM THE OLD MASTER FILE INTO A STRING
* CALLED "LINE" AND THEN SEPARATES THE INDIVIDUAL ELEMENTS OF LINE
* INTO THE GLOBAL VARIABLES, EITHER STRING OR INTEGER AS THE CASE MAY BE.

}'DECLARE INTEGER NUMBLK;}"*NUMBER OF BLANKS FOUND

}'SETS(LINE,0,0);

}'WHILE 1 DO;

}*RETURN IF (CHAR_CIN(OMFNO)) = EOFCHR;
}*IF CHAR = MBCHR DO;
}-NUMBLK _ CIN(OMFNO);
}-FOR I _ 1 TO NUMBLK DO;
}0WCI(' ',LINE);
}-ENDFOR;
}*ELSEIF CHAR = '[' DO;
}-WCI(CHAR,LINE);
}-WHILE (CHAR_CIN(OMFNO)) # ']' DO;
}0RETURN IF CHAR = EOFCHR;
}0IF CHAR = MBCHR DO;
}3NUMBLK _ CIN(OMFNO);
}3FOR I _ 1 TO NUMBLK DO;
}6WCI(' ',LINE);
}3ENDFOR;
}0ELSE DO;
}3WCI(CHAR,LINE);
}0ENDIF;
}-ENDFOR;
}-WCI(CHAR,LINE);
}*ELSEIF CHAR = CRCHR DO;
}-WCI(CRCHR,LINE);
}-WCI(CIN(OMFNO),LINE);
}-GOTO PARSE;
}*ELSE DO;
}-WCI(CHAR,LINE);
}*ENDIF;

}'ENDFOR;


PARSE: SETS(TEMP,0,0);
}'WCI(GCI(LINE),TEMP) FOR I _ 1 TO 3;
}'USRNO _ CSN(TEMP);

}'GCI(LINE); GCI(LINE);
}'SETS(NAME,0,0);}"SETS(JOBNO,0,0);
}'SETS(ADDRESS,0,0); SETS(ACCTCODE,0,0);
}'SETS(INVADDR,0,0);
}'WCI(CHAR,NAME) WHILE ((CHAR_GCI(LINE)) # ' ' AND CHAR # '[');
}'IF CHAR = '[' DO;
}*WCI(CHAR,JOBNO) WHILE ((CHAR_GCI(LINE)) # ']' AND CHAR # ':');
}*IF CHAR = ':' DO;
}-WCI(CHAR,ADDRESS) WHILE ((CHAR_GCI(LINE)) # ':');
}-WCI(CHAR,INVADDR) WHILE ((CHAR_GCI(LINE)) # ':');
}-WCI(CHAR,ACCTCODE) WHILE ((CHAR_GCI(LINE)) # ']');
}*ENDIF;
}*GCI(LINE);
}'ENDIF;

}'GCI(LINE);
}'SETS(DATE,0,0);
}'WCI(GCI(LINE),DATE) FOR I _ 1 TO 15;

}'SETS(TEMP,0,0);
}'WCI(GCI(LINE),TEMP) FOR I _ 1 TO 4;
}'TTYLIN _ CSN(TEMP);

}'SETS(TTYTIM,0,0);
}'WCI(GCI(LINE),TTYTIM) FOR I _ 1 TO 20;

}'SETS(TEMP,0,0);
}'CHAR _ GCI(LINE);
}'WHILE (CHAR # ':') DO;
}*WCI(CHAR,TEMP);
}*CHAR _ GCI(LINE);
}'ENDFOR;
}'TERMSES[CNTHR] _ CSN(TEMP);

}'SETS(TEMP,0,0);
}'WCI(GCI(LINE),TEMP) FOR I _ 1 TO 2;
}'TERMSES[CNTMIN] _ CSN(TEMP);

}'GCI(LINE);
}'SETS(TEMP,0,0);
}'WCI(GCI(LINE),TEMP) FOR I _ 1 TO 2;
}'TERMSES[CNTSEC] _ CSN(TEMP);

}'SETS(TEMP,0,0);
}'CHAR _ GCI(LINE);
}'WHILE (CHAR # ':') DO;
}*WCI(CHAR,TEMP);
}*CHAR _ GCI(LINE);
}'ENDFOR;
}'TERMSES[CPUHR] _ CSN(TEMP);

}'SETS(TEMP,0,0);
}'WCI(GCI(LINE),TEMP) FOR I _ 1 TO 2;
}'TERMSES[CPUMIN] _ CSN(TEMP);

}'GCI(LINE);
}'SETS(TEMP,0,0);
}'WCI(GCI(LINE),TEMP) FOR I _ 1 TO 2;
}'TERMSES[CPUSEC] _ CSN(TEMP);

}'SETS(TEMP,0,0);
}'WCI(GCI(LINE),TEMP) FOR I _ 1 TO 9;
}'TERMSES[PGFALT] _ CSN(TEMP);

}'SETS(TEMP,0,0);
}'WCI(GCI(LINE),TEMP) FOR I _ 1 TO 6;
}'TERMSES[PAPERU] _ CSN(TEMP);

}'SETS(TEMP,0,0);
}'WHILE (CHAR_GCI(LINE) # '$') DO;
}'ENDFOR;
}'CHAR _ GCI(LINE);
}'WHILE (CHAR # '.') DO;
}*WCI(CHAR,TEMP);
}*CHAR _ GCI(LINE);
}'ENDFOR;
}'TERMSES[CHGDLR] _ CSN(TEMP);

}'SETS(TEMP,0,0);
}'WCI(GCI(LINE),TEMP) FOR I _ 1 TO 2;
}'TERMSES[CHGCNT] _ CSN(TEMP);

}'SETS(USER,0,0);
}'GCI(LINE:CONTNU); GCI(LINE:CONTNU);
}'WHILE 1 DO;
}*WCI(GCI(LINE:CONTNU),USER);
}'ENDFOR;

CONTNU:SETR(LINE,0);
}'SRETURN;

}'FUNCTION WRLINE();

* THIS FUNCTION PRINTS ONE TERMINAL SESSION TOTAL OBTAINED FROM OLD MASTER
* AND PRINTS THEM ON "BILLS" AND "STATUS".


}'BGNBAL(STONLY) IF (STBLINE=0 AND USERPG=0 AND EQSTR(CURNAME,"-----")=FALSE);
}'SCOPY(LINE,DATE);
}'CNS(TTYLINE,TEMP,10,5);
}'APPEND(LINE,TEMP);
}'APPEND(LINE," ");
}'APPEND(LINE,TTYTIM);
}'APPEND(LINE," ");
}'WRPARM(TERMSES);
}'APPEND(LINE,"}#");
}'APPEND(LINE,USER);

}'* READY TO PRINT *
}'IF STWANT DO;
}*SOUT(LINE,STFNO);
}'ENDIF;

}'IF BLWANT AND BILUSR[CURUNO] DO;
}*SOUT(LINE,BILFNO);
}'ENDIF;

}'STBLINE _ STBLINE +1;
}'USRLINE _ USRLINE +1;
}'IF STBLINE>31 DO;
}*STBHDR(BLONLY);
}*STBHDR(STONLY);
}'ENDIF;

}'RETURN;

}'FUNCTION TOTCHG();

* THIS FUNCTION PRINTS THE TOTAL CHARGES ACCUMULATED DURING THE BILLING
* PERIOD, AND ALSO THE BALANCE TO DATE FOR THE CURRENT USER BEING
* PROCESSED.}"IT DOES OTHER THINGS, ALSO.}"SUMMARIZED, THEY ARE:
*}$1) PRINTS THE TOTAL BALANCE FOR THE BILLING PERIOD ON "BILLS" & "STATUS"
*}$2) PRINTS THE BALANCE TO DATE ON "BILLS", "STATUS" & "SUMMARY"
*}$3) RETURNS IN STRING "LINE" THE SAME INFORMATION AS ABOVE THAT MUST
*}'BE WRITTEN OUT ON "NEW MASTER"
*}$4) ACCUMULATES THE SYSTEM TOTAL BALANCE ALSO FROM ABOVE INFORMATION
*}$5) ZEROES OUT THE TOTAL FOR THE NEXT USER

}'* OBTAIN CURRENT BALANCE BY ADDING OLDMASTER & TERMINAL SESSION *
}'FOR I _ 0 TO 9 DO;
}*CURBAL[I] _ PREVBAL[I]+TOTBIL[I];
}'ENDFOR;

}'IF (BLWANT AND BILUSR[CURUNO] AND EQSTR(CURNAME,"-----")=FALSE) DO;
}*SCOPY(LINE,"&135%CUMULATIVE USE TO END OF PERIOD}"&135$");
}*WRPARM(CURBAL);
}*SOUT(LINE,INVFNO);
}*SCOPY(LINE,"&135%TOTAL USE DURING PERIOD}"&135,");
}*WRPARM(TOTBIL);
}*CRLF(1,BILFNO);
}*SOUT(LINE,BILFNO);
}*CRLF(5,INVFNO);
}*SOUT(LINE,INVFNO);
}*SCOPY(LINE,"&135%CUMULATIVE USE TO END OF PERIOD}"&135$");
}*WRPARM(CURBAL);
}*CRLF(2,BILFNO);
}*SOUT(LINE,BILFNO);
}'ENDIF;
}'IF STWANT AND EQSTR(CURNAME,"-----")=FALSE AND USRLINE#0 DO;
}*SCOPY(LINE,"&135%TOTAL USE DURING PERIOD}"&135,");
}*WRPARM(TOTBIL);
}*CRLF(1,STFNO);
}*SOUT(LINE,STFNO);
}*SCOPY(LINE,"&135%CUMULATIVE USE TO END OF PERIOD}"&135$");
}*WRPARM(CURBAL);
}*CRLF(2,STFNO);
}*SOUT(LINE,STFNO);
}'ENDIF;

}'SCOPY(LINE,"&M&J&J&J&J&J&135FINITIAL ALLOCATION");
}'CNS(ALOCAT,TEMP);}"LENSTR _ LENGTH(TEMP);
}'FOR I _ 1 TO 10-LENSTR DO;
}*WCI(' ',LINE);
}'ENDFOR;
}'WCI('$',LINE); APPEND(LINE,TEMP);
}'APPEND(LINE,".00&M&J&135FLESS AMOUNT TO DATE");
}'CNS(CURBAL[CHGDLR],TEMP);}"LENSTR _ LENGTH(TEMP);
}'FOR I _ 1 TO 9-LENSTR DO;
}*WCI(' ',LINE);
}'ENDFOR;
}'WCI(' ',LINE); APPEND(LINE,TEMP);}"WCI('.',LINE);
}'WCI('0',LINE) IF CURBAL[CHGCNT] < 10;
}'CNS(CURBAL[CHGCNT],TEMP);
}'APPEND(LINE,TEMP);
}'APPEND(LINE,"&M&J&135FREMAINING ALLOCATION");
}'* SUBTRACTION......}"THE HARD WAY
}'IF CURBAL[CHGDLR] >= ALOCAT DO;}#*NEGATIVE BALANCE...}"USER OVER ALLOCATION
}*I _ CURBAL[CHGCNT];
}*REMAIN _ ALOCAT;
}'ELSEIF CURBAL[CHGCNT] = 0 DO;
}*I _ 0;
}*REMAIN _ ALOCAT;
}'ELSE DO;
}*I _ 100-CURBAL[CHGCNT];
}*REMAIN _ ALOCAT-1;
}'ENDIF;
}'REMAIN _ REMAIN - CURBAL[CHGDLR];
}'CNS(REMAIN,TEMP);}"LENSTR _ LENGTH(TEMP);
}'FOR I _ 1 TO 8-LENSTR DO;
}*WCI(' ',LINE);
}'ENDFOR;
}'WCI('$',LINE); APPEND(LINE,TEMP); WCI('.',LINE);
}'WCI('0',LINE) IF I < 10;
}'CNS(I,TEMP);
}'APPEND(LINE,TEMP);
}'APPEND(LINE,"&M&J");

}'IF (BLWANT AND BILUSR[CURUNO] AND EQSTR(CURNAME,"-----")=FALSE) DO;
}*SOUT(LINE,BILFNO);
}*SOUT(LINE,INVFNO);
}'ENDIF;

}'IF (STWANT AND EQSTR(CURNAME,"-----")=FALSE AND USRLINE#0) DO;
}*SOUT(LINE,STFNO);
}'ENDIF;

}'* PUT IN "LINE" THE DATA TO BE WRITTEN ON "NEW MASTER" ONLY IF USER'S ACCOUNT HAS NOT BEEN CLOSED *
}'IF EQSTR(MESSAGE,"ACCOUNT CLOSED")=FALSE DO;
}*CNS(CURUNO,LINE,10,3);
}*APPEND(LINE,"}"");
}*APPEND(LINE,CURNAME);
}*IF LENGTH(CURJOB)>0 DO;
}-WCI('[',LINE);
}-APPEND(LINE,CURJOB);
}-IF LENGTH(CURADDR)>0 DO;
}0WCI(':',LINE);
}0APPEND(LINE,CURADDR);
}0WCI(':',LINE);
}0APPEND(LINE,CURIADD);
}0WCI(':',LINE);
}0APPEND(LINE,CURACCT);
}-ENDIF;
}-WCI(']',LINE);
}*ENDIF;
}*APPEND(LINE,"}"");
}*APPEND(LINE,DATE);
}*APPEND(LINE,"}#0}#0:00:00}#0:00:00");
}*WRPARM(CURBAL);
}*CNS(ALOCAT,TEMP,10,6);}"APPEND(LINE,TEMP);
}*SOUT(LINE,NMFNO);}"CRLF(1,NMFNO);
}'ENDIF;

}'* WRITE SAME INFORMATION ON}""SUMMARY" IF IT IS DESIRED *
}'* DON'T PRINT USERS #1 THRU #4 AS THEY ARE SYSTEM USERS *
}'IF SMWANT AND CURUNO#1 AND CURUNO#2 AND CURUNO#3 AND CURUNO#4 DO;
}*CNS(CURUNO,LINE,10,14);
}*APPEND(LINE,"}$");
}*IF BILUSR[CURUNO] DO;
}-APPEND(LINE,"-->");
}*ELSE DO;
}-APPEND(LINE,"}#");
}*ENDIF;
}*APPEND(LINE,"}#");
}*APPEND(LINE,CURNAME);
}*LENSTR _ LENGTH(CURNAME);
}*FOR I _ 1 TO 11-LENSTR DO;
}-WCI(' ',LINE);
}*ENDFOR;
}*WRPARM(TOTBIL);
}*** FLAG NEGATIVE BALANCES **
}*IF (CURBAL[CHGDLR]*100)+(CURBAL[CHGCNT]) > (ALOCAT*100) DO;
}-APPEND(LINE,"***}#");
}*ELSE DO;
}-APPEND(LINE,"}&");
}*ENDIF;
}*APPEND(LINE,MESSAGE);
}*APPEND(LINE,"&M&J");
}*SOUT(LINE,SUMFNO);
}*SUMLINE _ SUMLINE + 1;
}*SUMHDR() IF SUMLINE > 45;
}'ENDIF;

}'* ACCUMULATE SYSTEM TOTALS *
}'FOR I _ 0 TO 9 DO;
}*SYSPREV[I] _ SYSPREV[I]+PREVBAL[I];
}*SYSTEM [I] _ SYSTEM [I]+TOTBIL [I];
}*SYSTOT [I] _ SYSTOT [I]+CURBAL [I];
}'ENDFOR;

}'* FOR SYSTOT[PGFALT], WE HAVE TO WATCH OUT FOR OVERFLOWS, SINCE
}'* THERE IS A DISTINCT POSSIBILITY THAT IT MIGHT GO OVER 2^23.
}'* (8 MILLION)}"SO WE IMPLEMENT HERE A KLUDGY DOUBLE PRECISION.
}'IF SYSTOT[PGFALT] > 999999 DO;}#*PGFALT CONTAINS ONLY LOWER 6 DIGITS
}*CNS(SYSTOT[PGFALT],TEMP);}$*DROP THE LOWER 6 DIGITS
}*GCD(TEMP) FOR I _ 1 TO 6;
}*I _ CSN(TEMP);
}*SYSTOT[PGFALT] _ SYSTOT[PGFALT]-(I*1000000);
}*OVRFLW _ OVRFLW+I;
}'ENDIF;

}'* PREPARE FOR THE NEXT USER BY ZEROING OUT THE CURRENT BALANCE *
}'FOR I _ 0 TO 9 DO;
}*TOTBIL[I] _ 0;
}*CURBAL[I] _ 0;
}'ENDFOR;
}'SETS(MESSAGE,0,0);
}'USERPG _ 0;

}'RETURN;

}'FUNCTION WRPARM(ARRAY WHICH);

* THIS FUNCTION CONSTRUCTS A NICELY SPACED STRING "LINE" OF THE MAJOR CHARGES
* SUCH AS CPU TIME, PAGE FAULTS AND OF COURSE (HEE! HEE!) DOLLAR CHARGES.
* THE PARAMETER "WHICH" SPECIFIES WHICH SET OF 10 SUBCHARGES TO MAKE A STRING
* WITH.}"IT CAN BE THE ACCUMULATED CHARGES FROM THE OLD MASTER, CURRENT
* TERMINAL SESSION, TOTAL FOR THE CURRENT USER, OR EVEN THE ENTIRE SYSTEM
* TOTAL CHARGES.}"THE STRING THAT GETS MADE IS INTENDED FOR PRINTING ON
* VARIOUS REPORTS.


}'* TAKE CARE OF ANY OVERFLOWS IN THE SUBCHARGES WHERE NECESSARY *
}'FOR I _ CPUSEC BY -1 TO CNTMIN DO;
}*IF I # CPUHR DO;}#*DONT WANT CPUHR TO OVERFLOW INTO CNTSEC *
}-WHILE WHICH[I] > 59 DO;
}0WHICH[I] _ WHICH[I]-60;
}0WHICH[I-1] _ WHICH[I-1]+1;
}-ENDFOR;
}*ENDIF;
}'ENDFOR;
}'WHILE WHICH[CHGCNT] >99 DO;
}*WHICH[CHGCNT] _ WHICH[CHGCNT]-100;
}*WHICH[CHGDLR] _ WHICH[CHGDLR]+1;
}'ENDFOR;
}'CNS(WHICH[CNTHR],TEMP,10,6);}"APPEND(LINE,TEMP);}"WCI(':',LINE);
}'WCI('0',LINE) IF WHICH[CNTMIN]<10;
}'CNS(WHICH[CNTMIN],TEMP);}"APPEND(LINE,TEMP);}$WCI(':',LINE);
}'WCI('0',LINE) IF WHICH[CNTSEC]<10;
}'CNS(WHICH[CNTSEC],TEMP);}"APPEND(LINE,TEMP);

}'CNS(WHICH[CPUHR],TEMP,10,6);}"APPEND(LINE,TEMP);}"WCI(':',LINE);
}'WCI('0',LINE) IF WHICH[CPUMIN]<10;
}'CNS(WHICH[CPUMIN],TEMP);}"APPEND(LINE,TEMP);}#WCI(':',LINE);
}'WCI('0',LINE) IF WHICH[CPUSEC]<10;
}'CNS(WHICH[CPUSEC],TEMP);}"APPEND(LINE,TEMP);

}'IF WHICH=SYSTOT DO;
}*CNS(OVRFLW,TEMP,10,3) IF OVRFLW # 0 ELSE SCOPY(TEMP,"}#");
}*APPEND(LINE,TEMP);
}*CNS(SYSTOT[PGFALT],TEMP,10,6); APPEND(LINE,TEMP);
}'ELSE DO;
}*CNS(WHICH[PGFALT],TEMP,10,9);}"APPEND(LINE,TEMP);
}'ENDIF;
}'CNS(WHICH[PAPERU],TEMP,10,6);}"APPEND(LINE,TEMP);
}'CNS(WHICH[CHGDLR],TEMP);}#LENSTR _ LENGTH(TEMP);
}'FOR I _ 1 TO 8-LENSTR DO;
}*WCI(' ',LINE);
}'ENDFOR;
}'WCI('$',LINE); APPEND(LINE,TEMP);
}'WCI('.',LINE);}"WCI('0',LINE) IF WHICH[CHGCNT]<10;}"CNS(WHICH[CHGCNT],TEMP);
}'APPEND(LINE,TEMP);

}'RETURN;

}'FUNCTION ASK(STRING QUESTN);

* THIS FUNCTION PRINTS THE QUESTION PASSED TO IT AS A PARAMETER AND
* RETURNS A 1 IF THE ANSWER TO THE QUESTION WAS A 'YES' OR ELSE A 0
* IF THE ANSWER WAS 'NO'.}"IF NEITHER ANSWER IS GIVEN, IT PRINTS AN 
* ERROR MESSAGE AND ASKS THE QUESTION AGAIN.

}'WHILE 1 DO;

}*SOUT(QUESTN);
}*CHAR _ CIN(TTY);

}*IF CHAR = 'Y' DO;
}-SOUT("ES"); CRLF(1);
}-RETURN 1;
}*ELSEIF CHAR = 'N' DO;
}-SOUT("O"); CRLF(1);
}-RETURN 0;
}*ELSE DO;
}-SOUT("}"TYPE 'Y' OR 'N', PLEASE."); CRLF(1);
}*ENDIF;

}'ENDFOR;

}'FUNCTION EQSTR(STRING LINE1, STRING LINE2);

* FUNCTION TO COMPARE TWO STRINGS.}"WILL RETURN A 1 IF EQUAL, OTHERWISE
* RETURNS A 0.

}'DECLARE INTEGER COUNT;}"*A SIMPLE COUNTER


}'LENSTR _ LENGTH(LINE1);
}'RETURN 0 IF LENSTR # LENGTH(LINE2);

}'FOR COUNT _ 1 TO LENSTR DO;
}*IF GCI(LINE1) # GCI(LINE2) DO;
}-SETR(LINE1,0); SETR(LINE2,0);
}-RETURN 0;
}*ENDIF;
}'ENDFOR;

}'SETR(LINE1,0); SETR(LINE2,0);
}'RETURN 1;


}'END;