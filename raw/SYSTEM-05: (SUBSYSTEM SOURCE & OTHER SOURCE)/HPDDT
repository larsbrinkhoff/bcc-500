* OPD AND MACRO PACKAGE FOR HP ASSEMBLY

OP MACRO D,G,3;G(1) NARG;G(2) EQU D(1);G(1) EQU G(1)-1
}'RPT (G(3)=2,2,G(1));D(G(3)) OPD D(G(3)+1)B5,G(2); ENDR
}'FRGT G(1),G(2),G(3); ENDM
}'OP 1,NOP,0,CLE,1,SLA,2,SLB,3,ALS,4,BLS,5,ARS,6,BRS,7,RAL,10
}'OP 1,RBL,11,RAR,12,RBR,13,ALR,14,BLR,15,ERA,16,ERB,17,ELA,20
}'OP 1,ELB,21,ALF,22,BLF,23,CLA,24,CLB,25,CMA,26,CMB,27,CCA,30
}'OP 1,CCB,31,SEZ,32,CLE,33,CME,34,CCE,35,SSA,36,SSB,37,SLA,40
}'OP 1,SLB,41,INA,42,INB,43,SZA,44,SZB,45,RSS,46
}'OP 2,AND,51,XOR,52,IOR,53,JSB,54,JMP,55,ISZ,56,ADA,57,ADB,60
}'OP 2,CPA,61,CPB,62,LDA,63,LDB,64,STA,65,STB,66,MPY,67,DIV,70
}'OP 2,DLD,71,DST,72,ASR,73,ASL,74,LSR,75,LSL,76,RRR,77,RRL,50
}'OP 2,HLT,100,STF,101,CLF,102,SFC,103,SFS,104,MIA,105,MIB,106
}'OP 2,LIA,107,LIB,110,OTA,111,OTB,112,STC,113,CLC,114
}'OP 1,STO,115,CLO,116,SOC,117,SOS,120
CLA}$EQU}%24B5
CLB}$EQU}%25B5
CMA}$EQU}%26B5
CMB}$EQU}%27B5
CCA}$EQU}%30B5
CCB}$EQU}%31B5
SEZ}$EQU}%32B5
CLE}$EQU}%33B5
CME}$EQU}%34B5
CCE}$EQU}%35B5
SSA}$EQU}%36B5
SSB}$EQU}%37B5
SLA}$EQU}%40B5
SLB}$EQU}%41B5
INA}$EQU}%42B5
INB}$EQU}%43B5
SZA}$EQU}%44B5
SZB}$EQU}%45B5
RSS}$EQU}%46B5
A}&EQU}%0
B}&EQU}%1
I}&EQU}%2
OCT}$MACRO}#D
}'DATA}$D(1)B
}'ENDM
DEC}$MACRO}#D
}'DATA}$D(1)
}'ENDM
ABS}$MACRO}#D
D(0)}#EQU}%D(1)
}'ENDM
O}&MACRO}#D
H}&NARG
J}&EQU}%0
}'RPT}%(K=1,H)
J}&EQU}%J+D(K)
}'ENDR
}'DATA}$K
}'ENDM
ORGVAL EQU}%240B
ORG}$MACRO}#D
}'BSS}%D(1)-ORGVAL
ORGVAL EQU}%D(1)
}'FRGT}$ORGVAL
}'ENDM
C}&EQU}%0

TTY}#EQU 14B
}&ORG 16000B



GO}$CLF 0}%TURN OFF I/O
}&CLA
}&STA PRCDF RESET PROCEED FLAG
}&STA EXTND RESET INDICATOR IMAGES
}&STA OVRFW
}&STA INT
}&CLC 0}%RESET INDICATORS
}&CLO
}&CLE
}&CLA}'FIX UP BREAKPOINT
}&CPA BREAK
}&JMP LOOP}"UNLESS NOT NECESSARY
}&LDA BKCEL
}&STA BREAK,I
LOOP}"JSB CRLF}"BEGIN NEW LINE
LOOP1 JSB RE}$LOOK FOR EXPRESSION
}&JMP LOOP2 IF NOT FOUND
}&JSB IC}$INTERPRET TERMINAL CHAR
}&JMP OPEN}"/ OR \ OR <LEFT ARROW>
}&JMP LFEED CR
}&JMP START LF OR ^
}&JMP EQUL1 =
}&JMP SETBP !
}&JMP LDAB}"<SEMI-COLON>A OR <SEMI-COLON>B
}&JMP GOTO}"<SEMI-COLON>G
}&JMP STIND <SEMI-COLON>I
}&JMP ERROR <SEMI-COLON>P
}&JMP ERROR OTHER
LOOP2 JSB IC}$INTERPRET TERMINAL CHAR, NO EXPR
}&JMP ERROR / OR \ OR <LEFT ARROW>
}&JMP LFEED CR
}&JMP START LF OR ^
}&JMP ERROR =
}&JMP CLRBP !
}&JMP ERROR <SEMI-COLON>A OR <SEMI-COLON>B
}&JMP ERROR <SEMI-COLON>G
}&JMP ERROR <SEMI-COLON>I
}&JMP PROCD <SEMI-COLON>P
}&JMP ERROR OTHER
OPEN}"LDA VALUE UPDATE VALUE OF DOT
}&STA DOT
}&STA CELL}"KEEP FOR POSSIBLE PEEKING
OPEN0 LDA CHAR
}&STA MODE}"SET DISPLAY MODE TO / OR \ OR <LEFT ARROW>
OPEN1 JSB TAB}#TABULATE (3 SPACES)
}&LDA MODE
}&CPA BSLSH \
}&JMP OPEN2 DO NOT SHOW CONTENTS OF CELL IF \ MODE
}&CPA LARO}"<LEFT ARROW>
}&JMP OPEN4 INTERPRET AS Z/C PAGE
OPN1A LDA CELL,I ASSUMING WE ARE IN / MODE
}&STA CNTNT TEMPORARILY FOR LATER DISPLAY
}&AND ADMSK STRIP TO FULL ADDRESS
}&STA CELL}"FOR PEEKING
}&LDA CNTNT NOW DISPLAY IT
}&JSB PRINT
}&JSB TAB
OPEN2 JSB RE}$LOOK FOR REPLACEMENT EXPR
}&JMP OPEN3 IF NONE FOUND
}&JSB IC}$INTERPRET TERMINAL CHAR
}&JMP OPEN}"/ OR \ OR <LEFT ARROW>
}&JMP CLOSE CR
}&JMP CONT}"LF OR ^
}&JMP EQUL2 =
}&JMP SETBP !
}&JMP LDAB}"<SEMI-COLON>A OR <SEMI-COLON>B
}&JMP GOTO}"<SEMI-COLON>G
}&JMP STIND <SEMI-COLON>I
}&JMP ERROR <SEMI-COLON>P
}&LDA CHAR
}&CPA QUEST
}&JMP *+2
}&JMP ERROR OTHER
}&JSB TAB ABORT AND TRY AGAIN
}&JMP OPEN2
OPEN3 JSB IC}$INTERPRET TERMINAL CHAR, NO REPLACEMENT EXPR
}&JMP OPEN0
}&JMP LFEED CR
}&JMP STRT1 LF OR ^
}&JMP EQUL3 =
}&JMP CLRBP !
}&JMP ERROR <SEMI-COLON>A OR <SEMI-COLON>B
}&JMP ERROR <SEMI-COLON>G
}&JMP ERROR <SEMI-COLON>I
}&JMP PROCD <SEMI-COLON>P
}&JMP ERROR OTHER
OPEN4 LDA SLASH INITIALIZE MODE
}&STA MODE
}&LDA CELL}"INTERPRET BIT 10 AS ZERO OR CURRENT
}&AND BIT10
}&SZA}'SKIP IF 0 (ON PAGE 0)
}&JMP OPEN5
}&LDA CELL}"ZERO PAGE
}&AND SMASK
}&STA CELL
}&JMP OPN1A
OPEN5 LDA DOT}#GET CURRENT PAGE BITS
}&AND NSMSK
}&STA B
}&LDA CELL}"NOW GET PAGE ADDRESS
}&AND SMASK
}&IOR B}%MERGE IN HIGH BITS
}&STA CELL
}&JMP OPN1A
LFEED LDA LF}$TYPE LF & START NEW LINE
}&JSB TYPE
}&JMP LOOP1
START LDA SLASH INITIALIZE TO / MODE
}&STA MODE
STRT1 LDA CHAR}"LOOK AT TERMINAL CHAR
}&CPA UPARO SKIP IF NOT ^
}&JMP STRT2 GIVE CRLF
}&LDA CR}$GIVE 2 LFS
}&JSB TYPE
}&LDA CR
}&JSB TYPE
}&JMP *+2
STRT2 JSB CRLF
}&LDA CHAR}"CHECK TERMINAL CHAR AGAIN
}&CPA UPARO SKIP IF NOT ^
}&JMP STRT4 & DECREMENT DOT
}&LDA ONE
STRT3 ADA DOT
}&AND ADMSK PREVENT OVERFLOW OF DOT
}&STA DOT
}&STA CELL}"FOR PEEKING
}&JSB PRINT TYPE VALUE OF DOT
}&LDA MODE
}&JSB TYPE}"INDICATE / OR \ OR <LEFT ARROW> MODE
}&JMP OPEN1
STRT4 LDA M1
}&JMP STRT3
EQUL1 JSB TAB
}&LDA VALUE
}&JSB PRINT SHOW VALUE OF EXPR
}&JSB TAB
}&JMP LOOP1
EQUL2 JSB TAB
}&LDA VALUE
}&JSB PRINT SHOW VALUE OF EXPR
}&JMP LOOP}"& GO TO NEW LINE
EQUL3 JSB TAB
}&LDA CNTNT
}&JSB PRINT RETYPE CONTENTS OF DISPLAYED CELL
}&JSB TAB
}&JMP OPEN2
SETBP LDA VALUE
}&AND ADMSK
}&STA BREAK
}&JMP LOOP
CLRBP CLA
}&STA BREAK
}&JMP LOOP
LDAB}"LDA CHAR
}&CPA BBB}#SKIP IF NOT B
}&JMP LDAB1
}&LDA VALUE MUST BE A
}&STA AA
}&JMP LOOP
LDAB1 LDA VALUE
}&STA BB
}&JMP LOOP
GOTO}"LDA BREAK TEST BREAK FOR ZERO VALUE (NO BREAKPOINT)
}&SZA
}&JMP GOTO2 BREAKPOINT: DO FUNNY STUFF
GOTO1 LDA VALUE
}&AND ADMSK
}&STA VALUE
}&JSB CRLF
}&LDA EXTND RESTORE MACHINE STATE
}&ERA}'ROTATES 0 BACK INTO E
}&CLO}'CLEAR OVERFLOW
}&LDA OVRFW
}&SSA
}&STO}'SET OVERFLOW
}&CLF 0}%DISABLE I/O
}&LDA INT
}&SSA
}&STF 0}&TURN ON I/O AGAIN
}&LDA AA}$LOAD ACTIVE REGISTERS
}&LDB BB
}&JMP VALUE,I LEAVE DDT--BEGIN EXECUTION OF PGM
GOTO2 LDA BREAK,I SAVE INST AT BKPT
}&STA BKCEL
}&LDA BKIST PLANT BKPT
}&STA BREAK,I
}&JMP GOTO1
STIND LDB VALUE SET INDICATOR IMAGES
}&CLA
}&LSR 1
}&STA OVRFW
}&LSR 3
}&STA EXTND
}&LSR 2
}&CLA
}&LSR 1
}&STA INT
}&LDA EXTND
}&CLB
}&LSL 1
}&STB EXTND
}&JMP LOOP
ERROR JSB TAB
}&LDA QUEST ?
}&JSB TYPE
}&JMP LOOP
PROCD LDA PRCDF
}&O SSA,RSS}"<SEMI-COLON>P IS LEGAL ONLY IF A BREAK HAS OCCURRED
}&JMP ERROR
}&CLA
}&STA PRCDF NEW BREAK MUST OCCUR BEFORE <SEMI-COLON>P IS LEGAL AGAIN
}&LDA BREAK TEST TO SEE IF BKPT HAS BEEN MOVED
}&CPA L}%SKIP IF BKPT HAS NOT BEEN MOVED
}&JMP PRCD1
}&LDA L
}&STA VALUE
}&JMP GOTO
PRCD1 ISZ A}%MAKE PTR TO BREAD ADDR + 1
}&STA BKCL3
}&ISZ A}%MAKE PTR TO BREAK ADDR + 2
}&STA BKCL4
}&LDA BKPTR
}&STA VALUE
}&JMP GOTO
BKIST JMP BRKGO,I
BKST1 STA AA}$SAVE MACHINE STATE
}&STB BB
}&CLA
}&SFC 0}%SKIP ON INTERRUPT DISABLED
}&LDA M1}$NO--SET A=-1
}&STA INT}#SAVE I/O STATE
}&CLF 0}%TURN OFF INTERRUPTS
}&CLA
}&SOC C}%SKIP IF OV IS CLEAR & CLEAR OV
}&LDA M1}$NO--SET A=-1
}&STA OVRFW
}&CLA
}&ELA}'ROTATES E INTO BIT 0 OF A
}&STA EXTND
}&LDA BREAK
}&STA L}%SAVE PLACE FOR <SEMI-COLON>P
}&STA DOT}$NICE THING FOR DOT TO START OUT WITH
}&LDA BKCEL REMOVE BKPT
}&STA BREAK,I
}&LDA M1}$ENABLE <SEMI-COLON>P
}&STA PRCDF
}&LDA AA}$TYPE OUT A
}&JSB PRINT
}&JSB TAB
}&LDA BB}$TYPE OUT B
}&JSB PRINT
}&JMP LOOP
CLOSE LDA VALUE CHANGE CONTENTS OF CELL
}&STA DOT,I
}&JMP LFEED
CONT}"LDA VALUE
}&STA DOT,I
}&JMP STRT1
PRINT NOP}'ENTRY POINT: A HOLDS VALUE TO BE TYPED
}&STA NUM
}&LDA FIVE}"SET CNTR FOR 6 DIGITS
}&STA CNTR
}&CLA
}&STA TPFLG RESET LEADING ZERO FLAG
}&LDA NUM}#GET LEADING DIGIT
}&CLB
}&LSL 1
}&JMP PRNT2
PRNT1 LDA NUM}#GET DIGIT
}&CLB
}&LSL 3
PRNT2 STA NUM SAVE NUMBER RESIDUE
}&SZB}'TEST FOR A ZERO
}&JMP PRNT4 NON-ZERO: OUTPUT IT
}&LDA TPFLG SEE IF ZERO IS LEADING OR NOT
}&SSA}'SKIP IF FLAG IS NOT SET (IT IS LEADING)
}&JMP PRNT4
PRNT3 LDA M1}$DECREMENT DIGIT COUNTER
}&ADA CNTR
}&STA CNTR
}&SSA}'SKIP IF POSITIVE: NOT DONE
}&RSS
}&JMP PRNT1
}&LDA TPFLG NOT QUITE DONE
}&SSA}'SKIP IF NOTHING HAS BEEN PRINTED
}&JMP PRINT,I EXIT
}&CLB}'PRINT SINGLE 0 DIGIT
PRNT4 LDA M1}$SET LEADING ZERO FLAG
}&STA TPFLG
}&ADB SIXTY
}&STB A}%MAKE ASCII
}&JSB TYPE
}&JMP PRNT3
RE}$NOP}'ENTRY: ROUTINE TO RECOGNIZE EXPRESSIONS
}&CLA
}&STA VALUE INITIALLY
}&LDA BLANK
RE1}#STA OP
}&JSB RT}$RECOGNIZE TERM
}&JMP RE5}#NOT A TERM--LOOK FOR UNARY OPERATOR
}&LDA OP}$INSPECT THE OPERATOR
}&CPA BLANK TREAT BLANK LIKE +
}&JMP RE2
}&CPA MINUS DETERMINE WHETHER + OR -
}&JMP RE4}#IF -
RE2}#LDA NUMBR COMPUTE NEW VALUE
RE3}#ADA VALUE
}&STA VALUE
}&LDA CHAR
}&CPA MINUS SKIP IF NOT -
}&JMP RE1}#CONTINUE WITH EXPR
}&CPA BLANK SKIP IF NOT BLANK
}&JMP RE1}#CONT
}&CPA PLUS}"SKIP IF NOT +
}&JMP RE1
}&ISZ RE}$EXPR DONE--BUMP RETURN & EXIT
}&JMP RE,I
RE4}#LDA NUMBR
}&O CMA,CLE,INA CAN YOU BELIEVE THIS?
}&JMP RE3
RE5}#LDA CHAR}"LOOK FOR UNARY OPERATOR
}&CPA MINUS
}&JMP RE1
}&CPA BLANK
}&JMP RE1
}&CPA PLUS
}&JMP RE1
}&JMP RE,I}"GIVE UP--TAKE FAILURE EXIT
RT}$NOP}'ENTRY: TERM RECOGNIZER.}"SKIPS IF SUCCESSFUL
}&CLA
}&STA RTF1}"DOT ENCOUNTERED FLAG
}&STA RTF2}"DIGIT ENCOUNTERED FLAG
}&STA NUMBR
RT1}#JSB READ}"IN A CHARACTER
}&ADA M60
}&SSA}'SKIP IF POSSIBLY A DIGIT
}&JMP RT2}#IF NOT
}&ADA M10
}&O SSA,RSS}#SKIP IF DIGIT
}&JMP RT2}#IF NOT
}&LDA RTF1}"DIGIT FOUND.}"NOW...
}&SSA}'SKIP IF DOT HAS NOT BEEN ENCOUNTERED
}&JMP RT,I}"DOT ENCOUNTERED--SYNTAX ERROR
}&LDB CHAR}"ACCUMULATE NUMBER
}&LSR 3
}&LDB NUMBR
}&LSL 3
}&STB NUMBR
}&LDA M1
}&STA RTF2}"SET DIGIT ENCOUNTERED FLAG
}&JMP RT1
RT2}#LDA RTF2}"TEST DIGIT ENCOUNTERED FLAG
}&O SSA,RSS
}&JMP RT3}#DIGIT NOT YET ENCOUNTERED
}&ISZ RT}$DIGIT HAS BEEN ENCOUNTERED--BUMP & RETURN
}&JMP RT,I
RT3}#LDA CHAR
}&CPA DOTT
}&JMP RT4}#IF .
}&CPA SEMIC
}&RSS
}&JMP RT,I}"NOT A <SEMI-COLON>}"ERROR EXIT
}&JSB READ}"<SEMI-COLON>}"GET ANOTHER CHARACTER
}&CPA AAA
}&JMP RT6}#A FOUND
}&CPA BBB
}&JMP RT7}#B FOUND
}&CPA LLL
}&JMP RT8}#L FOUND
}&CPA III
}&JMP RT9}#I FOUND
}&JMP RT,I}"NONE OF THE ABOVE: ERROR EXIT
RT4}#LDA DOT
RT5}#STA NUMBR
}&LDA M1
}&STA RTF1}"SET FLAGS
}&STA RTF2
}&JMP RT1
RT6}#LDA AA
}&JMP RT5
RT7}#LDA BB
}&JMP RT5
RT8}#LDA L
}&JMP RT5
RT9}#LDB EXTND SET UP INDICATOR IMAGES FOR DISPLAY
}&LSR 1
}&STA TEMP1
}&LDA INT
}&CLB
}&LSL 1
}&CLA
}&LSL 2
}&LDA TEMP1
}&LSL 1
}&CLA
}&LSL 2
}&LDA OVRFW
}&LSL 1
}&LDA B
}&JMP RT5
IC}$NOP}'ENTRY: CATEGORIZE TERMINAL CHARACTERS
}&LDA CHAR
}&CPA SLASH
}&JMP IC,I}"/}"1
}&CPA BSLSH
}&JMP IC,I}"\}"1
}&CPA LARO
}&JMP IC,I}"<LEFT ARROW>}"1
}&ISZ IC
}&CPA CR
}&JMP IC,I}"CR 2
}&ISZ IC
}&CPA LF
}&JMP IC,I}"LF 3
}&CPA UPARO
}&JMP IC,I}"^}"3
}&ISZ IC
}&CPA EQL
}&JMP IC,I}"=}"4
}&ISZ IC
}&CPA EXCL
}&JMP IC,I}"!}"5
}&ISZ IC
}&CPA SEMIC 
}&JMP IC1}#TO CHECK FURTHER
}&LDA PVCHR TRY BACKING UP
}&CPA SEMIC
}&JMP IC3
}&ISZ IC
}&ISZ IC
}&ISZ IC
}&ISZ IC
}&JMP IC,I}"OTHER}"10
IC1}#JSB READ}"GET ANOTHER CHARACTER
IC2}#CPA AAA
}&JMP IC,I}"A}"6
}&CPA BBB
}&JMP IC,I}"B}"6
}&ISZ IC
}&CPA GGG
}&JMP IC,I}"G}"7
}&ISZ IC
}&CPA III
}&JMP IC,I}"I}"8
}&ISZ IC
}&CPA PPP
}&JMP IC,I}"P}"9
}&ISZ IC
}&JMP IC,I}"OTHER}"10
IC3}#LDA CHAR
}&JMP IC2
READ}"NOP}'ENTRY: READ A CHAR FROM TTY
}&LDA CHAR
}&STA PVCHR FOR POSSIBLE BACKING UP
}&LDA DINPR
}&OTA TTY}#SELECT TTY RDR
}&STC TTY,C START IT & WAIT FOR CHAR TO APPEAR
}&SFS TTY
}&JMP *-1
}&LIA TTY}#READ IT INTO A
}&AND CHMSK CONVERT TO H-P CODE
}&STA CHAR
}&JMP READ,I EXIT
TYPE}"NOP}'ENTRY: TYPE OUT A CHAR TO TTY
}&LDB DOPR
}&OTB TTY}#SELECT TTY PRINTER
}&OTA TTY}#LOAD TTY BUFFER
}&STC TTY,C TYPE IT & WAIT FOR DONE
}&SFS TTY
}&JMP *-1
}&JMP TYPE,I EXIT
CRLF}"NOP
}&LDA CR
}&JSB TYPE
}&LDA LF
}&JSB TYPE
}&JMP CRLF,I
TAB}#NOP
}&LDA BLANK
}&JSB TYPE
}&JSB TYPE
}&JSB TYPE
}&JMP TAB,I
}#
CNTNT BSS 1
PRCDF BSS 1}%PROCEED FLAG
VALUE BSS 1
DOT}#BSS 1
CELL}"BSS 1
CHAR}"BSS 1
MODE}"BSS 1
BREAK BSS 1
AA}$BSS 1
BB}$BSS 1
BKCEL BSS 3}%WHERE BREAKPOINTS ARE STORED AND HANDLED
BKCL3 BSS 1
BKCL4 BSS 1
L}%BSS 1
NUM}#BSS 1
CNTR}"BSS 1
TPFLG BSS 1
OP}$BSS 1
NUMBR BSS 1
RTF1}"BSS 1
RTF2}"BSS 1
EXTND BSS 1
OVRFW BSS 1
INT}#BSS 1
PVCHR BSS 1
TEMP1 BSS 1
}"
ONE}#DEC 1
FIVE}"DEC 5
BIT10 OCT 2000
ADMSK OCT 17777
SMASK OCT 1777
NSMSK OCT 16000
M1}$OCT 177777
SIXTY OCT 60
M60}#OCT 177720
M10}#OCT 177770
DINPR OCT 160000
DOPR}"OCT 120000
CHMSK OCT 177
}"
BSLSH OCT 134}#\
LF}$OCT 12}$LF
SLASH OCT 57}$/
UPARO OCT 136}#^
LARO}"OCT 137}#<LEFT ARROW>
CR}$OCT 15}$CR
QUEST OCT 77}$?
BLANK OCT 40}$BLANK
MINUS OCT 55}$-
PLUS}"OCT 53}$+
DOTT}"OCT 56}$.
SEMIC OCT 73}$<SEMI-COLON>
AAA}#OCT 101}#A
BBB}#OCT 102}#B
GGG}#OCT 107}#G
III}#OCT 111}#I
LLL}#OCT 114}#L
PPP}#OCT 120}#P
EQL}#OCT 75}$=
EXCL}"OCT 41}$!
BKPTR ABS BKCEL
}&ORG 1777B
BRKGO ABS BKST1 COMMUNICATIONS CELL FOR BREAKPOINTS
}&END
