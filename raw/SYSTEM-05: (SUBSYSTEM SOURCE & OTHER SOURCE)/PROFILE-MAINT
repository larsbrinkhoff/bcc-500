}'COMMON}$SYSCALLS;

* MCALL DECLARATIONS

}(MACRO}%ARBMC _ UNKNOWN MONITOR;
}'MACRO}%INTMC _ INTEGER MONITOR;
}'MACRO}%STMC _ STRING MONITOR;
}'MACRO}%LNMC _ LONG MONITOR;
}'MACRO}%LNLNMC _ LONGLONG MONITOR;

* CALLS TO MANIPULATE MIBS AND SIBS
}(INTMC}%CREATE'MIB _ 190;
}'ARBMC}%READ'MIBOB'INDEX _ 0;
}'ARBMC}%READ'MIBOB'NAME _ 1;
}'ARBMC}%SET'MIBOB'NAME _ 2;
}'ARBMC}%SET'MIBOB'ACCESS _ 3;
}'ARBMC}%SET'LOCK'LIST _ 4;
}'ARBMC}%DELETE'MIBOB _ 5;
}'INTMC}%CREATE'MIBOB _ 6;
}'ARBMC}%SET'MIB'ACCESS _ 10;
}'INTMC}%READ'MIB'ACCESS _ 11;
}'ARBMC}%SET'MIBOB'VALUE _ 12;
}'INTMC}%COPY'MIBOB _ 14;* UNIMPLEMENTED
}'ARBMC}%SET'NO'CHARGE _ 15;*** ???
}'INTMC}%READ'MIB'SPACE _ 16;
}'ARBMC}%SET'REF'DATE _ 18;*** ???
}'ARBMC}%SET'DURABILITY _ 28;*** ???

* OFT CALLS
}(INTMC}%MOPEN'FILE _ 19;
}'ARBMC}%MREAD'OFT _ 20;
}'ARBMC}%SET'OFT'AL _ 21;
}'INTMC}%MSET'OFT'CL _ 22;
}'ARBMC}%SET'FILE'LENGTH _ 23;* IMPROVE THIS FOR UTS
}'INTMC}%CR'FILE'PAGE _ 24;
}'INTMC}%DEL'FILE'PAGE _ 25;
}'INTMC}%NEXT'FILE'PAGE _ 26;
}'ARBMC}%MOVE'PAGE'PMT _ 27;

* PMT CALLS
}(INTMC}%ACQUIRE'PMT _ 50;
}'ARBMC}%NEW'PMT'PAGE _ 51;
}'ARBMC}%CLEAR'PMT _ 53;
}'ARBMC}%DELETE'PMT _ 54;
}'ARBMC}%SET'PMT'AL _ 55;
}'ARBMC}%SET'PMT'CL _ 56;
}'ARBMC}%SET'PMT'RO _ 57;
}'ARBMC}%READ'PMT _ 58;
* WORKING SET CALLS
}(ARBMC}%PUT'PAGE'DWS _ 65;
}'ARBMC}%PUT'PAGE'CWS _ 66;
}'INTMC}%DEL'PAGE'DWS _ 67;
}'INTMC}%DEL'PAGE'CWS _ 68;
}'INTMC}%READ'LWS _ 70;
}'ARBMC}%SET'LWS _ 71;

* SPT CALLS
}(INTMC}%MCREATE'SP _ 90;
}'ARBMC}%MDESTROY'SP _ 91;
}'ARBMC}%MREAD'SPT _ 95;
}'ARBMC}%READ'SPCS _ 96;
}'INTMC}%MRD'SPT'FIELD _ 97;
}'ARBMC}%MST'SPT'FIELD _ 98;
}'ARBMC}%READ'MAP _ 99;
}'ARBMC}%SET'MAP _ 100;
}'INTMC}%READ'MAP'BYTE _ 101;
}'ARBMC}%SET'MAP'BYTE _ 102;
}'INTMC}%READ'SPS'PARAM _ 106;

* SPCS CALLS
}(ARBMC}%SP'CALL _ 111;
}'ARBMC}%SP'JUMP _ 112;
}'ARBMC}%SP'TRAP _ 113;
}'ARBMC}%TRAP'RETURN _ 114;
}'ARBMC}%SP'BRANCH _ 115;
}'ARBMC}%SP'RETURN _ 116;
}'ARBMC}%JUMP'RETURN _ 117;
}'ARBMC}%MARK'CALL _ 118;
}'ARBMC}%DELETE'CALL _ 119;
}'ARBMC}%MODIFY'CALL _ 120;

* PROCESS CALLS
}(INTMC}%COPY'PMT'PROC _ 130;
}'INTMC}%ACTIVATE'PROC _ 132;
}'ARBMC}%TRANSFER'TERM _ 133;
}'ARBMC}%MAKE'DORMANT _ 134;
}'ARBMC}%INIT'PROC'PAGE _ 135;
}'ARBMC}%INIT'PROC'MAP _ 136;
}'ARBMC}%INIT'SPT _ 137;
}'INTMC}%READ'PROC'PARAM _ 211;
* IWS CALLS
}(ARBMC}%SET'PROC'INT _ 163;
}'ARBMC}%QUIT'BLOCK _ 164;
}'INTMC}%GET'INT'NO _ 165;
}'ARBMC}%READ'ICT _ 166;
}'ARBMC}%ALLOW'INTS _ 168;
}'ARBMC}%REFUSE'INTS _ 169;
}'ARBMC}%BLOCK _ 170;
}'ARBMC}%SET'ICT _ 172;
}'ARBMC}%SET'ICT'CL _ 173;
}'INTMC}%ACQUIRE'ICT _ 174;

* CHIO CALLS
}(ARBMC}%SET'LINE'FIELD _ 180;
}'ARBMC}%READ'LINE'TABLE _ 181;
}'ARBMC}%READ'STRING'BRK _ 182;
}'ARBMC}%WRITE'STRING _ 183;

* MISCELLANEOUS
}(LNMC}&READ'CLOCK _ 210;
}'INTMC}%READ'PR'PARAM _ 211;*** ???
* UCALL DECLARATIONS

}(MACRO}%ARBUC _ UNKNOWN UTILITY;
}'MACRO}%INTUC _ INTEGER UTILITY;
}'MACRO}%CHRUC _ CHARACTER UTILITY;
}'MACRO}%STUC _ STRING UTILITY;
}'MACRO}%LNUC _ LONG UTILITY;

* MISCELLANEOUS UCALLS
}(ARBUC}%BREAK'POINT _ 0;*}-UCALL FOR DEBUGGING PROGRAMS
}'STUC}&ERRORMSG _ 1;*}0RETURN SYSTEM ERROR MESSAGE
}'STUC}&GET'PARAM _ 2;*}/STRIP PARAMETER FROM STRING
}'STUC}&GET'COM'LINE _ 3;*},GET CURRENT COMMAND LINE FROM UTS
}'INTUC}%ABRV'LKP _ 4;*}0LOOK UP ABBREVIATED NAME IN STARY
}'INTUC}%CON'ABRV'LKP _ 5;*},CONTINUE SAME IN NEW STARY

* FILE SYSTEM CALLS
}(ARBUC}%NAME'SEARCH _ 10;*},CONVERT FILE ST TO UTS NAME
}'ARBUC}%SPECIAL'SEARCH _ 11;*})VARIATION OF ABOVE
}'INTUC}%CONV'NAME _ 12;*}.CONVERT FROM UTS TO MON FILE NAME
}'ARBUC}%SPREAD'NAME _ 13;*},SPLIT FILE NAME STRING INTO COMP.
}'ARBUC}%READ'MIBOB'VALUE _ 14;*}'READ 'VALUE' OF MIB OBJECT
}'ARBUC}%DELETE'FILE _ 15;*},DELETE FILE AND CONTENTS
}'INTUC}%OPEN'FILE _ 16;*}.OPEN FILE W/WO LOCKING
}'ARBUC}%CLOSE'FILE _ 17;*}-CLOSE AND UNLOCK FILE
}'ARBUC}%READ'OFT _ 18;*}/READ OFT
}'INTUC}%READ'OFT'FIELD _ 19;*})READ OFT FIELD
}'ARBUC}%SET'OFT'CL _ 20;*}-SET OFT CONTROL LOCK
}'ARBUC}%CONV'KEY _ 21;*}/CONVERT DEFAULT ACCESS KEY

* EXTENDED SPS CALLS
}(INTUC}%CREATE'SSP _ 30;*}-CREATE SUBSIDIARY SUB-PROCESS
}'INTUC}%CREATE'PSP _ 31;*}-CREATE PARALLEL SUB-PROCESS
}'ARBUC}%ATTACH _ 32;*}1ATTACH PI FILE TO SUB-PROCESS
}'ARBUC}%DESTROY'SP _ 33;*}-DESTROY SUB-PROCESSES
}'ARBUC}%READ'SPT _ 34;*}/READ SPT
}'INTUC}%READ'SPT'FIELD _ 35;*})READ SPT FIELD
}'ARBUC}%SET'SPT'FIELD _ 36;*}*SET SPT FIELD
}'STUC}&READ'SPNAME _ 37;*},READ SUB-PROC NAME
}'ARBUC}%SET'SPNAME _ 38;*}-SET SUB-PROC NAME
}'INTUC}%SPNAME'SEARCH _39;*}+LOOK UP SP NAME

* CIOS MANIPULATION
}(INTUC}%CREATE'CIOS _ 40;*},CREATE CONTROL I/O STREAM
}'INTUC}%READ'CIOS'FIELD _ 41;*}(READ CIOS FIELD
}'ARBUC}%SET'CIOS'FIELD _ 42;*})SET (SOME) CIOS FIELDS
}'ARBUC}%SET'CIOS'INPUT _ 43;*})SET UP FOR INPUT
}'ARBUC}%SET'CIOS'OUTPUT _ 44;*}(SET UP FOR OUTPUT
* CIOS INPUT/OUTPUT
}(ARBUC}%PRINT'STRING _ 45;*}+WRITE STRING ON CIOS
}'ARBUC}%PRINT'CHAR _ 46;*}-WRITE (= BUFFER) CHAR ON CIOS
}'ARBUC}%START'OUTPUT _ 47;*}+DUMP OUTPUT BUFFER
}'STUC}&READ'LINE _ 48;*}.READ NEXT INPUT LINE
*STUC}&EDIT'LINE _ 49;*}.EDIT CURRENT LINE
}(CHRUC}%READ'CHAR _ 50;*}.READ NEXT CHARACTER
}'ARBUC}%BLOCK'OB'EMPTY _ 51;*})WAIT UNTIL OUT BUFFER IS EMPTY

* USER PROFILE
}(STUC}&READ'UP'ITEM _ 60;*}+READ ITEM FROM USER PROFILE
}'STUC}&READ'UP'NAMES _ 61;*}*READ NAMES OF UP ITEMS
}'ARBUC}%SET'UP'ITEM _ 62;*},SET (CREATE) VALUE OF UP ITEM
}'ARBUC}%SET'UP'ACCESS _ 63;*}*SET ACCESS TO UP ITEM
}'LNUC}&FIND'MIB _ 64;*}/CONVERT USER NAME/NUMBER TO MIB ADDR
}'ARBUC}%CREATE'UP'ENTRY _ 65;*}(CREATE USER/UP ENTRY
}'ARBUC}%DELETE'UP'ENTRY _ 66;*}(DELETE USER/UP ENTRY

}'END;

}'COMMON}$DECDECS;
*
* SHORT DECLARATION MACROS FOR SPL
*

}(MACRO}%INT _ DECLARE INTEGER;
}'MACRO}%OCT _ DECLARE OCTAL;
}'MACRO}%PTR _ DECLARE POINTER;
}'MACRO}%CHR _ DECLARE CHARACTER;
}'MACRO}%ST}"_ DECLARE STRING;
}'MACRO}%LN}"_ DECLARE LONG;
}'MACRO}%LNLN _ DECLARE LONGLONG;
}'MACRO}%LB}"_ DECLARE LABEL;

}(MACRO}%OCTFL _ DECLARE OCTAL FIELD;
}'MACRO}%INTFL _ DECLARE INTEGER SIGNED FIELD;
}'MACRO}%PTRFL _ DECLARE POINTER FIELD;
}'MACRO}%CHRFL _ DECLARE CHARACTER FIELD;
}'MACRO}%STFL}"_ DECLARE STRING FIELD;
}'MACRO}%LNFL}"_ DECLARE LONG FIELD;
}'MACRO}%FNFL}"_ DECLARE FUNCTION FIELD;

}(MACRO}%INTARY _ DECLARE INTEGER ARRAY;
}'MACRO}%OCTARY _ DECLARE OCTAL ARRAY;
}'MACRO}%PTRARY _ DECLARE POINTER ARRAY;
}'MACRO}%CHRARY _ DECLARE CHARACTER ARRAY;
}'MACRO}%STARY}"_ DECLARE STRING ARRAY;
}'MACRO}%LNARY}"_ DECLARE LONG ARRAY;
}'MACRO}%LBARY}"_ DECLARE LABEL ARRAY;
}'MACRO}%FLARY _ DECLARE FIELD ARRAY;
}'MACRO}%FNARY _ DECLARE FUNCTION ARRAY;

}(MACRO}%INTARY1 _ DECLARE INTEGER ARRAYONE;
}'MACRO}%PTRARY1 _ DECLARE POINTER ARRAYONE;

}(MACRO}%INTFN _ DECLARE INTEGER FUNCTION;

}(MACRO}%ARBENT _ UNKNOWN ENTRY;
}'MACRO}%INTENT _ INTEGER ENTRY;
}'MACRO}%OCTENT _ POINTER ENTRY;
}'MACRO}%PTRENT _ POINTER ENTRY;
}'MACRO}%CHRENT _ CHARACTER ENTRY;
}'MACRO}%STENT _ STRING ENTRY;
}'MACRO}%LNENT _ LONG ENTRY;
}'MACRO}%LBENT _ LABEL ENTRY;
}'MACRO}%ARYENT _ ARRAY ENTRY;
}(MACRO}%ARBEXT _ DECLARE UNKNOWN EXTERNAL;
}'MACRO}%INTEXT _ DECLARE INTEGER EXTERNAL;
}'MACRO}%OCTEXT _ DECLARE OCTAL EXTERNAL;
}'MACRO}%PTREXT _ DECLARE POINTER EXTERNAL;
}'MACRO}%CHREXT _ DECLARE CHARACTER EXTERNAL;
}'MACRO}%STEXT _ DECLARE STRING EXTERNAL;
}'MACRO}%LNEXT _ DECLARE LONG EXTERNAL;
}'MACRO}%LBEXT _ DECLARE LABEL EXTERNAL;
}'MACRO}%ARYEXT _ DECLARE ARRAY EXTERNAL;


}(MACRO}%LTABLE(F) _ F$FLDWDSP+1;
}'INTFL}%FLDWDSP(0: 13,23);

* LENGTHS OF NAMES
}(INT}'LMN _ 4, LTY _ 1, LFN _ LMN+LTY;
}'INT}'NBY _ 4, LNCH _ 24/NBY, NMNCH _ LMN*NBY,
}(NTYCH _ LTY*NBY, NFNCH _ LFN*NBY, NCMCH _ 90;

}'END;

}'COMMON}$MACHINE'DECS; INCLUDE DECDECS;
*
* DECLARATIONS FOR MACHINE-DEPENDENT PROGRAMMING
*

* LOW-G DEFINITIONS
}(PTR}'STACK'PTR = G'[2], STACK'LIM = G'[3],
}(RTRAP'PARAM = G'[5], RTRAP'LOC = G'[4];

* FIELDS IN BLL DESCRIPTOR
}(PTRFL}%BRDPC(0: 6,23), BRDLR(1: 6,23);

* STATE DEFINTIONS
}(INT}'PSTLOC _ 0, ASTLOC _ 1, BSTLOC _ 2, CSTLOC _ 3, DSTLOC _ 4,
}(XSTLOC _ 5, LSTLOC _ 6, GSTLOC _ 7, ESTLOC _ 8, SSTLOC _ 9,
}(LSTATE _ 10;

* FIELDS FOR TRAP DEFINITIONS
}(PTRFL}%ADDR(0: 6,23); OCTFL SP'TNO(-2), SP'TPAR(-1),
}(BLL'CLASS(0: 3,5), UTSE'CLASS(0: 0,1),
}(UTSE'SPTNO(0: 1,5), UTSE'RTNO(0: 2,5);

}'END;

}'COMMON}$COMDECS; INCLUDE DECDECS, SYSCALLS;
*
* COMMON DECLARATIONS FOR CODING
*

* GENERALLY USEFUL MACROS

}(MACRO}%NAMSET(S,L,A,B) _ SETUP(S,L,A,B) & S$WP _ S$EP;
}'MACRO}%EMPTY(S) _ LNGDES(S$RP, S$WP) <= 0;*** WP=RP OR WP=BP?
}'MACRO}%REPEAT _ WHILE 1 DO;
}'MACRO}%ENDRPT _ ENDFOR;
}'MACRO}%FDISP(F) _ RUNTIME'FAILURE() IF F$FLDSTB # 0 OR
}(F$FLDSIZE # 24 ELSE F$FLDWDSP;
}'OCTFL}%FLDSTB(0: 8,12), FLDSIZE(0: 3,7);

* ERROR MACROS
}(MACRO}%NC'PUNT _ RUNTIME'FAILURE();* FOR NORMAL CALLS (EXPRESSIONS)
}'MACRO}%LF'PUNT _ VALUE NC'PUNT;* FOR LIBRARY FUNCTIONS
}'MACRO}%SF'PUNT _ LF'PUNT: ERCODE, ERMSNO;* FOR SYSTEM CALLS

* QUIT ACTION MACROS
}(MACRO}%QUIT'PUNT(L) _ VALUE GOTO L IF ERCODE = 'QIT' ELSE
}(RUNTIME'FAILURE(): ERCODE, ERMSNO;
}'MACRO}%QUIT'PUNTX(L, X) _ VALUE GOTO L IF ERCODE = 'QIT' ELSE
}(RUNTIME'FAILURE(): X, ERCODE, ERMSNO;

* PARAMETRIC CHARACTER DEFINITIONS
}(CHR}'SCHERALD _ '>' /* SUB-COMMAND HERALD */,
}(BELCH _ 303B /* BELL */, NULCH _ 300B /* NULL */,
}(NLCH _ 307B /* NEW LINE */,
}(LFCH _ 310B /* LINE FEED */,
}(MBCH _ 200B /* ZERO MULTIPLE BLANKS */,
}(SQTCH _ '&'' /* SINGLE QUOTE */,
}(DQTCH _ '"' /* DOUBLE QUOTE */,
}(SEPCH _ '-' /* SEPARATOR */;

* STRING POINTER FIELDS
}(OCTFL}%BP(0) /* BEGINNING */, RP(1) /* READER */,
}(WP(2) /* WRITER */, EP(3) /* END */;
* CHARACTER FIELDS
}(CHRFL}%CH0(0: 0,7), CH1(0: 8,15), CH2(0: 16,23);
* BEAD LENGTH FIELD
}(PTRFL}%LENGF(-1: 6, 23);
* FIELDS IN UTILITY FILE NAME
}(LNFL}&UFNUN(0) /* USER NUMBER/DISK ADDRESS */;
}'OCTFL}%UFNEN(2) /* OBJECT ENTRY-NUMBER */,
}(UFNFN(3) /* FILE NAME */, UFNMN(3) /* MAIN NAME */,
}(UFNTY(3+LMN) /* TYPE WORD */;

* FIELDS FOR UNO/DKA
}(OCTFL}%UNDKUN(0),
}(UNDKDK(1);

}(INT}'LUFN _ LTABLE(UFNTY);* LENGTH OF UTILITY FILE:NAME

}(INT}'CB'PMT _ 1;* PMT ADDRESS OF CONTEXT BLOCK

* DECLARATIONS OF COMMON FUNCTIONS

* SPL RUNTIME FUNCTIONS
*ARBEXT}$SCOPY, APPEND, CNS, RUNTIME'FAILURE;
}(ARYEXT LBARY'KLUDGE;*, AR'DESC;
}'PTREXT}$SBASE; INTEXT ARRAYUB, ARRAYLB;* STEXT ST'DESC;
}'LNEXT}%LONG'ADD, LONG'SUB; INTEXT LONG'LE, LONG'LT;

* STORAGE ALLOCATOR
}(PTREXT}$STKMAKE;*, MAKE, SETZONE;
*ARBEXT}$STORINIT, SELZONE, EXTZONE, FREE, FREEZONE;

}'END;

}'COMMON}$UQNDECS; INCLUDE DECDECS;

* UNIQUE NAME FIELDS
}(OCTFL}%UQNTY(0: 0,1), UQNPMB(0: 0,0), UQNLFB(0: 1,1),
}(UQNOWN(0: 2,17), UQNHFN(0: 18,23);
}'OCTFL}%UQNLFN(1: 0,12), UQNLPN(1: 13,23),
}(UQNSFN(1: 0,15), UQNSPN(1: 16,23);

}'END;

}'COMMON}$BFSDECS; INCLUDE UQNDECS;

* OBJECT TYPE-CODES
}(INT}'SIBSFCD _ 0, SIBLFCD _ 1, SIBPRCD _ 2, SIBAKCD _ 3,
}(SIBRSCD _ 4, SIBOWCD _ 5, SIBFRCD _ 6,
}(SIBSCCD _ 14, SIBLKCD _ 15;

* ACCESS KEY FIELDS
}(OCTFL}%ACK0(0), ACK1(1:0,7), ACKUN(1:8,23);
}'INT}'NORM'FIL'AC _ 0357B;* P(NO) F(RW) O(OW) - NORMAL ACCESS

}'END;

}'COMMON}$OFTDECS; INCLUDE BFSDECS;

* FIELDS IN OFT
}(OCTFL}%OFTUB(0: 0,0), OFTRB(0: 1,1), OFTWB(0: 2,2), OFTXB(0: 3,3),
}(OFTOB(0: 4,4), OFTMIX(0: 6,12),
}(OFTAL(0: 15,23);* BETTER CHECK THIS WITH REVISION

}(OCTFL}%OFTCL(1: 15,23),
}(OFTOT(2: 0,3), OFTPIB(2: 8,15), OFTPMIB(2: 16,23);
}'LNFL}&OFTUN(3);

}(INT}'NOFT _ 16, LOFT _ LTABLE(OFTUN)+1;

}'END;

}'COMMON}$SIBDECS; INCLUDE BFSDECS;
*
* DECLARATIONS FOR SIB
*

* FIELDS IN SIB NAME (SIBN)
}(OCTFL}%SIBNOT(0: 1,4),
}(SIBNLN(0: 10,23),
}(SIBNAA(1: 1,4), SIBNEN(1: 10,23),
}(SIBNMN(2), SIBNFN(2);
}'OCTFL}%SIBNTY(SIBNMN$FLDWDSP+LMN),
}(SIBNLL(SIBNTY$FLDWDSP+1: 4,11),
}(SIBNAC(SIBNLL$FLDWDSP: 12,23);
}'OCTFL}*SIBNPA(SIBNAC$FLDWDSP: 12,15),
}(SIBNFA(SIBNAC$FLDWDSP: 16,19),
}(SIBNOA(SIBNAC$FLDWDSP: 20,23);

}(INT}'LSIBN _ LTABLE(SIBNOA);* LENGTH OF SIBN TABLE

* FIELDS IN SIB VALUE (SIBV)
}(OCTFL}%SIBVOT(0: 1,4),
}(SIBVLN(0: 10,23),
}(SIBVAA(1: 1,4), SIBVEN(1: 10,23);
}'LNFL}&SIBFLUN(2);
}'OCTFL}%SIBFLLEN(4),
}(SIBFLWD(5),
}(SIBFLRD(6);

}(LNFL}&SIBLKUN(2);
}'OCTFL}%SIBLKEN(4),
}(SIBLKMN(5),
}(SIBLKTY(5+LMN);

}(INT}'LSIBFL _ LTABLE(SIBFLRD), LSIBLK _ LTABLE(SIBLKTY),
}(LSIBV _ (LSIBFL IF LSIBFL > LSIBLK ELSE LSIBLK);
}'INT}'MLSIB _ (LSIBV IF LSIBV > LSIBN ELSE LSIBN);

}'END;

}'COMMON}$PMTDECS; INCLUDE UQNDECS;

* FIELDS FOR PMT ENTRY
}(LNFL}&PMTUN(0);
}'OCTFL}%PMTFL(2: 0,0), PMTDKA(2: 2,23),
}(PMTRO(3: 0,0), PMTAL(3: 3,11), PMTCL(3: 15,23);

}(INT}'NPMT _ 128;* NUMBER OF PMT ENTRIES
}'INT}'LPMT _ 5;* SIZE OF PMT ENTRY

}'END;

}'COMMON}$SPTDECS; INCLUDE DECDECS;

* FIELDS IN SPCS
}(OCTFL}%SPCSNIS(0: 0,0), SPCSNIC(0: 1,1),
}(SPCSCSP(0: 2,5), SPCSPR(0: 6,23),
}(SPCS940M(1: 0,0), SPCSR0SP(1: 2,5), SPCSLR(1: 6,23),
}(SPCSR1SP(2: 2,5), SPCSGR(2: 6,23);
}'LNFL}&SPCSIT(3);
}'INT}'LSPCS _ LTABLE(SPCSIT) + 1;

}(INT}'NSPT _ 8;

}'END;

}'COMMON}$ATTACHDECS; INCLUDE DECDECS;
*
* DEFINITION OF ATTACH (PI) FILE HEADER
*
}(OCTFL}%ATFMT(0), ATNP(1), ATMAP(3), ATMNM(38),
}(ATCUF(43), ATEP(44), ATEG(45);
}'OCTFL}%BYTEC(0: 12,13), BYTEP(0: 16,23);

}(INT}'FMTCODE _ 0;* VALUE OF CURRENT FORMAT

}'END;

}'COMMON}$ICTDECS; INCLUDE DECDECS;

* FIELDS IN ICT
}(OCTFL}%ICTSRC(0: 0,2) /* SOURCE */,
}(ICTACT(0: 3,5) /* ACTION */,
}(ICTSPEC(0: 6,10) /* SUB-PROCESS/TRAP */,
}(ICTBLK(0: 11,11) /* BLOCKING */,
}(ICTCL(0: 15,23) /* CONTROL LOCK */;
}'LNFL}&ICTTM(1);* REAL/COMPUTE TIME VALUE

}(INT}'NICT _ 24, LICT _ LTABLE(ICTTM) + 1;

* VALUES FOR SOURCE-ACTION-BLOCK PARAMETER OF SET'ICT
}(MACRO}%ICT'SAB(S, A, B) _ S @ ICTSRC V' A @ ICTACT V' B @ ICTBLK;
}'INT}'ICTNULCD _ ICT'SAB(0, 0, 0) /* NULL */,
}(ICTBLKCD _ ICT'SAB(1, 0, 1) /* BLOCKING */,
}(ICTTRPCD _ ICT'SAB(1, 2, 1) /* TRAP */,
}(ICTRTICD _ ICT'SAB(2, 1, 1) /* REAL-TIME INTERRUPR */;

}'END;

}'PROGRAM}#LABEL'KLUDGE; INCLUDE DECDECS;
*
* CONVERT SOURCE-RELATIVE LABEL ARRAY TO ABSOLUTE
*
}(LB}(L; LBARY A;


}(ARYENT}$LBARY'KLUDGE(A); RETURN A;

}'END;

}'PROGRAM}#LONG'COMPARE; INCLUDE DECDECS;
*
* COMPARE LONG VALUES
*
}(PTR}'P, Q; INT N;
}'DECLARE INTEGER FIELD W0(0);

}(INTENT}$LONG'COMPARE(INTEGER @P, INTEGER @Q, N);

}(RETURN 1 IF P[N].W0 # Q[N].W0 FOR N _ N - 1 BY -1 TO 0;
}'RETURN 0;

}'END;

}'PROGRAM}#SCOPY; INCLUDE COMDECS;
}'PTR}'P; ST S, D; STFL A(0);

}(ARBENT}$SCOPY(STRING @P, S), FRETURN;
}'D _ P.A; P.RP _ D$WP _ D$RP _ D$BP; GOTO L;

}(ARBENT}$APPEND(STRING @P, S), FRETURN;
}'D _ P.A;

****}&CHECK STRING CHARACTER SIZES FOR COMPATABILITY
L:
}(REPEAT;}#WCI(GCI(S// VALUE P.WP _ D$WP & RETURN), D// FRETURN); ENDRPT;

}'END;

}'PROGRAM}#ST'DESC; INCLUDE COMDECS;
}'INT}'N, S, O; PTR P; ST X;
}'STENT}%ST'DESC(N, P, S, O);

}(P _ MAKE(S *(N + 24 / S - 1)/ 24) IF P = 0;

}(IF S = 8 DO;
}+.LDA 44B6;
}'ELSEIF S = 6 DO;
}+.LDA 40B6;
}'ELSEIF S = 12 DO;
}+.LDA 50B6;
}'ELSEIF S = 24 DO;
}+.LDA 54B6;
}'ELSE DO;
}+RUNTIME'FAILURE();
}'ENDIF;

}(.IOR P; .XMA O; .LSHA 18; .IOR O; .LDX -1; .ASP; .CXA;
}'.STA X$BP; .STA X$RP; .STA X$WP; .LDX N; .ASP; .STX X$EP;
}'RETURN X;

}'END;

}'PROGRAM}#AR'DESC; INCLUDE COMDECS;
}'INT}'N, S, O; PTR P;
}'ARYENT}$AR'DESC(N, P, S, O);

}(N _ N - 1 IF O = 0;
}'RUNTIME'FAILURE() IF S > 63 OR S < 1 OR S > 3 AND N > 17777B OR
}(N > 377777B OR N < O OR O # 0 AND O # 1;

}(P _ MAKE((N + 1 IF O = 0 ELSE N)* S) IF P = 0;

}(.LDA S; .SUB 1; .ICP 3; .BGT R'[3]; .IOR 100B; .LSHA 6; .LSHA 11;
}'.IOR N; .CPZ O; .BEQ R'[2]; .IOR 1B7; .IOR 6B7; .CAB;
}'.LDA P; .IOR 4B6; .XAB; RETURN;

}'END;

}'PROGRAM}#CNS; INCLUDE COMDECS;
}'INT}'N, F, R, T, I, D; PTR P; ST S, B(25); STFL A(0);

}(ARBENT}$CNS(N, STRING @P, F, R), FRETURN;

}(S _ P.A;
}'FRETURN IF R < 2 OR R > 36;
}'T _ (-N IF F >= 0 AND N < 0 ELSE N);
}'B$RP _ B$WP _ B$EP; I _ 0;
LP:}$.LDA T; .LSHD -23; .DIV R; .STA T; .STB D;
}'WCD(D +('0' IF D < 10 ELSE 'A'-10), B);
}'I _ I + 1; GOTO LP IF T # 0;
}'WCD('-', B) & I _ I + 1 IF F >= 0 AND N < 0;
}'F _ F A' 77B;
}'IF F = 0 DO;
}+F _ I;
}'ELSEIF F <= I DO;
}+B$RP _ INCDES(B$EP, -I);
}'ELSE DO;
}+WCI(' ', S// FRETURN) FOR I _ I + 1 TO F;
}'ENDIF;
}'WCI(D, S// FRETURN)
}(FOR D _ GCI(B// VALUE P.WP _ S$WP & RETURN) WHILE 1;

}'END;

}'PROGRAM}#CSN; INCLUDE COMDECS;
}'PTR}'P; INT R, F, D, N; ST S; STFL A(0);

}(INTENT}$CSN(STRING @P, R), FRETURN;

}(S _ P.A; FRETURN IF R < 2 OR R > 36;

}(IF D _ GCI(S// FRETURN) = '-' OR D = '+' DO;
}+F _ (1 IF D = '-' ELSE 0); D _ GCI(S// FRETURN);
}'ELSE DO;
}+F _ 0;
}'ENDIF;

}(D _ D - '0' IF D >= '0' AND D <= '9' ELSE
}(D _ D - ('A'-10) IF D >= 'A' AND D <= 'Z' ELSE FRETURN;
}'FRETURN IF D >= R; N _ D;

}(FOR D _ GCI(S// Y) REPEAT;
}+D _ D - '0' IF D >= '0' AND D <= '9' ELSE
},D _ D - ('A'-10) IF D >= 'A' AND D <= 'Z' ELSE GOTO X;
}+GOTO X IF D >= R; N _ N * R + D;
}'ENDRPT;

X:}&S$RP _ INCDES(S$RP, -1);
Y:}%P.RP _ S$RP; RETURN (-N IF F ELSE N);

}'END;

}'PROGRAM}#SBASE; INCLUDE COMDECS;
*
* FIND BASE ADDRESS OF WORD-ORIGINED STRING DESCRIPTOR
*
}(ST}(S;

}(PTRENT}$SBASE(S);
}'.LDA S$BP; .LDX 1; .ASP; .CXA;
}'.CMZ 3B6; .BNE L; .ETR 777777B; RETURN;
L:}%RUNTIME'FAILURE();

}'END;

}'PROGRAM}#ALENGTH; INCLUDE COMDECS;
*
* COMPUTE ARRAY BOUNDS
*
}(PTR}'A; OCTFL ABW(0);
}'INTENT}$ARRAYUB(A);
}'.LDA A.ABW; .CMZ 2B6; .BNE R'[2]; .ETR 17777B;
}'.ETR 377777B; RETURN;

}(INTENT}$ARRAYLB(A);
}'.LDA A.ABW; .ETR 1B7; .ASHA -21; RETURN;

}'END;

}'PROGRAM}#LONG'ARITH; INCLUDE COMDECS;
*
* LONG ARITHMETIC/RELATIONALS
*
}(LN}(X, Y; OCTFL W0(0), W1(1);

}(LNENT}%LONG'ADD(X, Y);* ADD
}'.LDA X$W1, ADD Y$W1, CAB;
}'.LDA X$W0, ADC Y$W0; RETURN;

}(LNENT}%LONG'SUB(X, Y);* SUBTRACT
}'.LDA X$W1, SUB Y$W1, CAB;
}'.LDA X$W0, SUC Y$W0; RETURN;

}(INTENT}$LONG'LE(X, Y);* LESS THAN OR EQUALS
}'RETURN (1 IF LONG'SUB(X, Y)$W0 <= 0 ELSE 0);

}(INTENT}$LONG'LT(X, Y);* LESS THAN
}'RETURN (1 IF LONG'SUB(X, Y)$W0 < 0 ELSE 0);

}'END;

}'COMMON ALLOC'DECS;

*
* SPL STORAGE ALLOCATOR
*

* THE BASIC STRUCTURE OF A STORAGE BLOCK IS AS IN THE OLD ALLOCATOR,
* I.E. THE WORD BEFORE THE 0'TH WORD OF A BLOCK CONTAINS THE LENGTH
* OF THE BLOCK (NUMBER OF INFORMATION WORDS +1), A FLAG IN BIT 0
* TO SAY THAT THE BLOCK IS FREE, AND A FLAG IN BIT 1 TO SAY THAT
* THE NEXT LOWER BLOCK IS FREE.
}(DECLARE FIELD HIDDEN(-1), HSIZE(-1: 6,23), HFREE(-1: 0,0),
}(HFTAG(-1: 1,1), HZTAG(-1: 2,2);
* FREE STORAGE COMES IN ZONES.}"A ZONE CONSISTS OF A ZONE HEADER
* AND A CHAIN OF EXTENSIONS.}"THE ZONE HEADER CONTAINS: THE BLOCK
* SIZE FOR THE ZONE (0 MEANS ALL SIZES ARE ALLOWABLE), THE OVERFLOW
* ROUTINE, THE EXTENSION LIST, AND THE FREE LIST ROVER.
}(DECLARE FIELD FEXT(0), FLIST(2), FUEXT(3), FUNCTION FIELD FOVX(1);
}'DECLARE PARAMETER FZHS_4;
* THE FEXT WORD IN EACH EXTENSION POINTS TO THE NEXT ONE.}"THIS CHAIN,
* IS TERMINATED BY A -1.}"THE FIRST TWO WORDS
* OF A FREE BLOCK ARE USED TO HOLD THE ADDRESS OF THE NEXT FREE
* BLOCK AND THE PREVIOUS FREE BLOCK.}"THIS LIST IS CIRCULAR.
}(DECLARE FIELD NBLK(0),PBLK(1);
* FOR FIXED-SIZE ZONES, THE ENTIRE FREE LIST AND THE HIDDEN WORDS
* ARE SET UP AT THE TIME AN EXTENSION IS CREATED.}"FOR VARIABLE-SIZED
* ZONES, AN EXTENSION IS SET UP AS A SINGLE FREE BLOCK WHICH IS
* SUBDIVIDED AS THE NEED ARISES.}"A FIRST-FIT STRATEGY WITH A "ROVER"
* IS USED FOR THE LATTER.}"BLOCKS BELOW A MINIMUM SIZE WILL NOT BE CREATED.
}(DECLARE PARAMETER MINSIZ_3;

}(DECLARE INFINITY'ZONE, CURRENT'ZONE;* ZONE VARIABLES FOR ALLOCATOR

}'END;

}'PROGRAM}#STKMAKE; INCLUDE ALLOC'DECS;
}'FIXED;
*
* ALLOCATE LOCAL (STACKED) STORAGE
*
}(DECLARE}#SP=G'[2], SL=G'[3], BLK, SIZE;

}(FUNCTION}"STKMAKE(SIZE);

}(RUNTIME'FAILURE() IF SP + SIZE >= SL;
}'SP _ (BLK _ SP + 1) + SIZE;
}'BLK.HIDDEN _ SIZE + 1;
}'BSET(BLK, 0, SIZE);
}'RETURN BLK;

}'END;

}'PROGRAM MAKE; INCLUDE ALLOC'DECS;
*
* ASSIGN BLOCK OF SIZE (A) IN ZONE (B)
*
}(DECLARE BLK,ROVER,RSIZE,EBLK,ROVEC;

}(FUNCTION MAKE(SIZE,ZONE);

}(ZONE _ CURRENT'ZONE IF ZONE = 0;
}'SIZE _ SIZE + 1;
}'GOTO MAKEOV IF ZONE.FLIST<0;
* VARIABLE-SIZED ZONE
}(ROVEC_ROVER_ZONE.FLIST;
MAKE1: RSIZE_ROVER.HSIZE;
}'IF RSIZE<SIZE+MINSIZ AND RSIZE#SIZE DO;
}+GOTO MAKE1 IF (ROVER_ROVER.NBLK)#ROVEC
},ELSE GOTO MAKEOV;
}'ENDIF;
}'EBLK_(BLK_ROVER)+ROVER.HSIZE;
}'EBLK.HFTAG_0;
}'IF ROVER.HSIZE=SIZE DO;
* EXACT FIT
},BLK.HFREE_0;
}+ZONE.FLIST _ RFB(ROVER, ZONE);
}'ELSE DO;
* SPLIT THE BLOCK
},BLK_EBLK-SIZE;
}+BLK.HIDDEN _ 1 @ HFTAG + SIZE;
}+BLK[-2]_-(ROVER.HSIZE_ROVER.HSIZE-SIZE);
}'ENDIF;
* COMMON EXIT
}(BSET(BLK, 0, SIZE - 1);
}'RETURN BLK;

* OVERFLOW
MAKEOV: BLK _ (ZONE.FOVX)(SIZE-1,ZONE); RETURN BLK;

}'END;

}'PROGRAM RFB; INCLUDE ALLOC'DECS;
}'FUNCTION RFB(RBLK, ZONE);
* SUBROUTINE TO REMOVE A BLOCK FROM THE FREELIST
}(IF RBLK.NBLK=RBLK DO;
}+RETURN ZONE.FLIST_-1;
}'ELSE DO;
}+RBLK.NBLK.PBLK_RBLK.PBLK;
}+RETURN RBLK.PBLK.NBLK_RBLK.NBLK;
}'ENDIF;

}'END;

}'PROGRAM FREE; INCLUDE ALLOC'DECS;
*
* RELEASE BLOCK (A) TO ZONE (B)
*
}(DECLARE EXPTR,EFB,PFB;

}(FUNCTION FREE(BLK,ZONE);
}'EFB_BLK+BLK.HSIZE;
}'ZONE _ CURRENT'ZONE IF ZONE = 0;
}'BLK.HFREE_1;
* VARIABLE-SIZED ZONE
* CHECK FOR MERGE WITH NEXT HIGHER BLOCK
}(IF EFB.HFREE DO;
}+BLK.HIDDEN_BLK.HIDDEN+EFB.HSIZE;
}+RFB(EFB, ZONE);
}+EFB _ BLK + BLK.HSIZE;
}'ENDIF;
* CHECK FOR MERGE WITH NEXT LOWER BLOCK
}(IF BLK.HFTAG DO;
}+PFB_BLK+(BLK[-2] IF BLK[-2]<0 ELSE -3);
}+PFB.HIDDEN_PFB.HIDDEN+BLK.HSIZE;
}+RFB(BLK _ PFB, ZONE);
}'ENDIF;
* CLEAN UP
}(EFB.HFTAG_1;
}'EFB[-2]_-BLK.HSIZE;
}'FPB(BLK, ZONE);
}'RETURN;

}'END;

}'PROGRAM FPB; INCLUDE ALLOC'DECS;
* SUBROUTINE TO PUT A BLOCK ON THE FREELIST
}(DECLARE ZFP,ZNBP;

}(FUNCTION FPB(BLK, ZONE);
}'ZFP_ZONE.FLIST;
}'IF ZFP<0 DO;
}+ZONE.FLIST_BLK.NBLK_BLK.PBLK_BLK;
}'ELSE DO;
}+ZNBP_ZFP.NBLK;
}+ZFP.NBLK_ZNBP.PBLK_BLK;
}+BLK.NBLK_ZNBP;
}+BLK.PBLK_ZFP;
}'ENDIF;
}'RETURN;

}'END;

}'PROGRAM SELZONE; INCLUDE ALLOC'DECS;

}(FUNCTION SELZONE(ZONE);
}'CURRENT'ZONE _ ZONE; RETURN;

}'END;

}'PROGRAM STORINIT; INCLUDE ALLOC'DECS;
*
* SET UP ZONES
*

}(FUNCTION STORINIT(ZONE, SIZE), FRETURN;
}'(ZONE _ ZONE + 1).HIDDEN _ SIZE;
}'SETZONE(ZONE// FRETURN);
}'CURRENT'ZONE _ INFINITY'ZONE _ ZONE; RETURN;

}'END;

}'PROGRAM SETZONE; INCLUDE ALLOC'DECS;
*
* INITIALIZE ZONE
*
}(DECLARE FAREA, FUNCTION DUMBFUCN _ OFLOTRAP;

}(FUNCTION SETZONE(ZONE), FRETURN;
}'FRETURN IF ZONE.HSIZE<FZHS+MINSIZ+4;
}'ZONE.HZTAG _ 1;
}'ZONE.FOVX _ DUMBFUCN;
}'ZONE.FLIST _ -1;
}'ZONE.FUEXT _ 0;
}'FAREA _ ZONE + (FZHS+1);
}'FAREA.HIDDEN_ZONE.HSIZE-(FZHS+1);
}'EXTZONE(FAREA, ZONE// VALUE RUNTIME'FAILURE());
}'ZONE.FEXT _ -1; RETURN ZONE;

}'END;

}'PROGRAM EXTZONE; INCLUDE ALLOC'DECS;
*
* ADD EXTENSION (B) TO ZONE (A)
*
}(DECLARE EEXT,EXB;

}(FUNCTION EXTZONE(EXT, ZONE), FRETURN;
}'FRETURN IF EXT.HSIZE<MINSIZ+2;
}'EEXT_EXT+EXT.HSIZE;
}'EXT.FEXT_ZONE.FEXT;
}'ZONE.FEXT_EXT;
}'EXB_EXT+2;
}'EXB.HIDDEN _ (1@HFREE-3) + EXT.HSIZE;
}'(EEXT - 1).HIDDEN _ 1 @ HFTAG;
}'FPB(EXB, ZONE);
}'RETURN;

}'END;

}'PROGRAM FREEZONE; INCLUDE ALLOC'DECS;
*
* DELETE ZONE (A)
*
}(DECLARE ZEPTR;

}(FUNCTION FREEZONE(ZF,ZF1);
}'SELZONE(INFINITY'ZONE) IF ZF = CURRENT'ZONE;
FZONE1:ZEPTR_ZF.FEXT; FREE(ZF,ZF1);
}'GOTO FZONE1 IF (ZF_ZEPTR)>=0;
}'RETURN;

}'END;

}'COMMON}$USERDECS; INCLUDE COMDECS;
*
* DECLARATIONS FOR USER PROGRAMS
*
}(ST}(OL(NCMCH);* OUTPUT BUFFER FOR USER CONSOLE OUTPUT
}'INTARY SP'GSTATE[10],STATE[10];
}'INT}'QUIT'FLAG;* GLOBAL QUIT FLAG
}'PTR}'INITIAL'SP _ 3200B, NORMAL'SL _ 3777B,
}(STORAGE'AREA _ 400B /* CHANGE FOR PARTICULAR CASES */;
}'INT TF;

* OUTPUT MACROS
}(MACRO}%IOUT() _ SETS(OL, 0,0);
}'MACRO}%PTCH(C) _ WCI(C, OL);
}'MACRO}%PTST(S) _ APPEND(OL, S// LF'PUNT);
}'MACRO}%PTNO(N, F, R) _ CNS(N, OL, F, R// LF'PUNT);
}'MACRO}%PTDN(N) _ PTNO(N, 4B7, 10);
}'MACRO}%PTON(N) _ PTNO(N, 4B7, 8);
}'MACRO}%PTNL() _ WCI(NLCH, OL);
}'MACRO}%PTIS(S) _ SCOPY(OL, S// LF'PUNT);
}'MACRO}%PTOL() _ PRINT'STRING(-1,OL,0//QUIT'PUNTX(QT'XIT,OL));

}'END;

}'PROGRAM}#USER'ENTRIES; INCLUDE USERDECS, MACHINE'DECS;
*
* ENTRY POINTS
*
}(MACRO SAVE'STATE(X)_.STX X[5],EAX X[0],STORS,MIN TF;
}'INT ERMSNO; CHR ERCODE;
}'LB R=L'[0];
}'PTR SA;

}(ARBENT XXXSPT(),SP'ENTRY_0;
}'SAVE'STATE(SP'GSTATE);
}'ALLOW'INTS();
}'SA_@STATE[0]; BCOPY(SA,@SP'GSTATE[0],10);
}'RUNTIME'FAILURE() IF TF#1;
}'TF_0;
}'RUNTIME'FAILURE() IF @R.SP'TNO#23;
}'QUIT'FLAG_1;
}'SA[LSTLOC]_@R;
}'SA[PSTLOC]_@QUITX; .LDA SA,LOADS;
}'SET'SPT'FIELD(-1,'TM',1//SF'PUNT);
QUITX: SP'RETURN(//SF'PUNT);
}'ARBENT}$XXXXXX(), SP'ENTRY _ 2;
}'ARBENT}$XXXXXY(), SP'ENTRY _ 3;

}(.LDA INITIAL'SP, XLA;
}'STACK'PTR _ INITIAL'SP; STACK'LIM _ NORMAL'SL;
}'STORINIT(STORAGE'AREA, INITIAL'SP-STORAGE'AREA-1// LF'PUNT);
}'SET'SPT'FIELD(-1,'TM',1//SF'PUNT);
}'TF_QUIT'FLAG_0;
}'RUN'USER(); RUNTIME'FAILURE();

}'END;

}'PROGRAM}#FTLERR; INCLUDE USERDECS;
*
* ALLOCATOR ERROR FUNCTIONS
*
}(INT}'X, Y;
}'INT ERMSNO; CHR ERCODE;

}(FUNCTION OFLOTRAP(X,Y);
}'FUNCTION RUNTIME'FAILURE();
}'FUNCTION FTLERR();
}'IOUT(); PTST("RUN TIME FAILURE"); PTNL();
}'PRINT'STRING(-1,OL,0//LLL:ERCODE,ERMSNO);
LLL:}#SP'RETURN(//SF'PUNT);

}(END;

}'COMMON PROFILE'MAIN; INCLUDE COMDECS;

}(MACRO}%SF'ERROR _ EREXIT: ERCODE,ERMSNO;


}(INT}#LUPLM_1,LUPTB_18;
}'STARY}"UPCMS[LUPLM]_(6"PROFILE-MAINTENANCE");
}'STARY}"UPCMTB2 [LUPTB ]_(6"CREATE-USER",6"INSTALL-USER",
}(6"CREATE-ENTRY",6"EDIT-ENTRY",6"LIST-ENTRY",
}(6"LIST-USERS",6"LIST-ITEM",
}(6"LIST-NAMES",6"SET-ITEM",
}(6"SET-ACCESS",6"CREATE-ITEM",
}(6"DELETE-ITEM",6"DELETE-ENTRY",
}(6"WRITE-FILE",6"FINISHED",6"HELP",
}(6"LIST-PROCESS-PROFILE",6"EDIT-PROCESS-PROFILE");

}'STARY HELP[33] _ (

}'"CREATE-ENTRY <NAME><TSS#>}"ASSUMES THAT A MIB ALREADY EXISTS FOR",
}'"}4THE USER AND ONLY ESTABLISHES A PROFILE ENTRY.",
}'"CREATE-ITEM <ITEM NAME><ACCESS CODE><TYPE><ITEM VALUE>}"CREATES AN",
}'"}4ITEM UNDER THE ENTRY IT IS CURRENTLY WORKING ON.",
}'"}4ACCESS CODES: 1 MAKES ITEM ACCOUNT READABLE",
}'"}B2 MAKES ITEM USER WRITABLE",
}'"}B4 COPY INTO PROCESS PROFILE",
}'"}B3,5,7 BITWISE COMBINATION",
}'"}4TYPE:})0 DECIMAL NUMBER",
}'"}B1 OCTAL NUMBER",
}'"}B6 SIX BIT CHARACTER",
}'"}B8 EIGHT BIT CHARACTER",
}'"CREATE-USER <NAME>}"CAUSES A MULTIPLE INDEX BLOCK AND A PROFILE",
}'"}4ENTRY TO BE CREATED. IF THE NAME IS &"=N&" WHERE",
}'"}4N IS A NUMBER, THEN N MIB'S WILL BE CREATED",
}'"DELETE-ENTRY}(DELETES THE USER ENTRY",
}'"DELETE-ITEM <ITEM NAME>}"DELETES THE ITEM FROM THE ENTRY",
}'"EDIT-ENTRY [<NAME> OR <TSS#>]}"ALL COMMANDS FOLLOWING THIS OPERATES",
}'"}4ON THE PROFILE ENTRY SPECIFIED BY THE NAME OR",
}'"}4TSS# UNTIL ANOTHER &"EDIT-ENTRY&" IS TYPED",
}'"EDIT-PROCESS-PROFILE}"NOT IMPLEMENTED",
}'"INSTALL-USER <TSS#><USER NAME><PASSWORD>}"ESTABLISHES A COMPLETE PROFILE",
}'"}4ENTRY WITH NORMAL COMMAND && SEARCH LISTS && ACCESS",
}'"FINISHED},EXITS PROFILE-MAINTENANCE",
}'"LIST-ENTRY}*PRINTS ALL INFO IN THE USER ENTRY",
}'"LIST-ITEM <ITEM NAME>}"PRINTS AOUT THE VALUE OF THE ITEM",
}'"LIST-NAMES}*PRINTS ALL THE ITEM NAMES IN THE ENTRY",
}'"LIST-PROCESS-PROFILE}"NOT IMPLEMENTED",
}'"LIST-USERS}*PRINTS THE ENTIRE USER PROFILE IN TSS# SEQUENCE",
}'"SET-ACCESS <ITEM NAME><ACCESS CODE>}"SETS THE ACCESS TO THE ITEM",
}'"SET-ITEM <ITEM NAME><ACCESS CODE><VALUE1>[<VALUE2..>]}"SETS ITEM",
}'"}4TO THE NEW VALUE",
}'"WRITE-FILE}*NOT IMPLEMENTED");

}'END;

}'PROGRAM PMAIN; INCLUDE PROFILE'MAIN,USERDECS;

}(ST}"COMLINE(NCMCH:8),NAME'S(70:8),NAME'ST(70:8),USRNM(70:8),ST2(70:8),
}(NAME'ST2,ST1,NAME'ST1,NAME'ST3;
}'OCTFL}%UPUN(0:0,15);
}'INT}"CHAR,K,LIMIT,NAME,COMFLG,E,P,ERMSNO,ENTNO,I;
}'CHR}"ERCODE;
}'INT}#NOFLG,ITEM,CODE,ON,OFF,UNO,PPFLG;
}'ST}"INP'LINE(20);

}(LBARY}"UPCMS2 [LUPTB ]_(CR'UP'USR,INST'USR,CR'UP'ENT,EDIT'ENT,LIST'ENT,LIST'USRS,
}(LIST'ITM,LIST'NMS,SET'ITM,SET'ACC,CR'ITM,
}(DEL'ITM,DEL'ENT,NOT'IMP,FIN,HELP'USR,LIST'PP,EDIT'PP);

***** TEMPORARY UNTIL UPC IS RECOMPILED WITH UPDATED SCOM
}(STUC}#READ'PP'ITEM _ 71;
}'STUC}#READ'PP'NAMES _ 72;
}'ARBUC}"SET'PP'ITEM _ 73;

}(ENTRY RUN'USER();

}'IOUT(); PTST("PROFILE-MAINT 9.16.77}#'HELP' IS AVAILABLE"); PTNL(); PTOL();
}(K _ READ'SPT'FIELD(-1,'UAK'//SF'PUNT);
COM'LP:
}(NAME'ST1_NAME'S;
}'NAME'ST2_NAME'ST;
}'READ'LINE(-1,COMLINE,">",QUIT'FLAG:COMLINE//
}(QUIT'PUNTX(QT'XIT,COMLINE));
}'GOTO}"COM'LP IF EMPTY(COMLINE);
}'NAME'ST1_GET'PARAM(COMLINE);
}'GOTO UPCMS2[ABRV'LKP(NAME'ST1,UPCMTB2//PARERR: ERCODE,ERMSNO)];
EREXIT:IOUT(); OL_ERRORMSG(ERMSNO,OL//SF'PUNT); GOTO LN'OUT;
*CREATE USER OR ENTRY

}'/* THIS COMMAND CREATES A NEW USER. IT PROVIDES A CONVENIENT}#*/
}'/* METHOD FOR INSTALLING USERS WITH NORMAL PARAMETERS. FOR UN- */
}'/* USUAL INSTANCES REQUIRING DIFFERENT PARAMS, CREATE-ENTRY}$*/
}'/* AND CREATE-ITEM COMMANDS MUST BE USED.}6*/
INST'USR:NAME'ST1 _ GET'PARAM(COMLINE);}&/* GET USER'S TSS NUMBER */
}'IF LENGTH(NAME'ST1) = 0 DO;
}+READ'LINE(-1,COMLINE,"USER TSS NUMBER: ",QUIT'FLAG:COMLINE
}5//QUIT'PUNTX(QT'XIT,COMLINE));
}+GOTO INST'USR;
}'ENDIF;
}'E _ CSN(NAME'ST1//PARERR);
}'NAME'ST1 _ NAME'S;
}'CNS(E,NAME'ST1,0,10//PARERR);}$/* RECOVER NAME'ST1 FOR LATER */

}'/* CHECK TO SEE IF AN ENTRY IS ALREADY THERE */
}'NAME'ST2 _ NAME'ST;
}'READ'UP'ITEM('UP',-1,E,USRNM,"N",NAME'ST2,K:NAME'ST2
}4//NOSTAY:ERCODE,ERMSNO);
}'IOUT(); PTST("USER "); PTST(NAME'ST2); PTST(" IS ASSIGNED TO ");
}'PTST(NAME'ST1); PTNL(); PTOL();
}'READ'LINE(-1,INP'LINE,"DELETE OK? ",QUIT'FLAG:INP'LINE
}1//QUIT'PUNTX(QT'XIT,INP'LINE));
}'GOTO COM'LP IF GC(INP'LINE) # 'Y';
}'DELETE'UP'ENTRY('UP',-1,E,USRNM,K//SF'ERROR);

NOSTAY:NAME'ST3 _ GET'PARAM(COMLINE);},/* GET THE USER NAME */
}'IF LENGTH(NAME'ST3) = 0 DO;
}+READ'LINE(-1,COMLINE,"USER NAME: ",QUIT'FLAG:COMLINE
}5//QUIT'PUNTX(QT'XIT,COMLINE));
}+GOTO NOSTAY;
}'ENDIF;
}'P _ 1;}$/* WE DON'T WANT A MIB CREATED */
}'E _ CREATE'UP'ENTRY('UP',-1,E,NAME'ST3,P,K//SF'ERROR);

}'SCOPY(NAME'ST3,"P"//LF'PUNT);
}'NAME'ST2 _ NAME'ST;
}'NAME'ST2 _ GET'PARAM(COMLINE);
PASSWD:IF LENGTH(NAME'ST2) = 0 DO;
}+NAME'ST2 _ NAME'ST;
}+READ'LINE(-1,NAME'ST2,"PASSWORD: ",QUIT'FLAG:NAME'ST2
}5//QUIT'PUNTX(QT'XIT,NAME'ST2));
}+GOTO PASSWD;
}'ENDIF;
}'NAME'ST2$EP _ NAME'ST2$WP;
}'SET'UP'ITEM('UP',-1,E,USRNM,NAME'ST3,NAME'ST2,K//SF'ERROR);
}'CODE _ 3;}'/* DO NOT COPY INTO PROCESS PROFILE UPON LOGIN */
}'SET'UP'ACCESS('UP',-1,E,USRNM,NAME'ST3,CODE,0,K//SF'ERROR);

}'/* NOW SET COMMAND SEARCH LIST */
}'SCOPY(NAME'ST3,"CSL"//LF'PUNT);
}'NAME'ST2 _ NAME'ST;
}'SCOPY(NAME'ST2,NAME'ST1//LF'PUNT); /* SCOPY USER'S TSS #}'*/
}'APPEND(NAME'ST2,",3"//LF'PUNT);}"/* CSL IS TSS # & SYSTEM 3}$*/
}'NAME'ST2$EP _ NAME'ST2$WP;
}'SET'UP'ITEM('UP',-1,E,USRNM,NAME'ST3,NAME'ST2,K//SF'ERROR);
}'CODE _ 7;}+/* DO COPY INTO PROCESS PROFILE UPON LOGIN */
}'SET'UP'ACCESS('UP',-1,E,USRNM,NAME'ST3,CODE,0,K//SF'ERROR);

}'/* SET FILE SEARCH LIST */
}'SCOPY(NAME'ST3,"FSL"//LF'PUNT);
}'NAME'ST2 _ NAME'ST;
}'/* USER WILL HAVE FILE ACCESS ONLY TO HIS OWN DIRECTORY}(*/
}'SCOPY(NAME'ST2,NAME'ST1//LF'PUNT);
}'NAME'ST2$EP _ NAME'ST2$WP;
}'SET'UP'ITEM('UP',-1,E,USRNM,NAME'ST3,NAME'ST2,K//SF'ERROR);
}'SET'UP'ACCESS('UP',-1,E,USRNM,NAME'ST3,CODE,0,K//SF'ERROR);
}'GOTO COM'LP;

CR'UP'USR:P_0;
}'NAME'ST1 _ GET'PARAM(COMLINE);
}'GOTO CR'LOOP IF CHAR_GC(NAME'ST1)='=';
}'E_0;
CR'UPI:E_NOFLG_CREATE'UP'ENTRY('UP',-1,E,NAME'ST1,P,K//SF'ERROR);
}'PPFLG _ 0; GOTO INFORM IF P=0; GOTO COM'LP;
CR'LOOP: GCI(NAME'ST1//WHAT);
}'LIMIT_CSN(NAME'ST1,10//WHAT);
}'NAME_1;
}'WHILE NAME<LIMIT DO;
}+SETS(NAME'ST1);
}+CNS(NAME+1,NAME'ST1,0,10//WHAT);
}+P_E_0;
}+NAME_CREATE'UP'ENTRY('UP',-1,E,NAME'ST1,P,K//SF'ERROR);
}'ENDFOR;
}'GOTO COM'LP;
WHAT:}"IOUT(); PTNL(); PTST("}"???"); GOTO LN'OUT;
FIN:}#SP'RETURN(//SF'PUNT);
CR'UP'ENT:P_1; NAME'ST1_GET'PARAM(COMLINE);
}'NAME'ST2_GET'PARAM(COMLINE);
}'E_CSN(NAME'ST2//PARERR);
}'GOTO CR'UPI;
NOT'IMP:IOUT(); PTST("SORRY, NOT AVAILABLE AT THIS TIME");
}'GOTO LN'OUT;
EDIT'ENT:PPFLG _ 0;
}'NAME'ST1 _ GET'PARAM(COMLINE);
}'IF GC(NAME'ST1)}">= '0' AND GC(NAME'ST1)}"<= '9' DO;
}+E _ NOFLG _ CSN(NAME'ST1//PARERR); SETS(USRNM,0,0);
}'ELSE DO; NOFLG _ -1; E _ 0;
}+SCOPY(USRNM,NAME'ST1//LF'PUNT);
}'ENDIF;
}'NAME'ST1 _ NAME'ST;
}'READ'UP'ITEM('UP',-1,E,USRNM,"#",NAME'ST1,K:NAME'ST1//SF'ERROR);
}'GOTO COM'LP;

EDIT'PP:PPFLG _ 1; GOTO COM'LP;
LIST'ENT:GOTO PARERR IF NOFLG = 0;
}'E _ 0;
}'E _ NOFLG IF NOFLG > 0;
}'NAME'ST1 _ NAME'S;
}'READ'UP'NAMES('UP',-1,E,USRNM,NAME'ST1,K:NAME'ST1//
}(SF'ERROR);


}(REPEAT;
}+NAME'ST3 _ ST2;
}+NAME'ST2 _ GET'PARAM(NAME'ST1);
}+GOTO COM'LP IF EMPTY (NAME'ST2);
}+READ'UP'ITEM('UP',-1,E,USRNM,NAME'ST2,NAME'ST3,K:NAME'ST3//
},SF'ERROR);

},IF GC(NAME'ST2) = '#' DO;
}/UNO _ SBASE(NAME'ST3).UPUN;

}0NAME'ST3 _ ST2;
}/CNS (UNO,NAME'ST3,0,10//LF'PUNT);
}+ENDIF;
}+IOUT(); PTST(NAME'ST2); PTST("}*"); PTST(NAME'ST3);
}+PTNL(); PTOL();
}+QUIT'FLAG _ 0;
}'ENDRPT; GOTO COM'LP;

LIST'PP:GOTO NOT'IMP;

LIST'USRS:COMFLG _ 1;
}*IOUT(); PTST("TSS #}%NAME}(PASSWORD}$CSL}#FSL");
}'PTNL(); PTOL();
}'FOR I _ 1 TO 128 DO;}"/* 128 IS THE MAX EXPECTED NUMBER OF USERS */
}+NAME'ST1 _ NAME'S;
}+READ'UP'NAMES('UP',-1,I,USRNM,NAME'ST1,K:NAME'ST1
}9//CONTINUE: ERCODE, ERMSNO);
}+IOUT();
}+WHILE 1 DO;
}/NAME'ST3 _ ST2;
}/NAME'ST2 _ GET'PARAM(NAME'ST1);
}/GOTO PRINT IF EMPTY(NAME'ST2);
}/READ'UP'ITEM('UP',-1,I,USRNM,NAME'ST2,NAME'ST3,K:NAME'ST3
}<//SF'ERROR);
}/IF GC(NAME'ST2) = '#' DO;
}3UNO _ SBASE(NAME'ST3).UPUN;
}3NAME'ST3 _ ST2;
}3CNS(UNO,NAME'ST3,0,10//LF'PUNT);
}3PTCH(' '); PTST(NAME'ST3);
}/ELSEIF GC(NAME'ST2) = 'N' DO;
}3WHILE LENGTH(OL) < 6 DO;
}7PTCH(' ');
}3ENDFOR;
}3PTST(NAME'ST3);
}/ELSEIF GC(NAME'ST2) = 'P' DO;
}3WHILE LENGTH(OL) < 23 DO;
}7PTCH(' ');
}3ENDFOR;
}3PTST(NAME'ST3);
}/ELSEIF GC(NAME'ST2) = 'C' DO;
}3WHILE LENGTH(OL) < 34 DO;
}7PTCH(' ');
}3ENDFOR;
}3PTST(NAME'ST3);
}/ELSEIF GC(NAME'ST2) = 'F' DO;
}3WHILE LENGTH(OL) < 41 DO;
}7PTCH(' ');
}3ENDFOR;
}3PTST(NAME'ST3);
}/ELSE DO;
}3PTST("}$"); PTST(NAME'ST2);
}/ENDIF;
}+ENDFOR;
PRINT:}%PTNL(); PTOL();
}+QUIT'FLAG _ 0;
CONTINUE:ENDFOR;
}'GOTO COM'LP;

LIST'ITM:NAME'ST1 _ GET'PARAM(COMLINE);
}'NAME'ST2 _ NAME'ST;
}'GOTO LIST'PPITM IF PPFLG;
}'GOTO PARERR IF NOFLG=0;
}'IF NOFLG < 0 DO;
}+E_0;
}'ELSE DO; E _ NOFLG; ENDIF;
}'READ'UP'ITEM('UP',-1,E,USRNM,NAME'ST1,NAME'ST2,K:NAME'ST2
}(//SF'ERROR);
}'IF GC(NAME'ST1) = '#' DO;
}+UNO _ SBASE(NAME'ST2).UPUN;
}+NAME'ST2 _ ST2;
}+CNS ( UNO,NAME'ST2,0,10//LF'PUNT);
}'ENDIF;
PRNTT: IOUT();
}'PTST(NAME'ST2); GOTO LN'OUT;

LIST'PPITM:READ'PP'ITEM (NAME'ST1,NAME'ST2: NAME'ST2//SF'ERROR);
}'GOTO PRNTT;

LIST'NMS:NAME'ST2 _NAME'ST;
}'GOTO LIST'PPNMS IF PPFLG;
}'GOTO PARERR IF NOFLG=0;
}'IF NOFLG<0 DO;
}+E _ 0;
}'ELSE DO; E _ NOFLG;
}'ENDIF;
}'READ'UP'NAMES('UP',-1,E,USRNM,NAME'ST2,K:NAME'ST2
}(//SF'ERROR);
}'GOTO PRNTT;*NOT GOOD ENOUGH REVISE LATER
LIST'PPNMS:READ'PP'NAMES(NAME'ST2:NAME'ST2//SF'ERROR);
}'GOTO PRNTT;

SET'ITM:NAME'ST1 _ GET'PARAM(COMLINE);
}'NAME'ST2 _ GET'PARAM(COMLINE);
}'NAME'ST2_NAME'ST;
}'GET'VALUE(NAME'ST2,COMLINE:NAME'ST2,COMLINE);
}'ST1 _ ST2;
}'GOTO SET'PPITM IF PPFLG;
}'GOTO PARERR IF NOFLG=0;
}'IF NOFLG < 0 DO;
}+E _ 0;
}'ELSE DO; E_NOFLG;
}'ENDIF;
}'READ'UP'ITEM('UP',-1,E,USRNM,NAME'ST1,ST1,K:ST1
}(//SF'ERROR);
}'NAME'ST2$EP _ NAME'ST2$WP;
}'SET'UP'ITEM('UP',-1,E,USRNM,NAME'ST1,NAME'ST2,K//SF'ERROR);
}'GOTO COM'LP;
SET'PPITM:READ'PP'ITEM(NAME'ST1,ST1:ST1//SF'ERROR);
}'SET'PP'ITEM(NAME'ST1,NAME'ST2//SF'ERROR);
}'GOTO COM'LP;
SET'ACC:GOTO PARERR IF NOFLG=0 OR PPFLG;
}'IF NOFLG<0 DO;
}+E _ 0;
}'ELSE DO; E _ NOFLG;
}'ENDIF;
}'NAME'ST1 _ GET'PARAM(COMLINE);
}'NAME'ST2 _ GET'PARAM(COMLINE);
}'CODE_CSN(NAME'ST2//LF'PUNT);
}'GOTO PARERR IF CODE < 0 OR CODE > 7;
}'ON_CODE;OFF_7-CODE;
}'SET'UP'ACCESS('UP',-1,E,USRNM,NAME'ST1,ON,OFF,K//SF'ERROR);
}'GOTO COM'LP;
CR'ITM:GOTO PARERR IF NOFLG=0 OR PPFLG;*?* ADD PP CODE
}'IF NOFLG < 0 DO;
}+E _ 0;
}'ELSE DO; E_NOFLG;
}'ENDIF;

}(NAME'ST1 _ GET'PARAM(COMLINE);*N
}'NAME'ST2 _ GET'PARAM(COMLINE);
}'CODE_CSN(NAME'ST2//LF'PUNT);
}'ST1 _ GET'PARAM(COMLINE);
}'ST1_ST2;
*FIND IF ITEM EXISTS

}(NAME'ST2 _ NAME'ST;
}'GET'VALUE(NAME'ST2,COMLINE:NAME'ST2,COMLINE);
}'READ'UP'ITEM('UP',-1,E,USRNM,NAME'ST1,ST1,K:ST1
}(//OK:ERCODE,ERMSNO);
}'GOTO EREXIT;*?
OK:}$NAME'ST2$EP _ NAME'ST2$WP;SET'UP'ITEM('UP',-1,E,USRNM,NAME'ST1,NAME'ST2,K//SF'ERROR);
}'SET'UP'ACCESS('UP',-1,E,USRNM,NAME'ST1,CODE,0,K//SF'ERROR);
}'GOTO COM'LP;
DEL'ITM:GOTO PARERR IF NOFLG=0;
}'IF NOFLG < 0 DO;}#E _ 0;}#ELSE DO; E _ NOFLG; ENDIF;
}'NAME'ST1 _ GET'PARAM(COMLINE);
}'SET'UP'ACCESS('UP',-1,E,USRNM,NAME'ST1,ON,-1,K//SF'ERROR);
}'GOTO COM'LP;
DEL'ENT:GOTO PARERR IF NOFLG =0;
}'E _ 0;
}'E_NOFLG IF NOFLG > 0;
}'DELETE'UP'ENTRY('UP',-1,E,USRNM,K//SF'ERROR);
}'GOTO COM'LP;
HELP'USR:FOR I _ 0 TO 32 DO;
}+IOUT(); PTST(HELP[I]); PTNL(); PTOL();
}'ENDFOR;
}'GOTO COM'LP;

PARERR:IOUT(); PTCH(SQTCH);PTST(NAME'ST1);PTCH(SQTCH);
}'PTST(" IS UNRECOGNIZABLE");

LN'OUT: PTNL(); PTOL();
EXIT:}"QUIT'FLAG_0; GOTO COM'LP;
QT'XIT:GOTO FIN IF NOT COMFLG;
}'QUIT'FLAG_0;
}'SET'CIOS'FIELD(-1,'OCC',0//SF'PUNT);
}'SET'CIOS'FIELD(-1,'ICC',0//SF'PUNT);
}'PRINT'CHAR(-1,NLCH,0//QUIT'PUNT(QT'XIT));
}'GOTO COM'LP;

INFORM: IOUT();
}'PTNL();
}'WCI(' ',OL);
}'PTDN(E);
}'GOTO LN'OUT;

}'END;

}'PROGRAM GET'VALUE;
}'INCLUDE PROFILE'MAIN;
}'ST}%STOUT, STIN;
}'STENT}"GET'VALUE(STOUT, STIN);
LP:}$GOTO XIT IF EMPTY(STIN);
}'APPEND(STOUT, GET'PARAM(STIN)//XIT);
}'WCI(',', STOUT// XIT) & GOTO LP IF NOT EMPTY(STIN);
XIT:}#RETURN (STOUT, STIN);

}(END;