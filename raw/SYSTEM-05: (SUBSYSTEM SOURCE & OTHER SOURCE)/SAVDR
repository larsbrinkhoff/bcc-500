* OPD'S FOR THE ITP

}'NOLIST EXT


U:}%MACRO D
}'NOLIST ALL; LIST SLCT,GO; NOLIST GO;
}'REM .....D(1) IS AN UNDEFINED OPCODE

}'NOP; LIST ALL; ENDM;

ILLOP: MACRO D
NT:}$NARG
}'RPT (I:=1,NT:);
D(I:)}#MACRO; U: D(I:); ENDM;
}'ENDR;
}'ENDM;

}'ILLOP: ADC,SUC,DIV,COPY,RCH,BAC,ABC,STE,LDE,XEE,AXC;
}'ILLOP: SKS,SKD,NOD;
}'ILLOP: BPT1,BPT2,BTT3,BPT4;
}'ILLOP: REO,OTO,AIR,IET,IDT;
}'ILLOP: ALCW,DISW,ASCW,TOPW,CATW,CETW,CZTW,CITW;
}'ILLOP: EOD,MIW,WIM,EOM,BETW,BRTW;
}'ILLOP: BIO,BRS,CIO,CTRL,DBI,DBO,DWI,DWO,EXS;
}'ILLOP: FAD,FDV,FMD,FSB,GCD,GCI,ISC,IST,LAS;
}'ILLOP: LDP,OST,SAS,SBRM,SBRR,SIC,SKSE,SKSG;
}'ILLOP: STI,STP,TCI,TCO,WCD,WCH,WCI,WIO;

}'FRGT}#ILLOP:,U:,I:;


HLT}$OPD 0,1
BRU}$OPD 1B5,2
ETR}$OPD 2B5,2
MRG}$OPD 3B5,2
EOR}$OPD 4B5,2
NOP}$OPD 5B5
EXU}$OPD 6B5,2
STA}$OPD 7B5,2
STB}$OPD 10B5,2
STX}$OPD 11B5,2
BRX}$OPD 12B5,2
BRM}$OPD 13B5,2
UPOT}#OPD 14B5,1
UPIN}#OPD 15B5,1
XSA:}#EQU 16B5
CSA:}#EQU 16B5+4B2
SKE}$OPD 17B5,2
BRR}$OPD 20B5,2
SKB}$OPD 21B5,2
SKN}$OPD 22B5,2
SUB}$OPD 23B5,2
ADD}$OPD 24B5,2
SKR}$OPD 25B5,2
MIN}$OPD 26B5,2
XMA}$OPD 27B5,2
ADM}$OPD 30B5,2
LCY}$OPD 31B5,2,1
LSH}$OPD 31B5+4B2,2,1
RSH}$OPD 31B5+1B3,2,1
LRSH}#OPD 31B5+14B2,2,1
RCY}$OPD 31B5+2B3,2,1
SKM}$OPD 32B5,2
LDX}$OPD 33B5,2
SKA}$OPD 34B5,2
SKG}$OPD 35B5,2
LDB}$OPD 36B5,2
LDA}$OPD 37B5,2
EAX}$OPD 40B5,2
RQS}$OPD 41B5,2,1
UPR}$OPD 41B5+4B2,2,1
PRO}$OPD 41B5+1B3,2,1
CLRMAP OPD 41B5+14B2,1

DRCH}#LMACRO D
D(0)}#OPD 16B5+D(1)*4B2,1
}'ENDM
CLAB}#DRCH 2
CLA}$DRCH 3
CLB}$DRCH 4
CLX}$DRCH 5
CAB}$DRCH 6
CBA}$DRCH 7
XAB}$DRCH 10B
CBX}$DRCH 11B
CXB}$DRCH 12B
XXB}$DRCH 13B
CXA}$DRCH 14B
CAX}$DRCH 15B
XXA}$DRCH 16B
CNA}$DRCH 17B

DSK}$MACRO D
X.&D(1)A OPD XSA:+D(2),1
C.&D(1)A OPD CSA:+D(2),1
}'ENDM
XSA}$OPD XSA:,2
CSA}$OPD CSA:,2
}'DSK MD,74B
}'DSK IO,75B
}'DSK RL,76B
}'DSK BD,77B

SAVDR}"IDENT
}'BSS 6700B-240B

C}&OPD 101B5,2

LDAF}#MACRO D; LDA _=4B7+D(1); ENDM
STAF}#MACRO D; STA _=4B7+D(1); ENDM

CHT1}#EQU 400B
CHT2}#EQU 1000B
EOL}$EQU 777777B
RWC}$EQU 2B4


$SWITCHES DATA 100B5
TOTERR BSS 1
$COPYTAB DATA CPT1
AMCPRA DATA CPBNDD}-AMC PROGRAM ADDRESS
DISPTIME DATA 1B6

* SAVE DRUM PROCEDURE

$XSD1}"BRM CLEANUP
* TELL CHIO TO IGNORE NON-CPU REQUESTS
}'LDAF 40B; SKA =RWC; BRU *-2; LDA =122B4; STAF 40B; RQS 4
}'LDAF 40B; SKA =RWC; BRU *-2
* STOP AMC AND CHIO.}"ASSUME BOTH ARE QUIET
}'CLA; STAF 5; STAF 20B; STAF 22B; STAF 26B
}'LDA =11B; LDB =102B; UPOT; NOP; RQS 5
}'LDX =-20; BRX *; RQS 5
* AND RETURN TO DDT
}'BRU CENTRY

* FOR THE MANUAL PROCEDURE USED TO SAVE THE ITP STATE:
*}&MNODT, 17G, MNODT, 540G

* CONTINUE WITH
$XSD2}"BRM CLEANUP; LDA =4B7+CHT1; STA NEXT
XSD21}"LDA NEXT; STA PTR
XSD22}"LDA _PTR; ETR =EOL; SKE =EOL; BRU XSD23
}'MIN NEXT; LDA NEXT; SKE =4B7+CHT2; BRU XSD21; BRU XSD24
XSD23}"ADD =4B7+5; STA PTR; SKG =4B7+1277B; BRU XSD22
}'SUB =5; STA PTR1
}'CLA; STA _PTR1; MIN PTR1; STA _PTR1; BRU XSD22
XSD24}"LDA =2; STAF 22B
}'LDA =CENTRY; STAF 2650B; CLA; STAF 2740B+12
}'LDA =1000B; STAF 20B
* COMPUTE THE CRASH AREA ADDRESS
}'LDA SWITCHES; MRG =14B6; STAF 5
* SET AMC TO WRITE OUT THE CORE
}'RQS 1
* MAKE A NICE DISPLAY WHILE THIS IS GOING ON
}'LDA =10B; LDB SWITCHES; UPOT
* WAIT FOR THE AMC TO FINISH.}"4 SEC=2122US/8US LOOP=2118
* THIS IS VERY CONSERVATIVE
}'LDA DISPTIME; STA T; SKR T; BRU *-1
* SET UP THE TWO WORDS REQUIRED TO COPY THE CRASH AREA TO THE SAVE AREA
}'LDA SWITCHES; LRSH 19D; ETR =1; CLB; LSH 6; STA UNIT
}'LDA SWITCHES; RSH 15D; ETR =14B
* TEST BAND NUMBER FOR CRASH AREA IN A=4*SWITCH BITS 5-6
}'ADD UNIT; STA UNIT; CLB; LSH 12; ADD UNIT; ADD =2; STA CPYCRASH
}'CLA

* NOW SCAN THE TABLE AND TRANSFER EACH BAND
DOCOPY STA DIRSW; LDA COPYTAB; STA T
* NOW READY TO MOVE DRUM BANDS
}'LDA =11B; LDB =100B; UPOT
}'LDA =662B; STAF 20B; LDA =77B; STAF 2606B; STAF 0
}'LDA =AMCST; BRM MCOPY
}'LDA AMCPRA; BRM MCOPY
* START AMC
}'CLA; STAF 5; RQS 1
}'LDX =-20; BRX *; RQS 1
* WAIT FOR AMC TO GET ORGANIZED
}'LDAF 0; SKE =0; BRU *+2; BRU *-3
}'CLB; LDA =10B; UPOT
}'CLA; STA TOTERR
CPYLOOP LDA _T; SKE =-1; BRU *+2; BRU ECPYLOOP
}'BRM COPYBAND; MIN T; BRU CPYLOOP
ECPYLOOP LDA TOTERR; MRG =66B6; CAB; LDA =10B; UPOT
}'LDA DISPTIME; STA T; SKR T; BRU *-1
}'SKN DIRSW; BRU XSD3; BRU CENTRY

* FINALLY, MOVE THE CRASH AREA TO THE SAVE AREA
XSD3}#LDA CPYCRASH; BRM COPYBAND; LDA CPYCRASH; ADD =CENTRY; BRM COPYBAND
}'BRU CENTRY

* CLEANUP ROUTINE.}"USED AT SEVERAL ENTRY POINTS.
CLEANUP ZRO
* TURN OFF US
}'LDA =4B7; XMDA
* PUT CPUS IN STEP MODE
}'LDA =4B7+10B; LDB =21B; UPOT
}'BRR CLEANUP

COPYBAND ZRO
}'CAB; SKN DIRSW; BRU *+2; LCY 12; STA CPYCTL
}'ETR =7777B; BRM CDA; STAF 2
}'LDA CPYCTL; LRSH 12; BRM CDA; STAF 1
}'LDB CPYCTL; LDA =10B; UPOT
}'LDA =1; STAF 0
}'LDAF 0; SKE =0; BRU *-2
}'LDAF 5; CLB; LSH 9; MRG _=4B7+4; ADM TOTERR
}'BRR COPYBAND

CDA}$ZRO
}'STA CDAT; LRSH 6; ETR =77B; CAX; LDA /UBITAB; XMA CDAT; CLB
}'ETR =77B; LSH 7; SKN CDAT; BRU *+2; LSH 7; ADD CDAT; BRR CDA

* MAP UP INDEXES FROM TOP HALF OF A COPYTAB BAND POINTER INTO TSU, UNIT
* AND BAND*CYLINDER BASE FOR DISK.
* AN ENTRY IN THIS TABLE IS A DEVICE ADD V' UNIT NUMBER, +4B7 FOR DISK
UBITAB DATA 0,1
$SAVAREA DATA 4B7+4B4}*SY0
}'BSS 13}"LEAVE ROOM FOR 14 DISK ENTRIES, OF WHICH ONLY ONE IS NOW 
*}.SPECIFIED

* RESTORE DRUM
$XRD1}"BRM CLEANUP; LDA =-1; BRU DOCOPY

* FIRE UP MICROPROCESSORS ONLY
$XRD2}"BRM R2; BRU CENTRY

* EXPAND DRUMBAND ALLOCATION
$XRD3}"BRM R3; BRU CENTRY

* ROUTINE TO FIRE UP SYSTEM.}"ASSUMES THE SYSTEM IS LOADED BOTH ON
* DRUM AND IN CORE.}"RESETS STEP AND TURNS ON THE US.}"EXPANDS
* DRUM BANDS IN USE, FIRES UP CHIO & AMC AND THENS DOES THE EQUIVALENT
* OF SEMI-COLON P IN SYSDDT

$XRUN}"BRM R2; BRM R3}*(R2:U, R3:U)
}'CLA; C STECON}+(0%$)
}'LDA =SCHBIT; STA SCHEDF (1%*)
}'C RPWR}2(:#)
}'BRU DLP}1(:P)

* SUBROUTINE TO START UP THE 3 MICROPROCESSORS
R2}%ZRO; LDA =5B7; XMDA; RQS 5; BRR R2

* SUBROUTINE TO EXPAND THE INITIAL DRUMBAND ALLOCATION
R3}%ZRO; LDX =-300B
R3A}$LDA DRUMBANDS; ADM _=60002101B; EAX 1,2
}'LDA DRUMBANDS+1; ADM _=60002101B; EAX 6,2; BRX R3A
}'LDA DRUMBANDS+2; ADM _=40000170B; BRR R3



CDAT}#BSS 1
CPYCTL BSS 1
T}&BSS 1
DIRSW}"BSS 1
UNIT}#BSS 1
CPYCRASH BSS 1
NEXT}#BSS 1
PTR}$BSS 1
PTR1}#BSS 1


* AMC BOUND, REL, P, LINK STACK
AMCST}"DATA 4B7+2501B,-4
}'DATA 1B5,0
}'DATA CBAND,4100B

MCOPY}"ZRO
}'STA AITP; LDA _AITP; STA AFM; MIN AITP
}'LDX _AITP
}'MIN AITP; LDA _AITP; STA _AFM; MIN AFM; BRX *-4
}'BRR MCOPY

AITP}#BSS 1
AFM}$BSS 1

* THE FOLLOWING 3 CELLS ARE USED FOR DRUM BAND EXPANSION.}"THE FIRST 2
* WORDS CONTAIN BITS FOR EACH DRUM BAND (NUMBERED FROM BIT 0 OF THE FIRST)
* THE LAST WORD CONTAINS THE NUMBER OF NEW PAGES THUS ADDED TO THE SYSTEM
$DRUMBANDS DATA 77077577B}"20 NEW BANDS HERE
}'DATA 0
}'DATA 480},=20*24

* COPY TABLE.}"COPIES BETWEEN CRASH AND SAVE AREAS 0 ON BAND 0.
* THEN COPIES BETWEEN DISK AND 38 DRUM BANDS, SKIPPING ONLY 0 & 1, AND
* 16 & 17.

CT}%MACRO D; DATA D(1).&B*2^12+D(2).&B; ENDM

$CPT1}"CT 0,2
}'CT 1,3
}'CT 2,200
}'CT 3,201
}'CT 4,202
}'CT 5,203
}'CT 6,204
}'CT 7,205
}'CT 10,206
}'CT 11,207
}'CT 12,210
}'CT 13,211
}'CT 14,212
}'CT 15,213
}'CT 20,214
}'CT 21,215
}'CT 22,216
}'CT 23,217
}'CT 24,220
}'CT 25,221
}'CT 26,222
}'CT 27,223
}'CT 30,224
}'CT 31,225
}'CT 32,226
}'CT 33,227
}'CT 34,230
}'CT 35,231
}'CT 36,232
}'CT 37,233
}'CT 40,234
}'CT 41,235
}'CT 42,236
}'CT 43,237
}'CT 44,240
}'CT 45,241
}'CT 46,242
}'CT 47,243
}'CT 50,244
}'CT 51,245
}'DATA -1

}'END

*}"APU PROGRAM:}"TO BE ASSEMBLED WITH APUAS

CPBND}"IDENT

* DESCRIPTOR FOR COPYING AMC PROGRAM
$CPBNDD DATA 4B7+*+2,*-10000B

* THE AMC SHOULD BE ZAPPED AND THE PROGRAM COPIED,
* AND THE FOLLOWING REGISTERS OF THE
* SCRATCHPAD STATE SHOULD BE LOADED
* (ALL VALUES OCTAL)
*}&5}'0}/NO AMC RESTART ON ZAP
*}%20}%662}/START APU LOCATION IN MICROCODE
*}#2501}#10000}/BOUND
*}#2502}$4000}/REL
*}#2503}%240}/P
*}#2504}$4100}/LINK STACK
*}#2506}&77}/SCRATCHPAD STACK POINTER
* NOW THE AMC MAY BE STARTED BY STROBING IT TWICE

MAXERR DATA 5
ERRMASK DATA 3776B
}'VARD I,BAND,SEC,SE,INST
FROM}#EQU 1
TO}%EQU 2
ERRI}#EQU 3
SERRC}"EQU 4
HERRC}"EQU 5

UN0A}#DATA 60000100B
UN1A}#DATA 60000200B
ERRSTATUS DATA 60001000B
ERRDVU DATA 60002000B

WRITE}"EQU 40B
SPAGE}"EQU 10000B
PC1}$EQU 4000B
PC3}$EQU 1000B
TSUN0}"EQU 100B
TSUN1}"EQU 40B
DV}%EQU 4
HU}%EQU 200B
STATUS EQU 1B5
ALLINDS EQU 70002000B
DONE}#EQU 1B7
KTSU}#EQU 4B6}%DISK TSU IS TSU 2.}"BITS 3-4 HOLD TSU NUMBER
VERIFIED EQU 4B6

$CBAND NOP; LDI 0; STA 0
}'SKNE 0; BRU *-1
}'STA INST; STA ERRI; STA SERRC; STA HERRC
}'LDA FROM; STA BAND
BLOOP}"LDI 0; STA I
SLOOP}"BSL EXECUTE; MIN I; LDA I; SKG =23; BRU SLOOP
}'LDA TO; STA BAND; LDI WRITE; XMA INST; SKNE =0; BRU BLOOP
}'BRU CBAND

EXECUTE LDI 0; STA SE
* WAIT FOR TSU TO QUIET DOWN
EXLOOP LDI PC1; BRM DOPIN; SKNB =ALLINDS; BRU EXGO
}'LDA =STATUS; BRM DOPIN; BRU EXLOOP
* ALL INDICATORS ARE OFF
EXGO}#LDA BAND; ETR =3; MRG INST; CAS SR1
}'LDX I; LDA TRTAB,2; STA SEC; SKN BAND; BRU EXDRUM
EXDISK LDA =KTSU; CAS SR0; LDX SEC; LDA /KTRTAB; BRU EX1
EXDRUM CLS SR0; LCY 2
EX1}$ADD BAND; CAS SR2
}'LDA SEC; LCY 11; ADD =SPAGE; CAS SR3
}'LDX SEC; LDA _UN0A; LDB _UN1A; LDX =4000B; SCALL STSUI
* WAIT FOR INDICATOR 2
EXWAIT LDI PC1; BRM DOPIN; SKNB =DONE; BRU EXWAIT
* CHECK FOR ERRORS
}'LDA =STATUS; BRM DOPIN; SKNB ERRMASK; BRU EXOK
* IF DISK TRANSFER, IGNORE THE ERROR UNLESS VERIFIED
}'LDX ERRI; STB _ERRSTATUS
}'SKN BAND; BRU GOTERR
}'LDA BAND; ETR =3; EOR =3; CAX; LDI PC3; LCY /0; BRM DOPIN
}'SKNB =VERIFIED; BRU EXLOOP
* GOT ERROR.}"RECORD IT
GOTERR LDX ERRI; LDI HU; BRM DOPIN; CBA; ETR =3; STA _ERRDVU
}'LDI DV; BRM DOPIN; CBA; ETR =-1-3; ADM _ERRDVU; MIN ERRI
}'MIN SE; LDA SE; SKG MAXERR; BRU EXLOOP
* HARD ERROR
}'MIN HERRC; BVR 1
EXOK}#LDX SEC; LDI TSUN0; BRM DOPIN; STB _UN0A
}'LDI TSUN1; BRM DOPIN; STB _UN1A
}'LDA SE; ADM SERRC
}'BVR 1

* PIN SUBROUTINE
DOPIN}"ZRO
}'SKN BAND; BRU *+2; MRG =KTSU; PIN; BRR DOPIN

* TRANSFER EVERY OTHER SECTOR
TRTAB}"DATA 0,2,4,6,8,10,12,14,16,18,20,22
}'DATA 1,3,5,7,9,11,13,15,17,19,21,23

* THIS DEFINES A DISK EQUIVALENT OF A DRUM BAND AS 5 DISK BANDS (-1 SECTOR)
KTRTAB DATA 0,4,10B,14B,20B,200B,204B,210B,214B,220B
}'DATA 400B,404B,410B,414B,420B,600B,604B,610B,614B,620B
}'DATA 1000B,1004B,1010B,1014B

}'END
