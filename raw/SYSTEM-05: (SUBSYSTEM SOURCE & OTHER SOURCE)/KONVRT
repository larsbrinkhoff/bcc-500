}'IDENT KONVRT;


*}"THIS PROGRAM CONVERTS BETWEEN TEXT FILES FOR THE IBM 370 AND 
*}"THE BCC 500.}"370 FILES ARE IN EBCDIC AND MAY BE EITHER IN 80-COLUMN
*}"CARD IMAGE FORMAT OR IN VARIABLE-LENGTH RECORD FORMAT.}"500 FILES
*}"ARE 9SYM FILES IN 940 ASCII.

*}"9SYM FILES ARE LITERAL CHARACTER STRINGS EXCEPT FOR A FEW IMBEDDED
*}"CONTROL CHARACTERS.}"THESE ARE:
*}&. NEW LINE: CR(155B) FOLLOWED BY LF(152B)
*}&. MULT. BLANK: 135B FOLLOWED BY THE BINARY 8-BIT BLANK COUNT
*}&. NEW PAGE: 154B
*}&. OVERPRINT: CR FOLLOWED BY SOMETHING OTHER THAN LF
*}&. INDEXING: ONE OR MORE LF'S FOLLOWING A NEW LINE
*}"940 ASCII IS DISPLACED FROM NORMAL ASCII BY SUBTRACTING 40B AND MASKING
*}"THE RESULT TO 7 BITS.}"FOR EXAMPLE, ASCII CR(15B) IS CONVERTED TO
*}"940 ASCII BY SUBTRACTION (15B-40B=77777755B) AND THEN MASKING
*}"(77777755B AND 177B=155B).}"THIS PROGRAM REQUIRES NO SUCH CONVERSIONS,
*}"BUT THE 940 ASCII'S RELATION TO EBCDIC IS REFLECTED IN THE STRUCTURE
*}"OF THE TABLES.

*}"370 CARD IMAGE FILES EXIST IN MULTIPLES OF 80-BYTE RECORDS.
*}"ON TAPE, THESE ARE WRITTEN IN BLOCKS OF VARIOUS NUMBERS OF RECORDS.
*}"KDF, HOWEVER, CANNOT HANDLE TAPE RECORDS LONGER THAN 6192 BYTES.
*}"THIS LIMITATION MUST BE RESPECTED AT THE 370.

*}"370 VARIABLE-LENGTH FILES CONSIST OF RECORDS CONTAINING VARIABLE-
*}"LENGTH SUB-RECORDS (PRINT LINES).}"EACH RECORD CONSISTS OF A 4-BYTE
*}"HEADER, FOLLOWED BY THE PRINT LINES.}"THE FIRST TWO BYTES OF THE HEADER
*}"SPECIFY, IN BINARY, THE NUMBER OF BYTES IN THE RECORD (INCLUDING THE
*}"4 BYTES).}"THE SECOND TWO BYTES ARE EBCDIC NULLS (ZEROS).}"THESE RECORDS
*}"COINCIDE IN SIZE WITH THE PHYSICAL TAPE RECORDS.}"THE PROGRAM MUST
*}"WATCH CAREFULLY FOR ODD-LENGTH RECORDS, AS KDF DUPLICATES THE FINAL
*}"BYTE OF SUCH A RECORD IN THE FILE.}"CONVERSELY, KDF CANNOT WRITE
*}"ODD-LENGTH RECORDS.}"THE PRINT LINE CONSISTS OF A TWO-BYTE (16-BIT)
*}"COUNT OF THE NUMBER OF BYTES IN THE LINE (INCLUDING THE TWO BYTES)
*}"FOLLOWED BY THE EBCDIC CHARACTER STRING.

*}"THE PRINT LINE ITSELF CONSISTS OF TWO BLANKS FOLLOWED BY THE CARRIAGE
*}"CONTROL CHARACTER.}"THIS CHARACTER DESCRIBES HOW THE LINE IS TO BE
*}"PRINTED.}"THE FOLLOWING CONVENTIONS ARE USED:
*}&. "9": SKIP TO BOTTOM OF PAGE
*}&. "0": SPACE ONCE, THEN PRINT CONTENTS OF THE LINE
*}&. "-": SPACE TWICE, THEN PRING CONTENTS OF THE LINE
*}&. " ": PRINT LINE AS SHOWN
*}&. "+": PRINT LINE BUT DO NOT SPACE AFTERWARDS.}"OVERPRINTING FOLLOWS.

* DECLARATIONS FOR MAIN PROGRAM

}'DECLARE INTEGER BLANKCNT,BYTCNT,CHAR,FFLAG,I,IFNO,MODE,OFNO,ZFLAG;
}'DECLARE INTEGER BLKSIZ,BLKCNT;
}'DECLARE EXTERNAL ETOA,ATOE;
}'DECLARE STRING IFNAME(20),OFNAME(20);
}'DECLARE FIELD LBITS(0:6,23);
}'DECLARE PARAMETER SYM9_3B6,CR_155B,LF_152B;
}'DECLARE PARAMETER EJECT_154B,EOF_137B,MBCHAR_135B;
}'DECLARE PARAMETER BIN9_2B6,CARDSIZE_80;


* MAIN PROGRAM
START: INITIALIZE();
}'SOUT("&M&JEBCDIC TO ASCII OR ASCII TO EBCDIC?}"");
}'IF (MODE_CIN(0))='E' DO;
}*SOUT("BCDIC TO ASCII");
}'ELSEIF MODE='A' DO;
}*SOUT("SCII TO EBCDIC");
}'ELSE DO;
}*SOUT("}"???") & GOTO START;
}'ENDIF;
S1:}$SOUT("&M&JINPUT FILE: ");
}'INNAME(IFNAME:S1);
}'IFNO_INFILE(IFNAME:S1);
}'GOTO ASCII IF MODE='A' ELSE GOTO EBCDIC;



*}"THIS CODE HANDLES THE EBCDIC TO ASCII CONVERSION
EBCDIC: CCNT_0; LNGTH_FTYPE$LBITS*3;
E1:}$SOUT("&M&JOUTPUT FILE: ");
}'OUTNAME(OFNAME:E1);
}'OUTFIL(OFNAME,SYM9:E1:OFNO);
E2:}$SOUT("&M&JDO YOU HAVE CARD IMAGES?}"");
}'IF (MODE_CIN(0))='Y' DO;
}*SOUT("ES&M&J") & GOTO ECARD;
}'ELSEIF MODE='N' DO;
}*SOUT("O&M&J") & GOTO EVAR;
}'ELSE DO;
}*SOUT("}"???") & GOTO E2;
}'ENDIF;

*}"CODE TO READ CARD IMAGES
ECARD: WHILE 1 DO;
}*BLANKCNT_0;
}*FOR I_1 TO 80 DO;
}-IF (CHAR_GETC())=100B DO;
}0BLANKCNT_BLANKCNT+1;
}-ELSEIF BLANKCNT>1 DO;
}0COUT(135B,OFNO);
}0COUT(BLANKCNT,OFNO);
}0BLANKCNT_0;
}0COUT(ETOA[CHAR],OFNO);
}-ELSEIF BLANKCNT>0 DO;
}0COUT(' ',OFNO);
}0BLANKCNT_0;
}0COUT(ETOA[CHAR],OFNO);
}-ELSE DO;
}0COUT(ETOA[CHAR],OFNO);
}-ENDIF;
}*ENDFOR;
}*CRLF(1,OFNO);
}'ENDFOR;

*}"CODE TO READ VARIABLE-LENGTH RECORDS
EVAR:}"J_1; BLOCKCNT_0;
}'SOUT("INTERPRET PRINTER CONTROLS?}"");
}'IF (MODE_CIN(0))='Y' DO;
}*SOUT("ES&M&J") & GOTO INTERP;
}'ELSEIF MODE='N' DO;
}*SOUT("O&M&J") & GOTO LITERL;
}'ELSE DO;
}*SOUT("}"???") & GOTO EVAR;
}'ENDIF;
LITERL: WHILE 1 DO;
}*BLANKCNT_0;
}*BYTCNT_GNCR()*256;
}*BYTCNT_BYTCNT+GNCR()-2;
}*FOR I_1 TO BYTCNT DO;
}-IF (CHAR_GNCR())=100B DO;
}0BLANKCNT_BLANKCNT+1;
}-ELSEIF BLANKCNT>0 DO;
}0COUT(MBCHAR,OFNO);
}0COUT(BLANKCNT,OFNO);
}0BLANKCNT_0;
}0COUT(ETOA[CHAR],OFNO);
}-ELSE DO;
}0COUT(ETOA[CHAR],OFNO);
}-ENDIF;
}*ENDFOR;
}*CRLF(1,OFNO);
}'ENDFOR;
INTERP: SOUT("**RUNOFF&M&J",OFNO);
}'FFLAG_0;
}'WHILE 1 DO;
}*BYTCNT_GNCR()*256;
}*BYTCNT_BYTCNT+GNCR()-2;
}*PUNT() IF GNCR()#100B;
}*PUNT() IF GNCR()#100B;
}*IF (CHAR_ETOA[GNCR()])=' ' DO;
}-CRLF(1,OFNO);
}*ELSEIF CHAR='0' DO;
}-CRLF(1,OFNO);
}-COUT(LF,OFNO) IF ZFLAG>=0;
}-ZFLAG_0;
}*ELSEIF CHAR='-' DO;
}-CRLF(1,OFNO);
}-COUT(LF,OFNO); COUT(LF,OFNO);
}*ELSEIF CHAR='+' DO;
}-COUT(CR,OFNO);
}*ELSEIF CHAR='9' DO;
}-CRLF(1,OFNO) IF FFLAG<0;
}-COUT(EJECT,OFNO);
}-ZFLAG_FFLAG_-1;
}*ELSE DO;
}-PUNT();
}*ENDIF;
}*BYTCNT_BYTCNT-3;
}*BLANKCNT_0;
}*FOR I_1 TO BYTCNT DO;
}-IF (CHAR_ETOA[GNCR()])=' ' DO;
}0BLANKCNT_BLANKCNT+1;
}-ELSEIF BLANKCNT>0 DO;
}0COUT(MBCHAR,OFNO);
}0COUT(BLANKCNT,OFNO);
}0BLANKCNT_0;
}0COUT(CHAR,OFNO);
}-ELSE DO;
}0COUT(CHAR,OFNO);
}-ENDIF;
}*ENDFOR;
}'ENDFOR;



*}"THIS CODE CONVERTS FROM 940 ASCII TO EBCDIC
ASCII: 
A1:}$SOUT("&M&JOUTPUT FILE: ");
}'OUTNAME(OFNAME:A1);
}'OUTFIL(OFNAME,BIN9:A1:OFNO);
A2:}$SOUT("&M&JDO YOU WANT CARD IMAGES?}"");
}'IF (MODE_CIN(0))='Y' DO;
}*SOUT("ES&M&J") & GOTO ACARD;
}'ELSEIF MODE='N' DO;
}*SOUT("O&M&J") & GOTO AVAR;
}'ELSE DO;
}*SOUT("}"???") & GOTO A2;
}'ENDIF;

*}"CODE TO WRITE CARD IMAGES
ACARD: SOUT("&M&JHOW MANY BYTES WILL BE IN EACH TAPE RECORD?}"");
}'BLKSIZ_IIN(0);
}'CRLF(1);
}'IF (BLKSIZ MOD 2)#0 DO;
}*SOUT("&M&JMUST BE EVEN NUMBER!!!") & GOTO ACARD;
}'ENDIF;
}'BLKCNT_0;
}'WHILE 1 DO;
}*FOR I_1 TO CARDSIZE DO;
ACARD1:}&IF (CHAR_NXTCHR(:AQUIT))=CR DO;
}0IF (CHAR_NXTCHR(:AQUIT))=LF DO;
}3WNCR(100B,OFNO) FOR I_I TO CARDSIZE;
}3I_1 & GOTO ACARD1;
}0ELSE DO;
}3WNCR(100B,OFNO) FOR I_I TO CARDSIZE;
}3I_1 & GOTO ACARD2;
}0ENDIF;
}-ELSEIF CHAR=LF DO;
}0WNCR(100B,OFNO) FOR I_I TO CARDSIZE;
}0I_1 & GOTO ACARD1;
}-ELSE DO;
ACARD2:})WNCR(ATOE[CHAR],OFNO);
}-ENDIF;
}*ENDFOR;
}*WHILE 1 DO;
}-IF (CHAR_NXTCHR(:AQUIT))=CR DO;
}0IF (CHAR_NXTCHR(:AQUIT))=LF DO;
}3I_1 & GOTO ACARD1;
}0ELSE DO;
}3I_1 & GOTO ACARD2;
}0ENDIF;
}-ELSEIF CHAR=LF DO;
}0I_1 & GOTO ACARD1;
}-ENDIF;
}*ENDFOR;
}'ENDFOR;
AQUIT: WNCR(100B,OFNO) FOR I_I TO CARDSIZE;
}'COUT(100B,OFNO) FOR I_BLKCNT TO BLKSIZ;
}'CLOSALL();
}'SOUT("&M&JDONE.");
}'EXIT();

*}"CODE TO WRITE IBM VARIABLE-LENGTH RECORDS
AVAR:}"SOUT("SORRY, THIS OPTION NOT IMPLEMENTED.");
}'EXIT();



***}"FUNCTIONS

*}"FUNCTION GETC READS A CHARACTER FROM THE INPUT FILE AND CHECKS
*}"TO SEE IF IT IS AN EOF.}"THE INPUT FILE IS IN EBCDIC, AND MERELY
*}"GETTING A 137B DOES NOT MEAN EOF UNTIL THE LENGTH OF THE FILE IS
*}"REACHED.

}'DECLARE INTEGER CCNT,LNGTH,XCHR;

}'FUNCTION GETC();
}'CCNT_CCNT+1;
}'IF ((XCHR_CIN(IFNO))#EOF) OR (CCNT<=LNGTH) DO;
}*RETURN XCHR;
}'ELSE DO;
}*COUT(EOF,OFNO);
}*CLOSALL();
}*SOUT("&M&JDONE.");
}*EXIT();
}'ENDIF;


*}"FUNCTION GNCR GETS THE NEXT BYTE FROM THE IBM VARIABLE-LENGTH
*}"RECORD.

}'DECLARE INTEGER J,BLOCKCNT;
}'DECLARE FIELD BIT23(0:23,23);

}'FUNCTION GNCR();
}'IF J>BLOCKCNT DO;
}*GETC() IF BLOCKCNT$BIT23=1;
}*BLOCKCNT_GETC()*256;
}*BLOCKCNT_BLOCKCNT+GETC()-4;
}*PUNT() IF GETC()#0;
}*PUNT() IF GETC()#0;
}*J_1;
}'ENDIF;
}'J_J+1;
}'RETURN GETC();


*}"FUNCTION NXTCHR READS NEXT CHAR FROM A 9SYM FILE & UNSQUEEZES BLANKS.
*}"IT DOES A FAILURE RETURN WHEN AN EOF IS ENCOUNTERED.

}'FUNCTION NXTCHR();
}'IF (BLANKCNT_BLANKCNT-1)>=0 DO;
}*SRETURN ' ';
}'ELSE DO;
}*IF (XCHR_CIN(IFNO))=EOF DO;
}-RETURN;
}*ELSEIF XCHR=MBCHAR DO;
}-BLANKCNT_CIN(IFNO)-1;
}-SRETURN ' ';
}*ELSE DO;
}-SRETURN XCHR;
}*ENDIF;
}'ENDIF;


*}"FUNCTION WNCR WRITES A SINGLE BYTE OUT ON OUTPUT FILE.}"IN SO DOING,
*}"IT ALSO KEEPS TRACK OF WHERE THE BYTE WOULD GO IN A TAPE RECORD.
*}"THIS IS DONE SO THAT AT THE END OF FILE, THE BLOCK CAN BE FILLED OUT
*}"WITH EBCDIC 100'S.

}'DECLARE INTEGER WBYTE,WFILE;

}'FUNCTION WNCR(WBYTE,WFILE);
}'COUT(WBYTE,WFILE);
}'BLKCNT_0 IF (BLKCNT_BLKCNT+1)=BLKSIZ;
}'RETURN;


*}"FUNCTION PUNT PRINTS FATAL ERROR MESSAGES.

}'DECLARE INTEGER PLINK;

}'FUNCTION PUNT();
}'PLINK_$0;
}'SOUT("&M&JFATAL ERROR AT ");
}'IOUT(PLINK,1,8);
}'COUT('B');
}'EXIT();
}'RETURN;


}'END;

TABLES IDENT

*}"THIS PACKAGE CONTAINS THE CONVERSION TABLES FOR THE KONVRT PROGRAM.
*}"THESE TABLES ARE FOR NARP AND ARE LINKED TO THE QSPL CODE PACKAGE.


*}"LINKAGE TO QSPL

$ETOA}"ZRO ETOAS
$ATOE}"ZRO ATOES


*}"CODE CONVERSION TABLES

ETOAS}"DATA 0,0,0,0,0,0,0,0}$1ST 100B ENTRIES ARE EBCDIC CTRLS
}'DATA 0,0,0,0,0,0,0,0
}'DATA 0,0,0,0,0,0,0,0
}'DATA 0,0,0,0,0,0,0,0
}'DATA 0,0,0,0,0,0,0,0
}'DATA 0,0,0,0,0,0,0,0
}'DATA 0,0,0,0,0,0,0,0
}'DATA 0,0,0,0,0,0,0,0
}'DATA ' ',0,0,0,0,0,0,0
}'DATA 0,0,0,'.','<','(','+',0
}'DATA '&',0,0,0,0,0,0,0
}'DATA 0,0,'!','$','*',')',';','_'
}'DATA '-','/',0,0,0,0,0,0
}'DATA 0,0,0,',','%',100B,'>','?' 100B IS UNDERSCORE
}'DATA 0,0,0,0,0,0,0,0
}'DATA 0,0,':','#','@',007B,'=','"' 007B IS SINGLE QUOTE
}'DATA 0,101B,102B,103B,104B,105B,106B,107B LC A...G
}'DATA 110B,111B,0,0,0,0,0,0}&LC H,I
}'DATA 0,112B,113B,114B,115B,116B,117B,120B LC J...P
}'DATA 121B,122B,0,0,0,0,0,0}&LC Q,R
}'DATA 0,0,123B,124B,125B,126B,127B,130B LC S...X
}'DATA 131B,132B,0,0,0,'[',0,0}$LC Y,Z
}'DATA 0,0,0,0,0,0,0,0
}'DATA 0,0,0,0,0,']',0,0
}'DATA 0,'A','B','C','D','E','F','G'
}'DATA 'H','I',0,0,0,0,0,0
}'DATA 0,'J','K','L','M','N','O','P'
}'DATA 'Q','R',0,0,0,0,0,0
}'DATA 0,0,'S','T','U','V','W','X'
}'DATA 'Y','Z',0,0,0,0,0,0
}'DATA '0','1','2','3','4','5','6','7'
}'DATA '8','9',0,0,0,0,0,0

ATOES}"DATA 100B,132B,177B,173B,133B,154B,120B,175B BLANK !"#$%&'
}'DATA 115B,135B,134B,116B,153B,140B,113B,141B ()*+,-./
}'DATA 360B,361B,362B,363B,364B,365B,366B,367B 0...7
}'DATA 370B,371B,172B,136B,114B,176B,156B,157B 89:(SEMI-COLON)<=>?
}'DATA 174B,301B,302B,303B,304B,305B,306B,307B A...G
}'DATA 310B,311B,321B,322B,323B,324B,325B,326B H...O
}'DATA 327B,330B,331B,342B,343B,344B,345B,346B P...W
}'DATA 347B,350B,351B,255B,112B,275B,241B,137B XYZ[\]^_
}'DATA 155B,201B,202B,203B,204B,205B,206B,207B (UNDERSCORE) LC A...G
}'DATA 210B,211B,221B,222B,223B,224B,225B,226B LC H...O
}'DATA 227B,230B,231B,242B,243B,244B,245B,246B LC P...W
}'DATA 247B,250B,251B,213B,117B,233B,137B,0 LC XYZ
}'DATA 0,0,0,0,0,0,0,057B
}'DATA 0,0,0,0,0,0,0,0
}'DATA 0,0,0,0,0,0,0,0
}'DATA 0,0,0,0,0,0,0,0


}'END