MAINT}"IDENT

* PROCEDURE TO INSERT AND DELETE PFS USERS, ETC.
*
*}#1)}"HAVE USER NAME & PASSWORD ADDED/DELETED TO/FROM USER-PROF
*}#2)}"UPDATE FILE PFS-USER-DESC
*}#3)}"ASSEMBLE & RUN MAINT-LOCKS ON A COPY OF LOCKS-PFS
*}#4)}"CAUTIOUSLY PLACE NEW LOCKS FILE IN SYSTEM, AND HAVE A
*}&NEW SAVD MADE IMMEDIATELY


* PROCEDURE TO ASSEMBLE NEW VERSION OF PFS
*}#DEPENDING ON AN ASSEMBLY-TIME PARAMETER--CONVERT--TWO VERSIONS
*}&OF PFS CAN BE PRODUCED.}"CONVERT EQU +1 GIVES RISE TO A SPE-
*}&CIAL PFS WHICH WILL LOAD OLD DUMP FILES.}"CONVERT EQU -1
*}&(NORMAL MODE) ASSEMBLES THE REGULAR PFS.}"THE SOURCE FILE
*}&IS INITIALIZED THIS WAY (-1).
*}#AN ARRAY CALLED "BAD" CAN BE CHANGED IN SIZE A SMALL AMOUNT
*}&TO PERMIT PFS TO BE ASSEMBLED INTO THE TIGHTLY PACKED 940
*}&16K ADDRESS SPACE.}"ASSEMBLE ONCE AND LOAD.}"DDT WILL TYPE OUT:
*}&"IDENT.}#PFS}$YYYYY".}"YYYYY SHOULL BE 40000.}"IF NOT,
*}&ADJUST THE SIZE OF BAD AND REASSEMBLE.
*}#UPON LOADING SUCCESSFULLY (40000), DO:
*}#1) SETUB[SEMICOLON]G}"(INITIALIZES SOME TABLES)
*}#2) SPOTS[SEMICOLON]G}"(ASKS FOR A FILE--GIVE IT THE BAD-SPOT-LIST)
*}#3) SAVE[SEMI-COLON]G}#(DOES NOT ASK FOR A FILE--GIVE IT ONE
*}&ANYWAY, LIKE #2:PFS:9SUB.
*}#LOTS OF LUCK AFTER THAT

* PROGRAM TO MAINTAIN THE PFS LOCKS FILE
*}#THIS PROGRAM IS USED TO INITIALIZE OR MODIFY A COPY OF THE
*}#PFS-LOCKS FILE.}"IT ASKS FOR:
*}#1)}"MAXIMUM NUMBER OF PFS USERS (PFS PARAMETER)--TYPE -1
*}(IF YOU ARE EDITING AN EXISTING FILE--OTHERWISE
*}(A NEW LOCKS FILE IS CREATED.
*}#2)}"IF EDITING AN EXISTING FILE, THE FILE NAME IS CALLED FOR.
*}(IF NOT EDITING, A DEFAULT PFS USER NUMBER IS CALLED FOR.
*}#IT THEN GOES INTO A LOOP ASKING FOR USER PFS NO., USER TSS NO.,
*}#AND USER NAME(PASSWORD), UNTIL A CONTROL D IS TYPED IN RESPONSE
*}#TO A USER PFS NO.
*}#3)}"AT THAT POINT IT ASKS FOR OUTPUT FILE NAME.

MSG}$MACRO D,G,2; LDA =G(1); LDB =-1; LDX =-1; BRS 34; BRU G(2)
G(1)}#ASC "D(1)"
G(2)}#EQU *; FRGT G(1),G(2); ENDM

ORG}$EQU *-240B

START}"CLA; LDX =-3777B; STA XBL+3777B,2; BRX *-1
}'MSG ($MAXIMUM USER NO.: /)
}'LDB =10; LDX =-1; BRM BRS38; STA MAXUNO
}'SKG =-1; BRU SC
}'MSG ($DEFAULT USER NO.: /)
}'LDB =10; LDX =-1; BRM BRS38; STA DEFUNO
}'LDA MAXUNO; MUL =-8; LSH 23; STA IXRV
}'CAX; CLA; STA IXRV,2; BRX *-1; STA TEMP1
}'CLX
SA}%LDA DEFUNO; STA XBL,2; EAX 1,2; MIN TEMP1
}'LDA TEMP1; SKG MAXUNO; BRU SA
SB}%MSG ($$USER PFS NO.: /)
}'LDB =10; LDX =-1; BRM BRS38; STA PFNO
}'CBA; SKE =4B7+144B; BRU S0
}'MSG ($OUTPUT FILE: /)
}'CLEAR; LDA =2B6; BRS 16; ZRO *
}'STA FILE; LDA =4000B; LDX =10000B
}'BIO FILE; ZRO *; LDA FILE; BRS 20; BRS 10
S0}%LDA PFNO; SKG MAXUNO; SKG =0; BRU S3
}'MSG ($USER TSS NO.: /)
}'LDB =10; LDX =-1; BRM BRS38; STA TSNO
}'SKN TSNO; BRU S4; CNA; STA TSNO
}'LDA DEFUNO; SKE =0; BRU S5
}'MSG ($DEFAULT PFS USER NO.: /)
}'LDB =10; LDX =-1; BRM BRS38; STA DEFUNO
S5}%LDX TSNO; STA XBL,2; BRU S6
S4}%LDX TSNO; LDA PFNO; STA UNOTAB,2
S6}%LDA PFNO; CLB; LSH 3; CNA; CAX; STA TEMP1
}'CLAB; STP IXRV,2; STP IXRV+2,2; STP IXRV+4,2
}'EAX IXRV,2; CXA; ETR =37777B; MUL =3; LSH 23
}'SUB =1; STA UNAMP; STA UNAMP+1
}'MSG ($USER NAME: /)
S1}%CIO =0; SKE ='('; BRU S2; BRM GGN
}'LDX TEMP1; STA IXRV+6,2; LDA =1; STA IXRV+7,2; BRU SB
S2}%WCI UNAMP; BRU S1
SC}%MSG ($INPUT FILE: /)
}'CLEAR; BRS 15; ZRO *
}'STA FILE; LDA =4000B; LDX =XBL
}'BIO FILE; ZRO *; LDA FILE; BRS 20
}'LDA IXRV; CLB; RSH 23; DIV =-8; STA MAXUNO; BRU SB
S3}%MSG (}"USER NO. OUT OF RANGE./); BRU SB

GGN}$0; CLA; STA GGNN
GGN1}#CIO =0; SKE =')'; BRU GGN2; LDA GGNN; BRR GGN
GGN2}#ADD GGNN; ADC =0; CAB
}'LCY 6; STA GGNN; BRU GGN1

BRS38}"0; STB B38R
}'CLA; STA B38F
B38L0}"CLA; STA B38V; LDA =4B7-1; STA B38N
B38L1}"CIO =0; SKG ='9'; SKG ='0'-1; BRU B38L2
}'SUB ='0'; XMA B38V; MUL B38R; LSH 23; ADM B38V
}'MIN B38N; BRU B38L1
B38L2}"SKN B38N; MRG =4B7; SKE =4B7+15B; BRU B38L3
}'STA B38F; BRU B38L0
B38L3}"CAB; LDA B38V; CNA; SKN B38F; CNA; BRR BRS38

B38F}#BSS 1
B38N}#BSS 1
B38R}#BSS 1
B38V}#BSS 1
FILE}#BSS 1
GGNN}#BSS 1
PFNO}#BSS 1
TEMP1}"BSS 1
TSNO}#BSS 1
UNAMP}"BSS 2
DEFUNO BSS 1
MAXUNO BSS 1

}'BSS 10000B+ORG-*
UNOTAB EQU *
XBL}$EQU UNOTAB
}'BSS 3777B
IXRV}#DATA -8*137

}'END

LIST}#IDENT

* PROGRAM TO LIST EXISTING PFS LOCKS FILE.

MSG}$MACRO D,G,2; LDA =G(1); LDB =-1; LDX =-1; BRS 34; BRU G(2)
G(1)}#ASC "D(1)"
G(2)}#EQU *; FRGT G(1),G(2); ENDM

START}"MSG ($PFS LOCKS FILE: /); CLEAR; BRS 15; BRU START; STA IFNO
S0}%MSG ($LISTING FILE: /); CLEAR; LDA =3B6; BRS 16; BRU S0; STA OFNO
}'MSG ($PFS DEFAULT USER NO.: /)
}'LDB =10; CLX; BRS 38; STA DEFUNO
}'LDA =4000B; LDX =XBL; BIO IFNO; ZRO *; LDA IFNO; BRS 20
}'LDA =HEADING; LDB =-1; LDX OFNO; BRS 34
}'LDA IXRV; CLB; RSH 23; DIV =-8; STA MAXUNO
}'LDA =1; STA UNO
S1}%LDA UNO; MUL =-8; LSH 23; CAX
}'BRM PNAME
}'LDA UNO; BRM USRCH; BRM PNUM
}'LDA =155B; CIO OFNO; LDA =152B; CIO OFNO
}'MIN UNO; LDA UNO; SKG MAXUNO; BRU S1
}'LDA =137B; CIO OFNO; BRS 17; BRS 10

USRCH}"ZRO; LDX =1; STA USRT; SKE DEFUNO; BRU USRCH1; MIN USRCH; BRR USRCH
USRCH1 LDA XBL,2; SKE USRT; BRU USRCH2; CXA; BRR USRCH
USRCH2 EAX 1,2; CXA; SKG MAXUNO; BRU USRCH1; MIN USRCH; BRR USRCH

PNAME}"ZRO; LDA IXRV,2; SKE =0; BRU PNM1; BRR PNAME
PNM1}#EAX IXRV,2; CXA; ETR =37777B; MUL =3; LSH 23; SUB =1; STA NMPTR
}'ADD =18; STA NMPTR+1
}'LDA UNO; SKG =99; BRU *+2; BRU PNM2; CLA; CIO OFNO
}'LDA UNO; SKG =9; BRU *+2; BRU PNM2; CLA; CIO OFNO
PNM2}#LDA UNO; LDB =10; LDX OFNO; BRS 36; CLA; CIO OFNO; CIO OFNO; CIO OFNO
PNM3}#GCI NMPTR; BRU PNM4; CIO OFNO; BRU PNM3
PNM4}#CLA; CIO OFNO; CIO OFNO; CIO OFNO; BRR PNAME

PNUM}#ZRO; STA PNUMT; SKG =99; BRU *+2; BRU PNUM1; CLA; CIO OFNO
}'LDA PNUMT; SKG =9; BRU *+2; BRU PNUM1; CLA; CIO OFNO
PNUM1}"LDA PNUMT; LDB =10; LDX OFNO; BRS 36; BRR PNUM

HEADING ASC "$PFS})USER}+TSS$NO.}*NAME}*NO.$$$/"

DEFUNO BSS 1
IFNO}#BSS 1
MAXUNO BSS 1
NMPTR}"BSS 2
OFNO}#BSS 1
PNUMT}"BSS 1
UNO}$BSS 1
USRT}#BSS 1
XBL}$BSS 3777B
IXRV}#BSS 1

}'END
