                               
* INTEGRAL TEST PROCESSOR


* HOLDING REGISTERS FOR ITP
         DE R1 AS T;
         DE R2 AS U;
         DE R3 AS R;
         DE R4 AS ABSP;

* PARAMETERS FOR ITP
         DP ADMASK←7774B4;
         DP OPMASK←177B5;
         DP MAXOP←43B;
       DP POPBIT←1B7;
         DP IABIT←4B4;
         DP RCHMASK←7400B;
         DP SCMASK←77B;
         DP SHOPMSK←3400B;
         DP MAXSHOP←4;
         DP WDLNG←24;
         DP UPSMASK←1400B;
         DP IOPTR←10B;
         DP IOINT←40B;
         DP BRMINS←13B5+IABIT;
         DP IONOINC←4B7;
         DP OUTSHIFT←2;
         DP EOBSHIFT←1;
         DP INTSHIFT←3;
         DP LONGAD←77B6;

* ADDRESS OF FLAG WORD
       DP FLAGADR←4B7;
* PARAMETERS FOR PAPER TAPE READER, USED BY SELF-FILL
       DP PTRADR←4B7+1;
       DP PTRERR←2B7;
       DP PTRSICK←1B7;
       DP HLTPTR←2;
       DP GOPTR←1;


* LOCATION 400B

       ORG 400B;

* INSTRUCTION TABLE.  MUST BE ON 128 WORD BOUNDARY
HLT:     GOTO RSTITP;
* OVERFLOW FROM EXU
EXU1:    Z←READ, GOTO IL0;
BRU:     Q←R, Z←-1, GOTO FIXP;
* OVERFLOW FROM BRX
BRX1:    M AND Q, GOTO FIXP IF LB#0, Q←R;
ETR:     FETCH, DGOTO ILOOP;
         AR←M AND Q;
MRG:     FETCH, DGOTO ILOOP;
         AR←M OR Q;
EOR:     FETCH, DGOTO ILOOP;
         AR←M EOR Q;
NOP:     GOTO ILOOP;
* OVERFLOW FROM UNPROTECT
UPR2:    MODE←Q OR Z, GOTO ILOOP;
EXU:     FETCH, Z←FLAGADR, DGOTO MAIN;
         ALERT, GOTO EXU1 IF NOSTROBE;
STA:    M←AR, GOTO STOR;
* OVERFLOW FROM SHIFT IN THESE THREE HOLES
ENDLSH:  AR←M AND Q ! Z AND NOT Q, GOTO ILOOP;
STB:     M←BR, GOTO STOR;
ENDRSH:  BR←M AND Q ! Z AND NOT Q, GOTO ILOOP;
STX:     M←XR, GOTO STOR;
GOTSHM:  T←Q←Z, M←BR, GOTO DOSHIFT;
BRX:     M←XR, Z←-1, DGOTO BRX1;
         M←XR←M+1, DGOTO ILOOP, Q←IABIT;
BRM:     M←P, SETA, CALL STOR;
         Q←0, GOTO FIXP;
UPOT:    ALERT, DGOTO ILOOP;
         Z←BR, POT;
UPIN:   ALERT, DGOTO LDB1;
         M←READ, DGOTO ILOOP;
RCH:     M←R, Q←RCHMASK, DGOTO RCH1;
         M←M AND Q LCY 16, T←Z←XR;
SKE:     FETCH, DGOTO TEST;
         M←M EOR Q;
BRR:     Q←ADMASK, FETCH, DGOTO FIXP;
         Q←M AND NOT Q, Z←0;
SKB:     Q←BR, FETCH;
SKB1:    M←M AND Q, GOTO TEST;
SKN:     Q←4B7, FETCH;
SKN1:    M←M AND Q ! Q, GOTO TEST;
SUB:     FETCH, DGOTO ILOOP;
         AR←Q-M;
ADD:     FETCH, DGOTO ILOOP;
         AR←Q+M;
SKR:     Z←R, FETCH, DGOTO SKN1;
         M←M-1, Q←BOUND, SETA, CALL STOR1;
MIN:     Q←1, FETCH;
MIN1:    M←M+Q, GOTO STOR;
XMA:     FETCH, DGOTO CBA;
         Q←M, M←AR, DGOTO STOR;
ADM:     FETCH, GOTO MIN1;
* SKG WHERE SIGNS AGREE
SKG1:  M←M-Q, Q←4B7, GOTO SKN1;
SHIFT:   M←R, Q←SCMASK, DGOTO SHFT1;
         Z←M AND Q, Q←SHOPMSK;
SKM:     Q←BR, FETCH;
         M←M AND Q - Z AND Q, GOTO TEST;
LDX:     Q←0, FETCH, DGOTO ILOOP;
LDX1:    XR←M AND NOT Q ! Z AND Q;
SKA:     FETCH, GOTO SKB1;
* SKG WHERE SIGNS DISAGREE
SKG2:  Q←4B7, GOTO SKN1;
* SKG IS SIGN OF M-AR IF SIGNS AGREE, SIGN OF AR IF NOT
SKG:   FETCH, DGOTO SKG1;
       GOTO SKG2 ON M EOR Q<0;
LDB:     FETCH, DGOTO ILOOP;
LDB1:    BR←M;
LDA:     FETCH, DGOTO ILOOP;
LDA1:    AR←M;
EAX:     M←R, Q←ADMASK, DGOTO LDX1;
         Z←XR, DGOTO ILOOP;
UPS:     Q←R, M←UPSMASK;
         GOTO M AND Q LCY 16 MRG UPSTAB, M←Z←MODE;
XJ:      REL←Q, GOTO BRU;
         CALL UERROR;
LAS:     Q←Z←R, DGOTO XCA1;
         Q←Q LCY 16;
* LOCATION 510B

* UPS TABLE. MUST BE ON 4-WORD BOUNDARY
UPSTAB:  Q, STROBE, GOTO ILOOP;
UPR:     Q, CLRPRO, Q←SAVESCHEDULE, GOTO UPR1;
PRO:     Q, SETPRO, GOTO * IF PRONEX;
       Q←SAVESCHEDULE+ONSCHEDULE;
PRO1:    Z←MODE←Z AND NOT Q, Q←ONSCHEDULE;
         M AND Q, GOTO ILOOP IF LB=0;
         MODE←Z MRG SAVESCHEDULE, GOTO ILOOP;
UPR1:  Q←M AND Q LCY 1, GOTO UPR2;

* LOCATION 520B
* RCH TABLE. MUST BE ON 16-WORD BOUNDARY.
*  ENTERED WITH DGOTO ILOOP PENDING, ABX IN MQZ
RCHTAB:  Q←Z←R MRG LSCRATCH-4, GOTO XCA1;
CCA:     Z←R MRG LSCRATCH-4, Q←0, GOTO XCA1;
CLAB:    AR←M←0, GOTO CAB;
CLA:     AR←0;
CLB:     BR←0;
CLX:     XR←0;
CAB:     BR←M, GOTO ILOOP;
* THIS LINE IS EXECUTED FROM SEVERAL PLACES
CBA:     AR←Q, Q←LNGSX;
XAB:     AR←Q, GOTO CAB;
CBX:     XR←Q;
CXB:     BR←Z;
XXB:     XR←Q, GOTO CAB, M←T;
CXA:     AR←Z, GOTO ILOOP;
CAX:     XR←M;
XXA:     XR←M, M←T, GOTO CXA;
CNA:   AR←0-M;


* RESET SEQUENCE FOR COMPUTE MODE
RSTITP: Z←MODE, Q←ONSCHEDULE+SAVESCHEDULE;
IRESET:  MODE←Z AND Q, .TCX, MAR←ONCOMPUTE+ITPREL, FETCH;
         Z←REL←M, MAR←ITPBND, FETCH;
         Q←BOUND←4000B;
         GOTO *+2 ON M-Q<0, Q←2;
         BOUND←M;
         MAR←Z+Q, M←P, STORE;
         IOCTL←0, DGOTO MAIN;
         P←3;



* CHECK R FOR < BOUND, THEN STORE M WITH MAR AND GOTO ILOOP
* UNLESS A IS SET, IN WHICH CASE RETURN
STOR:    Q←BOUND;
STOR1:   GOTO *+2 ON Z←R<0;
         GOTO RSTITP ON Q-Z<=0;
         STORE, RETURN IF ASET, Q←4B7;
* FALL THROUGH

ILOOP:   MAR←ABSP←ABSP+1, FETCH, Z←FLAGADR;
         Q←P, ALERT, DGOTO MAIN;
         P←Q+1, Z←READ, GOTO IL0 IF NOSTROBE;
* CPU IN WAIT LOOP
IOWAIT:  CALL CHECKIO;
         GOTO IOWAIT ON Q AND Z=0;
* CONTINUE EXECUTION, STARTING WITH INSTRUCTION ADDRESSED BY P
ICONT:   M←P;
         Q←REL;
         MAR←ABSP←M+Q, FETCH, CALL CHECKIO;
IL0:     Q←IOCTL;
         GOTO DOIO ON Z←Q AND Z#0, Q←OPMASK;
IL1:     U←Q←M AND Q LCY 8;
         Q←R←Q LCY 2, Z←2*MAXOP+2;
         GOTO POPMB ON Q-Z>=0, Z←REL, CLRA;
IL2:     CALL INDEX ON T←M LCY 1<0, Q←ADMASK;
         Q←R←M AND NOT Q, M←R;
* CHECK THAT COMPUTE MODE IS ON
         MAR←Q+Z, GOTO IOWAIT ON MODE>=0;
         DGOTO M MRG HLT, Q←T;
         GOTO *+1 ON Q LCY 8<0, Z←Q←AR;
* INDIRECTION
         Z←REL, R←M, FETCH, GOTO *+2;
         GOTO MAIN;
         GOTO IL2 ON M>=0, Q←LONGAD-2B6;   *2B6 IS PRIVATE MEMORY
* ABSOLUTE INDIRECTION
         CALL INDEX ON M LCY 1<0;
         R←MAR←M AND NOT Q MRG 4B7, Z←R;
         GOTO Z MRG HLT, Z←Q←AR;
* SUBROUTINE FOR INDEXING
INDEX:   Z←XR, DRETURN;
         M←M+Z, Z←REL;

* OPCODE IN Q GREATER THAN MAX DEFINED.  TRAP UNLESS IT IS >77B,
* IN  WHICH CASE IT IS POP.
POPMB:   Z←POPBIT*2/1B5;
         GOTO RSTITP ON Q AND Z=0, R←EXPOP;

* EXECUTING POP WITH NUMBER RCY 1 IN U, EFFECTIVE ADDRESS IN R. STORE
* P IN 0, R IN 1 AND JUMP TO U
EXPOP:   Z←MAR←REL;
         M←P MRG IABIT, HSTORE;
       Z←-1, Q←U, DGOTO FIXP;
       Q←Q LCY 1;

* SET P TO Q+Z, RECOMPUTE ABSP AND GO TO ILOOP
FIXP:    Q←P←Q+Z;
         Z←REL, DGOTO ILOOP;
         ABSP←Q+Z;

* THESE LINES ARE USED  BY SKIP INSTRUCTIONS
TEST:    M, GOTO ILOOP IF LB#0;
SKIP:    Q←P, Z←1, GOTO FIXP;
* REMAINDER OF RCH
RCH1:    DGOTO M MRG RCHTAB, Q←BR;
         M←AR, DGOTO ILOOP;

* SUBROUTINE TO CHECK STROBE, GOTO MAIN IF SET, AND HAVE FLAGWORD IN Z,
* IOCTL IN Q
CHECKIO: Q←IOCTL, Z←FLAGADR, ALERT, DGOTO MAIN;
         Z←READ, RETURN IF NOSTROBE;



* AFTER SETTING A CONTROL REGISTER, GO THROUGH MAIN
* IN CASE MODE HAS CHANGED.  THIS REQUIRES BUMPING P
XCA1:    T←SKZ, Z←Q, DGOTO CBA;
         SKZ←M, Q←T, DGOTO *+1;
         Z←P, DGOTO MAIN;
         P←Z+1;


* REST OF SHIFT
SHFT1:   M←R←M AND Q LCY 16, Q←MAXSHOP;
         GOTO RSTITP ON Q-M<0, Q←WDLNG;
LNGSHL:  T←BR, GOTO SHORTSH ON Z-Q<0;
         Z←Z-Q, Q←AR, DGOTO CBA;
         T←BR←Q, Q←T, DGOTO *+1;
         GOTO Q+M, Q←WDLNG;
LNGSX:   GOTO LNGSHL;
         BR←0, GOTO LNGSHL;
         AR←-1, GOTO LNGSHL ON T<0;
         AR←0;
         GOTO LNGSHL;
SHORTSH: Q←1;
       M AND NOT Q, GOTO *+2 IF LB=0, M←WDLNG;
         Z←M-Z;
         GOTO GOTSHM ON MAR←Q-Z>=0, Q←0;
SHLOOP:  MAR←MAR+1, Q←Q LCY 1 MRG 1, GOTO SHLOOP IF R0<0;
         M←BR, T←Q;
DOSHIFT: M←M LCL Z, U←AR;
         BR←M LCH Z, M←U;
        M←M LCL Z, Q←SHMRGX;
         Z←M LCH Z, M←R;
         DGOTO M+Q, M←BR;
         Q←T;
SHMRGX:  BR←M AND NOT Q ! Z AND Q, GOTO ENDLSH;
         BR←M AND NOT Q, GOTO ENDLSH;
         AR←Z OR NOT Q, GOTO ENDRSH ON U<0;
         AR←Z AND Q, GOTO ENDRSH;
         AR←Z AND Q ! M AND NOT Q, GOTO ENDRSH;
* ENDLSH, ENDRSH AND GOTSHM ARE FILLING EMPTY WORD IN THE
* INSTRUCTION TABLE

* THE AND OF THE FLAG WORD AND IOCTL (IN Z) IS #0. LOOK FOR ACTIVE
* DEVICE
DOIO:    Q←Z, T←R0←0;
         Q←Q LCY 20, Z←T←T+1, DGOTO *;
         Q←R0←Q LCY 3, GOTO *+1 IF R0<0, M←IOPTR-2;
* GOT DEVICE NUMBER+2 IN T AND Z
         M←M+Z, Q←REL;
         MAR←Q+M, FETCH, Q←2B7;
         Q←Q LCL Z;
         Z←Q LCH Z MRG 4B7, Q←REL;
         U←M+Q;
         GOTO *+2 ON Q←R←M←M+1<0, SETA;
         STORE;
         GOTO ITPOUTPUT ON Q LCY OUTSHIFT<0;
* INPUT
         ALERT, MAR←U, DGOTO DONEIO, M←77B6;
         M←READ, R←Q AND NOT M, CALL STOR;
ITPOUTPUT: DGOTO NOEND ON M LCY EOBSHIFT>=0;
       MAR←U, FETCH;
        M EOR Q, GOTO NOEND IF LB#0;
* ENCOUNTERED END-OF-BUFFER
         Q←IOCTL, DGOTO DONEIO;
         IOCTL←Q AND NOT Z;
NOEND:   ALERT;
         Z←M, POT;
* COMPLETED IO. CHECK FOR INTERRUPT
DONEIO: M←U, Q←OPMASK, DGOTO ICONT;
       GOTO *+1 ON M LCY INTSHIFT<0, Z←0;
* SHOULD CAUSE IT
         M←T MRG BRMINS+IOINT, GOTO IL1;

* SELF-FILL. TURN ON READER AND READ 64 WORDS (256 6-BIT CHARACTERS)
* INTO THE FIRST 64 (RELATIVE) LOCATIONS IN ITP MEMORY, AFTER
* SETTING ITPREL TO 10000B AND ITPBND TO 40000B
XSELFFILL: U←7777B+2B6;
       MAR←ITPREL, M←U+1, STORE;
       MAR←MAR+1, M←40000B+2B6, STORE;
         Z←PTRADR, ALERT;
         Z←GOPTR, POT;
* SKIP OVER INITIAL BLANK TAPE
         Z←PTRADR, ALERT;
         GOTO *-1 ON M←E2>=0, PIN, .VCY, Q←377B, .BL←10B, .BR←10B, .TAX;
         GOTO *-2 ON M AND Q=0, ABSP←-64;
* ASSEMBLE ONE WORD FROM PAPER TAPE. USES AR, R. LEAVES
* RESULTS IN AR,M
SFLOOP:  M←Q←0, R←-4;
         M←M OR Q LCY 4, DGOTO * ON R←R+1<0;
         AR←M←M LCY 2, CALL RBPT;
* STORE ASSEMBLED WORD AND CLOSE LOOP
         M←M OR Q, MAR←U←U+1, STORE, DGOTO IRESET;
         GOTO SFLOOP ON ABSP←ABSP+1<0, M←0;

* SUBROUTINE TO READ ONE BYTE FROM PAPER TAPE FOR SELF-FILL.
* CHECK FOR SICK READER AND STOP IT IN THAT CASE.
* CHECK PARITY AND STOP THE READER IF IT IS WRONG.  OTHERWISE
* RETURN THE LAST 6 BITS OF THE BUTE IN Q, AR IN M.
* ASSUME THE READER IS RUNNING ON ENTRY.  IF IT IS STOPPED,
* THE INPUT WORD WHICH CAUSED THE TROUBLE IS DISPLAYED IN
* THE SENSE LIGHTS.  CLOBBERS MQZ, R0,T
RBPT:    Z←PTRADR, ALERT;
     GOTO RBPT ON T←Q←E2>=0,PIN,.VCY,M←PTRERR+PTRSICK,.BL←10,.BR←10,.TAX;
         GOTO STOPTR ON Z←M AND Q#0, R0←-WDLNG;
* GOT A CHARACTER IN Q. COMPUTE PARITY OF THE WHOLE WORD, WHICH
* SHOULD BE EVEN SINCE THE FLAG BIT IS SET
         Z←Q EOR Z, R0←R0+1;
         Q←Q LCY 1, GOTO *-1 IF R0<0, M←77B;
         Q←M AND Q, M←AR, RETURN IF Z>=0;
* STOP READER AND DISPLAY INPUT WORD IN LIGHTS
STOPTR:  Z←PTRADR, ALERT;
         Z←HLTPTR, POT;
         Z←SSLADR, ALERT;
         Z←T, POT, GOTO *-1;

       DP ADMASK←77000000B;

* CHANGERT. SECOND WORD (IN TEMP2) IS DESIRED NEW VALUE OF PRTT.
CHRT:  CALL CHKPID, SPT1←0;
* SCAN DOWN RTQ LOOKING FOR TWO THINGS
*  1) SLOT TO INSERT THIS REQUEST.
*  2) PROCESS (NOW IN M) ON QUEUE. IF FOUND, IT IS REMOVED
* DURING THIS SCAN WE ASSIGN HOLDING REGISTERS AS FOLLOWS
*      TEMP2 - DESIRED NEW VALUE OF PRTT
*      TEMP3 - CLOCK VALUE FOR PRECEDING NODE.
*      TEMP4 - ADDRESS OF PRECEDING NODE
*      TEMP1 - SAME FOR CURRENT NODE.
*      SPT1 - SAME FOR ENTRY AFTER WHICH TO INSERT (IF FOUND, OTHERWISE 0)
*      SPT2 - SAME FOR TARGET PROCESS, BUT WITH 0 IN  TOP 6 BITS
*      SPT3 - PRRTP OF TARGET PROCESS, I.E. 0 IF IT IS NOT ON RTQ
*      SPT4 - CLOBBERED
       SPT2←M, CALL GETRTP;
       Q←ADMASK, TEMP3←OLDRT;
       SPT3←M AND NOT Q, M←TEMP1←RTQ-PRRTP, CALL GETRTP;
* M = ADDRESS OF NEXT (ABOUT TO BECOME CURRENT) NODE ON RTQ,
* Q = ADMASK
RTSCAN: Z←M AND NOT Q, GOTO ENDRTQ IF NULLPTR, Q←TEMP4←TEMP1;
       Q←SPT2, TEMP1←Z, CALL GETRTP;
       GOTO CHRT1 ON Z EOR Q#0, Z←TEMP2;
* FOUND THE PROCESS ON RTQ. TAKE IT OFF
       PROTECT(PRTPRO), Q←ADMREG;
       TEMP1←M←TEMP4, CALL GETRTP, SPT3←0;
       Z←M, CALL GETRTP, TEMP4←MAR;
       Z←SPT4←M AND Q ! Z AND NOT Q;
       M←M AND NOT Q, STORE;
       MAR←TEMP4, M←Z, STORE;
* NOW LOOK AT TEMP2 TO SEE WHETHER THE PROCESS HAS TO BE
* PUT BACK ON RTQ
       GOTO DONERT ON TEMP2<0, UNPROTECT;
* AND AT SPT1 TO SEE WHETHER THE INSERTION POINT HAS ALREADY BEEN FOUND
       Q←ADMASK, DGOTO RTSCAN, M←SPT1;
       M, GOTO INSRTQ IF LB#0, M←SPT4;
* IT HAS NOT. PROCEED WITH SCAN FOR INSERTION SLOT (NOTE DGOTO RTSCAN ABOVE)
* FETCH TIME FROM CURRENT NODE
CHRT1: MAR←SUBR+1, FETCH, SPT4←M;
       TEMP3←M, Q←TEMP3, CALL TIMINT;
       Q←ADMASK, Z←TEMP4, GOTO RTSCAN IF R0>=0;
* FOUND SLOT FOR INSERTION. RECORD IT
       SPT1←Z;
       Q←SPT3, DGOTO INSRTQ;
* IS PROCESS STILL ON RTQ. IF NOT, WE MUST KEEP SCANNING
       Q, GOTO RTSCAN IF LB#0, Q←ADMASK;


       ORG 1000B;

* READY TO DO INSERTION. SHOULD WE DO IT (I.E. IS DESIRED TIME >=0)
INSRTQ: GOTO DONERT ON TEMP2<0, Q←ADMASK;
* YES
       PROTECT(PRTPRO);
       M←Z←SPT2, CALL GETRTP;
       SPT2←M, TEMP1←MAR;
        M←SPT1, CALL GETRTP;
       TEMP3←Z AND NOT Q ! M AND Q, Z←SPT2;
       Q←M AND NOT Q ! Z AND Q, M←TEMP3, STORE;
       Q←MAR←TEMP1, M←Q, STORE, DGOTO DONERT;
       MAR←Q+1, M←TEMP2, STORE;
* REACHED END OF RTQ. IF INSERTION IS DESIRED, DO IT HERE
ENDRTQ: SPT1←Q, GOTO INSRTQ;
* FINISHED
DONERT: CALL FIXRTQ;
       R;
       CALL UERROR;
UERROR:   Z←SSLADR, ALERT;
         Z←OS MRG 2525B4, POT, GOTO UERR1;
         CALL UERROR;
CHKPIW:  GOTO FREECPU ON M#0;
         GOTO RETCALL;
         .DGO;
         .LOC;
         .SSP←1;
         CALL UERROR;
UERR1:   MODE←4B7+14, UNPROTECT, GOTO SAVEST;
         .LOC;
         .SSP←1;
         .C←4B3;
         .DGO;
         .LOC;
         .SSP←1;
         .C←4B3;
         .DGO;
         .LOC;
         .SSP←1;
         .C←4B3;
         .DGO;
         .LOC;
         .SSP←1;
         .C←4B3;
         .DGO;
         .LOC;
         .SSP←1;
         .C←4B3;
         .DGO;
         .LOC;
         .SSP←1;
         .C←4B3;
         .DGO;
         .LOC;
         .SSP←1;
         .C←4B3;
         .DGO;
         .LOC;
         .SSP←1;
         .C←4B3;
         .DGO;
         .LOC;
         .SSP←1;
         .C←4B3;
         .DGO;
         .LOC;
         .SSP←1;
         .C←4B3;
         .DGO;
         CALL UERROR;


       END;