DEF    IDENT                   FIRST LINE OF DEF.   18 SEPT. 1966.
*******INSTRUCTIONS FOR ASSEMBLING, LOADING, AND INITIALIZING NARP
*      ASSEMBLE THE FIRST PACKAGE, DEF-TEMP
*      ASSEMBLE WITH CONTINUE THE SECOND PACKAGE, MISC
*      ASSEMBLE WITH CONTINUE THE THIRD PACKAGE, CENTRL
*      ASSEMBLE WITH CONTINUE THE FOURTH PACKAGE, DIRECT
*      ASSEMBLE WITH CONTINUE THE FIFTH PACKAGE, MAC-MESS
*      LOAD AT 0 EACH OF THE FIVE BINARIES, IN THE ABOVE ORDER
*      START THE NEW CODE AT "INIT" AND ASSEMBLE THE SIXTH
*         PACKAGE, INARP, TO NOTHING.  (THIS INITIALIZES NARP)
*      CODE WILL NOW BE IN 20000B-37777B
*      START LOCATION 24000B, CONTINUE LOCATION 24001B


* CODED BY ROGER HOUSE, PROJECT ARPA, UNIV. OF CALIF., BERKELEY.

* FOLLOWING IS THE CODE OF THE ASSEMBLER NARP (NEW ARPAS) FOR THE SDS
* 940.  ALTHOUGH THIS IS A COMPLETELY RE-WRITTEN ASSEMBLER, THE 
* SOURCE LANGUAGE IS THAT PROCESSED BY THE ARPAS ASSEMBLER EXCEPT 
* FOR MINOR REVISIONS.  --  THE PACKAGE STRUCTURE OF NARP IS OUTLINED
* BELOW:

* PACK. #   IDENT NAME         CONTENTS
*    1        DEF         DEFINITIONS OF OPCODES
*                         DEFINITIONS OF GENERAL MACROS
*                         DEFINITIONS OF SPECIFIC AND AD HOC MACROS
*             TEMP        GLOBAL PARAMETERS
*                         INITIALIZATIONS OF VARIOUS THINGS
*                         ALTERED ROUTINES
*                         WORKING CELLS
*                         VARIABLE TABLES

*    2        MISC        CODE FOR STARTING NARP
*                         CODE FOR CONTINUE NARP
*                         POP CODE
*                         ERROR HANDLING ROUTINES
*                         I/O ROUTINES
*                         OTHER MISCELLANEOUS ROUTINES

*    3        CENTRL      CENTRAL LOOP OF NARP
*                         BASIC ROUTINES

*    4        DIRECT      CODE FOR NON-MACRO DIRECTIVES

*    5        MAC         CODE FOR MACRO DEFINITIONS
*                         CODE FOR MACRO DIRECTIVES
*                         CODE FOR MACRO CALLS
*             MESS        MESSAGES
*                         ERROR MESSAGES
*                         TABLE NAMES


* ASSEMBLY PROCEDURE:  DEF-TEMP SHOULD BE ASSEMBLED FIRST, FOLLOWED BY
* THE REST OF THE PACKAGES IN THE ORDER THEY ARE LISTED ABOVE.  ALL
* PACKAGES AFTER DEF-TEMP MUST BE ASSEMBLED BY USING 'CONTINUE NARP'.

* LOADING PROCEDURE:  THE PACKAGES SHOULD BE LOADED IN THE ORDER THEY
* ARE LISTED ABOVE, ALL AT LOCATION 0.

* INITIALIZATION PROCEDURE:  START NARP AT INIT AND ASSEMBLE INARP (OR
* SOME OTHER INITIALIZATION PROGRAM) TO NOTHING.  THE ASSEMBLY WILL END
* WITH A MESSAGE TELLING WHETHER IT WAS A SATISFACTORY INITIALIZATION,
* BUT BEWARE!  THE CHECKS MADE ARE NOT EXHAUSTIVE!!  ALL INITIALIZATION
* PROGRAMS SHOULD BE CAREFULLY CONSTRUCTED IN A SIMPLE, STRAIGHT-FORWARD
* WAY.  NOW 'PLACE' 20000B-37777B ON A FILE WITH A 'GO TO' ADDRESS
* OF 24000B.  USE THE DDT COMMAND SEMI-C TO SAVE THE SYMBOLS FOR
* FUTURE DEBUGGING (MUST BE LOADED AT 0 WHEN USED).  THE START ADDRESS
* FOR NARP IS 24000B AND THE CONTINUE ADDRESS IS 24001B.
* TO START NARP FROM INSIDE DDT AFTER INITIALIZATION, GO TO
* START, NOT INIT, AND HAVING ONCE STARTED NARP FROM INSIDE DDT GO TO
* CONTINUEFOR SUCCESSIVE ASSEMBLIES.






* GENERAL MACRO DEFINITIONS:

* SUBROUTINE STRING:  D(1) IS TREATED AS A MACRO TO BE CALLED WITH
* A STRING OF ALL SUBROUTINE NAMES AS PARAMETERS.

RSTRG  MACRO   D
       D(1)    ADDTO,ARGBC,ASGN,BSTOR,BKSP,BPF,CCD2,CCD4
       D(1)    CHKV,CHT,DEFLB
       D(1)    DIV,EUO,FF,FILTR,FOLEC,FOR,GARBC
       D(1)    GRAB,HLAST,IFSKP,IGNOR,INCLC,LABM,LIT
       D(1)    LOOK,LOOKY,LSYMB,MODCH,MUL,MWC,OUTB,OUTC
       D(1)    OVAL,PBY,PS,PV,PILE,PWR,QUIKL,REL,SAVEX,SETSQ,SGE
       D(1)    SHTLK,SKL,SLE,SNE,SEE,SSNSS,STACK,STASH,STKI,SWC
       D(1)    TFULL,TRPER
       D(1)    TSCAN,USTKI,WSTOR
       D(1)    EOL,LL,LCHR,TAB,RLCH,LSY,LNO,LISTF,HOWL
       D(1)    WECS,WESS,WEMS,WESYS
       ENDM

* SPECIAL SUBROUTINE STRING:  SAME AS RSTRG, BUT FOR RECURSIVE SUBROUTINES.

SSTRG  MACRO   D
       D(1)    DF,DFABS,DSUP,EXPR,EXPRI,GNE,GNLC,STRNG,1CHAR
       ENDM


* POP STRING:  MORE OR LESS THE SAME AS RSTRG, BUT FOR POP NAMES.

PSTRG  MACRO   D
1M     NARG
       IF      1M=1
       D(1)    DVI,MTI,POP,PUSH,TYCO,TYMES,TYNOD,TYNOB,WEC,WES,WEM
       ELSE
       D(1)    D(2),DVI,MTI,POP,PUSH,TYCO,TYMES,TYNOD,TYNOB,WEC,WES,WEM
       ENDF
       ENDM


* GENERATE OPD:  THE PARAMETERS ARE DEFINED AS POPS REQUIRING ADDRESSES.

GOPD   MACRO   D
1M     NARG
       RPT     (2M=1,1M)(PADDR=100B)
D(2M)  OPD     PADDR*1B5,2
       ENDR
       ENDM

       PSTRG   GOPD            DEFINE ALL POPS


* TEMP:  EACH PARAMETER IS DEFINED AS AN EXTERNAL SYMBOL NAMING 1 WORD.
T      MACRO   D
1M     NARG
       RPT     (2M=1,1M)
       IF      D(2M)=0
       BSS     1
       ELSE
D(2M)  BSS     1
       ENDF
       ENDR
       ENDM

* TEMP INIT:  MORE OR LESS LIKE T, BUT EACH LABEL IS FOLLOWED BY 
* THE INITIAL VALUE OF THE WORD IT NAMES.

TI     MACRO   D
1M     NARG
       RPT     (2M=1,2,1M)
       IF      D(2M)=0
       DATA    D(2M+1)
       ELSE
D(2M)  DATA    D(2M+1)
       ENDF
       ENDR
       ENDM

* SUBROUTINE ENTRY:  EACH PARAMETER IS DEFINED AS AN EXTERNAL SYMBOL
* NAMING 2 WORDS:  ZRO,  BRU E.&D(I)

SUBR   MACRO   D
1M     NARG
       RPT     (2M=1,1M)
D(2M)  ZRO;  BRU E.&D(2M)
       ENDR
       ENDM

* SPECIAL BRU GENERATOR:  THIS IS THE SAME AS BRUG, BUT THE FIRST 
* PARAMETER IS TAKEN AS A LETTER STRING TO BE APPENDED TO THE BEGIN-
* NING OF ALL THE OTHER PARAMETERS.
SBRUG  MACRO   D
1M     NARG;  RPT (2M=2,1M);  BRU D(1).&D(2M);  ENDR
       ENDM


* BRU GENERATOR:  EACH PARAMETER CAUSES BRU <PARAMETER> TO BE GENERATED.
BRUG   MACRO   D
1M     NARG;  RPT (2M=1,1M);  BRU D(2M);  ENDR
       ENDM

* SKIP:  A BRANCH INSTRUCTION IS GENERATED TO SKIP SOME INSTRUCTIONS.
SKIP   MACRO   D
1M     NARG;  IF 1M;  BRU *+[D(1)]+1-2*[D(1)<0];  ELSE;  BRU *+2;  ENDF
       ENDM

* SKIP IF BETWEEN OR EQUAL TO UPPER BOUND:  IF A LIES IN THE RANGE
* (D(1),D(2)] THEN A SKIP OCCURS, ELSE NO SKIP.
SKBE   MACRO D;  SKG D(2);  SKG D(1);  ENDM

* SKIP IF A NON-NEGATIVE:
SKANN  MACRO;  SKA =4B7;  ENDM

* INITIAL REFERENCE TABLE INITIALIZATION:  THE INSTRUCTIONS ZRO *
* ZRO 0 ARE OUTPUT D(1) TIMES.
IRTI   MACRO D;  RPT D(1);  ZRO *;  ZRO;  ENDR;  ENDM


* SET:  THE FIRST OF EACH PAIR OF ARGUMENTS IS EQU'ED TO THE VALUE OF 
* THE SECOND.
SET    MACRO   D
1M     NARG;  RPT (2M=1,2,1M);D(2M) EQU D(2M+1);  ENDR
       ENDM


* MIN TABLE POINTER:  SAME AS MIN BUT USED ON TABLE POINTER.  CHECK IS
* MADE THAT THERE IS ROOM IN THE TABLE.  ALL REGISTERS SAFE.
MINT   MACRO D;  STX MINTX;  EAX D(1)A
       MIN D(1);  XMA U.&D(1);  SKG D(1);  BRM TFULL
       XMA U.&D(1);  LDX MINTX
       ENDM

* RESERVE TABLE SPACE:  A CHECK IS MADE TO SEE IF THERE ARE (A) WORDS
* IN THE TABLE INDICATED.  ALL REGISTERS SAFE.
RESV   MACRO D;  STX MINTX;  EAX D(1)A
       ADD D(1);  XMA U.&D(1);  SKG U.&D(1);  BRM TFULL
       XMA U.&D(1);  SUB D(1);  LDX MINTX
       ENDM

* TABLE PARAMETERS:  A TABLE POINTER AND UPPER BOUND ARE SET UP.
TABP   MACRO   D
1M     NARG
       IF      1M>1
TMARK  EQU     D(2)
       ENDF
D(1)   ZRO     TMARK
2M     NCHR    D(1)
TMARK  EQU     TMARK+L.&D($,2M-1)
U.&D(1) ZRO    TMARK
       ENDM


* EXTERNAL:  THE PARAMETERS ARE DECLARED AS EXTERNAL.
XTRNL  MACRO   D
1M     NARG
       RPT     (2M=1,1M)
D(2M)  EXT
       ENDR
       ENDM

* TRAP:  A CALL OF A SUBROUTINE WHICH PRINTS AN ERROR MESSAGE IS GEN-
* ERATED.
TRAP   MACRO;  BRM TRPER;  ENDM


* NOT:  AN EOR IS GENERATED WHICH TAKES THE 1'S COMPLEMENT OF A.
NOT    MACRO;  EOR =-1;  ENDM

* CHOP:  AN ETR IS GENERATED WHICH CLEARS THE LEFTMOST 10 BITS OF A.
CHOP   MACRO;  ETR =37777B;  ENDM



* SPECIFIC AND AD HOC MACRO DEFINITIONS:


* SWITCH:  THE FIRST PARAMETER IS A WORD CONTAINING A MODE, THE SECOND
* IS THE ADDRESS OF A STATE-TABLE.  A SHOULD CONTAIN A COLUMN INDEX 
* FOR THE TABLE.  THE PROPER TABLE ELEMENT IS SELECTED, THE MODE IS 
* CHANGED, AND A BRU TO AN ACTION IS MADE.

SWITCH MACRO   D
       ADD D(1);  AXC;  LDB D(2),2;  CBX;  LSH 6;  STA D(1);  BRU 0,2
       ENDM

* MERGE:  INFORMATION IS ADDED TO THE INSTRUCTION BEING FORMED.
MERGE  MACRO   D
1M     NARG;  IF 1M;  LDA D(1);  ENDF;  MRG INSTR;  STA INSTR
       ENDM

* ADHOC1:  THE VALUE AND RFACTOR OF A LOOKED-UP SYMBOL ARE PLACED IN
* A AND B.
ADHOC1 MACRO;  LDA 1,2;  LSH 5;  RSH 19;  CAB;  LDA 2,2
       EAX 2,2;  ENDM


* C:  CTAB ENTRIES ARE CREATED (5 BITS, 5 BITS, 14 BITS).
C      MACRO   D
       DATA    [D(1)>0]*[D(1)]*2B6+[D(2)>0]*[D(2)]*4B4+[D(3)]
       ENDM

* OP:  OPWRD ENTRIES ARE GENERATED.  BITS: 1,1,7,3,3,5,4.
OP     MACRO   D
 DATA [D(1)]*4B7+[D(2)]*2B7+[D(3)>0]*[D(3)]*1B5+[D(4)]*1B4+[D(5)]*1B3+[D(6)]*20B+[D(7)]
       ENDM


STAB   MACRO   D
1M     NARG
       RPT     (2M=1,1M)
3M     NCHR    D(2M)
       DATA    D(2M$,3M-1)+D(2M$3M)*1M*1B6
       ENDR
       ENDM


* SHORT TABLE:  A TABLE ENTRY FOR THE ROUTINE SHTLK (SHORT LOOKUP) IS
* GENERATED.
SHTAB  MACRO   D
1M     NCHR D(1)
       TEXT 'D(1)';  IF 1M<5;  DATA 0;  ENDF;  DATA D(2)
       ENDM


* REPAIR:  THIS AD HOC MACRO OUTPUTS 1, 2, OR 3 PIECES OF CODE (DEPEN-
* DING ON D(1)) TO HANDLE SOME HOUSE-CLEANING IN GNE AND MACRO.  NOTE
* THAT A IS SAFE.
REPAIR MACRO   D
1M     NARG
       IF D(1)=3;  LDB SCHP;  STB CHP; ENDF
       IF D(1)>1;  LDB =-1;  STB CLEAN;  ENDF
       IF 1M=2;  LDB CHP;  ELSE;  LDB SCHP;  ENDF
       STB GNE2;  CLB;  LDX =-7;  MIN GNE2;  STB* GNE2;  BRX *-2
       ENDM


* UGLY1:  AD HOC MACRO USED IN IF.
UGLY1  MACRO;  BRM HLAST;  LDA LAST;  SKANN;  SKIP 4;  WEM EMBT
       BRM IGNOR;  LDA =-1;  STA HLAST1
       ENDM


* UGLY2:  AD HOC MACRO USED IN IF.
UGLY2  MACRO;  LDX NXTCHR;  LDB CTAB,2;  CLA;  LSH 5;  SKE =3;  BRU NOTB
       BRM GNLC;  STA NXTCHR;  SKG =0;  SKIP -2;  COPY AX,A;  LDB CTAB,2
       LSH 5;  SKE =4;  SKIP 3
EMPT   WEM EMBT; BRU ENDFX2
NEMPT  WEM EMBT;  LDA =-1;  BRU ENDFX2
NOTB   SKE =4;  BRU NEMPT;  BRU EMPT
       ENDM


* UGLY3:  AD HOC MACRO USED IN MACALL.
UGLY3  MACRO D;  LDB D(1);  CLA;  LSH 6;  STB D(1);  SKG =0;  SKIP 3
       BRM PACK;  MIN CHRCNT;  SKIP -7
       ENDM


*STORE LISTING CHARACTER IN LISTING BUFFER (IN GNLC & 1CHAR)
SLC    MACRO;  SKN ZLEV;  BRU *+4;  STA* LBP;  SKR LBCNT;  MIN LBP;  ENDM

* COMPUTE FREE:  THIS ROUTINE COMPUTES THE FREE AREA IN STRING STORAGE.
CFREE  MACRO;  LDA BSSP;  SUB SSP;  SUB =2;  STA FREE;  ENDM


* D:  GENERATES AN ENTRY IN DTAB.
D      MACRO   D
1M     NARG
       IF 1M>1;2M EQU [D(2)]*4B4;  ELSE;2M EQU 0;  ENDF
       DATA [1M>2]*4B7+2M+[D(1)]
       ENDM


* P:  HELPS D GENERATE DTAB.
P      MACRO   D
1M     NARG
       IF 1M=1;  RPT D(1);  D PACKM;  ENDR
       ELSE;  RPT D(1);  D PACKM,0,0;  ENDR;  ENDF
       ENDM


* SETUP:  EITHER THE DUMMY ENTRY OR THE GENERATED ENTRY OF MACTAB IS 
* SETUP, AS WELL AS DTAB.  IN ADDITION A CHECK IS MADE TO SEE THAT THE
* DUMMY AND/OR GENERATED SYMBOL IS NOT ALREADY IN THE TABLE.
SETUP  MACRO   D,G,1
       LDX =MACT;  BRM SHTLK;  SKIP 4;  LDP* WD1;  BRM WESYS
       WEM EMRD;  BRU G(1);  LDP* WD1;  STP D(1);  CDTAB ←WD1,DGACT
G(1)   EQU *
       ENDM


* CHANGE DTAB:  THE FIRST SIX BITS OF THE CONTENTS OF D(1) ARE USED TO
* FIND A WORD IN DTAB TO BE ALTERED.  THE NEW CONTENTS OF THIS DTAB 
* WORD ARE CONTAINED IN D(2).
CDTAB  MACRO   D
       LDB D(1);  CLA;  LSH 6;  CAX;  LDA D(2);  STA DTAB,2
       ENDM


* GET ARGUMENT POINTER:  AD HOC ROUTINE USED BY DUM.
GARG   MACRO;  LDA FSTARG;  CNA;  CAX;  LDA* ARGACC;  ENDM


* FOLLOWING ARE ADHOC MACROS USED BY FREEZE, CONTINUE, AND INIT LOGIC:

TIMOVE MACRO   D
       LDX     =LFA.&D(1)
       IF      'D(2)'='SAVE'
       LDA     FE.&D(1),2
       STA     FA.&D(1),2
       ELSE
       LDA     FA.&D(1),2
       STA     FE.&D(1),2
       ENDF
       BRX     *-2
       ENDM

ITMOVE MACRO   D
       LDX =LITA;  LDA ITE,2;  STA XTRA
       IF      'D(1)'='SAVE'
       LDA* XTRA;  EAX 1,2;  STA ITE,2
       ELSE
       EAX 1,2;  LDA ITE,2;  STA* XTRA
       ENDF
       BRX *-5
       ENDM

IT     MACRO   D
1M     NARG
       RPT     (2M=1,1M)
       ZRO     D(2M)
       BSS     1
       ENDR
       ENDM

IRTMVE MACRO   D
       LDX =IRTLN
       IF      'D(1)'='SAVE'
       LDA IRTT,2;  STA IRTA,2;  BRX *-2;  LDA MTP;  LDB SSP;  STP MSS
       LDP WD1;  STP FWD1;  LDP WD3;  STP FWD3
       ELSE
       LDA IRTA,2;  STA IRTT,2;  BRX *-2;  LDP MSS;  STA MTP;  STB SSP
       LDP FWD1;  STP WD1;  LDP FWD3;  STP WD3
       ENDF
       ENDM


* ETSCAN:  SCANS TO THE END OF AN ENTRY IN THE ETAB.

ETSCAN MACRO;  EAX 1,2;  LDB 0,2;  LSH 2;  CLA;  LSH 3;  SKE =1;  SKIP 2
       EAX 3,2;  SKIP -6;  SKE =4;  SKIP -9;  ENDM





* FOLLOWING ARE MNEMONICS FOR THE VARIOUS CONTROL WORDS AND 3-BIT CODES.

BP     EQU     0
POPDF  EQU     1B7
ENDPR  EQU     200B5
ORGLIT EQU     201B5
SETREL EQU     202B5
LABFIX EQU     203B5
FIX14  EQU     204B5
FIX24  EQU     205B5
UOPR   EQU     210B5
OPDF   EQU     3B7
EXTDEF EQU     4B7
IDENTF EQU     5B7
EXTUSE EQU     6B7
SYMTF  EQU     7B7

       SET     ABS,0,EXT14,1,REL14,2,SPEREL,3,CNTRLW,4,EXT24,5,REL24,6
       SET     LITREF,7


* FOLLOWING ARE SPECIAL CHARACTERS STORED IN TEXT IN SS TO INDICATE
* DUMMY SYMBOLS, ENDM, ETC.

DIGS   EQU     200B            CONVERT FOLLOWING EXPR TO DIGIT STRING
DUMDUM EQU     201B            FOLLOWING EXPR INDICATES A DUMMY
GENRAT EQU     202B            FOLLOWING EXPR INDICATES A GENERATED SYMB
ENDMAC EQU     203B            END OF MACRO
ENDRPT EQU     204B            END OF RPT BLOCK


* GLOBAL CONSTANTS:

CLB    EQU     04600002B
BRU    EQU     001B5
EXU    EQU     023B5
BRR    EQU     051B5
LDB    EQU     075B5



* FORGOTTEN SYMBOLS:

       FRGT    ABS,BP,CNTRLW,EXT14,EXT24,LITREF,REL14,REL24,SPEREL,1M,2M



*      END                     LAST LINE OF DEF.

TEMP   IDENT                   FIRST LINE OF TEMP.  21 SEPT. 1966

* CODED BY ROGER HOUSE, PROJECT ARPA, UNIV. OF CALIF., BERKELEY.

* GLOBAL PARAMETERS:

NBLK   EQU     3               # BLOCKS READ-ONLY CODE
LOADP  EQU     240B            FIRST CELL AVAILABLE FOR USE

LSIR   EQU     32              # HASHES: SYMBOL INITIAL REFERENCE TABLE
LOIR   EQU     32              # HASHES: OPCODE INITIAL REFERENCE TABLE

NTAB   EQU     10              NUMBER OF TABLES
LMT    EQU     4*1250  (5000)  LENGTH OF MAIN TABLE
LSS    EQU     2250    (2250)  LENGTH OF STRING STORAGE
LET    EQU     900     ( 900)  LENGTH OF EXPRESSION TABLE
LIS    EQU     2*20    (  40)  LENGTH OF INPUT POINTER STACK
LCH    EQU     90      (  90)  LENGTH OF CHARACTER STACK
LAN    EQU     3*33    (  99)  LENGTH OF OPERAND STACK
LAT    EQU     25      (  25)  LENGTH OF OPERATOR STACK
LLB    EQU     80      (  80)  LENGTH OF LISTING BUFFER
LEB    EQU     40      (  40)  LENGTH OF ERROR BUFFER
LPI    EQU     1       (   -)  LENGTH OF PILE (PSEUDO-LENGTH)

IBLKL  EQU     300     ( 300)  LENGTH OF INPUT BLOCKS
OBLKL  EQU     150     ( 150)  LENGTH OF OUTPUT BLOCKS





* STANDARD STUFF IN LOW-ORDER ADDRESSES:

       BSS     1               COMMUNICATION CELL FOR POPS
       BSS     77B             USED BY BRS'S
       PSTRG   SBRUG,L         POP LINKS
       BSS     200B-PADDR      VACANT POP LINKS
       BSS     LOADP-200B      USED BY PROGRAMMED INTERRUPTS



* ALTERED ROUTINES:


* FILE:  THE NEXT CHARACTER FROM AN INPUT FILE IS PLACED IN THE RIGHT-
* MOST 8 BITS OF A.  THIS ROUTINE IS IN ALTERABLE MEMORY SINCE INSTRU-
* CTIONS ARE ALTERED.  --  INITIALIZATIONS BEFORE FIRST CALL:  INPUT← 
* =FILE (SINCE FILE IS ALWAYS CALLED BY BRM* INPUT), IWDCNT←0.

FILE   ZRO     0
       MIN     CA
WA     LDB     0               ** ALTERED **
CA     EXU     GETCH+2         ** ALTERED **
       ETR     B377
LSP1   BRR     FILE            ** ALTERED **
GETCH  LCY 8;  LCY 16;  CBA;  BRU WD
WD     MIN WA;  LDA MTHREE;  ADM CA
DECR   SKR IWDCNT;  BRU WA
EOB    BRU GETBLK              ** ALTERED **


* UNPACK:  THE NEXT CHARACTER FROM A MACRO OR RPT BODY IS PLACED IN THE
* RIGHTMOST 8 BITS OF A.  IF IT IS A SWITCH CHARACTER THEN THE INPUT
* POIN\ER IS SWITCHED TO ANOTHER SOURCE.

UNPCK  ZRO     0
       MIN     UP1
INPNT  LDB     0               ** ALTERED **
UP1    EXU     UP2+2           ** ALTERED **
       ETR     B377
       SKG     B177
LSP2   BRR     UNPCK           ** ALTERED **
       CAX;  BRU *-177B,2;  BRUG DIG,DUM,GEN,EMAC,ERPT
UP2    LCY 8;  LCY 16;  CBA;  BRU UP3
UP3    MIN INPNT;  LDA MTHREE;  ADM UP1;  BRU INPNT


* DUMMY INPUT:  INPUT ROUTINE WHEN A DUMMY IS REPLACED BY AN ARGUMENT
* STRING.

DUMI   ZRO     0
DUMI1  SKR     DUML
       BRU     DUMI2
       BRM USTKI;  LDX INPUT;  LDA DUMI;  STA 0,2;  BRU 1,2
DUMI2  MIN     DU1
DPNT   LDB     0               ** ALTERED **
DU1    EXU     0               ** ALTERED **
       ETR     B377
LSP3   BRR     DUMI            ** ALTERED **
DU2    LCY 8;  LCY 16;  CBA;  BRU DU3
DU3    MIN DPNT;  LDA MTHREE;  ADM DU1;  BRU DPNT


* DIGIT INPUT:  THIS IS THE INPUT ROUTINE WHEN A GENERATED SYMBOL OR AN
* EXPRESSION-TO-DIGIT-STRING CONVERSION IS BEING MADE.

DIGI   ZRO     0
       MIN     DGPNT
DIGI1  LDA*    DGPNT
       SKN*    DGPNT
LSP4   BRR     DIGI            ** ALTERED **
       BRM USTKI;  LDX INPUT;  LDA DIGI;  STA 0,2;  BRU 1,2

       BSS     8               DIGIT STRING SAVED HERE
REME   BSS     1
       DATA    -1


* PACK:  THE RIGHTMOST 8 BITS OF A ARE PACKED INTO STRING STORAGE (LEFT-
* MOST 16 BITS OF A MUST BE ZERO).  OUTSIDE THIS ROUTINE SSP ALWAYS
* POINTS TO A WORD WITH AT LEAST ONE CHARACTER STORED IN IT.

PACK   ZRO     0
PACKE  CLB                     ** ALTERED **
       MIN     POS
       NOP     0               *** THIS INSTR. REQ'D BY CPU 1.5 ***
POS    EXU     POS1+2          ** ALTERED **
       ADM*    SSP
       BRR     PACK
POS1   LSH 16;  LSH 8;  NOP;  BRU NWRD
NWRD   MIN SSP;  STB* SSP;  LDB FIXP1;  STB POS;  SKR FREE;  BRU PACKE
       BRM GARBC;  BRU PACKE


* EQUED VALUES AND LITERALS FOR ALTERED ROUTINES:

FIXF   EQU     EXU+GETCH+2
PEXIT  EQU     BRR+PACK
FIXP   EQU     EXU+POS1+2
FIXU   EQU     EXU+UP2+2
FIXD   EQU     EXU+DU2-1
FIXDD  EQU     EXU+DU2+2

MTHREE DATA    -3
B177   DATA    177B
B377   DATA    377B
FIXP1  DATA    EXU+POS1-1




* DISPATCH TABLE:  THIS TABLE IS USED AS A SWITCH WHEN INPUT IS PLACED
* IN STRING STORAGE.  IT IS ALTERED AS NEEDED.  (BSS BLOCK BELOW IS FILLED
* IN DURING INIT OF NARP.)

DTAB   BSS     69
DTABE  EQU     *


DTC    EQU     DTAB+'C'
DTE    EQU     DTAB+'E'
DTI    EQU     DTAB+'I'
DTL    EQU     DTAB+'L'
DTM    EQU     DTAB+'M'
DTR    EQU     DTAB+'R'


* FOLLOWING IS TABLE USED DURING PACKING OF A MACRO:

MACT   SHTAB   MACRO,MACROX
       SHTAB   LMACRO,LMACRX
       SHTAB   ENDM,ENDMX
DUMS   SHTAB   0,DUMX          DUMMY SYMBOL
GENS   SHTAB   0,GENX          GENERATED SYMBOL
       DATA    0





* NORMAL TEMPS:

       T       EUOX            EUO INDEX TEMP
       T       LABP,0,UOBOOL   TEMP FOR LABEL, UNDEF OP BOOL
       T       OUCNT           COUNT OF UNDEFS TO BE OUTPUT TO DDT
       T       MLM             MACRO,LMACRO BOOL.(0=MACRO,-1=LMACRO)
       T       IFILE,OFILE     FILE NUMBERS FOR INPUT AND OUTPUT
       T       MTI1            MTI POP
       T       PWR1,PWR2,PWR3  PWR SUB
       T       POPX1,POPX2,POPX3  TEMP A,B,X FOR CHAR,STRING,NO. POPS
       T       WECTP,WECTP1    TEMP A,B FOR WECS
       T       WESTP,0,WESX    TEMP A,B,X FOR WESS
       T       WESCT           COUNT TEMP FOR WESS
       T       LBHASH          LABEL HASH
       T       INSTR           INSTRUCTION BEING FORMED
       T       RFACTO          RELOCATION FACTOR FOR INSTR
       T       OPRNDS          OPERAND SITUATION (OPTIONAL, ETC.)
       T       OCTYPE,SHIFTK   OPCODE TYPE, BOOLEAN FOR SHIFT INSTRUCTIONS
       T       TABLNK,VAL      TABLE LINK, VALUE (USED IN DEFLB)
       T       FOLEC1,FOLEC2   FOLEC SUB
       T       HIER            HIERARCHY OF OPERATOR
       T       RRFACT          RESULT RFACTOR
       T       DEGREE          DEGREE OF OPERATOR
       T       ORFACT          TYPE OF OPERAND
       T       SUBOP           SUB OPCODE
       T       OPER            OPCODE
       T       TOP,TOPM1       TOP, SECOND TO TOP OF ANSTK
       T       STASH1          STASH SUB
       T       DUMMY           CELL TO STORE UNWANTED STUFF IN
       T       WPNT            WORD POINTER FOR STRING
       T       OVAL1           OVAL SUB
       T       OUTB1,OUTB2,OUTB3,OUTB4,OUTB5
       T       EXPRW,XTRA      EXPRESSION WAITING BOOLEAN, EXTRA TEMP
       T       TCNT,TPNT       TEMPORARY COUNTER AND POINTER
       T       LCNT,AFTCR      LISTING COUNTER, AFTER CAR RET BOOLEAN
       T       AFT135          AFTER-135 BOOLEAN
       T       BCNT,SAVC1      BLANK COUNT, SAVE CHAR 1
       T       SAVC            SAVE CHAR
       T       COUT            # CHAR OUTPUT BY LSYMB
       T       IRTP,CODE       IRT POINTER, ADDRESS OF ROUTINE
       T       IRTC            IRT COUNTER
       T       IRTS            IRT SAVE
       T       TLENG           TABLE LENGTH
       T       SCAN1,SCAN2     TSCAN SUB
       T       SCAN3
       T       ASGN1,ASGN2     ASGN ROUTINE
       T       ESLC            ERROR SAVE LC
       T       TIME            TIME FOR ASSEMBLY KEPT HERE
       T       QUIK1           QUIKL SUB
       T       HLAST1          HLAST SUB
       T       SOPTAB          SPECIAL OPCODE TABLE
       T       MLEV            MACRO LEVEL (MACRO-ENDM, IF-ENDF, ETC.)
       T       MMODE           MACRO MODE (PACKIT)
       T       AFTAN           AFTER ALPHANUMERIC CHAR (NEG=TRUE)
       T       LCP,BRAKB       LAST CHAR PACKED (0=BLANK), BRACKETT BOOL
       T       SAVEAN          SAVE ALPHANUMERIC MARK (PACKIT)
       T       OPPNT           OPCODE POINTER (MACRO)
       T       AFTLAB          AFTER LABEL (MACALL)
       T       LEXPR           LENGTH OF EXPRESSION (RPT)
       T       TXTEND          TEXT END (RPT)
       T       TSSP            TEMPORARY SSP
       T       PARCNT          PARENTHESIS COUNT (SSNSS)
       T       STEXT           START TEXT
       T       CHRCNT          CHAR COUNT (SSNSS)
       T       EXFE,LBFE       EXF AND LBF EXTRA (MACALL)
       T       WD1E,WD2E       WD1 AND WD2 EXTRA (MACALL)
       T       NUMARG          NUMBER ARGUMENTS (MACALL)
       T       DGVAL           DIG, GEN STUFF
       T       DGPNT,IDUM      DIG, GEN STUFF
       T       DUML            DUMMY LENGTH (DUM, DUMI)
       T       PP1,0,PP3,PP4   PUSH AND POP POPS
       T       BKCHR,BKP,BKP1  TEMPS FOR BKSP
       T       ETB,PBYAB,0,PBYC,PBYX,PBYW,PVA,PVR,PVW  TEMPS FOR POLISH
       T       CONTR           TEMP OF LINE-CONT.(GNLC,FOUL)
       T       HARDHT          TEMP FOR HARD (IN DEFLB IN MC)
       T       MINTX           TEMP X FOR MINT,RESV MACROS

       T       HOWD,HOWCNT     DIVISOR, COUNT TEMPS FOR HOWL

       T       LM              LEFT MARGIN INDICATOR (FOR LL)
       TI      LLDQI,0         DOUBLE QUOTE INDICATOR FOR LL
       TI      LLLPI,0         LEFT PAREN INDICATOR FOR LL
       TI      LLSQI,0         SINGLE QUOTE INDICATOR FOR LL

       TI      FIELD1,7        FIELD FOR LOCCNT (FOR LL)
       TI      FIELD2,14       FIELD FOR SYMB LOCCNT (FOR LL)
       TI      FIELD3,11       FIELD FOR VALUE (FOR LL)

       TI      TABOPC,8        TAB FOR OPCODE
       TI      TABOPS,16       TAB FOR OPERANDS
       TI      TABCOM,32       TAB FOR COMMENT

       TI      ZLEV,-1         PUSH,POP LEVEL (READ BY SLC MACRO!)

       TI      UOC,0           UNDEFINED OPCODE COUNT


       T       LSYTP,LSYTP1    TEMP STORAGE FOR LSY
       T       LBRP            LISTING BUFFER READ POINTER (LL)
       T       LISTFN          LISTING FILE NUMBER (FOR LCHR)
       TI      LDWD1,0,LDWD2,0 LABEL LAST DEFINED (DEFLB,LL)
       TI      LDLC,0          LOCCNT AT LAST LABEL DEFINED
       TI      LLLC,0          LOCCNT AT BEGINNING OF CURRENT LINE
       TI      CP,0            CURSOR POSITION (FOR LCHR)
       TI      LCH135,0        MULTIPLE-BLANK INDICATOR (FOR LCHR)
       TI      LBCNT,LLB-1     SPACE REMAINING IN LISTING BUFFER (SLC)
       TI      EBSP,3*EBB-1    ERROR BUFFER STRING POINTER
       TI      EBSP1,3*EBB-1   ERROR BUFFER STRING POINTER 1

       TI      XGOB,0          LISTING BOOLEAN
       TI      XERB,0          ERROR BOOLEAN
       TI      XLCTB,-1        LCT FROMAT BOOLEAN
       TI      XSLCTB,0        SLCT FORMAT BOOLEAN
       TI      XVALB,-1        VAL FORMAT BOOLEAN
       TI      XSRCB,-1        SRC FORMAT BOOLEAN
       TI      XCOMB,-1        COM FORMAT BOOLEAN

       TI      XCALLB,-1       CALL DECISION BOOLEAN
       TI      XDEFB,-1        DEF DECISION BOOLEAN
       TI      XEXPB,-1        EXP DECISION BOOLEAN
       TI      XEXTB,-1        EXT DECISION BOOLEAN
       TI      XUOPSB,-1       UOPS DECISION BOOLEAN
       TI      XSKIFB,0        SKIF DECISION BOOLEAN

       TI      ELEV,-1         EXPANSION LEVEL INDICATOR
       TI      XIFI,0          IF INDICATOR
       TI      XDEFI,0         DEF INDICATOR
       TI      XCALLI,0        CALL INDICATOR
       TI      XOPSI,-1        OPERANDS INDICATOR (FOR LL FORMAT)
       TI      XVALI,0         VALUE INDICATOR
       T       VALCEL          VALUE CELL (CONTAINS VALUE WHEN XVALI SET)

TBOOLT BES     XCOMB-XLCTB     TABLE TO HOLD SET VALS OF BOOLS TEMPORARILY
       T       EOLTP,0         TEMPORARY POINTER FOR EOL

       TI      FREE,LSS-2      # FREE WORDS LEFT IN SS

       TI      INITB,-1        INITIALIZATION BOOLEAN

       TI      WD1,ENDMT       WORD 1,2,3, AND 4 AT END OF MAIN TABLE
       TI      WD2,ENDMT+1,WD3,ENDMT+2,WD4,ENDMT+3

FS1    TI      INPUT,FILE      ALL INPUT BY BRM* INPUT
       TI      IWDCNT,0        WORD COUNT IN INPUT BLOCK
       TI      LOCCNT,0        LOCATION COUNTER
       TI      CMODE,0         CENTRAL LOOP MODE
       TI      EXF,0,LBF,0     EXTERNAL FLAG, LABEL FLAG
       TI      RADIX,10        RADIX FOR NUMBERS
       TI      OPNT,OBUFF+1    POINTER FOR OUTPUT BUFFER
       TI      3BIT,8          3-BIT CODE COUNTER
       TI      3PNT,OBUFF      POINTER TO WORD CONTAINING 3-BIT CODE
       TI      RELVAL,1        VALUE OF SPEC RFACTOR LAST OUTPUT
       TI      ERRCNT,0        ERROR COUNT
       TI      DSBOOL,-1       DELSYM BOOLEAN
       TI      RLOCC,0,RFBOOL,-1 SAVE LC, RFACT BOOLEAN (RELORG,RETREL)
       TI      IFCNT,0         'IF' COUNT
       TI      BSSP,IBSSP      BOTTOM STRING STORAGE POINTER
       TI      ARGACC,0        ARGUMENT ACCESS (MACALL)
       TI      ERRFLG,0        ERROR FLAG FOR LISTING
FE1    EQU     *




* RECURSIVE TEMPS:

BS     T       SMODE           SYNTAX MODE IN EXPR
       T       UCNT            UNDEFINED SYMBOL COUNT IN AN EXPRESSION
       T       EXPCNT          COUNT OF ETAB WORDS USED BY UNDEF EXPRES
       T       SANP,SATP       SAVED ANP AND ATP
       T       NEWOP           NEW OPERATOR
       T       VALUE,RFACT     VALUE, RFACTOR OF EXPRESSION
       T       ETYPE           EXPRESSION TYPE
       T       SWD1,SWD2       SAVED *WD1, ETC.
       T       SWD3,SWD4
       T       EXPRI1          EXPRI SUB
       T       LAST            LAST CHARACTER PROCESSED BY EXPR
       T       DELIM,6OR8      DELIMITER OF A STRING, BITS PER CHAR
       T       SWPNT           SAVED WPNT-WD1
       T       CCNT,WCNT       CHAR AND WORD COUNT FOR STRING
       T       135CNT,IN135    COUNT AND BOOLEAN FOR 135'S IN STRINGS
       T       SCHP            SAVED CHP
       T       SCPNT           SAVE CHP (GNE,PACKIT)
       T       GNE1,GNE2       GNE SUB
       T       RAD,SCALE       RADIX AND SCALING FACTOR (GNE)
       T       HASH            HASH FOR SYMBOL
       T       DFABS1          DFABS SUB
       T       DSUP1           DSUP SUB
       T       FSTARG,LSTARG   FIRST AND LAST ARGUMENTS (DUM)
       T       FSTCHR,LSTCHR   FIRST AND LAST CHARACTERS (DUM)
       T       LASTCE          LAST CHARACTER EXTRA (DUM)
       T       DPNTE,DUMLE     DPNT AND DUML EXTRA (DUM)
       T       DGBOOL          DIG, GEN STUFF
       T       R1,0,R3,0       INPUT SUB RETURNS
       T       NXTCHR          NEXT CHARACTER  (MUST PRECEDE GOTIT)

FS2    TI      GOTIT,-1        BOOLEAN USED BY GNE  (MUST FOLLOW NXTCHR)
       TI      UDBOOL,0        UNDEFINED BOOLEAN (EXPRI,IF)
       TI      MTBOOL,0        MACRO TERMINATOR BOOLEAN (EXPRI)
       TI      SQZ135,-1       SQUEEZE 135B'S (NEG=TRUE)
       TI      SNMODE,2        SYMBOL-NUMBER MODE
       TI      CLEAN,-1        CLEAN OUT FIRST 7 CELLS AFTER CHP
       TI      GNBOOL,0        GENERATED SYMBOL BOOLEAN
       TI      EXPAND,-1       INDICATES WHETHER TO STORE OR EXPAND S C
FE2    EQU     *


* SUBROUTINE LINKAGE FOR RECURSIVE SUBS:

       SSTRG   SUBR
BE     EQU     *


* INFO FOR PUSH AND POP:

BX     DATA    BS-BE,BE+2B7





* SUBROUTINE LINKAGE FOR NORMAL SUBS:

       RSTRG   SUBR
OUTBP1 EQU     OUTB+1




* FREEZE AREA:  PERTINENT TABLES AND VARIABLES ARE STORED HERE FOR USE
* BY FREEZE AND CONTINUE:

LFA1   EQU     FS1-FE1
LFA2   EQU     FS2-FE2

FA1    BES     -LFA1           SAVE FIRST BLOCK OF TI'S HERE
FA2    BES     -LFA2           SAVE SECOND BLOCK OF TI'S HERE

ITS    IT      CA,LSP1,EOB
       IT      UP1,LSP2
       IT      LSP3
       IT      LSP4
       IT      OUTBP1
       IT      ETP,ISP,CHP,ANP,ATP,PIP
       IT      OBUFF
ITE    EQU     *

LITA   EQU     ITS-ITE

IRTLN  EQU     -2-LSIR*2-LOIR*2

IRTA   BES     -IRTLN          SAVE IRT'S HERE
       T       MSS,0           SAVE MTP AND SSP HERE
       T       FWD1,0,FWD3,0   SAVE WD1 - WD4 HERE




* TABLE BOUNDS:  THE FIRST WORD OF EACH OF THE FOLLOWING ENTRIES CON-
* TAINS THE ADDRESS OF THE CURRENT WORD AVAILABLE FOR STORING 
* INTO, WHILE THE SECOND WORD CONTAINS THE UPPER BOUND OF THE TABLE
* (I.E., THE FIRST ADDRESS WHICH MAY NOT BE STORED INTO).

       TABP    MTP,*+NTAB*2+LSIR*2+LOIR*2+6
       TABP    SSP;     SET     IBSSP,TMARK
       TABP    ETP
       TABP    ISP
       TABP    CHP;     SET     $CHB,TMARK-7
       SET     ANP2,TMARK+1,ANP4,TMARK+3;     TABP    ANP
       TABP    ATP
       SET     $LBB,TMARK
       TABP    LBP
       SET     $EBB,TMARK
       TABP    EBP
       TABP    PIP



* DO NOT INSERT ANYTHING HERE!  THE RELATIVE POSITION OF THE TABLE POINTERS
* ABOVE AND THE TABLE BELOW IS IMPORTANT.




* INITIAL REFERENCE TABLES AND THE MAIN TABLE (SYMBOLS, OPCODES,
* AND LITERALS).

LITIR  IRTI    1               LITERAL INITIAL REFERENCE TABLE
SYMIR  IRTI    LSIR            SYMBOL INITIAL REFERENCE TABLE
OPCIR  IRTI    3               OPCODE INITIAL REFERENCE TABLE
       ZRO     OPDP
       ZRO     OPDP            INITIALIZED WITH 'OPD'
       IRTI    LOIR-4
IRTT   EQU     *



       TEXT    'OPD '          FIRST ENTRY IN THE MAIN TABLE
OPDP   TEXT    '    '
       DATA    440000B
       DATA    OPD


ENDMT  EQU     *               END OF MAIN TABLE INIT




* FOLLOWING CAUSES I/O BUFFERS TO BE PLACED IN HIGH ORDER ADDRESSES,
* JUST BEFORE READ-ONLY PART OF NARP.

       BSS     2048-*+:ZERO:+34000B-NBLK*4000B-IBLKL-OBLKL-6


* I/O BUFFERS:

IBUFF  BSS     IBLKL

MDEPTH EQU     [IBUFF-TMARK]/[BE-BS]


OBUFF  BSS     OBLKL           FIRST WORD OF BUFFER SHOULD BE ZERO INITIALLY
OBUF1  EQU     OBUFF+OBLKL-10
OBUF2  EQU     OBUFF+OBLKL


* FILE NAME POINTERS:

SNAM   BSS     2               INPUT BUFFER USED TO SAVE FILE NAMES
ONAM   BSS     2
LNAM   BSS     2
SNAM4  EQU     SNAM+4B7
ONAM4  EQU     ONAM+4B7
LNAM4  EQU     LNAM+4B7



* FORGOTTEN SYMBOLS:

       FRGT    LAN,LAT,LCH,LFA1,LFA2,LIS,LITA,LOIR,LPI,LSIR,NBLK,NTAB




       FREEZE
       NOLIST  EXT             DO NOT LIST EXTERNAL SYMBOLS



       END                     LAST LINE OF TEMP.

MISC   IDENT                   FIRST LINE OF MISC.    21 SEPT. 1966

* CODED BY ROGER HOUSE, PROJECT ARPA, UNIV. OF CALIF., BERKELEY.


       BSS     :LC:-:ZERO:     ADJUST LOCATION COUNTER


*****NOTE:  THE FLAG "BBN" CONTROLS THE ASSEMBLY OF THE FILE-OPENING
*BRS'S.  IF BBN=1, FILES ARE OPENED ACCORDING TO THE OLD (1.6?)
*BRS'S.  IF BBN=-1, FILES ARE OPENED ACCORDING TO THE NEW SCHEME

BBN    EQU     -1


* START CODE AND CONTINUE CODE:

START  BRU STRT1               START ADDRESS
CONTIN BRU CNTIN1              CONTINUE ADDRESS
BRINIT BRU INIT                INITIALIZE ADDRESS

STRT1  LDX =-2048;  LDA 5*2048,2;  STA 2048,2;  BRX *-2
       BRS 43;  XAB;  ETR =777777B;  XAB;  BRS 44

CNTIN1 TIMOVE 1,RSTR;  TIMOVE 2,RSTR;  ITMOVE RSTR;  IRTMVE RSTR;  CFREE
       CLA;  STA TLENG;  LDA =LITIR;  LDB =PLG;  BRM TSCAN;  LDA =31
       STA TLENG;  LDA =SYMIR;  LDB =PUG;  BRM TSCAN;  CLA;  STA INITB
       BRU GSNAM
PUG    SKANN;  BRU RTS;  LDA 0,2;  ETR =@1;  STA 0,2
PLG    CLA;  STA 2,2;  BRU RTS

INIT   LDX =-69;  LDA ANWRD,2;  STA DTABE,2;  BRX *-2;  LDA =IBUFF
       SKG =TMARK;  BRU NOGOOD;  STA UPIP;  TIMOVE 1,SAVE;  TIMOVE 2,SAVE
       ITMOVE SAVE;  BRU GSNAM

GSNAMT TYMES STYPE
GSNAMQ TYMES QMARK;  LDX =-1;  BRS 14;  BRS 11
GSNAM  CLA;  STA IFILE;  STA OFILE;  STA IBUFF;  STA LNAM
       LDA =1;  STA LISTFN
       LDA =IBUFF;  MTI =3;  STA SNAM
       TYMES SOURCE
     IF BBN  (TRUE, ASSEMBLE CODE FOR OLD BRS'S)

       CLA; BRS 15; BRU GSNAMQ; STA SNAM; CIO =0

     ELSE  (BBN FALSE, ASSEMBLE CODE FOR NEW BRS'S)

       LDA =2B7;  LDB =SNAM4;  CLX;  BRS 15;  BRU GSNAMQ
       CXA;  ETR =47B6;  SKE =3B6;  BRU GSNAMT

     ENDF

       BRM CHT;  BRU GSNAMQ;  NOP;  BRU GONAM

GONAMT TYMES RTYPE
GONAMQ TYMES QMARK;  LDX =-1;  BRS 14;  BRS 11
GONAM  LDA SNAM+1;  STA ONAM
       TYMES OBJECT
      IF BBN   (SUCCESS: OLD BRS'S)

       CLA; BRS 18; BRU GONAMQ; STA ONAM; CBA

     ELSE  (FAILURE: NEW BRS'S)

       LDA =2201B4;  LDB =ONAM4;  CLX;  BRS 16;  BRU GONAMQ
       CXA;  SKA =4B7;  BRU GONAMT

     ENDF

       BRM CHT;  BRU GONAMQ;  BRU OPENO;  BRU GLNAM

GLNAMT TYMES RTYPE
GLNAMQ TYMES QMARK;  LDX =-1;  BRS 14;  BRS 11
GLNAM  LDA ONAM+1;  STA LNAM
       TYMES TEXTFI
     IF BBN   (SUCCESS: OLD BRS'S)

       CLA; BRS 18; BRU GLNAMQ; STA LNAM; CBA

     ELSE   (FAILURE: NEW BRS'S)

       LDA =2301B4;  LDB =LNAM4;  CLX;  BRS 16;  BRU GLNAMQ
       CXA;  SKA =4B7;  BRU GLNAMQ

     ENDF

       BRM CHT;  BRU GLNAMQ;  NOP;  BRU OPENO

OPENE  TYCO ='?';  CLA
       STA IFILE;  STA OFILE;  STA LISTFN;  BRS 17
       BRU GSNAM

     IF BBN  (SUCCESS: OLD BRS'S)

OPENO  LDA ONAM; LDB =4096; LDX =2; BRS 19

     ELSE  (FAILURE: NEW BRS'S)

OPENO  LDA =1201B4;  LDB =ONAM;  CLX;  BRS 16

     ENDF

       BRU OPENE;  STA OFILE   (FAILURE AND SUCCESS OF BRS, RESP.)
       LDA LNAM;  SKG =0;  BRU OPENS
     IF BBN  (SUCCESS: OLD BRS'S)

OPENL  LDA LNAM; LDB =4096; LDX =3; BRS 19

     ELSE  (FAILURE: NEW BRS'S)

OPENL  LDA =1301B4;  LDB =LNAM;  CLX;  BRS 16

     ENDF

       BRU OPENE; STA LISTFN   (FAIL,SUCCEED RETURNS OF BRS, RESP.)

     IF BBN  (S: OLD BRS'S)

OPENS  LDA SNAM; BRS 16

     ELSE  (F: NEW BRS'S)

OPENS  LDA =1B7;  LDB =SNAM;  CLX;  BRS 15

     ENDF

       BRU OPENE; STA IFILE   (F&S RETURNS OF BRS, RESP.)

BEGINA TYCO =155B;  TYCO =152B;  TYCO =152B;  BRS 88;  STA TIME
       CLA;  BRM EOL;  BRU CLOOP


*CHECK TERMINATOR SUBROUTINE,  TERMINATOR IN B
*NO SKIP:  TERMINATOR WAS NOT COMMA,SEMI, OR DOT
*SKIP 1:    TERMINATOR WAS DOT
*SKIP 2:   TERMINATOR WAS COMMA,SEMI
ECHT   CBA
       SKE =';';  SKIP;  BRU ECHT2
       SKE =',';  SKIP;  BRU ECHT2
       SKE ='.';  BRR CHT;  BRU ECHT1
ECHT2  MIN CHT
ECHT1  MIN CHT;  BRR CHT



* POP DEFINITIONS:

* MULTIPLY INTEGER:  A←A*M.  X AND B ARE SAFE.
LMTI   STB MTI1;  MUL* 0;  LSH 23;  LDB MTI1;  BRR 0

* DIVIDE INTEGER:  A←A/M.  B CONTAINS THE REMAINDER OF THE DIVISION,
* X IS SAFE.
LDVI   CLB;  RSH 23;  DIV* 0;  BRR 0


*POPS FOR LISTING OR TYPING CHARACTER,NUMBER,STRING

*TYPE CHAR
LTYCO  STP POPX1;  STX POPX3;  LDA* 0;  CIO =1
POPEX  LDP POPX1;  LDX POPX3;  BRR 0

*TYPE MESSAGE (WORD ADDRESS GIVEN)
LTYMES STP POPX1;  STX POPX3;  EAX* 0;  CXA;  LDB =-1;  LDX =1
       BRS 34;  BRU POPEX

*TYPE NUMBER IN DECIMAL
LTYNOD STP POPX1;  STX POPX3;  LDB =10
TYNO   LDA* 0;  LDX =1;  BRS 36;  BRU POPEX

*TYPE NUMBER IN OCTAL
LTYNOB STP POPX1;  STX POPX3;  LDB =8;  BRU TYNO

*WRITE ERROR CHAR IN ERROR BUFFER
LWEC   STP POPX1;  STX POPX3;  LDA* 0;  BRM WECS;  BRU POPEX

*WRITE STRING IN ERROR BUFFER
LWES   STP POPX1;  STX POPX3;  EAX* 0;  BRM WESS;  BRU POPEX

*WRITE MESSAGE IN ERROR BUFFER
LWEM   STP POPX1;  STX POPX3;  EAX* 0;  BRM WEMS;  BRU POPEX



* PUSH AND POP:  THESE TWO POPS RESPECTIVELY PLACE DATA BLOCKS ON THE 
* PILE AND TAKE THEM OFF THE PILE.  THE OPERAND CONSISTS OF TWO WORDS
* IN THE FOLLOWING ORDER:
*      COUNT WORD:   CONTAINS -(NUMBER OF WORDS TO BE MOVED)
*    ADDRESS WORD:   CONTAINS 1+(ADDRESS OF LAST WORD OF BLOCK),2

LPUSH  LDP* 0;  STB PP4;  COPY AX,N;  RESV PIP;  MIN PIP;  LDA* PP4
       STA* PIP;  BRX *-3;  BRR 0

LPOP   LDP* 0;  COPY AX,BA;  CHOP;  STA PP4;  SKR PP4;  LDA* PIP
       STA* PP4;  SKR PIP;  BRX *-4;  BRR 0

*SUBROUTINES FOR WRITNG CHARS,STRINGS, MESSAGES IN THE ERROR BUFFER

*WRITE ERROR CHAR
EWECS  STP WECTP;  LDA UEBP;  MUL =3;  LSH 23;  SUB =1
       SKG EBSP1;  BRU WECE;  LDA WECTP;  WCI EBSP
WECO   LDA =-1;  STA XERB;  LDP WECTP;  BRR WECS
WECE   STA EBSP1;  LDA ='** ';  MRG =155B;  STA* UEBP;  BRU WECO

*WRITE ERROR STRING
EWESS  STP WESTP;  STX WESX
WESM   LDA =2;  STA WESCT;  LDB 0,2
WESL   CLA;  LSH 8;  SKE ='/';  BRU WESN
WESO   LDP WESTP;  LDX WESX;  BRR WESS
WESN   BRM WECS;  SKR WESCT;  BRU WESL;  EAX 1,2;  BRU WESM

*WRITE ERROR MESSAGE
EWEMS  BRM WESS;  STA WESTP;  LDA =155B;  BRM WECS;  LDA WESTP
       MIN ERRCNT;  BRR WEMS

*WRITE ERROR SYMBOL SUBROUTINE
EWESYS STP WESTP;  CAB
WESYK  CLA;  LSH 6;  SKG =0;  BRU WESYL;  BRM WECS;  BRU WESYK
WESYL  LDB WESTP+1
WESYM  CLA;  LSH 6; SKG =0;  BRU WESYN;  BRM WECS;  BRU WESYM
WESYN  LDP WESTP;  BRR WESYS


* TRAP ERROR:  BUG IN NARP.
ETRPER TYMES TRAPS;  TYNOB TRPER;  BRU ABORT

* TABLE FULL:  MINT AND RESV EXECUTE THIS WHEN A TABLE IS FULL.
*(ADDRESS OF NAME OF TABLE IS IN X)
ETFULL BRM WESS;  WEM EMOV;  BRU ABORT

* I/O ERROR:
IOERR  TYMES IOERRS;  BRU ABORT

* END ERROR:  THE PROGRAM DOES NOT TERMINATE WITH AN 'END' DIRECTIVE.
ENDERR TYMES NOEND;  BRU END

* ABORT:  CLOSE FILES AND TERMINATE
ABORT  LDA =-1;  BRM EOL;  TYMES DEAD;  BRS 17;  BRS 10



* I/O ROUTINES:

*POLISH ROUTINE TO PACK 8-BIT BYTES INTO WORDS AND 
*PUT THEM ON THE OUTPUT FILE
*(A)=BYTE, ALL REGISTERS PRESERVED
EPBY   STP PBYAB;  STX PBYX
       SKR PBYC;  BRU PBY1;  XMA PBYW;  BRM FF;  LDA =2;  STA PBYC
PBY2   LDP PBYAB;  LDX PBYX;  BRR PBY
PBY1   CLB;  XMA PBYW;  LSH 8;  ADM PBYW;  BRU PBY2

*PV, A POLISH ROUTINE TO CHUNK UP VALUE AND RELOC INTO
*APPROPRIATE SHORT,LONG CONSTANTS, BIT,BYTE, OR WORD RELOCATION
*(A)=VALUE, (B)=RELOC  -- ALL REGISTERS DESTROYED
EPV    SKB =-1;  BRU PV1
       SKG =37B;  SKG =-41B;  BRU PV1;  ADD =140B;  BRM PBY;  BRR PV
PV1    LDX =40B;  SKG =-1;  LDX =60B;  STX PVW
       SKG =-1;  CNA;  STA PVA
       SKG =77B;  BRU *+2;  MIN PVW
       SKG =7777B;  BRU *+2;  MIN PVW
       SKG =777777B;  BRU *+2;  MIN PVW
       COPY BA,B
       SKE =0;  BRU *+2;   BRU PV3
       SKE =1;  BRU *+3;  LDB =4B;  BRU PV3
       SKG =177B;  SKB =-201B;  BRU PV2;  LDB =10B;  BRU PV3
PV2    LDB =14B
PV3    STA PVR;  CBA;  ADD PVW;  BRM PBY
       ETR =3;  ADD =1;  CNA; CAX;  LDB PVA;  EXU PVT,2
PV4    CLA;  LSH 6;  ADD =100B;  BRM PBY;  BRX PV4
       LDA PVR;  SKE =0;  SKIP;  BRU PV6;  SKE =1;  SKIP;  BRU PV6
       SKG =177B;  SKG =-201B;  BRU PV5;  BRM PBY;  BRU PV6
PV5    LDX =-3;  CAB
PV55   CLA;  LSH 8;  BRM PBY;  BRX PV55
PV6    BRR PV

*TABLE FOR PV,  BACK-INDEXED
       NOP; LSH 6; LSH 12; LSH 18
PVT    EQU *

*OUTPUT CODE FOR UNDEFINED SYMBOL,  GIVEN ITS INDEX IN THE
*USE TABLE IN A
EPS    SKG =77B;  BRU PS1
       SKG =7777B;  BRU PS2;  WEM TMUSM;  BRU ABORT
PS2    LRSH 6;  MRG =200B;  BRM PBY; LSH 6;  ETR =77B
PS1    MRG =300B;  BRM PBY;  BRR PS

* GET BLOCK:  THE NEXT BLOCK FROM THE IBUFF IS READ.  IN CASE OF AN 
* I/O ERROR A BRU IOERR IS EXECUTED.  IF THE BLOCK IS SHORT (I.E., THE 
* LAST BLOCK OF INPUT) THEN EOB IS ALTERED, SO THAT IF THE PROGRAM DOES
* NOT HAVE AN END DIRECTIVE, THINGS WILL NOT GO ASTRAY.

GETBLK LDA LDBINT;  STA WA;  LDA =IBLKL;  STA IWDCNT;  LDX =IBUFF
       BIO IFILE;  SKIP;  BRU DECR;  SUB =IBUFF;  STA IWDCNT;  LDX IFILE
       SKA =4B5;  BRU IOERR;  LDA BRUINT;  STA EOB;  BRU DECR;
LDBINT LDB IBUFF
BRUINT BRU ENDERR


* OUTPUT BLOCK:  THE OUTPUT BLOCK IS WRITTEN.  ALL REGISTERS ARE SAFE.

EOUTB  STP OUTB1;  STX OUTB3
$EOUT1 LDA OPNT;  SUB =OBUFF;  LDX =OBUFF;  STX OPNT;  BIO OFILE
       BRU IOERR;  LDP OUTB1;  LDX OUTB3;  BRR OUTB

$EOUT2 EQU BRU+EOUTB


* BINARY PROGRAM FORMAT:  THE WORD IN A IS OUTPUT AS A BINARY PROGRAM 
* WORD, WITH 3-BIT CODE AS GIVEN IN B.  ALL REGISTERS UNDEFINED.

EBPF   SKR 3BIT;  BRU PLUNK;  CAX;  LDA =OBUF1;  SKG OPNT;  BRM OUTB
       LDA =7;  STA 3BIT;  LDA OPNT;  STA 3PNT;  MIN OPNT;  COPY XA,X
       STX* 3PNT
PLUNK  STA* OPNT;  MIN OPNT;  LDA =1;  BRM INCLC;  LDA 3BIT;  ADD 3BIT
       ADD 3BIT;  COPY AX,BA,B;  LSH 0,2;  ADM* 3PNT;  BRR BPF


* MULTIPLE-WORD CONTROL:  THE WORD IN A IS OUTPUT AS A CONTROL WORD WITH
* THE PROPER 3-BIT ESCAPE CODE.  THE 3-BIT COUNTER IS SET SO THAT THE NEXT
* CALL OF BPF WILL CAUSE A NEW 3-BIT CODE WORD TO BE STARTED.  ALL REGI-
* STERS UNDEFINED.

EMWC   LDB =CNTRLW;  BRM BPF;  LDA =-1;  ADM LOCCNT; ADM RLOCC
       CLA;  STA 3BIT;  BRR MWC


* SINGLE-WORD CONTROL:  SAME AS MWC, BUT 3BC MECHANISM LEFT UNDISTURBED.

ESWC   LDB =CNTRLW;  BRM BPF;  LDA =-1;  ADM LOCCNT;  ADM RLOCC
       BRR SWC


* FREE FORMAT:  THE WORD IN A IS OUTPUT.  ALL REGISTERS ARE UNDEFINED.

EFF    STA* OPNT;  MIN OPNT;  LDA =OBUF2;  SKG OPNT;  BRM OUTB;  BRR FF


* OUTPUT VALUE:  THE CONTENTS OF B IS OUTPUT AS A BINARY PROGRAM WORD
* WITH A 3-BIT CODE DETERMINED AS FOLLOWS:  IF A=0 THEN ABS ELSE IF A=1
* THEN X ELSE SPEREL.  IF NECESSARY A SETREL IS OUTPUT BEFORE THE VALUE.

EOVAL  SKE =0;  BRU NOTABS;  CLX
UGLY1  COPY BA,XB;  BRM BPF;  BRR OVAL
NOTABS SKE =1;  SKIP;  BRU UGLY1;  SKE RELVAL;  SKIP;  BRU UGLY2
       STB OVAL1;  STA RELVAL;  CHOP;  MRG =SETREL;  BRM SWC;  LDB OVAL1
UGLY2  LDX =SPEREL;  BRU UGLY1


*CCD2: CONVERT COLONS TO DOTS ON OUTPUT OF SYMBOL TO DDT, FIRST
*HALF OF WORD

ECCD2  EOR =32320000B
       SKA =77B6;  SKIP;  MRG =24B6
       SKA =77B4;  SKIP;  MRG =24B4
       EOR =32320000B
       BRR CCD2

*CCD4: CONVERT COLON TO DOTS ON OUTPUT OF SYMBOL TO DDT, FULL WORD

ECCD4  BRM CCD2
       EOR =3232B
       SKA =77B2;  SKIP;  MRG =24B2
       SKA =77B;   SKIP;  MRG =24B
       EOR =3232B
       BRR CCD4


*END OF LINE PROCEDURE (LISTS LINE IF NECESSARY, CLEANS UP LISTING BUFFRE)
EEOL   SKE =-1;  BRU EOLFIN
       SKN XERB;  BRU EOL1;  BRU EOLER
EOL1   SKN XGOB;  BRU EOLFIN
       SKN ELEV;  SKIP;  BRU EOL2;  SKN XEXPB;  BRU EOLFIN
EOL2   SKN XIFI;  BRU EOL3; SKN XSKIFB;  BRU EOLFIN;  BRU EOLL
EOL3   SKN XDEFI;  BRU EOL4;  SKN XDEFB;  BRU EOLFIN;  BRU EOLL
EOL4   SKN XCALLI;  BRU EOLL; SKN XCALLB;  BRU EOLFIN;  BRU EOLL
EOLL   BRM LL
EOLFIN CLA;  STA XCALLI;  STA XVALI;  STA XERB;  LDA =-1;  STA XOPSI
       LDA =LBB; STA LBP
       LDA =LLB-1;  STA LBCNT;  LDA EBSP;  STA EBSP1
       LDA LOCCNT;  STA LLLC;  BRR EOL

EOLER  LDX =XLCTB-XCOMB;  LDA =-1;  XMA XCOMB,2;  STA TBOOLT,2
       BRX *-3;  BRM LL
       LDX =XLCTB-XCOMB;  LDA TBOOLT,2;  STA XCOMB,2;  BRX *-2
       LDP EBSP;  STP EOLTP
EOLER1 GCI EOLTP;  BRU EOLFIN;  BRM LCHR;  BRU EOLER1

*LIST LINE SUBROUTINE
ELL    CLA;  STA LM
       LDA =LBB;  STA LBRP
       LDA LBP;  SUB =1;  SKG =LBB;  BRU LDCR;  STA LBP
LL1    LDA XIFI;  MRG XDEFI;  SKA =-1;  BRU LLASIS
       LDA LBB;  SKE ='*';  BRU LL2;  SKN XCOMB;  BRU LDONE
LLASIS BRM RLCH;  BRU LDONE;  BRM LCHR;  BRU LLASIS
LL2    SKN XLCTB;  BRU LL3
       LDA FIELD1;  ADM LM
       LDA LLLC;  CHOP;  LRSH 15;  LDX =-5
       CLA;  LSH 3;  ADD ='0';  BRM LCHR;  BRX *-4
LL3    SKN XSLCTB;  BRU LL4
       LDA FIELD2;  ADM LM
       LDA ='(';  BRM LCHR
       LDP LDWD1;  BRM LSY
       LDA LLLC;  SUB LDLC;  SKE =0;  SKIP;  BRU LL3D
       LDB ='+';  SKA =4B7;  LDB ='-';  XAB;  BRM LCHR
       CBA;  SKG =-1;  CNA;  LDB =8;  BRM LNO
LL3D   LDA =')';  BRM LCHR
LL4    SKN XVALB;  BRU LL5
       LDA LM;  BRM TAB
       LDA FIELD3;  ADM LM
       SKN XVALI;  BRU LL5;  LDA VALCEL;  LDB =8;  BRM LNO
LL5    SKN XSRCB;  BRU LDONE
       LDA LM;  BRM TAB
       BRM LISTF;  BRU LDONE
LL6    LDA TABOPC;  ADD LM;  BRM TAB
       BRM LISTF;  BRU LDONE
LL7    LDA TABOPS;  ADD LM;  BRM TAB
       SKN XOPSI;  BRU LL8
LL7N   BRM RLCH;  BRU LDONE
       SKE ='"';  BRU LL71;  SKN LLSQI;  SKIP;  BRU LL7C
       CLB;  SKN LLDQI;  LDB =-1;  STB LLDQI;  BRU LL7C
LL71   SKE ="'";  BRU LL72;  SKN LLDQI;  SKIP;  BRU LL7C
       CLB;  SKN LLSQI;  LDB =-1;  STB LLSQI;  BRU LL7C
LL72   SKE ='(';  BRU LL73
       CAB;  LDA LLDQI;  MRG LLSQI;  XAB;  SKB =4B7;  BRU LL7C
       LDB =-1;  STB LLLPI;  BRU LL7C
LL73   SKE =')';  BRU LL74
       CAB;  LDA LLDQI;  MRG LLSQI;  XAB;  SKB =4B7;  BRU LL7C
       CLB;  STB LLLPI;  BRU LL7C
LL74   SKE =' ';  BRU LL7C
       CAB;  LDA LLDQI;  MRG LLSQI;  MRG LLLPI;  XAB;   SKB =4B7;  BRU LL7C
LL7T   BRM RLCH;  BRU LDONE;  SKG =0;  BRU LL7T;  SKR LBRP;  BRU LL8
LL7C   BRM LCHR;  BRU LL7N
LL8    SKN XCOMB;  BRU LDONE;  LDA TABCOM;  ADD LM;  BRM TAB
LL8L   BRM RLCH;  BRU LDONE;  BRM LCHR;  BRU LL8L
LDONE  CLA;  STA LLSQI;  STA LLDQI;  STA LLLPI
       LDA CP;  SKG =0;  BRR LL
LDCR   LDA =155B;  BRM LCHR;  BRR LL


*LIST FIELD:  LISTS CHARACTERS UP TO THE FIRST BLANK, STRIPS
*BLANKS UP TO THE NEXT NON-BLANK (NO SKIP IF OUT OF CHARS SKIP 
*THERE ARE STILL CHARS LEFT TO READ FROM LISTING BUFFER)

ELISTF BRM RLCH;  BRR LISTF;  SKG =0;  BRU LISTF1
       BRM LCHR;  BRU ELISTF
LISTF1 BRM RLCH;  BRR LISTF;  SKG =0;  BRU LISTF1
       SKR LBRP;  MIN LISTF;  BRR LISTF

*TAB TO (A) USING CP TO INDICATE CURRENT CURSOR POSITION
ETAB   SKE =0;  BRU TAB1;  SKE CP;  SKIP;  BRR TAB
       LDA =155B;  BRM LCHR;  BRR TAB
TAB1   SUB CP;  SKG =0;  LDA =1;  CAB;  LDA =135B;  BRM LCHR
       CBA;  BRM LCHR;  BRR TAB

*LIST A CHARACTER ON THE LISTING FILE SUBROUTINE
ELCHR  SKN LCH135;  BRU LCHN
       ADM CP;  STA LCH135;  CIO LISTFN;  BRU LCHO
LCHN   SKA =300B;  BRU LCHH;  MIN CP;  CIO LISTFN;  BRU LCHO
LCHH   SKE =155B;  BRU LCHB;  CIO LISTFN;  LDA =152B;  CIO LISTFN
       CLA;  STA CP;  LDA =155B;  BRR LCHR
LCHB   SKE =135B;  BRR LCHR
       CIO LISTFN;  CNA;  STA LCH135;  CNA;  BRR LCHR

LCHO   XMA CP;  SKG =120;  BRU LCHTY
LCHOV  LDA =155B;  CIO LISTFN;  LDA =152B;  CIO LISTFN
       CLA
LCHOO  XMA CP;  BRR LCHR
LCHTY  SKG =71;  BRU LCHOO
       XMA LISTFN;  SKE =1;  SKIP 2;  XMA LISTFN;  BRU LCHOV
       XMA LISTFN;  BRU LCHOO

*READ CHARACTER FROM LISTING BUFFER (ACCORDING TO LBRP), SKIP
*IF SUCCESSFUL,  NO SKIP IF THERE ARE NO MORE CHARACTERS
ERLCH  LDA LBP;  SKG LBRP;  BRR RLCH;  LDA* LBRP;  MIN LBRP
       MIN RLCH;  BRR RLCH

*LIST SYMBOL:  THE SYMBOL IN A AND B IS LISTED ON THE LISTING FILE
ELSY   STP LSYTP;  CAB
LSYL   CLA;  LSH 6;  SKG =0;  BRU LSYM;  BRM LCHR;  BRU LSYL
LSYM   LDB LSYTP1
LSYN   CLA;  LSH 6;  SKG =0;  BRU LSYO;  BRM LCHR;  BRU LSYN
LSYO   LDP LSYTP;  BRR LSY

*LIST NUMBER,  NUMBER IN A RADIX IN B
ELNO   STA HOWD;  XAB;  MRG =4B7;  XAB;  LDX LISTFN;  BRS 36
       CBA;  ETR =@4B7;  CAB;  LDA HOWD;  BRM HOWL;  ADM CP;  BRR LNO

*A SUBROUTINE TO COPMPUTE THE LENGTH OF A NUMBER (COUNTING THE
*MINUS SIGN IF THE NUMBER IS NEGATIVE)
EHOWL  STB HOWD;  CLB;  SKA =4B7;  LDB =1;  STB HOWCNT;  SKG =-1;  CNA
HOWLL  LRSH 23;  DIV HOWD;  SKG =0;  BRU HOWLO;  MIN HOWCNT;  BRU HOWLL
HOWLO  LDA HOWCNT;  ADD =1;  BRR HOWL

* LIST SYMBOL:  THE NARP SYMBOL IN WORDS X-3 AND X-2 IS LISTED.  X IS SAFE,
* A AND B ARE UNDEFINED.

ELSYMB CLA;  STA COUT;  LDB -3,2;  CLA;  LSH 6;  SKG =0;  SKIP 3;  CIO =1
       MIN COUT;  SKIP -5;  LDB -2,2;  CLA;  LSH 6;  SKG =0; BRU LSYMB1
       CIO =1;  MIN COUT;  SKIP -5
LSYMB1 LDA COUT; SUB =8; CAX; TYCO =' '; BRX *-1; BRR LSYMB





* MISCELLANEOUS ROUTINES:

* INCREMENT LOC CNT:  THE LOCATION COUNTER IS INCREMENTED BY THE
* CONTENTS OF A, AND IF THE RESULT IS GREATER THAN 2**14-1 OR LESS
* THAN ZERO THEN AN ERROR MESSAGE IS TYPED.

EINCLC ADM LOCCNT;  ADM RLOCC;  LDA LOCCNT;  SKG =37777B
       SKG =-1;  BRU EINCOV
EINCN  LDA RLOCC;  CHOP;  STA RLOCC;  LDA LOCCNT;  BRR INCLC
EINCOV  CHOP;  STA LOCCNT;  WEM LCOVF;  BRU EINCN


* STRING:  INPUT IS A CHARACTER IN THE RIGHTMOST 8 BITS OF A AND A 6 OR
* 8 IN B.  A STRING
* IS COLLECTED BEGINNING WITH THE NEXT CHARACTER FROM THE INPUT FILE AND
* ENDING WHEN THE CHARACTER GIVEN IN A IS ENCOUNTERED OR WHEN A CARRI-
* AGE RETURN IS ENCOUNTERED.  IN THE LATTER CASE AN ERROR MESSAGE IS
* TYPED.  THE STRING IS PLACED, LEFT-JUSTIFIED (WITH BLANK FILL ON THE
* RIGHT) AT THE END OF THE MAIN TABLE, SO WD1 CONTAINS THE ADDRESS OF 
* THE FIRST WORD OF THE STRING.  UPON RETURN, B CONTAINS THE NUMBER OF
* WORDS OCCUPPIED BY THE STRING, AND A CONTAINS THE NUMBER OF CHARACTERS
* IN THE LAST WORD OF THE STRING.  CHARACTERS ARE PACKED 4 TO A WORD IF
* B=6, OTHERWISE 3 TO A WORD.  (NOTE:  EMPTY STRINGS ARE ALLOWED.
* B WILL BE 0, A WILL BE 3 (OR 4 IF B=6 ON ENTRY), AND *WD1 WILL CONTAIN
* ALL BLANKS.)

ESTRNG STP DELIM;  LDA WD1;  STA WPNT;  CLA;  STA WCNT;  STA IN135
NEWWRD CLA;  STA* WPNT;  STA CCNT;  BRM 1CHAR;  CLB;  RSH* 6OR8
       STB* WPNT;  MIN CCNT;  MIN WCNT;  LDA 6OR8;  SKE =6;  SKIP 5
       BRM 1CHAR;  CLB;  LSH 12;  ADM* WPNT;  MIN CCNT;  BRM 1CHAR;  CLB
       LSH* 6OR8;  ADM* WPNT;  MIN CCNT;  BRM 1CHAR;  ADM* WPNT
       MIN WPNT;  LDA WPNT;  SKE UMTP;  BRU NEWWRD
       WEM EMSO;  BRU ABORT
HITEND LDP CCNT;  SKE =0;  BRR STRNG;  LDA 6OR8;  SKE =6;  LDA =5
       SUB =2;  BRR STRNG

* 1CHAR:  THIS AUXILIARY SUBROUTINE USED BY STRNG SUPPLIES IN A THE NEXT
* CHARACTER FROM THE STRING.  NOTE THAT WHEN THE END OF THE STRING
* IS REACHED THIS ROUTINE DOES NOT EXIT NORMALLY BUT JUMPS TO HITEND.

E1CHAR SKN IN135;  BRU REAL
FAKE   CLA;  SKR 135CNT;  BRU E1CHST;  STA IN135
REAL   BRM* INPUT;  SKG =77B;  BRU SEEND;  SKE =135B;  BRU NOT135
       BRM* INPUT;  LDB =-1;  STP 135CNT;  BRU FAKE
NOT135 SKE =155B;  BRU REAL;  SLC;  LDA =100B;  LDB =-1;  STP NXTCHR
       WEM EMBT;  BRU HITEND
SEEND  SLC;  SKE DELIM;  BRR 1CHAR;  CLA;  STA GOTIT;  BRU HITEND
E1CHST SLC;  BRR 1CHAR


* DEFINED-ABSOLUTE:  EXPR IS CALLED.  TERMINATOR AND UNDEFINED EXITS 
* CAUSE ERROR MESSAGES AND A IS SET TO ZERO.  DEFINED EXIT CAUSES 
* ERROR MESSAGE IF VALUE IS NOT ABSOLUTE, OTHERWISE VALUE IS LEFT IN
* A.  IN ALL CASES B=0 AND X IS SAFE.

EDFABS BRM DF;  SKB =-1;  BRU SNEK;  BRR DFABS



* DEFINED:  SAME AS DFABS, BUT VALUE NEED NOT BE ABSOLUTE.  B CONTAINS
* RFACTOR.

EDF    STX DFABS1;  BRM EXPR;  BRU DFABS3;  BRU DFABS4
DFABS2 LDX DFABS1;  BRR DF
DFABS3 WEM EMUE;  BRU DFABS5
DFABS4 WEM EMME;  BRU DFABS5
SNEK   WEM EMRA
DFABS5 CLAB;  BRU DFABS2



* QUICK LOOKUP:  INPUT IS ADDRESS OF A TABLE IN X (FORMAT OF TABLE LIKE
* THAT FOR SHTLK).  WHEN CALLED THIS ROUTINE CALLS GNE, EXPECTING A SYM-
* BOL.  THE SYMBOL IS LOOKED UP IN THE TABLE AND IF FOUND, QUIKL EXITS
* WITH A SKIP, A SET TO VALUE WORD, X AS AFTER A CALL OF SHTLK.  IF
* SYMBOL NOT FOUND AN ERROR MESSAGE IS OUTPUT AND NO SKIP OCCURS.  IN
* EITHER CASE, LAST IS NEGATIVE IF THERE ARE NO MORE SYMBOLS TO PROCESS,
* ELSE POSITIVE.

EQUIKL STX QUIK1;  BRM LOOKY;  BRR QUIKL;  LDX QUIK1;  BRM SHTLK
       BRU QUIKU;  LDA 2,2;  MIN QUIKL;  BRR QUIKL
QUIKU  WEM EMUE;  BRR QUIKL


* SHORT LOOKUP:  INPUT IS THE ADDRESS OF A TABLE IN X.  THE TABLE SHOULD
* CONSIST OF THREE WORD ENTRIES, THE FIRST TWO CONSTITUTING A SYMBOL AS
* STORED IN THE MAIN TABLE, THE THIRD A VALUE,  THE TABLE SHOULD END WITH
* A ZERO WORD.  THE SYMBOL STORED IN *WD1 AND *WD2 IS LOOKED UP IN THE
* TABLE AND IF FOUND AN EXIT WITH A SKIP IS MADE, X CONTAINING THE ADD-
* RESS OF THE FIRST WORD OF THE LOOKED UP SYMBOL.  IF THE LOOKUP FAILS,
* A NORMAL EXIT IS MADE.

ESHTLK LDA* WD1;  SKE 0,2;  BRU SHTLK1;  LDA* WD2;  SKE 1,2;  BRU SHTLK1
       MIN SHTLK;  BRR SHTLK
SHTLK1 EAX 3,2;  LDA 0,2;  SKE =0;  BRU ESHTLK;  BRR SHTLK



* HANDLE LAST:  NXTCHR IS EXAMINED AND APPROPRIATE HOUSE-CLEANING ACTIONS
* ARE TAKEN.

EHLAST CLA;  STA LAST;  STA HLAST1;  LDX NXTCHR;  LDB CTAB,2;  LSH 5
       CAX;  BRU *+1,2;  BRUG NOGO,NOGO,NOGO,BELANK,CRSEM,COM,NOGO
NOGO   WEC NXTCHR;  WEM EMCT;  LDA =-1;  STA HLAST1
BELANK BRM IGNOR
CRSEM  LDA =-1;  STA LAST
COM    CLA;  STA GOTIT;  BRR HLAST



* LOOKY:  THIS ADHOC SUBROUTINE CALLS GNE TO GET A SYMBOL, TYPING ERROR
* MESSAGES IF NECESSARY.  A SKIP INDICATES A SYMBOL APPEARED, NO SKIP
* MEANS AN ERROR.

ELOOKY BRM GNE;  BRU BAD1;  BRU BAD2;  BRM HLAST;  MIN LOOKY;  BRR LOOKY
BAD1   BRM HLAST;  SKN HLAST1;  WEM EMMS;  BRR LOOKY
BAD2   WEM EMMS;  BRM HLAST;  BRR LOOKY


* STACK INPUT POINTER AND UNSTACK INPUT POINTER:  THE FOLLOWING ROUTINES
* ARE USED TO SWITCH FROM ONE INPUT SOURCE TO ANOTHER AND BACK AGAIN.

ESTKI  MINT ISP;  LDA INPUT;  SKE =DIGI;  SKIP;  TRAP;  STA* ISP
       LDX =ITAB-4;  EAX 4,2;  SKE 0,2;  BRU *-2;  LDA* 3,2;  CLB
       LSH 14;  ADM* ISP;  MINT ISP;  LDA 1,2;  LDX 2,2;  SUB 1,2
       LRSH 2;  LDA 0,2;  CHOP;  LSH 2;  STA* ISP;  BRR STKI

EUSTKI SKR ISP;  LDP* ISP;  CHOP;  LDX =ITAB-4;  EAX 4,2;  SKE 0,2
       BRU *-2;  CBA;  LRSH 2;  STA INPUT;  CLA;  LSH 2;  CNA;  ADD 1,2
       CAB;  LDA* 2,2;  ETR =7774B4;  MRG INPUT;  STP* 2,2;  LDA* ISP
       CHOP;  STA INPUT;  LDA* ISP;  LRSH 14;  STA* 3,2;  SKR ISP;  BRR USTKI

ITAB   DATA    FILE,FIXF,WA,IDUM
       DATA    UNPCK,FIXU,INPNT,IDUM
       DATA    DUMI,FIXDD,DPNT,DUML
       DATA    DIGI,0,DGPNT,IDUM


* BACK SPACE:  SSP IS BACKED UP UNTIL A CARRIAGE RETURN OR SEMI-COLON IS
* HIT, AND THEN THE CHARACTER INPUT IN A IS APPENDED TO STRING STORAGE
* FOLLOWING THE CR OR SC.
EBKSP  STA BKCHR;  LDA SSP;  MUL =3;  LSH 23;  ADD =2; STA BKP1
       LDA BKP;  MUL =3;  LSH 23;  ADD =2; STA BKP
BKG    GCD BKP;  BRU BKW;  SKE =155B; SKIP;  BRU BKM
       SKE =';';  BRU BKG
BKM    MIN BKP1
BKW    LDA BKCHR;  WCI BKP;  LDA BKP1; MUL =1; DIV =3; STA SSP
       CFREE; BRR BKSP


* PILE AND GRAB (FROM PILE):  THESE SUBS DO A LITTLE SHUFFLING BEFORE
* PUSH AND POP ARE CALLED:

EPILE  STP PP1;  STX PP3;  LDP* WD1;  STP SWD1;  LDP* WD3;  STP SWD3
       LDA WPNT;  SUB WD1;  STA SWPNT;  LDA FILE;  LDB UNPCK;  STP R1
       LDA DUMI;  LDB DIGI;  STP R3;  PUSH BX;  CLA;  STA GOTIT;  LDA =2
       STA SNMODE;  REPAIR 2,0;  LDA =-1;  STA EXPAND;  MIN ZLEV
       LDP PP1;  LDX PP3;  BRR PILE

EGRAB  STP PP1;  STX PP3;  POP BX;  LDP SWD1;  STP* WD1;  LDP SWD3
       STP* WD3;  LDA WD1;  ADD SWPNT;  STA WPNT;  LDA UMTP;  SKG WPNT
       BRU GRABE;  LDP R1;  STA FILE;  STB UNPCK;  LDP R3;  STA DUMI
       STB DIGI;  LDA =-1;  ADM ZLEV
       LDP PP1;  LDX PP3;  BRR GRAB
GRABE  WEM EMPO;  BRU ABORT



* DIRECTIVE ADDRESSES:  THIS TABLE IS USED TO INITIALIZE NARP
* WHEN THE PREDEFINED OPCODES ARE DEFINED USING OPD.
* THE FOLLOWING DIRECTIVES ARE IN ARPAS BUT ARE NOT INCLUDED IN THE LIST
* BELOW:  NOEXT,ORG,PAGE,RAD,REM
* OPD IS ALSO MISSING SINCE IT IS ALREADY BUILT INTO NARP.

DIRADR ZRO     ASC              0
       ZRO     BES              1
       ZRO     BSS              2
       ZRO     COPY             3
       ZRO     CRPT             4
       ZRO     DATA             5
       ZRO     PLUG            6
       ZRO     DEC              7
       ZRO     DELSYM           8
       ZRO     ELSE             9
       ZRO     ELSF            10
       ZRO     END             11
       ZRO     ENDF            12
       ZRO     ENDM            13
       ZRO     ENDR            14
       ZRO     EQU             15
       ZRO     EXT             16
       ZRO     FREEZE          17
       ZRO     FRGT            18
       ZRO     IDENT           19
       ZRO     IF              20
       ZRO     LIST            21
       ZRO     MACRO           22
       ZRO     NARG            23
       ZRO     NCHR            24
       ZRO     LIBEXT          25
       ZRO     NOLIST          26
       ZRO     OCT             27
       ZRO     POPD            28
       ZRO     RELORG          29
       ZRO     RETREL          30
       ZRO     RPT             31
       ZRO     TEXT            32
       ZRO     LMACRO          33
       ZRO     PLUG            34
       ZRO     REM             35
       ZRO     PLUG            36
       ZRO     FRGTOP          37


$NUMD  ZRO     *-DIRADR-1      NUMBER OF DIRECTIVES - 1




* EXTERNAL DEFINITIONS:

       XTRNL   ABORT,DIRADR,EBKSP,EBPF,ECCD2,ECCD4,ECHT
       XTRNL   EDF,EDFABS,EFF,EGRAB
       XTRNL   EHLAST,EINCLC,ELOOKY,ELSYMB,EMWC,EOUTB,EPBY,EPS,EPV
       XTRNL   EQUIKL
       XTRNL   EOVAL,EPILE,ESHTLK,ESTKI,ESTRNG,ESWC,ETFULL
       XTRNL   ETRPER,EUSTKI,E1CHAR,GETBLK,LDVI,LMTI
       XTRNL   LTYCO,LTYMES,LTYNOD,LTYNOB,LWEC,LWES,LWEM
       XTRNL   LPOP,LPUSH
       XTRNL   EWECS,EWESS,EWEMS,EWESYS
       XTRNL   EEOL,ELL,ELCHR,ETAB,ERLCH,ELSY,ELNO,ELISTF,EHOWL


       NOLIST  EXT             DO NOT LIST UNDEFINED SYMBOLS
       END                     LAST LINE OF MISC.

CENTRL IDENT                   FIRST LINE OF CENTRL. 18 OCT 1966.

       BSS     :LC:-:ZERO:     SO PACKAGE MAY BE LOADED AT 0

* CODED BY ROGER HOUSE, PROJECT ARPA, UNIV. OF CALIF., BERKELEY.


* CENTRAL LOOP:  A LINE OF CODE IS PROCESSED. MACRO CALLS AND DIRECTIVES
* CAUSE BRU'S TO THE APPROPRIATE ROUTINES, WHILE INSTRUCTIONS ARE 
* FULLY PROCESSED.  --  INITIALIZATION BEFORE FIRST CALL:  CMODE←0,
* EXF←LBF←0.

$NEWL  LDA =-1;  BRM EOL
NL     EQU     NEWL
$CLOOP LDA CMODE;  SKG =0;  STA GNBOOL;  BRM GNLC;  STA NXTCHR
CLOOP1 AXC;  LDB CTAB,2;  LSH 5;  SWITCH CMODE,MTAB

*               0   1   2   3   4   5   6   7
*               *   $  L D BLK CRS  ,  OOC ILC
MTAB   STAB    SK0,XT1,LB2,CL2,NL0,SE0,SE0,BC0   FIRST CHARACTER
       STAB    SE1,SE1,LB2,FR2,FR0,SE1,SE1,BC1   AFTER $
       STAB    SE2,SE2,OC3,CL2,DL0,SE2,SE2,BC2   EXPECT OPCODE
       STAB    SE3,SE3,NB0,CS4,QT0,SE3,SE3,BC3   OPCODE TERMINATOR
       STAB    OR0,OR0,OR0,CL4,QT0,OR0,OR0,OR0   EXPECT OPERAND

$SK    BRM IGNOR;  BRU NEWL
EIGNOR BRM GNLC;  SKE =';';  SKIP;  BRR IGNOR;  SKE =100B
       BRU EIGNOR;  BRR IGNOR
XT     LDA =-1;  STA EXF;  BRU CLOOP
LB     LDA =-1;  STA GOTIT;  BRM GNE;  TRAP;  BRU FR;  LDP* WD1
       STP LABP; LDA HASH; STA LBHASH; LDA =-1; STA LBF
       LDA NXTCHR; BRU CLOOP1
CL     EQU CLOOP
DL     BRM DEFLB;  BRU NEWL
$FR    CLAB;  STP EXF
$SE    WEC NXTCHR;  WEM EMQ;  BRU CLOOP
BC     WEC NXTCHR;  WEM EMQ;  BRU CLOOP

       SET     INST,0,DIRC,1,MACR,2
       SET     $ANOP,0,NOAN,1,ANREQ,2

OC     LDA =-1;  STA GOTIT;  BRM GNE;  TRAP;  BRU NUMOC;  LDA =OPCIR
       BRM LOOK; BRM EUO
OC1    STA INSTR; LDA =1B7; SKA -1,2; LDA =-1; STA UOBOOL
       CLA; RCY 2; STB OPRNDS; CLB; LCY 2; STB OCTYPE
       LDA -1,2;  STA SHIFTK;  LDP LABP
       STP* WD1;  LDA LBHASH;  STA HASH;  LDA NXTCHR;  SKE ='*'
       BRU CLOOP1;  LDA OCTYPE;  SKE =INST;  BRU SE;  MERGE =4B4
       SKN SHIFTK;  BRU CLOOP;  LDA INSTR;  ETR =7774B4;  STA INSTR
       CLA;  STA SHIFTK;  BRU CLOOP
OERR   LDP* WD1; BRM WESYS;  WEM EMOP;  CLA
NUMOC  CLB;  LSH 15;  SKB =-1;  BRU OERR;  LDX =ZERO+1;  BRU OC1

NB     WEC NXTCHR;  WEM EMCT;  LDX =OR;  SKIP
CS     LDX =CLOOP;  LDA OPRNDS;  SKE =NOAN;  BRU 0,2;  CLA;  STA CMODE
       BRM IGNOR
QT     LDA OPRNDS;  SKE =ANREQ;  SKIP;  WEM EMMO
       CLA;  STA XOPSI;  LDX OCTYPE
       BRU *+1,2;  SKIP 3;  BRU* INSTR;  BRU MACALL;  BRU LMACAL
       BRM DEFLB;  CLA;  STA RFACTO
OUTPI  LDX =REL14;  LDA RFACTO;  LDB INSTR; BRM OVAL
       SKN UOBOOL; BRU NEWL; LDA =UOPR; BRM SWC; BRU NEWL
OR     LDA =-1;  STA GOTIT;  LDX OCTYPE;  BRU *+1,2;  SKIP 3;  BRU* INSTR
       BRU MACALL;  BRU LMACAL;  BRM DEFLB;  LDA NXTCHR
OR1    SKE ='/';  BRU OR3;  MERGE =2B7
OR2    BRM GNLC;  STA NXTCHR;  BRU OR1
OR3    SKE ='←';  BRU OR4;  MERGE =4B4;  SKN SHIFTK;  BRU OR2
       LDA INSTR;  ETR =7774B4;  STA INSTR;  CLA;  STA SHIFTK;  BRU OR2
OR4    SKN SHIFTK;  BRU NORMO;  BRM DFABS;  ETR =777B;  BRU COMBIN
NORMO  BRM EXPR;  BRU UDF;  WEM EMMO;  CHOP
COMBIN MERGE;  STB RFACTO;  LDX LAST;  BRU *-2,2;  BRM IGNOR;  BRU OUTPI
       BRM DFABS;  LSH 21;  MERGE;  LDX LAST;  BRU *-2,2;  BRM IGNOR
       BRU OUTPI;  WEM EMBT;  SKIP -2
UDF    STB 0,2;  LDB RFACT;  XMA INSTR;  ETR =7774B4;  BRU COMBIN


ZERO   DATA    0


* GET NEXT ELEMENT:  THE NEXT ELEMENT, I.E., NUMBER, SYMBOL, OR NON-
* LETTER, NON-DIGIT CHARACTER IS DELIMITED AND PROCESSED.  THERE IS NO
* EXPLICIT INPUT TO THE ROUTINE.  THE CALLING SEQUENCE IS
*      BRM     GNE
*      BRU     OTHER
*      BRU     NUMBER
*      BRU     SYMBOL
* WHEN GNE RETURNS THROUGH THE OTHER EXIT, A CONTAINS THE CTAB WORD FOR
* THE CHARACTER, AND NXTCHR CONTAINS THE CHARACTER ITSELF.  IN THE
* CASE OF THE NUMBER EXIT, THE VALUE OF THE NUMBER IS IN A AND NXTCHR
* CONTAINS THE CHARACTER TERMINATING THE NUMBER.  THERE IS NO OUTPUT 
* IN THE CENTRAL REGISTERS FOR THE SYMBOL EXIT, BUT THE FIRST 6 CHAR-
* ACTERS (6 BITS EACH) OF THE SYMBOL ARE PACKED (LEFT-JUSTIFIED WITH 
* BLANK FILL ON THE RIGHT) INTO *WD1 AND *WD2, AND HASH CONTAINS THE 
* HASH CODE FOR THE SYMBOL.  NXTCHR CONTAINS THE CHARACTER TERMINATING
* THE SYMBOL.  --  THE BOOLEAN GOTIT INDICATES WHETHER GNE SHOULD READ
* THE NEXT CHARACTER FROM THE INPUT MEDIUM (GOTIT NON-NEGATIVE) OR TO
* TAKE IT FROM NXTCHR (GOTIT NEGATIVE).  --  INITIALIZATION BEFORE FIRST
* CALL:  SNMODE←2, FIRST 7 CELLS FROM CHP MUST BE ZERO, GOTIT←-1 (BECAUSE
* CLOOP READS THE FIRST CHARACTER AND PLACES IT IN NXTCHR).

EGNE   LDA CHP;  STA SCHP;  MIN CHP;  LDA NXTCHR;  SKN GOTIT
GETC   BRM GNLC;  COPY AX,AB;  LDX CTAB,2;  LDA =-3;  BRU 0,2

BLET   CLX;  SKIP
DLET   LDX =-1;  XMA SNMODE;  SKE =1;  BRU HIDE;  CXA
NOTBD  STA SNMODE
HIDE   STB* CHP;  LDA =CHB;  EAX CHPA
       SKG CHP;  BRM TFULL;  MIN CHP;  LDA CHP
       STA SCPNT;  BRU GETC
DIGIT  SKN SNMODE;  ADD =1;  XMA SNMODE;  SKG =0;  BRU HIDE;  LDA =1
       BRU NOTBD

OTH    STB NXTCHR;  COPY XA,B;  LDX SNMODE;  BRU *+4,2
       BRUG SYMB,NSBN,NSD,NSB,NS,UD


NSBN   SKR CHP;  LDA* CHP;  SUB =20B;  MUL =3;  RSH 1;  BRU NSB1
NSD    CLB;  LDA =10;  BRU NSB2
NSB    CLB
NSB1   LDA =8
NSB2   SKR CHP;  BRU NS1
NS     CLB;  LDA RADIX
NS1    STP RAD;  SUB =1;  STA GNE1;  LDA SCHP;  SUB CHP;  ADD =1
       COPY AX,B;  LDA =2B7;  ADM CHP;  SKIP 2
CONCAT MUL RAD;  RSH 1;  LDA* CHP;  SUB =20B;  STA GNE2;  SKG GNE1
       SKIP 1;  WEM EMRG;  BAC;  ADD GNE2;  BRX CONCAT
       LSH* SCALE;  BRU RESET

SYMB   LDX SCHP;  CLB;  LDA 1,2;  LSH 6;  ADD 2,2;  LSH 6;  ADD 3,2
       LSH 6;  ADD 4,2;  STA* WD1;  LDA 5,2;  LSH 6;  ADD 6,2;  LSH 12
       STA* WD2;  LDA 1,2;  EOR 2,2;  ADD 3,2;  ADD 4,2;  ADD 5,2
       ADD 6,2;  ETR =37B;  LSH 1;  STA HASH;  MIN GNE

RESET  MIN GNE;  LDB =2;  STB SNMODE;  SKN CLEAN;  BRU RESET1;  REPAIR 1
RESET1 LDB =-1
UD     STB GOTIT;  LDB SCHP;  STB CHP;  BRR GNE



* GET NEXT LOGICAL CHARACTER:  THE NEXT LOGICAL CHARACTER FROM THE INPUT
* IS DELIVERED IN THE RIGHTMOST 8 BITS OF A, ALL OTHER BITS BEING ZERO.
* X AND B ARE UNDEFINED.  THE TREATMENT OF THE VARIOUS CHARACTERS IS AS
* FOLLOWS:
*      1.)  000B-077B - DELIVER THE CHARACTER IN A
*      2.)  100B-134B - IGNORED
*      3.)       135B - IF NEXT CHAR BLANK THEN IGNORE ELSE
*                          IF SQZ135 THEN BLANK IN A ELSE 101B IN A
*      4.)  136B-154B - IGNORED
*      5.)       155B - DELIVER 100B IN A
*      6.)  156B-177B - IGNORED
*      7.)  200B-377B - IF EXPAND < 0 THEN IGNORE ELSE CHAR - 76B IN A
* TREATMENT OF 135B IS AS FOLLOWS:  ALWAYS IGNORED IF FOLLOWED BY A ZERO
* COUNT.  OTHERWISE, IF SQZ135 NEGATIVE THEN REPLACE 135B AND FOLLOWING
* BLANK COUNT BY A SINGLE BLANK.  IF SQZ135 NON-NEGATIVE THEN DELIVER
* 101B IN A AND SAVE THE BLANK COUNT IN SQZ135.  IN THE NORMAL CASE,
* 1.) ABOVE, THE TIMING FOR BRM GNLC IS ON THE AVERAGE 28 CYCLES (WHEN
* INPUT IS FROM A FILE).

EGNLC  BRM* INPUT
EGNLCC SKG =76B;  BRU EGNST
       SKE =155B;  BRU EGNMB;  SLC;  LDA =100B;  BRR GNLC

EGNCON SKE =77B;  BRU EGNLC1
       BRM* INPUT;  SKE =155B;  SKIP;  BRU EGNLC
       STA CONTR;  LDA =1B5+FOUL;  STA GNLC+1;  LDA =77B
       BRU EGNST

EGNMB  SKE =135B;  BRU EGNCON;  BRM* INPUT
       SKG =0;  BRU EGNLC;  SKN SQZ135;  BRU EGNMB1
       CLA;  BRU EGNST
EGNMB1 STA SQZ135;  CLA;  SLC;  LDA =101B;  BRR GNLC

EGNLC1 SKG =177B;  BRU EGNLC;  SUB =76B;  SKN EXPAND;  BRR GNLC;  BRU EGNLC

EGNST  SLC;  BRR GNLC

* FOUL IS A PIECE OF CODE TO HANDLE THE CASE OF ← NOT BEING USED
* AS LINE-CONTINUATION  EGNLC PUTS THE LOOKED-AHEAD-AT CHAR
* IN CONTR & SETS UP GNLC TRANSFER TO GO TO FOUL
* AT NEXT BRM GNLC  FOUL DELIVERS THE CHAR IN CONTR TO EGNLC

FOUL   LDA =1B5+EGNLC;  STA GNLC+1;  LDA CONTR;  BRU EGNLCC


* CHARACTER TABLE:  AS EACH CHARACTER IS READ IT IS LOOKED-UP IN THE
* FOLLOWING TABLE.  THE THREE VALUES IN THE TABLE CORRESPOND TO 
* THE CLOOP, EXPRI, AND GNE REPRESENTATIONS OF THE CHARACTERS.

*                                   VALUE   CHARACTER
$CTAB  C       3,17,OTH               0          
       C       6,13,OTH               1         !
       C       6,20,OTH               2         "
       C       6,08,OTH               3         #
       C       1,23,OTH               4         $
       C       6,14,OTH               5         %
       C       6,12,OTH               6         &
       C       6,20,OTH               7         '
       C       6,21,OTH               8         (
       C       6,23,OTH               9         )
       C       0,01,OTH              10         *
       C       6,03,OTH              11         +
       C       5,17,OTH              12         ,
       C       6,04,OTH              13         -
       C       6,21,OTH              14         .
       C       6,02,OTH              15         /
       RPT 10;  C 2,-1,DIGIT;  ENDR  16-25      0-9
       C       2,-1,NOTBD            26         :
       C       4,17,OTH              27         ;
       C       6,05,OTH              28         <
       C       6,07,OTH              29         =
       C       6,09,OTH              30         >
       C       7,22,OTH              31         ?
       C       6,11,OTH              32         @
       C       2,-1,NOTBD            33         A
       C       2,-1,BLET             34         B
       C       2,-1,NOTBD            35         C
       C       2,-1,DLET             36         D
       RPT 22;  C 2,-1,NOTBD;  ENDR  37-58      E-Z
       C       6,18,OTH              59         [
       C       7,22,OTH              60         \
       C       6,16,OTH              61         ]
       C       6,00,OTH              62         ↑
       C       7,21,OTH              63     LEFT-ARROW
       C       4,17,OTH              64         <CR>
       C      -1,-1,OTH              65         <135B>
       RPT 5; C 7,22,NOTBD; ENDR     66-70  DIGS,DUM,GENRAT,EMAC,ERPT


* DEFINE LABEL:  IF LBF IS NEGATIVE THEN THE LABEL CONTAINED IN *WD1
* AND *WD2 IS DEFINED.  ALL CONSEQUENCES SUCH AS DOUBLE DEFINITIONS
* AND EVALUATION OF SAVED EXPRESSIONS ARE HANDLED.  IN ALL CASES, EXF
* AND LBF ARE RESET.

EDEFLB SKN LBF;  BRU RESETF;  LDP* WD1;  STP LDWD1
       CLAB;  STP* WD3;  LDA =SYMIR;  BRM LOOK
       BRM ADDTO;  LDP -1,2;  STP TABLNK
DLSU   SKA =4B7;  CHOP;  MRG =4B7
       SKN RFBOOL;  SKIP;  MRG =4B4
       SKN EXF;  SKIP;  MRG =2B6
       SKN GNBOOL;  SKIP;  MRG =4B6
       LDB LOCCNT;  SKN RFBOOL;  LDB RLOCC;  STP -1,2;  STB LDLC
       SKN TABLNK;  BRU HARD;  LDP* WD1;  BRM WESYS;  WEM EMRD
RESETF CLAB;  STP EXF;  BRR DEFLB
HARD   BRM FOLEC;  LDA VAL;  SKA =2B7;  SKIP;  BRU RESETF
       CHOP;  SKN RFBOOL;  BRU HARDH
       MRG =LABFIX;  BRM SWC;  BRU RESETF
HARDH  STA HARDHT;  LDA RLOCC;  LDB =ABS;  BRM BPF
       LDA =-1;  ADM LOCCNT;  ADM RLOCC
       LDA HARDHT;  MRG =FIX14;  BRM SWC;  BRU RESETF


* FOLLOW EXPRESSION TABLE CHAIN:  THIS ROUTINE TAKES THE ADDRESS OF
* WORD 4 OF A MAIN TABLE ENTRY IN X AND THE PREVIOUS CONTENTS OF WORD 4
* OF THIS ENTRY IN VAL.  IF VAL IS NEGATIVE THEN AN ETAB CHAIN IS FOL-
* LOWED AND EXPRESSIONS ARE EVALUATED WHEN NECESSARY.  UPON EXIT VAL 
* CONTAINS WORD4 OF THE MT ENTRY FOR THE UNDEFINED SYMBOL OR ELSE THE
* LAST WORD IN THE ETAB CHAIN STARTING IN WORD4.

EFOLEC CXA;  CHOP;  SUB =1;  MRG =6B6;  STA TABLNK
THRD1  SKN VAL;  BRR FOLEC;  LDX VAL;  LDA TABLNK;  XMA 0,2;  STA VAL
THRD2  ETSCAN;  CLA;  LSH 5;  SKG =1
       SKIP 3;  LDA =-4B4;  ADM 0,2;  BRU THRD1;  CLA;  LSH 14
       XMA LOCCNT;  STA ESLC;  LDA ANP;  SKE UCHP;  TRAP;  LDA ATP
       SKE UANP;  TRAP;  MIN ATP;  LDA STKBOT;  STA* ATP;  MIN ATP
       LDA TERMIN;  STA NEWOP;  EAX* 1,2
GPOLSH EAX 1,2;  LDB 0,2;  LSH 2;  CLA;  LSH 3;  ADD =*+3;  STA DUMMY
       BRU* DUMMY;  BRU EXECUT;  BRU GVAL1;  TRAP;  BRU GVAL3;  BRU GOTVAL
       TRAP
GVAL1  LDA 2,2;  LDB 1,2;  EAX 2,2
GVAL2  MIN ANP;  STP* ANP;  LDA =2;  ADM ANP;  STA* ANP
       BRU GPOLSH
GVAL3  LDA* 0,2;  ETR =174B4;  LSH 5;  RSH 19;  CAB;  MIN 0,2;  LDA* 0,2
       BRU GVAL2
EXECUT LDA 0,2;  STA* ATP;  STX FOLEC1;  BRM STACK;  LDX FOLEC1
       BRU GPOLSH
GOTVAL LDA ESLC;  STA LOCCNT;  LDP 0,2;  STA FOLEC1;  CHOP;  STA FOLEC2
       CBA;  MRG =7774B4;  CNA;  ADD =12000001B;  EAX* 1,2;  STA 1,2
       LDA* ANP;  LDB UCHP;  STB ANP;  LDB UANP;  STB ATP;  LDB FOLEC1
       SKB =2B7;  SKIP;  BRU THRD1;  SKE =2;  BRU ULIT
       LDP ANP2;  SKN FOLEC1;  CHOP;  XAB;  LDX =REL24
       SKN FOLEC1;  LDX =REL14;  BRM OVAL
       LDA =-1;  ADM LOCCNT;  ADM RLOCC;  LDA =FIX24
       SKN FOLEC1;  LDA =FIX14;  MRG FOLEC2;  BRM SWC;  BRU THRD1
ULIT   LDX ANP2;  LDA 0,2;  SKA =2B7;  SKIP;  BRU ULIT1;  CHOP
       LDB =REL14;  BRM BPF;  LDA =-1;  ADM LOCCNT;  ADM RLOCC
       LDA =FIX14;  MRG FOLEC2
       BRM SWC
ULIT1  LDX ANP2;  LDA FOLEC2;  MRG =2B7;  STA 0,2;  BRU THRD1


*ENTER UNDEFINED OPCODE
*OPCODE ASSUMED TO BE IN WD1*,WD2*
*OPCODE IS LOOKED UP AND ENTERED WITH CURRENT UNDEFINED OPCODE NUMBER
*(UOC) AS VALUE IF NOT PRESENT.
*IF THE OPCODE IS DEFINED, IT IS CHANGED TO
*UNDEFINED AND A WARNING MESSAGE (EMOW) IS ISSSUED.

EEUO   LDA =OPCIR; BRM LOOK; BRU EUO1
       STX EUOX; LDA -1,2; SKA =1B7; BRU EUO5
       LDP -3,2; BRM WESYS; WEM EMOW (WARNING MESSAGE)
       BRU EUO3
EUO1   BRM ADDTO; STX EUOX
EUO3   LDA UOC; SKG =77B; BRU EUO4; WEM EMOO; CLA; STA UOC
EUO4   CLB; LRSH 9; LDA =1B7; MIN UOC; LDX EUOX; STP -1,2
EUO2   LDA =OPDF; BRM MWC; LDX EUOX; LDA -3,2; BRM FF
       LDA =50B; LDX EUOX; MRG -2,2; BRM FF
       LDA* EUOX; LRSH 15; BRM FF
       LDA =-1; BRM FF
EUO5   CLB; LDA* EUOX; BRR EUO



* LOOK:  THIS IS THE LOOKUP ROUTINE FOR THE MAIN TABLE OF SYMBOLS, OP-
* CODES, AND LITERALS.  THE INPUT IS THE ADDRESS OF THE FIRST WORD OF
* AN INITIAL REFERENCE TABLE IN A.  ALSO, HASH SHOULD BE SET,
* AS WELL AS WD1 AND WD2 (WD3 AND WD4 WILL USUALLY BE SET ALSO, AL-
* THOUGH THIS IS NOT NECESSARY AS FAR AS THIS ROUTINE IS CONCERNED).
* OUTPUT:  SKIP MEANS THE ITEM WAS FOUND:  A CONTAINS WORD 4 OF THE
* ENTRY (VALUE), AND B CONTAINS BITS 5-9 OF WORD 3 (RFACTOR), RIGHT-
* JUSTIFIED, AND X CONTAINS THE ADDRESS OF WORD 4.  NO SKIP MEANS
* THE ITEM WAS NOT FOUND:  A CONTAINS THE ADDRESS OF WORD 2 OF WHAT WILL
* BE THE NEW ENTRY IF IT IS ADDED TO THE TABLE, AND X CONTAINS THE ADD-
* RESS OF WORD 1 OF THE INIT REF TAB ENTRY CORRESPONDING TO THE ITEM 
* JUST LOOKED UP.

ELOOK  ADD HASH;  COPY AX,AB;  LDX 0,2;  LDA 1,2;  ETR =7774B4
       MRG WD2;  STA 1,2;  CBX
NO1    LDA* WD1
NO2    LDX 1,2;  SKE -1,2;  BRU NO2;  LDA* WD2;  SKE 0,2;  BRU NO1
       CXA;  CHOP;  SKE WD2;  SKIP 2;  CBX;  BRR LOOK;  ADHOC1;  MIN LOOK
       BRR LOOK

* ADDTO:  AN ITEM NOT FOUND BY LOOK IS ADDED TO THE MAIN TABLE.  THE 
* INPUT IS THE OUTPUT FROM LOOK WHEN IT FAILS TO SKIP, AND THE OUTPUT
* IS THE SAME AS THE OUTPUT OF LOOK WHEN IT DOES SKIP.

EADDTO STA 0,2;  CAX;  LDA =4;  ADM WD1;  ADM WD2;  ADM WD3;  ADM WD4
       ADM MTP;  RESV MTP;  ADHOC1;  BRR ADDTO


* EXPRI:  THE NEXT BASIC EXPRESSION ELEMENT IS INPUT.  UPON RETURN
* A CONTAINS AN INTEGER SPECIFYING THE TYPE OF ELEMENT, AND EITHER
* NEWOP CONTAINS AN OPERATOR WORD, OR ANSTK AN OPERAND, OR BOTH.

*      TYPE    ELEMENT               INFORMATION
*       0        =                   NEWOP (RELATIONAL OPERATOR)
*       1       + -                  NEWOP (BINARY OPERATOR)
*       2        @                   NEWOP
*       3      <CONSTANT>            VALUE,0,2 IN ANSTK
*              <DEF SYMB>            VALUE,RFACTOR,2 IN ANSTK
*              <UNDEF SYMB>          ADDR VAL WRD IN SYMTAB,0,1 IN ANSTK
*       4        *                   NEWOP AND LOCCNT,1,2 IN ANSTK
*       5        [                   NEWOP
*       6        ]                   NEWOP
*       7   ↑ / < <= # >= > & ! %    NEWOP
*       8      <TERMINATOR>          NEWOP AND 0,0,2 IN ANSTK


EEXPRI LDA =3;  RESV ANP;  STA ETYPE
NOTHER BRM GNE;  BRU OTHER;  BRU NUMBER;  CLAB;  STP* WD3;  LDA =SYMIR
       BRM LOOK;  BRM ADDTO;  SKN -1,2;  BRU FINAGL
DEFIND STX EXPRI1;  LDX ANP;  STP 1,2;  LDA EXPRI1;  ADD =1
       SKE =1;  LDA =2;  STA 3,2;  LDA ETYPE;  BRR EXPRI
FINAGL LDA =-1;  CAB;  SKN UDBOOL;  COPY XA,B;  COPY BX,B;  BRU DEFIND
NUMBER LDX =1;  CLB;  BRU DEFIND
OTHER  CLB;  LCY 5;  STB LAST;  CLB;  LCY 5;  CBX;  LDA OPWRD,2
       ETR =60077777B;  STA NEWOP;  LDB OPWRD,2;  LSH 2;  CLA;  LSH 7
       CAX;  BRU *+1,2
*                                  ETYPE    CHARACTER
       BRR     EXPRI                 0          =
       BRR     EXPRI                 1         + -
       BRR     EXPRI                 2          @
       BRU     GETSTR                3         ' "
       BRU     GETLC                 4          *
       BRR     EXPRI                 5          [
       BRR     EXPRI                 6          ]
       BRR     EXPRI                 7     ↑ / # & ! %
       BRU     GETZRO                8    <TERMINATOR>
       BRU     GETNXT                9         > <
       BRU     CONERR               10  <OUT OF CONTEXT>
       BRU     CHRERR               11 <ILLEGAL CHARACTER>
       BRU     NASTY                12         $ )

GETSTR LDA NXTCHR;  LDB =6;  SKE ="'";  LDB =8;  BRM STRNG;  STA EXPRI1
       SKB =-2;  BRU LERR
WHW    LDA =24;  RSH 23;  DIV 6OR8;  SUB EXPRI1;  MUL 6OR8;  RSH 1;  CBX
WHW1   LDA* WD1;  LRSH 0,2;  BRU NUMBER
LERR   WEM EMLS;  CLX;  BRU WHW1
GETLC  STA ETYPE;  LDA LOCCNT;  SKN RFBOOL;  LDA RLOCC
       LDB =1;  SKN RFBOOL;  CLB;  BRU DEFIND
GETZRO STA ETYPE;  CLAB;  BRU DEFIND
GETNXT BRM GNLC;  SKE ='=';  BRU ONEC;  LDA =1000B;  ADM NEWOP;
       BRU TWOC
ONEC   STA NXTCHR;  LDA =-1;  STA GOTIT
TWOC   LDA =7;  BRR EXPRI
CONERR WEC NXTCHR;  WEM EMQ;  BRU NOTHER
CHRERR WEC NXTCHR;  WEM EMQ;  BRU NOTHER
NASTY  SKN MTBOOL;  BRU CONERR;  LDA =6;  STA LAST;  LDA NXTCHR
       SKE ='$';  MIN LAST;  LDA =8;  BRU GETZRO


* OPERATOR WORDS:  THIS TABLE IS INDEXED BY THE EXPRI PART OF CTAB.
* THE ENTRIES ARE OPERATOR WORDS TO BE USED BY STACK.  EACH WORD ALSO
* CONTAINS ETYPE, USED TO CHECK THE SYNTAX OF AN EXPRESSION.  SEVERAL
* OF THE ITEMS IN EACH WORD ARE EXPLAINED BELOW:

*      TYPE OF OPERAND:    0 - ALL OPERANDS ABSOLUTE
*                          1 - ARBITRARY RFACTORS
*                          2 - ARBITRARY RFACTORS, BUT EQUAL
*                          3 - AT LEAST ONE OPERAND ABSOLUTE
*      TYPE OF RESULT:     0 - ABSOLUTE
*                          1 - FOUND BY APPLYING OPERATOR TO RFACTORS
*      DEGREE:             0 - BINARY OPERATOR
*                          1 - UNARY OPERATOR

* RESULT TYPE,DEGREE,EXPRI TYPE,OPERAND TYPE,SUBOPCODE,OPCODE,HIERARCHY
*                                  VALUE    CHARACTER
OPWRD  OP      0,0,07,0,0,00,13      0          ↑
       OP      1,0,04,3,0,01,12      1          *
       OP      0,0,07,0,0,02,12      2          /
       OP      1,0,01,1,0,03,11      3          + (U AND B)
       OP      1,0,01,1,0,04,11      4          - (U AND B)
       OP      0,0,09,2,0,07,10      5          <
       OP      0,0,-1,2,1,07,10      6          <=
       OP      0,0,00,1,2,07,10      7          =
       OP      0,0,07,1,3,07,10      8          #
       OP      0,0,09,2,4,07,10      9          >
       OP      0,0,-1,2,5,07,10     10          >=
       OP      0,1,02,0,0,08,09     11          @
       OP      0,0,07,0,0,09,08     12          &
       OP      0,0,07,0,0,10,07     13          !
       OP      0,0,07,0,0,11,07     14          %
$LITOP OP      0,1,-1,1,0,12,04     15          = (LITERAL)
       OP      0,0,06,0,0,13,03     16          ]

       SET     ST,14,SL,15,SB,16

TERMIN OP      0,0,08,0,0,ST,02     17          ,<B><CR>;
       OP      0,0,05,0,0,SL,01     18          [
STKBOT OP      0,0,-1,0,0,SB,00     19          <BOTTOM OF STACK>
       OP      0,0,03,0,0,00,00     20          ' "
       OP      0,0,10,0,0,00,00     21          <OUT OF CONTEXT>
       OP      0,0,11,0,0,00,00     22          <ILLEGAL CHARCTER>
       OP      0,0,12,0,0,ST,02     23          $ OR )
PMUOP  OP      0,1,00,0,0,02,00                 USED FOR UNARY +,-


* EXPRESSION:
*      INPUT:  THERE IS NO EXPLICIT INPUT TO EXPR.  WHEN CALLED IT
* EXPECTS TO ENCOUNTER AN EXPRESSION, A LITERAL, OR A TERMINATOR.
*      ACTION:  THE LITERAL OR EXPRESSION IS EVALUATED AND SEVERAL 
* PIECES OF INFORMATION ARE RETURNED.  ALL NECESSARY SAVING OF UNDEFINED
* EXPRESSIONS, ETC., IS TAKEN CARE OF.  (IF UDBOOL=-1 THEN UNDEFINED
* SYMBOLS ARE TREATED AS DEFINED QUANTITIES WITH THE VALUE -1.)
* WHEN AN ERROR IS DETECTED THE APPROPRIATE 
* MESSAGE IS TYPED, BUT EXPR CONTINUES AS IF IT HAD ENCOUNTERED CORRECT
* INPUT.  THUS THE CALLING ROUTINE WILL BE UNAWARE OF THE ERROR.
*     OUTPUT:  THE INFORMATION OF WHETHER THE OUTPUT IS A TERMINATOR,
* UNDEFIND ITEM, OR A DEFINED ITEM IS INDICATED BY THE RETURN FROM THE
* SUBROUTINE CALL:
*                      BRM   EXPR
*                      BRU   UNDEF
*                      BRU   TERMIN
*                      BRU   DEF
* IN ANY CASE, THE CENTRAL REGISTERS CONTAIN THE FOLLOWING INFORMATION:
*             A               B           X
* UNDEF:    VALUE          FIXUP WORD    ADDRESS WHERE FIXUP GOES
* TERMIN      0               0          DUMMY
* DEF       VALUE          RFACTOR       DUMMY
* IN ADDITION, THE FOLLOWING CONSECUTIVE MEMORY CELLS ARE SET:
*           VALUE:   VALUE
*           RFACT:   RELOCATION FACTOR (1 IF UNDEFINED)
* THE FIXUP WORD IS A LINK TO BE PLACED IN ONE OF SEVERAL PLACES
* DEPENDING ON VARIOUS THINGS.  THE MAIN THINGS TO KEEP IN MIND ARE:
*   A.)  THE FIXUP WORD IS ONLY OF IMPORTANCE IF THE RETURN IS TO THE 
* UNDEFINED EXIT.  THEN IF, AND ONLY IF, IT IS LEGAL TO HAVE AN UNDE-
* FINED EXPRESSION AT THIS POINT, THE FIXUP WORD SHOULD BE PLACED AT
* THE PROPER SPOT BY STB 0,2.
*   B.)  FOR CONVENIENCE SAKE, IF THE RETURN IS TO EITHER THE TERMIN-
* ATOR OR DEFINED EXIT, THE SAME INSTRUCTION, STB 0,2, CAN BE EXE-
* CUTED.  IT WILL NOT HURT ANYTHING.  HOWEVER, NEVER, NEVER, NEVER
* EXECUTE STB 0,2 IF THE RETURN IS TO THE UNDEFINED EXIT AND IT IS IL-
* LEGAL TO HAVE AN UNDEFINED EXPRESION AT THIS POINT.
*     WHEN THE RETURN IS TO THE TERMINATOR EXIT, THE VALUE AND RFACTOR 
* ARE SET UP AS IF THE EXPRESSION 0 WERE ENCOUNTERED.
*      NO MATTER WHICH EXIT IS MADE, LAST CONTAINS THE CLOOP PART 
* OF THE CTAB WORD FOR THE TERMINATOR ENDING THE EXPRESSION:
*             BLANK        3
*             CR OR SEM    4
*             COMMA        5
*             $            6
*             )            7
*     PRECISE OUTPUT FROM EXPR FOR THE VARIOUS SITUATIONS:
* ITEM         EXIT     VALUE        RFACTOR      FIXUP ADDR
* TERM          T         0             0         DUMMY
* D LIT         U   LTAB LINK (OR LC)   1         ADDR LINK IN LTAB
* U LIT         U      LOCCNT           1         ADDR LINK IN ETAB
* D EXPR        D      EXPR VALUEC   EXPR RFACT   DUMMY
* U EXPR (SS)   U  E/S-TAB LINK (OR LC) 1         ADDR LINK IN E/S-TAB
* U EXPR (>SS)  U      LOCCNT           1         ADDR LINK IN ETAB


EEXPR  CLA;  STA SMODE;  STA UCNT;  STA EXPCNT;  LDA ANP;  LDB ATP
       STP SANP;  MINT ATP;  LDA STKBOT;  STA* ATP
NEXT   BRM EXPRI;  SWITCH SMODE,SYNTAB

*               =  + -  @  S C  *   [   ]  BOP  T
SYNTAB STAB    EQ1,PM2,NT2,SC3,SC3,LP1,ER1,ER1,TE0    FIRST
       STAB    ER1,PM2,NT2,SC3,SC3,LP1,ER1,ER1,TR0    <U OP> OR OPERAND
       STAB    ER2,ER2,ER2,SC3,SC3,LP1,ER2,ER2,TR0    OPERAND
       STAB    BO1,BO1,ER3,ER3,BO1,ER3,RP3,BO1,EX0    <B OP>

PM     LDA PMUOP;  ADM NEWOP
NT     MINT ATP;  LDA NEWOP;  STA* ATP;  BRU NEXT
BO     BRM STACK;  BRU NEXT
SC     LDA =3;  ADM ANP;  BRU NEXT
EQ     LDA LITOP;  STA NEWOP
LP     MINT ATP;  LDA NEWOP;  STA* ATP;  BRU NEXT
TE     CLAB;  BRU TERM
RP     BRM STACK;  SKR ATP;  LDA* ATP;  ETR =760B;  SKE =SL*20B
       BRU ER;  SKR ATP;  BRU NEXT
TR     WEM EMMO;  LDA =3;  ADM ANP
EX     BRM STACK;  SKR ATP;  LDA* ATP;  ETR =760B;  SKE =SB*20B
       WEM EMBT;  CLAB;  STP VALUE;  LDX* ANP;  BRU *+1,2;  BRU UCOMP
       BRU UEXPSS;  BRU DEXP
UEXPSS LDX ANP;  LDX -2,2;  SKN 0,2;  SKIP 2;  LDX 0,2;  SKIP -2
       LDA 0,2;  ETR =7774B4;  MRG LOCCNT;  MRG =2B7;  CAB;  LDA 0,2
       SKA =2B7;  SKIP;  BRU VAEK;  CHOP;  SKIP
VAEK   LDA LOCCNT;  STA VALUE;  MIN RFACT;  BRU EXIT
UCOMP  LDA UCNT;  LSH 14;  MRG =1B7;  BRM SAVEX;  MRG LOCCNT;  MRG =2B7
       CAB;  LDX ETP;  LDA EXPCNT;  CNA;  ETR =20037777B;  BRM SAVEX
       BRU VAEK
DEXP   LDX ANP;  LDP -2,2;  MIN EXPR
TERM   MIN EXPR;  STP VALUE;  LDX =DUMMY
EXIT   XMA SANP;  STA ANP;  LDA SATP;  STA ATP;  LDA SANP;  BRR EXPR

ER     WEC NXTCHR;  WEM EMQ;  BRU NEXT


* STACK:  IF HIERARCHY OF NEWOP IS GREATER THAN HIERARCHY OF THE OPER-
* ATOR AT THE TOP OF ATSTK THEN NEWOP IS PLACED AT THE TOP OF ATSTK.
* OTHERWISE, OPERATORS ARE REMOVED FROM THE ATSTK (I.E., THE OPER-
* ATIONS ARE PERFORMED ON THE OPERANDS IN ANSTK) UNTIL NEWOP CAN BE
* PLACED AT THE TOP OF ATSTK.

ESTACK LDA* ATP;  ETR =17B;  STA HIER;  LDA NEWOP;  ETR =17B; SKG HIER
       BRU UNPACK;  MINT ATP;  LDA NEWOP;  STA* ATP;  BRR STACK
UNPACK LDB* ATP;  STB RRFACT;  LSH 1;  STB DEGREE;  LSH 11;  ETR =7B
       STA ORFACT;  CLA;  LSH 3;  STA SUBOP;  CLA;  LSH 5;  STA OPER
SEEOP1 LDX* ANP;  BRU *+1,2;  BRU PHOLD;  BRU UDEF;  LDA ANP
       SUB =1;  STA TOP;  SUB =3;  STA TOPM1  TOP, TOPM1 POINT TO RFACTS
       SKN DEGREE;  BRU SEEOP2
UOP    LDA ORFACT;  SKE =0;  BRU COMPUT;  LDA* TOP;  SKE =0;  WEM EMRF
       BRU COMPUT
SEEOP2 LDX ANP;  LDX -3,2;  BRU *+1,2;  BRU PHOLD;  BRU UDEF
       LDA* TOP;  LDX ORFACT;  BRU *+1,2;  BRU ALLZRO;  BRU ANY
       BRU EQUAL
ONEZRO LDX TOP;  SKE =0;  BRU TNOTZ;  LDB -1,2;  LDA* TOPM1;  SKE =0
       STB 0,2;  BRU ANY
TNOTZ  LDA* TOPM1;  SKE =0;  WEM EMRA;  LDA -4,2;  STA -3,2;  BRU ANY
ALLZRO SKE =0;  WEM EMRA
EQUAL  SKE* TOPM1;  WEM EMRF
ANY    LDA TOP;  XMA TOPM1;  STA TOP;  SKR TOPM1
COMPUT SKR TOP;  LDX OPER;  LDP* TOP;  EXU OPTAB,2;  STA* TOP;  CLA
       MIN TOP;  MIN TOPM1;  SKN RRFACT;  SKIP 2;  CBA;  EXU OPTAB,2
       STA* TOP;  LDA TOP;  ADD =1;  STA ANP;  SKR ATP;  BRU ESTACK
UDEF   LDA =ANP4;  BRM STASH;  SKIP 4
PHOLD  LDA ANP;  SKN DEGREE;  SUB =3;  BRM STASH;  CLA;  SKN DEGREE
       LDA =-3;  ADM ANP;  LDA* ATP;  BRM SAVEX;  SKR ATP
       BRU ESTACK

* OPERATOR TABLE:  THE APPROPRIATE INSTRUCTION FROM THE FOLLOWING TABLE
* IS EXECUTED WHEN THE CORRESPONDING OPERATOR OCCURS IN AN EXPRESSION.

*                             OPCODE    OPERATOR
OPTAB  BRM     PWR              O           ↑
       BRM     MUL              1           *
       BRM     DIV              2           /
       ADD*    TOPM1            3           + (B)
       SUB*    TOPM1            4           - (B)
       NOP     0                5           + (U)
       CNA                      6           - (U)
       BRM     REL              7  <RELATIONAL OPERATOR>
       NOT                      8           @
       ETR*    TOPM1            9           &
       MRG*    TOPM1           10           !
       EOR*    TOPM1           11           %
       BRM     LIT             12           = (LITERAL)


* POWER:  A←A↑*TOPM1.  *TOPM1 MUST BE >= 0.  X AND B ARE SAFE.
EPWR   STP PWR1;  LDA* TOPM1;  SKN* TOPM1;  SKIP 2
       WEM EMNE;  CLA;  STA PWR3;  LDA =1
EPWR1  SKR PWR3;  SKIP 2;  LDB PWR2;  BRR PWR;  MUL PWR1;  LSH 23
       BRU EPWR1

* MULTIPLY:
EMUL   MTI* TOPM1;  BRR MUL

*DIVIDE:
EDIV   DVI* TOPM1;  BRR DIV


* RELATION:  THE RELATION TEST INDICATED BY SUBOP IS PERFORMED ON A. THE
* RESULT IS LEFT IN A:  1=TRUE, 0=FALSE.

EREL   LDX SUBOP; STB SUBOP; CLB; EXU RELTAB,2; LDB =1; CBA; BRR REL

* RELATION TABLE:  ANALOGOUS TO OPTAB, BUT ONLY RELATIONAL OPERATORS
* APPEAR.

*                           SUBOPCODE   OPERATOR
RELTAB BRM     SGE              0           <
       SKG*    TOPM1            1           <=
       BRM     SNE              2           =
       BRM     SEE              3           #
       BRM     SLE              4           >
       BRM     SKL              5           >=

* SKIP IF A<*TOPM1.
ESKL   SKG* TOPM1;  SKIP;  BRR SKL;  SKE* TOPM1;  MIN SKL;  BRR SKL

* SKIP IF A>=*TOPM1.
ESGE   SKG* TOPM1;  SKIP 2;  MIN SGE;  BRR SGE;  SKE* TOPM1;  BRR SGE
       SKIP -3

*SKIP IF (VALUE,RFACTOR)#(VALUE1,RAFACTOR1)
ESNE   MIN SNE; SKE* TOPM1; BRR SNE   (VALUES NOT =, SKIP RETURN)
       XMA SUBOP; MIN TOPM1
       SKE* TOPM1; BRU *+2 (RFACTORS NOT =, SKIP RETURN)
       SKR SNE     (VALUES AND RFACTORS =, NO-SKIP RETURN)
       XMA SUBOP; SKR TOPM1; BRR SNE

*SKIP IF (VALUE,RFACTOR)=(VALUE,RFACTOR)
ESEE   SKE* TOPM1; BRR SEE  (VALUES NOT =, NO-SKIP RETURN)
       XMA SUBOP; MIN TOPM1
       SKE* TOPM1; BRU *+2 (RFACTORS NOT =, NO-SKIP RETURN)
       MIN SEE (SKIP RETURN, BOTH VALUES AND RFACTORS ARE =)
       XMA SUBOP; SKR TOPM1; BRR SEE


* SKIP IF A<=*TOPM1.
ESLE   SKG* TOPM1;  MIN SLE;  BRR SLE


* LIT:  THIS ROUTINE IS EXECUTED WHEN A DEFINED LITERAL IS PROCESSED.
ELIT   STP* WD1;  LDA NEWOP;  ETR =760B;  SKE =ST*20B
       BRR LIT  NOTE THAT A IS A LITTLE FUNNY;  CLAB;  STA HASH
       STP* WD3;  LDA =LITIR;  BRM LOOK;  BRM ADDTO;  LDA =3
       STA* ANP;  COPY XA,B;  BRR LIT



* STASH:  BEGINNING WITH THE OPERAND WHOSE TYPE WORD IS ADDRESSED BY 
* THE CONTENTS OF A, ALL OPERANDS (WORKING TOWARDS THE TOP) IN ANSTK
* ARE SAVED IN EXPTAB.

ESTASH STA STASH1
SAVEN  LDX* STASH1;  BRU *+1,2;  BRU NOSAVE;  BRU USAVE;
DSAVE  LDA =2B6;  BRM SAVEX;  LDX STASH1;  LDA -1,2;  BRM SAVEX
       LDA -2,2;  BRM SAVEX;  BRU RPLC
USAVE  LDX STASH1;  LDX -2,2;  SKN 0,2;  SKIP 2
       LDX 0,2;  SKIP -2;  LDA 0,2;  ETR =20037777B;  MRG =4B6;  BRM SAVEX
       LDA 0,2;  ETR =1774B4;  MRG =4B7;  MRG ETP;  STA 0,2
       MIN UCNT;  LDX STASH1
RPLC   CLA;  STA -2,2;  STA -1,2;  STA 0,2
NOSAVE LDA =3;  XMA STASH1;  ADM STASH1;  SKE ANP;  BRU SAVEN
       BRR STASH

* SAVE EXPRESSION:  THE CONTENTS OF A IS PLACED IN THE EXPTAB.  ALL REG-
* ISTERS SAFE.

ESAVEX MINT ETP;  STA* ETP;  MIN EXPCNT;  BRR SAVEX



*FORGOTTEN SYMBOLS:

       FRGT    ANREQ,DIRC,INST,MACR,NOAN,SB,SL,ST,3M


* EXTERNAL DEFINITIONS:

       XTRNL   EADDTO,EDIV,EDEFLB,EEXPR,EEXPRI,EFOLEC,EGNE,EGNLC,EIGNOR
       XTRNL   ELIT,ELOOK,EMUL,EPWR,EREL,ESAVEX,ESGE,ESKL,ESLE
       XTRNL   ESNE,ESEE
       XTRNL   ESTASH,ESTACK,EEUO


       NOLIST  EXT             DO NOT LIST UNDEFINEDS
       END                     LAST LINE OF CENTRL.

DIRECT IDENT                   FIRST LINE OF DIRECT.  (21 NOV 1966)

* CODED BY ROGER HOUSE, PROJECT ARPA, UNIV. OF CALIF., BERKELEY.

       BSS     :LC:-:ZERO:     ADJUST LOCATION COUNTER

* ROUTINES FOR THE FOLLOWING NON-MACRO DIRECTIVES ARRANGED ALPHABETICALLY 
* ACCORDING TO DIRECTIVE NAME:
*              ASC
*              BES
*              BSS
*              COPY
*              DATA
*              DEC
*              DELSYM
*              END
*              EQU
*              EXT
*              FRGT
*              IDENT
*              LIST
*              NOLIST
*              OCT
*              OPD
*              POPD
*              PLUG (A DUMMY FOR DIRECTIVE VALUES THAT ARE NOT OK)
*              RELORG
*              RETREL
*              TEXT


* LABEL MESS:  IF DIRECTIVE HAS A LABEL THEN DEFINE IT AND TYPE AN
* ERROR MESSAGE.

ELABM  SKN LBF;  BRR LABM;  WEM EMNL;  BRM DEFLB;  BRR LABM


* FILTER:  IF DIRECTIVE HAS AN OPERAND THEN LET THRU FILTER ELSE GO TO
* CLOOP.

EFILTR STP EXPRW;  BRM DEFLB;  SKN EXPRW;  BRU NEWL;  BRR FILTR



* ASCII STRING:

ASC    LDB =8
ASCW   BRM FILTR;  LDA NXTCHR;  LDB XTRA;  BRM STRNG;  CBA;  SKG =0
       LDA =1;  LDB WD1;  STP TCNT
ASC1   SKR TCNT;  SKIP;  BRU DONE;  LDA* TPNT;  CLB;  BRM BPF
       MIN TPNT;  BRU ASC1
DONE   SKN GOTIT;  SKIP;  BRU NEWL;  BRM GNLC;  SKG =0;  BRU SK
       SKE =';';  SKIP;  BRU NEWL;  SKE =100B;  SKIP;  BRU NEWL
       BRM WECS;  WEM EMQ;  BRU SK


* BLOCK END SYMBOL:

BES    LDB =-1;  BRU BSS1


* BLOCK START SYMBOL:

BSS    CLB
BSS1   SKANN;  SKIP 2;  BRM DEFLB;  BRU NEWL;  STB XTRA;  SKN XTRA
       BRM DEFLB;  LDA HASH;  STA LBHASH;  LDP* WD1;  STP TCNT
       BRM DFABS;  STA EXPRW;  BRM INCLC;  LDA EXPRW;  CHOP;  MRG =BP
       BRM SWC;  SKN XTRA;  BRU NOMO;  LDA LBHASH;  STA HASH;  LDP TCNT
       STP* WD1;  BRM DEFLB

$NOMO  LDX LAST;  BRU *-2,2;  BRU SK;  BRU NEWL;  WEM EMBT;  BRU SK



* COPY:

COPY   LDB =46B5;  BRM FILTR
COPY1  LDX =COPTAB;  BRM QUIKL;  SKIP 2;  MRG XTRA;  STA XTRA;  SKN LAST
       BRU COPY1;  LDA XTRA;  CLB;  BRM BPF;  BRU NEWL

COPTAB SHTAB   A,0001B
       SHTAB   B,0002B
       SHTAB   AB,0004B
       SHTAB   BA,0010B
       SHTAB   BX,0020B
       SHTAB   XB,0040B
       SHTAB   E,0100B
       SHTAB   XA,0200B
       SHTAB   AX,0400B
       SHTAB   N,1000B
       SHTAB   X,2B7
       DATA    0


* DATA:

DATA   BRM FILTR
DATA1  LDA ETP;  STA XTRA;  BRM EXPR;  SKIP 2;  BRU DATA4;  BRU DATA3
       STB 0,2;  XMA XTRA;  SKE ETP;  SKIP;  BRU DATA2;  LDX ETP;  LDA =4B7
       ADM -1,2
DATA2  LDA XTRA;  LDB RFACT
DATA3  XAB;  LDX =REL24;  BRM OVAL;  SKIP
DATA4  WEM EMMO;  LDX LAST;  BRU *-2,2;  BRU SK;  BRU NEWL;  BRU DATA1


* DEC:  SET NUMBER RADIX TO 10.

DEC    LDA =10;  BRU OCT1



* DELSYM:

DELSYM BRM LABM;  CLA;  STA DSBOOL;  BRU NEWL


* END OF PROGRAM:

END    BRM LABM;  LDA =-1;  BRM EOL
       SKN INITB;  BRU NRMEND;  LDA ERRCNT;  SKE =0
       BRU NOGOOD;  LDA =2049;  SKG MTP;  BRU NOGOOD
       BRS 43;  LDX =NBLK-7;  RCY 12;  BRS 121;  LCY 6
       BRX *-2;  BRS 17;  TYMES IST;  BRS 43;  CBX
       COPY AB,XB,A;  BRS 44;  BRS 10
NOGOOD TYMES BIST;  BRU ABORT



* NORMAL END:  FIRST OUTPUT LITERALS:

NRMEND LDA =-1;  STA RFBOOL;  LDA =ORGLIT;  MRG LOCCNT;  BRM SWC;  CLAB
       STA TLENG;  STA PP1;  STP PP3;  LDA =LITIR;  LDB =LITERL
       BRM TSCAN

*OUTPUT LITERALS OF THE FORM "=UNDEF"
       LDA =31;  STA TLENG;  LDA =SYMIR;  LDB =SINGL;  BRM TSCAN

* OUTPUT EXTERNAL LITERALS:
       LDA =IBSSP;  STA ETB
ETPROC LDA ETB;  CAX;  SKE ETP;  SKIP;  BRU SETLC
       LDA 1,2;  STA SCAN1
       ETSCAN;  EAX 1,2;  STX ETB
       LDA SCAN1;  ETR =16B6;  SKE =12B6;  SKIP;  BRU ETPROC
       LDA -2,2;  SKE LITOP;  BRU ETPROC
       LDA -1,2;  SKA =2B7;  SKIP;  BRU ETPROC;  CHOP;  MRG =LABFIX
       BRM SWC;  LDX ETB;  LDA -1,2;  ETR =@37777B;  MRG LOCCNT
       STA -1,2;  LDA LOCCNT;  LDB =REL14;  BRM BPF;  BRU ETPROC

* SET :LC: TO LOCCNT:
SETLC  LDA =46B;  STA HASH;  LDA =':LC:';  CLB;  STP* WD1;  STB EXF
       LDA LOCCNT;  LDB =1;  STP VALUE;  LDA =-2;  STA EXPRW;  BRM ASGN

* OUTPUT UNDEFINED SYMBOL TABLE (EXTERNAL USAGE TABLE):
       CLA; STA UCNT; STA OUCNT; LDA =EXTUSE;  BRM MWC
       LDA =SYMIR;  LDB =USYM
       BRM TSCAN
*OUTPUT POLISH FOR UNDEFINED EXPRESSIONS REMAINING IN ETAB
       LDA =IBSSP;  STA ETB
ETLOOP CLA;  STA PBYW;  LDA =3;  STA PBYC
       LDA ETB; CAX;  SKE ETP;  SKIP;  BRU OPOUT
       LDA 1,2;  ETR =16B6;  SKE =12B6;  BRU ETLS
       LDA 1,2;  CHOP;  ADM ETB;   BRU ETLOOP
ETLS   ETSCAN;  EAX 1,2;  STX ETB;  LDA -1,2;  SKA =2B7;  SKIP;  BRU ETLOOP
       CHOP;  BRM FF;  LDX ETB;  EAX* 0,2
ETLOO1 STX ETB;  CLA;  LDB 0,2;  LSH 5;  ETR =7B; CAX;  BRU* ETTAB,2
ETTAB  DATA    POLOP,POLDV,POLUS,POLPDV,POLEND

*OPERATOR
POLOP  LDX ETB;  LDA 0,2;  ETR =760B;  LRSH 4;  CAX;  EXU POLOPT,2
POLO   BRM  PBY
POLN   LDX ETB;  EAX 1,2;  BRU ETLOO1
POLOPT LDA     =13B            (↑)
       LDA     =6B             (*)
       LDA     =7B             (/)
       LDA     =4              (+,BINARY)
       LDA     =5              (-,BINARY)
       LDA     =3              (+,UNARY)
       LDA     =2              (-,UNARY)
       BRU     POLOR           (RELATIONAL OPS)
       LDA     =1              (@)
       LDA     =10B            (&)
       LDA     =11B            (!)
       LDA     =12B            (%)
       BRU     POLN            (LITERAL OPERATOR, IGNORED)


POLOR  LDX ETB;  LDA 0,2;  ETR =7000B;  LRSH 9;  CAX
       LDA POLSOP,2;  BRU POLO
POLSOP DATA    21B             (<)
       DATA    25B             (<=)
       DATA    24B             (=)
       DATA    23B             (#)
       DATA    22B             (>)
       DATA    26B             (>=)

*DEFINED VALUE WORD (3 WORDS )
POLDV  LDX ETB;  LDA 2,2;  LDB 1,2;  BRM PV;  LDX ETB;  EAX 3,2
       BRU ETLOO1

*UNDEFINED SYMBOL (CONTNS SYMBOL INDEX IN USE TABLE, MADE BY USYM)
POLUS  LDX ETB;  LDA 0,2;  CHOP;  BRM PS;  BRU POLN

*POINTER TO DEFINED VLUE
POLPDV LDX ETB;  LDX 0,2;  LDA 0,2;  LSH 5;  RSH 19;  CAB
       LDA 1,2;  BRM PV;  BRU POLN

*END OF EXPRESSION
POLEND CLA;  BRM PBY;  BRM PBY;  BRM PBY;  BRM PBY;  MIN ETB
       BRU ETLOOP

* OUTPUT OPCODE DEFINITIONS:
OPOUT  LDA =-1;  BRM FF
       SKN DSBOOL;  BRU EXTOUT;  LDA =OPDF;  BRM MWC;  LDA =OPCIR
       LDB =OPCOD;  BRM TSCAN;  LDA =-1;  BRM FF

* OUTPUT EXTERNAL SYMBOL DEFINITIONS:
EXTOUT LDA =EXTDEF;  BRM MWC;  LDA =SYMIR;  LDB =ESYM;  BRM TSCAN
       LDA =-1;  BRM FF

* OUTPUT LOCAL SYMBOL DEFINITIONS:
       SKN DSBOOL;  BRU FINIS;  LDA =SYMTF;  BRM MWC;  LDA =SYMIR
       LDB =LSYM;  BRM TSCAN;  LDA =-1;  BRM FF

* OUTPUT END-OF-PROGRAM CONTROL, LIST VARIOUS INFO, AND TERMINATE:
FINIS  LDA LISTFN; SKG =1; BRU FIN0; LDA =137B; CIO LISTFN
FIN0   LDA =ENDPR;  BRM SWC;  LDA =27657537B;  BRM FF;  LDA =27657537B
       BRM FF;  BRM OUTB;  BRS 88;  SUB TIME
       DVI =60;  STA TIME;  CBA;  CNA;  SKG =-30;  MIN TIME
       BRS 17;  TYCO =155B;  TYCO =152B;  TYCO =152B
       TYNOD TIME;  TYMES TIMS
       TYNOD ERRCNT;  TYMES ERRS;  TYNOB LOCCNT;  TYCO =' '
       TYCO ='(';  TYNOD LOCCNT;  TYCO =')';  TYMES WRDS
       LDA SSP;  SUB UMTP;  STA R1;  LDA ETP;  SUB USSP;  STA R3
       TYMES PSC;  TYNOD PP1;  TYMES COC;  TYNOD PP3;  TYMES CLC
       TYNOD PP4;  TYMES CMC;  TYNOD R1;  TYMES CUC;  TYNOD R3
       TYCO =')';  TYCO =155B;  TYCO =152B;  TYCO =152B
FIN1   SKN XUOPSB; BRU FIN2; CLA; STA TCNT
       LDA =OPCIR; LDB =LUOPS; BRM TSCAN

FIN2   LDA UCNT;  SKG =0; BRU NULIST
       SKN XEXTB;  BRU NULIST
       TYMES UDEFS;  CLA;  STA TCNT;  BRU ULIST1
NULIST LDA =-1;  STA XEXTB; STA XUOPSB;  STA UCNT;  BRS 10
ULIST1 SKR UCNT;  BRU ULIST2;  LDA =SYMIR;  LDB =ERASE;  BRM TSCAN
       TYCO =155B;  TYCO =152B;  TYCO =152B;  BRS 10
ULIST2 LDA =MAXSYM;  LDB =MAXSYM+1;  STP ASGN1;  LDA =SYMIR;  LDB =FLEAST
       BRM TSCAN
       LDA =1;  ADM* ASGN2;  LDX ASGN1
       LDA 2,2;  SKA =14B6;  BRU ULIST1;  EAX 3,2;  BRM LSYMB
       MIN TCNT;  LDA TCNT;  SKE =9;  BRU ULIST1
       TYCO =155B;  TYCO =152B;  CLA;  STA TCNT
       BRU ULIST1

MAXSYM DATA '[   '

* TABLE SCAN:  A SHOULD CONTAIN AN IRT BASE AND B SHOULD CONTAIN THE
* ADDRESS OF A ROUTINE.  BEFORE CALLING TSCAN, TLENG SHOULD BE SET 
* TO ONE LESS THAN THE NUMBER OF ENTRIES IN THE IRT.  THE SYMBOLS (OR
* OPCODES OR LITERALS) IN THE TABLE INDICATED BY THE IRT ARE ONE BY ONE
* GIVEN TO THE ROUTINE INDICATED BY B (THIS ROUTINE IS ENTERED BY A BRU).
* WHEN THE ROUTINE IS ENTERED, X CONTAINS THE ADDRESS OF WORD 2 OF THE
* ENTRY, AND A CONTAINS WORD 3 OF THE ENTRY.  SCAN1 CONTAINS WORD 2 
* AND SCAN2 CONTAINS WORD 4.  ROUTINES SHOULD EXIT BY BRU RTS.

ETSCAN STP IRTP;  LDB TLENG;  STB IRTC;  CAX;  BRU TSCAN2
$RTS   LDA IRTS;  CHOP
TSCAN1 SKE =0;  BRU TSCAN3;  SKR IRTC;  SKIP;  BRR TSCAN;  LDX IRTP
       EAX 2,2;  STX IRTP;  LDA 0,2;  SKE IRTP;  SKIP;  BRU TSCAN1+2
TSCAN2 LDB 1,2;  LDX 0,2;  LDA 1,2;  ETR =7774B4;  STA 1,2;  CBA
       BRU TSCAN1
TSCAN3 CHOP;  CAX;  LDA 0,2;  LDB 2,2;  STP SCAN1;  LDA 1,2;  STA IRTS
       BRU* CODE


* THE FOLLOWING ROUTINES ARE ENTERED BY BRU'S FROM TSCAN:

LITERL MIN PP4;  LDA 2,2;  SKA =2B7;  SKIP;  BRU RTS;  CHOP;  MRG =LABFIX
       LDB -1,2;  STB SCAN2;  BRM SWC;  LDP SCAN1;  LDX =REL24
       BRM OVAL;  BRU RTS

SINGL  SKA =4B7;  BRU RTS
       CLB;  STB SCAN1 (NOTE: SCAN1 IS USED AS A FLAG & TEMP IN THISCODE)
       EAX 2,2;  BRU SINGC
SINGR  SKA =4B7;  SKIP;  BRU SINGE
       CAX;  LDA 1,2;  SKE LITOP;  BRU SINGC
       LDA 2,2;  ETR =16B6;  SKE =1B7;  BRU SINGC
       LDA 3,2;  SKE =2B7+37775B;  BRU SINGC
       LDA 2,2;  SKA =2B7;  SKIP;  BRU SINGC;  STX SCAN1

       ETR =1774B4;  XMA  2,2;  CHOP;  MRG =LABFIX;  BRM SWC
       LDX SCAN1;  LDA =-1;  STA SCAN1

SINGC  LDA 0,2;  BRU SINGR
SINGE  SKN SCAN1;  BRU RTS;  SKA =2B7;  SKIP;  LDA LOCCNT
       STA SCAN1;  LDA LOCCNT;  MRG =24B6;  STA 0,2
       LDA SCAN1;  CHOP;  LDB =REL14;  BRM BPF;  BRU RTS

USYM   MIN PP1;  SKA =4B7;  BRU RTS
       SKA =14B6;  BRU *+2;  BRU *+3;  SKN 2,2;  BRU USYM1
       LDA -1,2;  BRM CCD4;  BRM FF;  LDA SCAN1;  BRM CCD2;  BRM FF
       EAX 2,2
USYM2  LDA 0,2; CAB; ETR =16B6; ADD OUCNT
       STA 0,2; COPY BA,BX
       SKA =4B7;  BRU USYM2;  SKA =2B7;  BRU USYM3;  LDA =-1
USYM5  BRM FF; MIN OUCNT
USYM1  MIN UCNT;  BRU RTS
USYM3  CHOP;  BRU USYM5

OPCOD  SKA =2B7;  SKIP;  BRU RTS;  ETR =@2B7
       STA 1,2;  MIN PP3;  ETR =2B5
       RSH 12;  MRG =40B;  ADM SCAN1
       LDA -1,2;  BRM CCD4;  BRM FF;  LDA SCAN1;  BRM CCD2;  BRM FF
       LDA SCAN2;  BRM FF;  BRU RTS

ESYM   SKN 1,2;  BRU RTS;  SKA =2B6;  BRU LSYM1;  BRU RTS

LSYM   SKN 1,2;  BRU RTS;  SKA =2B6;  BRU RTS
LSYM1  SKA =14B6;  BRU RTS;  MRG =4B6;  STA 1,2;  CLB;  STB SCAN3;  LSH 5
       RSH 20;  SKE =0;  BRU SPEC;  LSH 12;  ETR =4B3;  ADM SCAN1
       BRU LSYM2
SPEC   LSH 1;  STA SCAN3;  LDA =40B;  ADM SCAN1
LSYM2  LDA -1,2;  BRM CCD4;  BRM FF;  LDA SCAN1;  BRM CCD2; BRM FF
       LDA SCAN3;  SKE =0;  BRM FF;  LDA SCAN2;  BRM FF;  BRU RTS

FLEAST SKANN;  BRU RTS;  LDP -1,2;  SKB =1;  BRU RTS
       EOR* ASGN1;  SKA =4B7;  BRU FLN1
       LDA -1,2;  SKG* ASGN1;  BRU *+2;  BRU RTS
       SKE* ASGN1;  BRU XCHANG;  CBA
       EOR* ASGN2;  SKA =4B7;  BRU FLN2
       LDA 0,2;  SKG* ASGN2;  BRU XCHANG;  BRU RTS
FLN1   SKN* ASGN1;  BRU RTS;  BRU XCHANG
FLN2   SKN* ASGN2;  BRU RTS;  BRU XCHANG
XCHANG CXA;  CHOP;  CAB;  SUB =1;  STP ASGN1;  BRU RTS

ERASE  SKANN;  BRU RTS;  LDA 0,2;  ETR =@1;  STA 0,2;  BRU RTS

LUOPS  SKA =1B7; SKIP; BRU RTS    (1B7 INDICATES UNDEF OPCODE)
       SKN XUOPSB; BRU LUOP1  (CHECK TO SEE IF TITLE HAS BEEN PRINTED)
       TYMES UDOPS; CLA; STA XUOPSB  (TYPE TITLE AND RESET BOOL)
LUOP1  EAX 2,2; BRM LSYMB
       MIN TCNT; LDA TCNT; SKE =9; BRU RTS
       TYCO =155B; TYCO =152B; CLA; STA TCNT; BRU RTS





* EQU:  THE SYMBOL IN THE LABEL FIELD IS GIVEN THE VALUE OF THE EXPRES-
* SION IN THE OPERAND FIELD.

EQU    STA EXPRW;  SKN LBF;  BRU EQUE;  BRM ASGN
       LDA ASGN1;  STA VALCEL;  LDB =-1;  STB XVALI;  BRU NOMO
EQUE   WEM EMML;  BRU OPDRS

* ASSIGN:  THE SYMBOL IN *WD1 AND *WD2 IS DEFINED WITH THE VALUE OF THE 
* EXPRESSION ABOUT TO BE READ FROM THE INPUT, OR WITH THE VALUE IN
* (VALUE,RFACT).  HASH SHOULD BE SET UPON ENTRY.  ACTION DEPENDS ON EXPRW:
*      -2      VALUE IS IN (VALUE,RFACT)
*      -1      GET VALUE FROM EXPRESSION ABOUT TO BE READ FROM INPUT
*       0      THERE IS NO VALUE (TERMINATOR HAS ALREADY BEEN HIT)
* IF THE SYMBOL IS TO BE DEFINED AS EXTERNAL THEN EXF SHOULD BE -1,
* OTHERWISE 0.  UPON EXIT, ASGN1 CONTAINS THE VALUE OF THE EXPRESSION,
* RFACTO CONTAINS THE RFACTOR, AND ASGN2 CONTAINS THE ADDRESS OF THE
* VALUE WORD OF THE SYMBOL IN THE SYMBOL TABLE.

EASGN  CLAB; STA ASGN1
       STP* WD3;  LDA =SYMIR;  BRM LOOK;  BRM ADDTO;  LDA EXF
       ETR =2B6;  STA XTRA;  CLAB;  STP EXF;  LDA =4;  STA LAST
       SKN EXPRW;  BRR ASGN;  LDP VALUE;  MIN EXPRW;  SKN EXPRW;  BRM DF
       SKR EXPRW;  NOP;  STA ASGN1;  STX ASGN2 (X SAFE FROM BRM ADDTO)
       STB RFACTO;  XMA 0,2;  STA VAL;  LDA -1,2;  STA TABLNK;  ABC
       SKB =4B7;  SKB =2B7; LDA =12B6
       MRG =37777B;  ETR TABLNK;  MRG XTRA;  MRG =6B7
       STA -1,2;  LDA RFACTO;  SKG =-16;  SKIP 2;  SKG =15;  SKIP 2
       WEM EMRH;  CLA;  STA RFACTO;  CLB;  LSH 14;  ETR =174B4;  ADM -1,2
       SKN TABLNK;  BRU HARDER;  LDA TABLNK;  SKA =2B7;  BRR ASGN
       LDX ASGN2; LDP -3,2;  BRM WESYS;  WEM EMRD;  BRR ASGN
HARDER BRM FOLEC;  LDA VAL;  SKA =2B7;  SKIP;  BRR ASGN;  CHOP;  STA VAL
       LDB ASGN1;  LDA RFACTO;  LDX =REL24;  BRM OVAL
       LDA =-1;  ADM LOCCNT;  ADM RLOCC
       LDA =FIX24;  MRG VAL;  BRM SWC;  BRR ASGN




* EXTERNAL:

EXT    CLB;  STB EXF;  SKN LBF;  BRU IDENT1;  STB LBF;  SKANN;  BRU EXTO
       LDA =SYMIR;  BRM LOOK;  BRU EXTU
EXTM   LDA -1,2;  MRG =2B6;  STA -1,2;  BRU OPDRS
EXTU   BRM ADDTO;  CLAB;  STP -1,2;  BRU EXTM
EXTO   LDB =-1; STB LBF; STB EXF; BRU EQU



* FRGT:

FRGT   STA EXPRW;  BRM LABM;  SKN EXPRW;  BRU NEWL
FRGTN  BRM LOOKY;  BRU FRGTO;  LDA =SYMIR;  BRM LOOK;  BRU FRGTU
FRGTM  LDA -1,2;  MRG =1B7;  STA -1,2
FRGTO  SKN LAST;  BRU FRGTN;  BRU NEWL
FRGTU  BRM ADDTO;  CLAB;  STP -1,2;  BRU FRGTM


* FRGTOP: DON'T OUTPUT SELECTED OPCODES TO DDT

FRGTOP STA EXPRW;  BRM LABM;  SKN EXPRW;  BRU NEWL
FOPN   BRM LOOKY;  BRU FOPO;  LDA =OPCIR;  BRM LOOK;  BRU FOPU
FOPM   LDA -1,2;  ETR =@2B7;  STA -1,2
FOPO   SKN LAST;  BRU FOPN;  BRU NEWL
FOPU   LDP* WD1;  BRM WESYS;  WEM EMOP;  BRU OPDRS

* IDENT:

IDENT  SKN LBF;  BRU IDENT1;  CLA;  STA LBF
IDENT2 LDA =IDENTF;  BRM MWC
       LDA* WD1;  BRM CCD4;  BRM FF;  LDA* WD2;  BRM CCD2;  BRM FF
       LDA LBF;  BRM FF
       LDA =-1;  BRM FF;  SKN LBF;  SKIP;  BRU OPDRS
       LDX WD4;  BRM LSYMB
       TYMES IDS;  BRU OPDRS
IDENT1 WEM EMML;  BRU OPDRS


*LIBEXT:  "SYMB LIBEXT"  CAUSES "SYMB" TO BE OUTPUT AS A 
*LIBRARY SYMBOL.  USES IDENT CODE WITH LBF =-1

LIBEXT SKN LBF;  BRU IDENT1;  BRU IDENT2

*LIST: IF CALLED WITHOUT OPERANDS, CAUSES LISTING TO BEGIN
*IMMEDIATELY IN THE CURRENT FORMAT.  OPERANDS FROM "LISTT"
*ARE RECOGNIZED AND EITHER SET THE CORRESPONDING BOOLEAN OR
*TAKE SOME SPECIAL ACTION

LIST   STA EXPRW;  BRM LABM;  LDA =-1; SKN EXPRW;  BRU LNLGO
LNL    STA EXPRW
LNLL   BRM LOOKY;  BRU LNLO;  LDX =LISTT;  BRM SHTLK;  BRU LNLU
       LDA EXPRW;  EXU 2,2
LNLO   SKN LAST;  BRU LNL;  BRU OPDRS
LNLU   WEM EMUE;  BRU LNLO
LNLGO  STA XGOB;  BRU OPDRS
LNLALL STA EXPRW;  LDA =LA-LAE;  ADD =2;  CAX;  LDA EXPRW
LNLA   EXU LAE,2;  BRX *+1;  BRX *+1;  BRX LNLA;  BRU LNLO

*LISTING TABLE (LA THROUGH LAE ARE THE BOOLEANS THAT SHOULD BE
*SET,OR UNSET, BY THE "ALL" OPTION)

LTE    MACRO D;1M NARG;2M NCHR D(1);  TEXT 'D(1)'
       IF 2M<5;  DATA 0;  ENDF;  IF 1M=1;  STA X.&D(1)B
       ELSE;  D(2); ENDF; ENDM

LISTT  LTE ALL,(BRU LNLALL)
       LTE GO
LA     LTE LCT
       LTE SLCT
       LTE VAL
       LTE SRC
       LTE COM
       LTE CALL
       LTE DEF
       LTE EXP
       LTE EXT
       LTE UOPS
       LTE SKIF
LAE    DATA 0


*NOLIST:  SAME AS LIST EXCEPT THAT THE CORRESPONDING BOOLEANS ARE
*RESET

NOLIST STA EXPRW;  BRM LABM;  CLA;  SKN EXPRW;  BRU LNLGO;  BRU LNL


* OCT:  SET NUMBER RADIX TO 8.

OCT    LDA =8
OCT1   STA RADIX;  BRM LABM;  BRU NEWL


* OPCODE DEFINITION:

OPD    CLB
OPD1   STP EXPRW;  SKN LBF;  BRU IDENT1;  SKN EXF;  SKIP;  WEM EMEO
       LDA =OPCIR;  BRM LOOK;  BRM ADDTO
       CLA;  STA 0,2;  LDA -1,2;  CHOP;  SKN INITB
       MRG =2B7;  STA -1,2;  SKN EXPRW;  BRU OPDRS;  BRM DFABS
       STA 0,2;  SKN XTRA;  BRU OPD2;  STX XTRA;  ETR =77B5
       MRG =POPDF;  BRM SWC;  LDX XTRA
OPD2   BRM CHKV;  LSH 16;  ADM -1,2;  BRM CHKV;  SKA =2B;  BRU CHKV1
       LSH 23;  ADM -1,2;  SKN INITB;  BRU OPDFI;  BRM CHKV;  COPY XB,AX
       BRU *+1,2;  BRU OPDFI;  SKIP;  WEM EMPM   NO PREDEFINED MACROS
       CBX;  LDA 0,2;  SKG =-1;  SKIP 2;  SKG NUMD;  SKIP 4
       WEM EMDH;  CLA;  STA 0,2;  BRU OPDFI;  CAX
       LDA DIRADR,2;  CBX;  STA 0,2;  LDA =4B4;  ADM -1,2
OPDFI  LDX LAST;  BRU *-2,2;  BRU OPDSK;  BRU OPDRS
$OPDSE WEM EMBT;  SKN EXPRW;  SKIP
OPDSK  BRM IGNOR

$OPDRS CLAB;  STP EXF;  BRU NEWL  EXIT FOR OTHER ROUTINES TOO!!


* CHECK VALUE:  ACTION DEPENDS ON CHARACTER TERMINATING THE LAST CALL
* OF EXPR:  COMMA: GET VALUE OF NEXT EXPRESSION.  OTHER: JUMP TO APPRO-
* PRIATE SPOT IN OPD ROUTINE.  IN THE FIRST CASE, A CONTAINS EXPR VALUE
* (IN THE RANGE [0,2]), B CONTAINS 0, AND X IS SAFE.

ECHKV  CXB;  LDX LAST;  BRU *-2,2;  BRU OPDSK;  BRU OPDRS;  CBX
       BRM DFABS;  SKG =-1;  SKIP 2;  SKG =2;  BRR CHKV
CHKV1  WEM EMTH;  CLA;  BRR CHKV


* POP DEFINITION:

POPD   LDB =-1; STA EXPRW; SKN EXF; BRU OPD1  (NOT MARKED EXT, TO OPD1)
       SKN LBF; BRU IDENT1; BRM EUO   (DO EUO TO ADD OP IF NEC.)
       MRG =POPDF; MRG =4B4; BRM SWC   (PUT OUT SPEC. POPD W/ B9 SET)
       SKN EXPRW; BRU OPDRS; BRU OPDSK

*PLUG (SHOULD NEVER BE EXECUTED, USED TO PLUG HOLES IN DIRADR)
PLUG   TYMES IBDS;  BRU NEWL



* RELORG:

RELORG STA EXPRW;  BRM LABM;  SKN EXPRW;  BRU NEWL
       BRM DFABS;  SKANN;  BRU RELE;  STA RLOCC
       CLA;  STA RFBOOL;  BRU NOMO
RELE   WEM EMNR;  BRU NOMO


*REM:

REM    STA EXPRW;  BRM LABM;  SKN EXPRW;  BRU REMO;  LDA NXTCHR
       SKE =0;  SKN GOTIT
REML   BRM GNLC
       SKE =100B; SKIP;  BRU REMO
       SKE =';';  SKIP;  BRU REMO
       BRM LCHR;  BRU REML
REMO   LDA =155B;  BRM LCHR;  BRU NEWL

* RETREL:

RETREL BRM LABM;  LDA =-1;  STA RFBOOL;  BRU NEWL



* TEXT:  SAME AS ASC, BUT 4 CHARACTERS PER WORD:

TEXT   LDB =6;  BRU ASCW





* EXTERNAL DEFINITIONS:

       XTRNL   ASC,BES,BSS,COPY,DATA,DEC,DELSYM,EASGN,ECHKV
       XTRNL   EFILTR,ELABM,END
       XTRNL   EQU,ETSCAN
       XTRNL   EXT,FRGT,FRGTOP,IDENT,LIBEXT,LIST
       XTRNL   NOGOOD,NOLIST
       XTRNL   OCT,OPD,POPD,PLUG
       XTRNL   RELORG,REM,RETREL,TEXT



       NOLIST  EXT             DO NOT LIST UNDEFS
       END                     LAST LINE OF DIRECT.

MAC    IDENT                   FIRST LINE OF MAC.  (24 JUNE 1967)

       BSS     :LC:-:ZERO:     SO PACKAGE WILL LOAD AT 0

* CODED BY ROGER HOUSE, PROJECT ARPA, UNIV. OF CALIF., BERKELEY.


* ROUTINES FOR MACRO DIRECTIVES AND MACRO CALLS ARRANGED IN FOLLOWING ORDER:
*              IF, ELSF, ELSE, ENDF
*              MACRO, ENDM
*              MACALL, DUM, GEN, DIG, EMAC
*              NARG, NCHR
*              RPT, CRPT, ENDR, ERPT
*              FREEZE



* PACKIT:  THIS IS THE BASIC ROUTINE FOR PACKING STRINGS.  IT IS USED
* BY IF, MACRO, AND RPT.  MMODE KEEPS TRACK OF WHICH FIELD OF A LINE IS
* BEING PROCESSED:
*                      -2     FIRST CHARACTER
*                      -1     IN LABEL FIELD
*                       0     AFTER LABEL FIELD BLANK
*                       1     IN OR AFTER OPCODE FIELD

IFPCK  CLA;  STA MLEV;  LDA SSP;  STA BKP;  BRU MLINES
PACKIT CLA;  STA MLEV;  LDA SSP;  STA BKP
MLINE  LDA =-1;  BRM EOL
MLINES LDA =-2;  STA MMODE;  LDA =1;  STA AFTAN;  CLB;  STP LCP
MSKIP  BRM GNLC;  SKE ='*';  BRU CTRL1;  BRM IGNOR;  BRU MSKIP
PACKM  BRM MODCH
PACK1  LDA NXTCHR
PACK2  BRM OUTC
CTRL   BRM GNLC
CTRL1  STA NXTCHR
DSPTCH COPY AX,B;  LDX DTAB,2;  STX SAVEAN;  BRU 0,2
* NOTE THAT A CONTAINS CHARACTER DISPATCHED ON, B IS ZERO, AND X CONTAINS
* WORD FROM DISPATCH TABLE INDEXED BY CHAR IN A.


* MODE CHANGE:  IF NOT INSIDE A STRING THEN CHANGE MODE.
EMODCH SKN SQZ135;  BRR MODCH;  LDA =-1;  SKN MMODE;  CNA;  STA MMODE
       BRR MODCH

* OUT CHARACTER:  CHARACTER IN A IS PACKED AND A COUPLE OF FLAGS ARE
* SET.
EOUTC  STA LCP;  BRM PACK;  LDA SAVEAN;  STA AFTAN;  BRR OUTC

* SET SQZ135:  BRAKB IS SET TO THE CONTENTS OF A, AND SQZ135 IS CHANGED TO
* CORRESPOND TO THE NEW VALUE OF BRAKB.
ESETSQ STA BRAKB;  SKG =0;  LDA =-1;  STA SQZ135;  BRR SETSQ


* BELOW IS INITIAL FORM OF DTAB.  IT IS MOVED TO ALTERABLE MEMORY
* WHEN NARP IS INITIALIZED.

       D       MBLK,6
       P       1                 !
       D       DQUOTE,1          "
       P       4               # - &
       D       SQUOTE,1          '
       D       MLPAR,2           (
       D       MRPAR,3           )
       P       2               * - +
       D       PACKM,4           ,
       P       1                 -
       D       MDOT              .
       P       1                 /
       P       11,0            0 - :
       D       MSEM,7            ;
       P       5               < - @
       P       26,0            A - Z
       P       5               [ - LEFT-ARROW
       D       MCR,8           <CR>
       D       M135B,5         <135B>
       D       MSPEC           <DIG>
       D       MSPEC           <DUM>
       D       MSPEC           <GEN>

$ANWRD D       PACKM,0,0       STUCK IN DTAB TO RESTORE IT
$SACT  D       SPECL,0,0       STUCK IN DTAB AS NEEDED
$DGACT D       DG,0,0          STUCK IN DTAB FOR DUMMY OR GENERATED SYMB



* ACTIONS DISPATCHED TO BY DTAB.

MBLK   SKN SQZ135;  BRU PACK2;  LDA MMODE;  SKE =1;  STB MMODE;  LDA LCP
       SKE =0;  BRU PACK1;  BRU CTRL
M135B  LDA =135B;  BRM PACK;  LDA SQZ135;  BRU PACK2
SQUOTE BRM MODCH;  LDA BRAKB;  SKA =1B7;  BRU PACK1;  EOR =2B7;  BRM SETSQ
       BRU PACK1
DQUOTE BRM MODCH;  LDA BRAKB;  SKA =2B7;  BRU PACK1;  EOR =1B7;  BRM SETSQ
       BRU PACK1
MLPAR  BRM MODCH;  LDA BRAKB;  ADD =1;  SKG =2↑21-1;  BRM SETSQ;  BRM GNLC
       SKE ='$';  BRU MDOT1;  LDA =DIGS;  BRU PACK2
MRPAR  BRM MODCH;  LDA BRAKB;  SKA =3B7;  BRU PACK1;  SUB =1;  SKE =-1
       BRM SETSQ;  BRU PACK1
MDOT   BRM GNLC;  SKE ='&';  BRU MDOT1;  STA AFTAN;  LDA MLEV;  SKG =0
       BRU CTRL;  LDA AFTAN
MDOT1  XMA NXTCHR;  BRM OUTC;  BRM MODCH;  LDA NXTCHR;  BRU DSPTCH
MSEM   SKN SQZ135;  BRU PACK2;  BRU MCR1
MCR    LDA =-1;  STA SQZ135;  LDA =155B
MCR1   BRM PACK;  BRU MLINE
MSPEC  ADD =76B;  STA NXTCHR;  BRU PACKM

SPECL  LDA MMODE;  SKE =0;  BRU PACKM
OPLOOK LDA =-1;  STA GOTIT;  CLA;  STA CLEAN;  BRM GNE;  TRAP;  BRU OTHER
       LDX SOPTAB;  BRM SHTLK;  BRU OTHER;  LDX 2,2;  BRU 0,2
* ACTIONS THAT DON'T GO TO OTHER MUST DO A REPAIR 2!!
OTHER  LDA =-1
OTHER1 STA AFTAN;  STA LCP;  MIN CHP
OTHER2 LDA* CHP;  BRM PACK;  MIN CHP;  LDA CHP;  SKE SCPNT
       BRU OTHER2;  REPAIR 3;  BRM MODCH;  LDA NXTCHR;  BRU DSPTCH



* FOLLOWING ARE SOME ROUTINES FOR STORING STUFF IN STRING STORAGE:



* WORD STORE:  THE CONTENTS OF A IS STORED IN THE NEXT WORD OF SS AND
* SSP IS INCREMENTED ACCORDINGLY.  ALL REGISTERS ARE SAFE.

EWSTOR MIN SSP;  STA* SSP;  SKR FREE;  BRR WSTOR;  BRM GARBC;  BRR WSTOR


* BOTTOM STORE:  THIS IS THE SAME AS WSTOR BUT WORDS ARE PLACED IN THE
* BOTTOM (HIGHER ORDER ADDRESSES) OF SS.

EBSTOR SKR BSSP;  STA* BSSP;  SKR FREE;  BRR BSTOR;  BRM GARBC;  BRR BSTOR


* IN THE FOLLOWING THE WORD QUOTE REFERS TO EITHER A SINGLE QUOTE OR A 
* DOUBLE QUOTE.

* STASH STRING IN STRING STORAGE:  THIS ROUTINE READS CHARACTERS FROM
* THE CURRENT INPUT SOURCE AND STORES THEM IN SS.  THE FIRST CHARACTER
* IS ASSUMED TO BE IN NXTCHR.  THE ROUTINE TERMINATES WHEN A BLANK, COM-
* MA, SEMI-COLON, OR CARRIAGE RETURN IS ENCOUNTERED, AND LAST IS SET 
* AS AFTER A CALL OF EXPR.  THE TERMINATING CHARACTER IS NOT STORED IN
* SS.  IF THE FIRST CHARACTER IS '(' THEN IT AND ITS MATCHING ')'
* ARE NOT STORED IN SS, BUT ANY BLANKS, COMMAS, OR SEMI-COLONS BETWEEN
* THEM ARE STORED (I.E., DO NOT SERVE AS TERMINATORS).  LIKEWISE, BLANKS,
* COMMAS, AND SEMI-COLONS BETWEEN QUOTE MARKS DO NOT SERVE AS TERMINATORS
* AND ANY PARENTHESIS BETWEEN QUOTES HAVE NO EFFECT ON THE NESTING STRUC-
* TURE OF PARENTHESIS OUTSIDE THE QUOTES.  IT SHOULD BE NOTED THAT IF
* THE STRING TO BE STORED BEGINS WITH '(' IT IS NOT NECESSARY THAT THE
* MATCHING ')' BE THE LAST CHARACTER IN THE STRING.  CHRCNT CONTAINS
* THE NUMBER OF CHARACTERS STORED IN SS.  ALL 135B CHARACTERS ARE REPLACED
* BY THE PROPER NUMBER OF BLANKS.

ESSNSS CLB;  STB SQZ135;  STB CHRCNT;  LDX =-1;  LDA NXTCHR
       SKE ='(';  XXB;  STB PARCNT;  BRU GN+1,2
P      BRM PACK;  MIN CHRCNT
GN     BRM GNLC
       CAX;  LDA DTAB,2;  RSH 14;  ETR =17B;  XXA;  BRU *+1,2

       BRUG    P,QU,LP,RP,CO,MB,BK,SM,CRT

QU     STA LAST
QU1    BRM PACK;  MIN CHRCNT
QU2    BRM GNLC;  SKE LAST;  SKIP;  BRU P;  SKE =100B;  SKIP
       BRU CRT;  SKE =101B;  BRU QU1;  LDA SQZ135;  CNA;  AXC;  BRM PACK
       MIN CHRCNT;  BRX *-2;  BRU QU2
LP     SKN PARCNT;  MIN PARCNT;  BRU P
RP     SKN PARCNT;  SKR PARCNT;  BRU P;  BRU GN
CO     SKN PARCNT;  BRU P;  LDA =5;  BRU CRT1
MB     SKN PARCNT;  SKIP;  BRU BK1;  LDA SQZ135;  CNA;  AXC;  BRM PACK
       MIN CHRCNT;  BRX *-2;  BRU GN
BK     SKN PARCNT;  BRU P
BK1    LDA =3;  BRU CRT1
SM     SKN PARCNT;  BRU P
CRT    LDA =4
CRT1   STA LAST;  LDA =-1;  STA SQZ135;  BRR SSNSS





* FOLLOWING IS CODE FOR PROCESSING IF, ELSF, ELSE, AND ENDF:


IF     SKR IFCNT;  TRAP
IF1    STA EXPRW;  BRM LABM;  SKN EXPRW;  BRU NEWL;  LDA =-1;  STA UDBOOL
       BRM DFABS;  STB UDBOOL;  STA VALCEL;  LDB =-1;  STB XVALI
       SKG =0;  SKIP;  BRU NOMO;  UGLY1
       LDA =-1;  BRM EOL
       BRM IFSKP;  BRU IF1;  BRU ELSET;  BRU ENDF1

ELSET  CLA;  STA XOPSI;  BRU NEWL

ELSF   SKANN;  BRM IGNOR
ELSE   BRM LABM;  SKN IFCNT;  SKIP;  BRU ELSE1;  WEM EMOB;  BRU NOMO
ELSE1  BRM IFSKP;  BRU ELSF;  BRU ELSE1;  BRU ENDF1

ENDF   BRM LABM;  SKN IFCNT;  SKIP;  BRU ENDF1;  WEM EMOB;  BRU NEWL
ENDF1  MIN IFCNT;  BRU NEWL


* IF SKIP:  NO EXPLICIT INPUT, BUT THE INPUT STRING TO NARP IS ASSUMED
* TO BE POSITIONED AT THE BEGINNING OF A NEW LINE.  LINES OF INPUT ARE
* READ AND DISCARDED UNTIL A LINE WITH ONE OF THE FOLLOWING OPCODES IS
* ENCOUNTERED:  IF, ELSF, ELSE, OR ENDF.  EXIT OCCURS WHEN ELSF, ELSE, OR
* ENDF IS ENCOUNTERED AT THE TOP LEVEL (I. E., NOT INSIDE IF-ENDF BLOCKS
* ENCOUNTERED DURING THE SKIPPING).  SAMPLE CALLING SEQUENCE:
*              BRM   IFSKP
*              BRU   ELSF
*              BRU   ELSE
*              BRU   ENDF
* IN ALL CASES, THE CENTRL REGISTERS AND THE INPUT STRING ARE IN THE 
* SAME STATUS AS WHEN A BRANCH TO THE ELSF, ELSE, OR ENDF DIRECTIVES
* IS MADE BY CLOOP, WITH THE EXCEPTION THAT ANY LABEL PRECEDING THE 
* OPCODE IS NOT TAKEN NOTICE OF.

EIFSKP LDA SACT;  STA DTE;  STA DTI;  LDA =IFTAB;  STA SOPTAB
       LDA =PEXIT;  STA PACKE;  LDA =1;  STA EXPAND
       LDA =-1; STA XIFI;  BRU IFPCK

IFTAB  SHTAB   IF,IFX
       SHTAB   ELSF,ELSFX
       SHTAB   ELSE,ELSEX
       SHTAB   ENDF,ENDFX
       DATA    0

IFX    MIN MLEV;  BRU OTHER
ELSFX  LDA MLEV;  SKE =0;  BRU OTHER;  UGLY2  (GOES TO ENDFX2)
ELSEX  LDA MLEV;  SKE =0;  BRU OTHER;  BRU ENDFX1
ENDFX  SKR MLEV;  BRU OTHER;  MIN IFSKP
ENDFX1 MIN IFSKP;  UGLY1;  CLA
ENDFX2 LDB ANWRD;  STB DTE;  STB DTI;  LDB =CLB;  STB PACKE;  REPAIR 2
       LDB =-1;  STB EXPAND;  CLB;  STB XIFI;  BRR IFSKP



* FOLLOWING IS CODE FOR MACRO AND ENDM:

LMACRO LDB =-1; BRU MACROB
MACRO  CLB
MACROB STB MLM
       STA EXPRW;  LDA SACT;  STA DTE;  STA DTM;  STA DTL
       SKN EXF;  SKIP;  WEM EMEO;  SKN LBF;  BRU NOOPC
       LDA =1B5;   CLB;  STP* WD3;  BRM WSTOR;  LDA =OPCIR;  BRM LOOK
       BRM ADDTO
MACRO1 LDA -1,2;  CHOP;  MRG =1B5;  SKN MLM;  SKIP; MRG =14B4
       SKN EXPRW;  MRG =2B5;  LDB SSP
       STP -1,2;  CXA;  CHOP;  STA* SSP;  STA OPPNT;  CLA;  BRM WSTOR
       BRM WSTOR;  BRU PROCDG
NOOPC  WEM EMML;  LDA EXPRW;  SKANN;  BRM IGNOR;  LDA =PEXIT;  STA PACKE
       BRU NODUM

PROCDG SKN EXPRW;  BRU NODUM;  BRM LOOKY;  BRU DERR1;  SETUP DUMS
DERR1  LDA LAST;  SKANN;  BRU NODUM;  BRM LOOKY;  BRU DERR2;  SETUP GENS
DERR2  SKN LAST;  SKIP 2;  WEM EMBT;  BRU NODUM;  BRM DFABS;  SKG =0
       SKIP 2;  SKG =1023;  SKIP 2;  WEM EMGH
       LDA =1023;  COPY AX,N;  CHOP;  COPY AX,XA,B;  LSH 14;  COPY AB,XB
       STB* SSP;  UGLY1
NODUM  LDA =MACT;  STA SOPTAB;  CLA;  STA EXPAND
       LDA =-1;  STA XDEFI;  BRU PACKIT


* FOLLOWING JUMPED TO WHEN FIRST LETTER OF DUMMY OR GENERATED SYMBOL
* IS ENCOUNTERED:

DG     SKN AFTAN;  BRU OPLOOK;  BRU PACKM


* FOLLOWING ACTIONS JUMPED TO FROM LOOKUP IN MACT:

MACROX LDA MMODE;  SKE =0;  BRU OTHER;  MIN MLEV;  BRU OTHER
LMACRX EQU     MACROX
DUMX   LDB =DUMDUM;  LDX CHP;  EAX 1,2;  SKIP 2
GENX   LDB =GENRAT;  LDX SCPNT;  LDA NXTCHR;  SKE ='(';  BRU OTHER
       STB 0,2;  EAX 1,2;  STX SCPNT;  BRM GNLC;  STA NXTCHR;  LDA =1
       BRU OTHER1
ENDMX  LDA MMODE;  SKE =0;  BRU OTHER;  SKR MLEV;  BRU OTHER;  LDA =-1
       STA EXPAND;  CDTAB DUMS,ANWRD;  CDTAB GENS,ANWRD
       STA DTE;  STA DTM;  STA DTL
       LDA ='0   ';  CLB;  STP DUMS;  STP GENS;  LDA =CLB
       STA PACKE;  LDA =FIXP;  STA POS;  SKN LBF;  BRU ENDMX1
       LDA =ENDMAC;  BRM BKSP;  LDA SSP;  SUB* OPPNT;  ADD =1
       LDX* OPPNT;  STA 1,2
ENDMX1 CLAB;  STP EXF;  REPAIR 2;  UGLY1
ENDEF  LDA =-1;  BRM EOL;  CLA;  STA XDEFI;  BRU CLOOP



ENDM   BRM LABM;  WEM EMOB;  BRU NEWL




* FOLLOWING ROUTINE SETS UP THINGS FOR A MACRO CALL.  IN PARTICULAR ARGU-
* MENTS ARE STORED IN SS:

LMACAL LDB =-1; BRU MACALB
MACALL CLB
MACALB STB MLM
       STA EXPRW;  LDA* INSTR;  STA INSTR (=ADDR WORD 4 OF MACRO NAME IN MT)
       LDP EXF;  STP EXFE;  SKN LBF;  BRU NODEF;  LDP* WD1;  STP WD1E
       SKN MLM;  BRM DEFLB
NODEF  LDA OPRNDS;  SKE =ANOP;  BRU NOARG;  BRM BSTOR (A IRRELEVANT)
       LDX* INSTR;  LDA 2,2;  ETR =7774B4;  XMA 2,2;  CLB;  LCY 10
       STB* BSSP;  RSH 10;  ADD* BSSP;  CHOP;  ADD 2,2;  STA 2,2
       STA* BSSP;  BRM BSTOR (A IRRELEVANT);  LDA ARGACC;  BRM BSTOR
       CLA;  STA CHRCNT;  BRM BSTOR;  LDA BSSP;  MRG =2B7;  STA XTRA
       LDA SSP;  STA TSSP;  LDA ='(';  BRM PACK;  SKN LBFE
       BRU NOLAB;  SKN EXFE;  SKIP 3;  LDA ='$';  BRM PACK
       MIN CHRCNT;  UGLY3 WD1E;  UGLY3 WD2E
NOLAB  LDA =7;  STA LAST;  CLA;  STA NUMARG
LWORD  LDA =')';  BRM PACK;  LDA =',';  BRM PACK;  LDA CHRCNT
       ADD =3;  ADD* BSSP;  BRM BSTOR;  LDX LAST;  BRU *-2,2;  BRM IGNOR
       BRU PHASE2;  BRM GNLC;  STA NXTCHR;  SKN EXPRW;  BRU PHASE2
       LDA ='(';  BRM PACK;  BRM SSNSS;  MIN NUMARG;  BRU LWORD
PHASE2 LDA SSP;  SUB TSSP;  CNA;  CAX;  SKR BSSP;  LDA* SSP;  STA* BSSP
       SKR SSP;  BRX *-4;  LDA XTRA;  STA ARGACC;  LDX =2;  LDA NUMARG
       STA* ARGACC;  ADD =1;  CNA;  CAX;  LDA BSSP;  MUL =3;  LSH 23
       ADM* ARGACC;  BRX *-1;  ADM* ARGACC;  BRU SWTMAC
NOARG  CLA;  BRM BSTOR;  BRM BSTOR;  LDA ARGACC;  BRM BSTOR;  LDA BSSP
       SUB =1;  MRG =2B7;  STA ARGACC
SWTMAC CLAB;  STP EXF;  BRM STKI;  LDA =FIXU;  STA UP1;  LDA* INSTR
       ADD =2;  MRG =LDB;  STA INPNT;  LDA =UNPCK;  STA INPUT
       LDA =FIXP;  STA POS;  LDA =-1;  STA XCALLI;  BRM EOL
       MIN ELEV;  BRU CLOOP



* FOLLOWING ARE ROUTINES FOR PROCESSING SPECIAL CHARACTERS OCCURING INSIDE
* OF MACROS:

DUM    LDA EXPAND;  SKBE =-2,=0;  BRU STOW;  BRM PILE
       LDX =2;  LDB* ARGACC;  LDA =1;  STP FSTARG;  LDX =FSTARG
       BRM DSUP;  BRU MORARG;  BRU PRTARG;  BRM ARGBC;  GARG;  ADD =1
       STA DPNTE;  EAX -1,2;  CNA;  SUB =2;  ADD* ARGACC;  STA DUMLE
       BRU SWTARG
MORARG LDX =LSTARG;  BRM DSUP;  NOP;  WEM EMDD;  LDA FSTARG;  SKG LSTARG
       SKIP 3
NULSTG LDX INPUT;  BRM GRAB;  BRU 1,2;  BRM ARGBC;  GARG;  STA DPNTE
       LDA LSTARG;  ADD =1;  CNA;  CAX;  LDA* ARGACC;  SUB DPNTE;  SUB =1
       STA DUMLE;  BRU SWTARG
PRTARG BRM ARGBC;  LDA =1;  STA FSTCHR;  GARG;  CNA;  SUB =3;  EAX -1,2
       ADD* ARGACC;  STA LSTCHR;  STA LASTCE;  LDX =FSTCHR;  BRM DSUP
       BRU MORPRT;  WEM EMDD;  LDA FSTCHR;  STA LSTCHR;  BRU NCHRCK
MORPRT LDX =LSTCHR;  BRM DSUP;  NOP;  WEM EMDD;  LDA FSTCHR;  SKG LSTCHR
       SKIP;  BRU NULSTG
NCHRCK LDB =1;  LDA FSTCHR;  SKG =0;  STB FSTCHR;  LDA LSTCHR;  SKG =0
       STB LSTCHR;  LDA LASTCE;  SKG =0;  BRU NULSTG;  CAB;  ADD =1
       SKG FSTCHR;  STB FSTCHR;  SKG LSTCHR;  STB LSTCHR;  GARG;  ADD FSTCHR
       STA DPNTE;  LDA LSTCHR;  SUB FSTCHR;  ADD =1;  STA DUMLE
SWTARG BRM STKI;  LDP DPNTE;  STB DUML;  MUL =1;  DIV =3;  ADD =LDB
       STA DPNT;  CBA;  ADD =FIXD;  STA DU1;  BRM GRAB;  LDA* INPUT
       STA DUMI;  LDA =DUMI;  STA INPUT;  BRU DUMI1

* DUMMY SUPER:  AN EXPRESSION IS EVALUATED AND THE VALUE IS PLACED 
* IN THE WORD WHOSE ADDRESS IS GIVEN IN X.  IN CASE THERE IS NO EXPR
* BUT ONLY A TERMINATOR, THE WORD INDICATED BY X IS LEFT UNCHANGED.
* EXIT DEPENDS ON THE TERMINATOR (BLANKS, SEMI-COLONS, AND CARRIAGE RE-
* TURNS EXIT THE SAME AS RIGHT PARENTHESIS EXCEPT THEY CAUSE ERROR MES-
* SAGES):
*      BRM     DSUP
*      BRU     COMMA
*      BRU     DOLLAR
*      BRU     RHTPAR

EDSUP  STX DSUP1;  LDA =-1;  STA MTBOOL;  STA UDBOOL;  BRM EXPR
       BRU UDSUP;  BRU TDSUP;  BRU DDSUP
UDSUP  WEM EMDU;  CLAB
DDSUP  LDX DSUP1;  STA 0,2;  SKB =-1;  WEM EMDR
TDSUP  CLA;  STA MTBOOL;  STA UDBOOL;  LDX LAST;  BRU *-2,2
       BRUG DARLIG,DARLIG,BYE,DOLLAR,PARTH
DARLIG WEM EMDD
PARTH  MIN DSUP
DOLLAR MIN DSUP
BYE    BRR DSUP

* ARGUMENT BOUND CHECK:  FSTARG AND LSTARG ARE CHECKED TO SEE THAT
* THEY ARE REASONABLE ARGUMENTS.

EARGBC LDX =2;  LDA FSTARG;  SKBE =-1,←ARGACC;  BRU ARGBC2
ARGBC1 LDA LSTARG;  SKBE =-1,←ARGACC;  SKIP;  BRR ARGBC;  CLA;  STA LSTARG
ARGBC2 CLA;  STA FSTARG;  WEM EMSH;  BRU ARGBC1



GEN    LDA EXPAND;  SKBE =-2,=0;  BRU STOW;  LDA =4B7+'0';  BRU DIG1

DIG    SKN EXPAND;  BRU STOW;  LDA ='-'
DIG1   BRM PILE;  STA DGBOOL
       LDA =-1;  STA MTBOOL;  STA UDBOOL;  BRM DFABS;  STB MTBOOL
       STB UDBOOL;  STA DGVAL;  LDA LAST;  SKE =7;  WEM EMBT;  SKN DGBOOL
       BRU DIGACT;  LDA DGVAL;  SKG =0;  BRU OUTBND;  LDX =3
       LDA* ARGACC;  LRSH 14;  XMA DGVAL;  SKG DGVAL;  SKIP 2
OUTBND WEM EMSH;  CLAB;  STA DGVAL;  CLA;  LSH 14
       ADD DGVAL;  BRU CNVRT
DIGACT LDA DGVAL;  ETR =4B7;  ADM DGBOOL;  LDA DGVAL;  SKANN;  CNA
CNVRT  LDX =REME;  MUL =1;  DIV RADIX;  STB 0,2;  EAX -1,2;  SKE =0
       SKIP -4;  STX DGPNT;  LDA =20B;  EAX 1,2;  ADM 0,2;  SKN 1,2
       SKIP -2;  LDA DGBOOL;  CHOP;  STA* DGPNT;  SKN DGBOOL;  MIN DGPNT
       BRM STKI;  LDA DGBOOL;  BRM GRAB;  STA GNBOOL;  LDA* INPUT
       STA DIGI;  LDA =DIGI;  STA INPUT;  BRU DIGI1
* THE ABOVE USE OF REM, DGPNT, AND STKI WILL WORK ONLY BECAUSE STKI
* CAN NEVER BE CALLED WHEN INPUT = DIGI (I.E., WHEN INPUT IS COMING
* FROM A CONVERTED EXPRESSION).


STOW   CXA;  BRR UNPCK





EMAC   LDX =1;  LDA* ARGACC;  XMA ARGACC;  CHOP;  ADD =4
       STA BSSP;  CFREE;  LDA =FIXU;  STA UP1;  BRU ERPT6




* NARG AND NCHR:

NARG   STA EXPRW;  SKN LBF;  BRU OPDSE;  LDA ARGACC;  SKG =0;  BRU OPDSE
       COPY AX,B;  LDA 2,2
NARG1  STP VALUE;  LDA =-2;  STA EXPRW;  BRM ASGN
       LDA ASGN1;  STA VALCEL;  LDB =-1;  STB XVALI
       BRU NEWL (ASGN RESETS)

NCHR   STA EXPRW;  SKN LBF;  BRU OPDSE;  CLAB;  SKN EXPRW;  BRU NARG1;  LDA =PEXIT
       STA PACKE;  BRM SSNSS;  LDA =CLB;  STA PACKE;  LDX LAST;  BRU *-2,2
       BRM IGNOR;  SKIP 2;  WEM EMBT;  BRM IGNOR;  LDA CHRCNT
       CLB;  BRU NARG1





* FOLLOWING IS CODE FOR PROCESSING RPT, CRPT, AND ENDR:

RPT    STA EXPRW;  BRM DEFLB;  LDA =1;  STA LEXPR;  SKN EXPRW;  BRU SKPR2
       LDA SSP;  STA TSSP;  LDA NXTCHR;  SKE ='(';  BRU SIMRPT
       LDA =2B5;  BRM WSTOR;  BRM FOR;  BRU ALL3;  BRU ONLY1;  LDX SSP
       LDA =1;  XMA 0,2;  ETR =177777B;  ADM -2,2;  LDA NXTCHR
       BRU CVNXT1
ONLY1  LDA =2;  ADM FREE;  CNA;  ADM SSP;  BRU RPTE
ALL3   LDA =-1;  STA GOTIT;  STA MTBOOL;  BRM DFABS;  STB MTBOOL
       ETR =177777B;  LDX SSP;  ADM -2,2;  LDA LAST;  SKE =7;  BRU RPTE
       BRM GNLC;  STA NXTCHR;  BRU CVNXT1

SIMRPT BRM DFABS;  SKG =0;  BRU SKPR1;  CHOP;  ADD =1;  BRM WSTOR
       BRU CVINIT

CRPT   STA EXPRW;  BRM DEFLB;  SKN EXPRW;  BRU SKPR2;  LDA SSP;  STA TSSP
       LDA =2;  BRM PACK
       LDA =1;  STA EXPAND;  BRM SSNSS;  LDA =-1; STA EXPAND
       LDA =155B;  BRM PACK;  LDA =FIXP
       STA POS;  LDA SSP;  SUB TSSP;  STA LEXPR

CVINIT LDX LAST;  BRU *-2,2;  BRU ROLL1;  BRU ROLL2;  BRM GNLC;  STA NXTCHR
       SKE ='(';  BRU RPTE
CVNXT  BRM FOR;  BRU RPTE;  NOP
CVNXT1 SKE ='(';  SKIP;  BRU CVNXT;  UGLY1;  BRU ROLL2

* FOR:  THE SYNTACTICAL CONSTRUCTION <SYMB>=<EXPR>[,<EXPR>] IS PROCESSED.
* EXIT IS AS FOLLOWS:
*          NORMAL   :  TWO EXPR, LAST ONE ENDED WITH COMMA
*          SKIP     :  ONE EXPR, ENDED WITH RIGHT PAR
*          SKIP TWO :  TWO EXPR, LAST ONE ENDED WITH RIGHT PAR
* IN ALL CASES, BOTH NXTCHR AND A CONTAIN THE NEXT CHARACTER FOLLOWING
* THE TERMINATING COMMA OR RIGHT PAR.

EFOR   CLA;  STA GOTIT;  BRM GNE;  BRU RPTE;  BRU RPTE;  LDA NXTCHR
       SKE ='=';  BRU RPTE;  CLA;  STA GOTIT;  STA EXF;  LDA =-1
       STA EXPRW;  STA MTBOOL;  BRM ASGN;  LDB RFACTO
       SKB =-1;  WEM EMRA;  LDA ASGN2;  CHOP;  BRM WSTOR;  LDA =1
       BRM WSTOR;  LDX LAST;  BRU *-2,2;  BRUG RPTE,RPTE,FORCOM,RPTE,FORPT
FORCOM CLA;  STA GOTIT;  BRM DFABS;  STA* SSP;  LDA LAST;  SKE =7
       SKIP 2;  MIN FOR;  BRU FORPT;  SKE =5;  BRU RPTE;  SKIP
FORPT  MIN FOR;  CLA;  STA MTBOOL;  BRM GNLC;  STA NXTCHR;  BRR FOR


RPTE   CLA;  STA MTBOOL;  UGLY1;  SKN HLAST1;  WEM EMBT;  BRU ROLL2
SKPR1  LDA LAST;  SKE =4;  BRM IGNOR
SKPR2  CLA;  STA EXPRW;  LDA =PEXIT;  STA PACKE;  BRU ROLL3
ROLL1  BRM IGNOR
ROLL2  LDA =-1;  BRM WSTOR
ROLL3  LDA SSP;  SUB TSSP;  SUB =1;  STA STEXT;  LDA SACT;  STA DTC
       STA DTE;  STA DTR;  LDA =RPTAB;  STA SOPTAB;  LDA =1;  STA EXPAND
       LDA =-1;  STA XDEFI;  BRU PACKIT

RPTAB  SHTAB   RPT,RPTX
       SHTAB   CRPT,RPTX
       SHTAB   ENDR,ENDRX
       DATA    0

RPTX   MIN MLEV;  BRU OTHER
ENDRX  SKR MLEV;  BRU OTHER;  LDA =-1;  STA EXPAND;  REPAIR 2;  LDA ANWRD
       STA DTC;  STA DTE;  STA DTR;  LDA =CLB;  STA PACKE;  LDA =FIXP
       STA POS;  UGLY1;  SKN EXPRW;  BRU NEWL;  LDA =ENDRPT;  BRM BKSP
       BRM STKI;  LDA SSP
       SUB TSSP;  SUB LEXPR;  BRM WSTOR;  LDA SSP;  SUB TSSP;  BRM WSTOR
       ADD =1;  CNA;  CAX;  LDA BSSP;  SUB =3;  STA INPNT;  SKR BSSP
       LDA* SSP;  STA* BSSP;  SKR SSP;  BRX *-4;  LDA BSSP;  ADM STEXT
       LDA =UNPCK;  STA INPUT
       LDA =-1;  BRM EOL;  CLA;  STA XDEFI;  MIN ELEV;  BRU ERPT3


ENDR   BRM LABM;  WEM EMOB;  BRU NEWL




* FOLLOWING ACTION TAKEN WHEN SPECIAL ENDRPT CHARACTER HIT WHILE PROCESS-
* ING A RPT BODY.


ERPT   LDA INPNT;  CHOP;  STA INPNT;  CAX;  SUB 1,2
       ADD =1;  CAX;  BRU ERPT2
ERPT1  LDP 0,2;  COPY BA,AX,XB;  ADM 0,2;  CBX;  EAX 2,2
ERPT2  SKN 0,2;  BRU ERPT1;  STX STEXT
ERPT3  LDX INPNT;  STX TXTEND;  CXA;  SUB 2,2;  ADD =2;  COPY AX,B
       MRG =LDB;  STA INPNT;  LDA 0,2;  LCY 8;  COPY BX,B;  RSH 8
       BRU *+1,2;  BRUG SIMP,BOUND,EVALU8
SIMP   SUB =1;  STA* INPNT;  BRU ERPT4
BOUND  LDX INPNT;  SKN 1,2;  SKIP 2;  CLA;  BRU ERPT4;  LDB 2,2;  LDX 1,2
       SUB 0,2;  SKB =4B7;  CNA;  ADD =1;  BRU ERPT4
EVALU8 LDA =FIXU;  SUB =2;  STA UP1;  CLA
       STA GOTIT;  BRM DFABS
ERPT4  LDB =FIXU;  STB UP1;  LDB =LDB;  STB INPNT;  SKG =0;  BRU ERPT5
       LDA STEXT;  ADM INPNT;  BRU ERPT7
ERPT5  LDA TXTEND;  ADD =3;  STA BSSP;  CFREE
ERPT6  LDA UNPCK;  CHOP;  STA PP1;  BRM USTKI;  SKN EXPAND;  BRU* PP1
ERPT7  CLA;  BRM EOL;  LDA =-1;  ADM ELEV;  BRU CLOOP



* FREEZE:

FREEZE BRM LABM;  IRTMVE SAVE;  BRU NEWL



* GARBAGE COLLECTION ROUTINE:  GARBABE COLLECTS IN SS:
* CAUTION:  SEE ALL PLACES WHERE GARBC IS CALLED.  IN SOME OF THEM SSP
* AND BSSP ARE NOT SET RIGHT FOR THE CALL.
* SECOND CAUTION:  FREEZE MUST BE MORE SOPHISTICATED AFTER GARBC WORKS.

EGARBC EAX SSPA;  BRM TFULL



* EXTERNAL DEFINITIONS:

       XTRNL   CRPT,DIG,DUM,DUMX,EARGBC,EBSTOR,EDSUP,EFOR,EGARBC
       XTRNL   EIFSKP,ELSE,ELSF,EMAC,EMODCH
       XTRNL   ENDF,ENDM,ENDMX,ENDR,EOUTC,ERPT,ESETSQ,ESSNSS,EWSTOR
       XTRNL   FREEZE,GEN,GENX,IF,MACALL,MACRO,MACROX,NARG,NCHR,RPT
       XTRNL   LMACAL,LMACRO,LMACRX


*     END                     LAST LINE OF MAC.
*MESSAGES, ERROR MESSAGES, AND TABLE NAMES

MESS   IDENT                   MESSAGE BLOCK

*TABLE NAMES
$MTPA  ASC     'MAIN TABLE/'
$SSPA  ASC     'STRING STORAGE/'
$ETPA  ASC     'EXPRESSION TABLE/'
$ISPA  ASC     'INPUT POINTER STACK/'
$CHPA  ASC     'CHARACTER STACK/'
$ANPA  ASC     'OPERAND STACK/'
$ATPA  ASC     'OPERATOR STACK/'
$PIPA  ASC     'PILE/'


*ERROR MESSAGES
$EMBF  ASC     'BAD "FOR" SYNTAX/'
$EMBT  ASC     'BAD TERMINATION/'
$EMCC  ASC     'OUT OF CONTEXT/'
$EMCT  ASC     ' TERMINATOR?/'
$EMDD  ASC     'DUMMY: DELIMITING?/'
$EMDH  ASC     'DIRECTIVE VALUE HIGH/'
$EMDR  ASC     'DUMMY: RELOCATABLE?/'
$EMDU  ASC     'DUMMY: UNDEFINED?/'
$EMEO  ASC     'OPCODES AND MACROS ARE NOT "LOCAL" OR "EXTERNAL"/'
$EMGH  ASC     'NUMBER OF GENERATEDS OUT OF BOUNDS/'
$EMI   ASC     'INDIRECTION?/'
$EMLC  ASC     'LC OVERFLOW/'
$EMLS  ASC     'EXCESSIVELY LONG STRING CONSTANT/'
$EMME  ASC     'MISSING EXPRESSION/'
$EMML  ASC     'MISSING LABEL/'
$EMMO  ASC     'MISSING OPERAND/'
$EMMP  ASC     'MISSING PARENTHESES?/'
$EMMS  ASC     'MISSING SYMBOL/'
$EMNE  ASC     'NEGATIVE EXPONENT?/'
$EMNL  ASC     'DO NOT LABEL THIS DIRECTIVE/'
$EMNR  ASC     'NEGATIVE RELORG?/'
$EMOB  ASC     'DIRECTIVE OUTSIDE BODY/'
$EMOO  ASC     'TOO MANY UNDEF OPCODES/'
$EMOP  ASC     ' OPCODE?/'
$EMOV  ASC     ' OVERFLOW/'
$EMOW  ASC     ' FORCIBLY UNDEFINED?/'
$EMPM  ASC     'PREDEFINED MACRO?/'
$EMPO  ASC     'MAIN TABLE OVERFLOW ON POP/'
$EMQ   ASC     '?/'
$EMRA  ASC     'RELOCATABLE?/'
$EMRD  ASC     ' REDEFINED/'
$EMRF  ASC     'RFACTORS DISAGREE/'
$EMRG  ASC     'RADIX GOOF/'
$EMRH  ASC     'RFACTOR OUT OF BOUNDS/'
$EMSH  ASC     'SUBSCRIPT OUT OF BOUNDS/'
$EMSO  ASC     'STRING CAUSED MAIN TABLE OVERFLOW/'
$EMTH  ASC     'WRONG OPD TAG VALUE/'
$EMUE  ASC     'UNDEFINED EXPRESSION/'
$EMZ   ASC     'Z:  /'
$B5    ASC     '     /'
$LPS   ASC     ')/'

$TRAPS  ASC     '$TRAP AT /'
$IOERRS ASC     '$I-O ERROR$/'
$NOEND  ASC     '$NO END DIRECTIVE$/'
$LCOVF  ASC     'LOCATION COUNTER OVERFLOW/'
$DEAD  ASC     '$***** ASSEMBLY DEAD *****$/'
$SOURCE ASC     '$SOURCE FILE:  /'
$OBJECT ASC     '$OBJECT FILE:  /'
$TEXTFI  ASC     '$TEXT FILE:  /'
$SNOPE ASC     '$SOURCE FILE WILL NOT OPEN/'
$ONOPE ASC     '$OBJECT FILE WILL NOT OPEN/'
$LNOPE ASC     '$TEXT FILE WILL NOT OPEN/'
$STYPE ASC     '  RANDOM OR NOT SYMBOLIC/'
$RTYPE ASC     '  RANDOM/'
$KINDS  ASC     ' RANDOM OR WRONG TYPE$/'
$TMUSM ASC     'TOO MANY UNDEFINEDS IN EXPRESSIONS$/'
$QMARK  ASC     ' ? /'
$IST   ASC     'INIT COMPLETE/'
$BIST  ASC     'BAD INIT/'
$TIMS  ASC     ' SEC    /'
$ERRS  ASC     ' ERR    /'
$WRDS  ASC     ' WRD    /'
$PSC   ASC     '(S:/'
$COC   ASC     ',O:/'
$CLC   ASC     ',L:/'
$CMC   ASC     ',M:/'
$CUC   ASC     ',U:/'
$UDEFS ASC     '$UNDEFINED SYMBOLS:$/'
$UDOPS ASC     'UNDEFINED OPCODES:$/'
$IDS   ASC     'IDENT$/'
$IBDS  ASC     'I"LL BE DAMNED$/'


       NOLIST  EXT             DO NOT LIST EXTS
       END                     END MESSAGE BLOCK

* NARP INITIALIZATION PROGRAM.                      (21 NOV 1966)


* OPD SYNTAX AND SEMANTICS:
* <SYMBOL> OPD   <VALUE>[,<OP SIT>[,<SHIFTK>[,<TYPE>]]]

* <OPSIT>   :    0 - OPERAND OPTIONAL
*                1 - NO OPERAND
*                2 - OPERAND REQUIRED

* <SHIFTK>  :    0 - NORMAL INSTRUCTION
*                1 - SHIFT INSTRUCTION

* <TYPE>    :    0 - INSTRUCTION
*                1 - DIRECTIVE
*                2 - MACRO


* INSTRUCTION DEFINITIONS:

LDA    OPD     07600000B,2     LOAD A
STA    OPD     03500000B,2     STORE A
LDB    OPD     07500000B,2     LOAD B
STB    OPD     03600000B,2     STORE B
LDX    OPD     07100000B,2     LOAD X
STX    OPD     03700000B,2     STORE X
EAX    OPD     07700000B,2     COPY EFFECTIVE ADDRESS INTO X
XMA    OPD     06200000B,2     EXCHANGE M AND A

ADD    OPD     05500000B,2     ADD M TO A
ADC    OPD     05700000B,2     ADD WITH CARRY
ADM    OPD     06300000B,2     ADD A TO M
MIN    OPD     06100000B,2     MEMORY INCREMENT
SUB    OPD     05400000B,2     SUBTRACT M FROM A
SUC    OPD     05600000B,2     SUBTRACT WITH CARRY
MUL    OPD     06400000B,2     MULTIPLY
DIV    OPD     06500000B,2     DIVIDE

ETR    OPD     01400000B,2     EXTRACT (AND)
MRG    OPD     01600000B,2     MERGE (OR)
EOR    OPD     01700000B,2     EXCLUSIVE OR

RCH    OPD     04600000B,2     REGISTER CHANGE
CLA    OPD     04600001B,1     CLEAR A
CLB    OPD     04600002B,1     CLEAR B
CLAB   OPD     04600003B,1     CLEAR AB
CLX    OPD     24600000B,1     CLEAR X
CLEAR  OPD     24600003B,1     CLEAR A, B, AND X
CAB    OPD     04600004B,1     COPY A INTO B
CBA    OPD     04600010B,1     COPY B INTO A
XAB    OPD     04600014B,1     EXCHANGE A AND B
BAC    OPD     04600012B,1     COPY B INTO A, CLEARING B
ABC    OPD     04600005B,1     COPY A INTO B, CLEARING A
CXA    OPD     04600200B,1     COPY X INTO A
CAX    OPD     04600400B,1     COPY A INTO X
XXA    OPD     04600600B,1     EXCHANGE X AND A
CBX    OPD     04600020B,1     COPY B INTO X
CXB    OPD     04600040B,1     COPY X INTO B
XXB    OPD     04600060B,1     EXCHANGE X AND B
STE    OPD     04600122B,1     STORE EXPONENT
LDE    OPD     04600140B,1     LOAD EXPONENT
XEE    OPD     04600160B,1     EXCHANGE EXPONENTS
CNA    OPD     04601000B,1     COPY NEGATIVE OF A INTO A
AXC    OPD     04600401B,1     COPY A TO X, CLEAR A

BRU    OPD     00100000B,2     BRANCH UNCONDITIONALLY
BRX    OPD     04100000B,2     INCREMENT INDEX AND BRANCH
BRM    OPD     04300000B,2     MARK PLACE AND BRANCH
BRR    OPD     05100000B,2     RETURN BRANCH
BRI    OPD     01100000B,2     BRANCH AND RETURN FROM INTERRUPT

SKS    OPD     04000000B,2     SKIP IF SIGNAL NOT SET
SKE    OPD     05000000B,2     SKIP IF A EQUALS M
SKG    OPD     07300000B,2     SKIP IF A GREATER THAN M
SKR    OPD     06000000B,2     REDUCE M, SKIP IF NEGATIVE
SKM    OPD     07000000B,2     SKIP IF A EQUALS M ON B MASK
SKN    OPD     05300000B,2     SKIP IF M NEGATIVE
SKA    OPD     07200000B,2     SKIP IF M AND A DO NOT COMPARE ONES
SKB    OPD     05200000B,2     SKIP IF M AND B DO NOT COMPARE ONES
SKD    OPD     07400000B,2     DIFFERENCE EXPONENTS AND SKIP

RSH    OPD     06600000B,2,1   RIGHT SHIFT AB
RCY    OPD     06620000B,2,1   RIGHT CYCLE AB
LRSH   OPD     06624000B,2,1   LOGICAL RIGHT SHIFT AB
LSH    OPD     06700000B,2,1   LEFT SHIFT AB
LCY    OPD     06720000B,2,1   LEFT CYCLE AB
NOD    OPD     06710000B,2,1   NORMALIZE AND DECREMENT X

HLT    OPD     00000000B,0     HALT
ZRO    OPD     00000000B,0     ZERO
NOP    OPD     02000000B,0     NO OPERATION
EXU    OPD     02300000B,2     EXECUTE

BPT1   OPD     04020400B,1     BREAKPOINT TEST 1
BPT2   OPD     04020200B,1     BREAKPOINT TEST 2
BPT3   OPD     04020100B,1     BREAKPOINT TEST 3
BPT4   OPD     04020040B,1     BREAKPOINT TEST 4

ROV    OPD     02200001B,1     RESET OVERFLOW
REO    OPD     02200010B,1     RECORD EXPONENT OVERFLOW
OVT    OPD     02200101B,1     OVERFLOW TEST AND RESET
OTO    OPD     02200100B,1     OVERFLOW TEST ONLY

EIR    OPD     00220002B,1     ENABLE INTERRUPTS
DIR    OPD     00220004B,1     DISABLE INTERRUPTS
AIR    OPD     00220020B,1     ARM/DISARM INTERRUPTS
IET    OPD     04020002B,1     INTERRUPT ENABLED TEST
IDT    OPD     04020004B,1     INTERRUPT DISABLED TEST

ALCW   OPD     00250000B,1     ALERT CHANNEL W
DISW   OPD     00200000B,1     DISCONNECT CHANNEL W
ASCW   OPD     00212000B,1     ALERT TO STORE ADDRESS IN CHANNEL W
TOPW   OPD     00214000B,1     TERMINATE OUTPUT ON CHANNEL W

CATW   OPD     04014000B,1     CHANNEL ACTIVE TEST
CETW   OPD     04011000B,1     CHANNEL W ERROR TEST
CZTW   OPD     04012000B,1     CHANNEL W COUNT TEST
CITW   OPD     04010000B,1     CHANNEL W INTER-RECORD TEST

EOD    OPD     00600000B,2     ENERGIZE OUTPUT D
MIW    OPD     01200000B,2     M INTO W BUFFER WHEN EMPTY
WIM    OPD     03200000B,2     W BUFFER INTO M WHEN FULL
PIN    OPD     03300000B,2     PARALLEL INPUT
POT    OPD     01300000B,2     PARALLEL OUTPUT
EOM    OPD     00200000B,2     ENERGIZE OUTPUT M
BETW   OPD     04020010B,1     W BUFFER ERROR TEST
BRTW   OPD     04021000B,1     W BUFFER READY TEST

BIO    OPD     57600000B,2     BLOCK I/O
BRS    OPD     57300000B,2     BRANCH TO SYSTEM
CIO    OPD     56100000B,2     CHARACTER I/O
CTRL   OPD     57200000B,2     CONTROL
DBI    OPD     54200000B,2     DRUM BLOCK INPUT
DBO    OPD     54300000B,2     DRUM BLOCK OUTPUT
DWI    OPD     54400000B,2     DRUM WORD INPUT
DWO    OPD     54500000B,2     DRUM WORD OUTPUT
EXS    OPD     55200000B,2     EXECUTE INSTRUCTION IN SYSTEM MODE
FAD    OPD     55600000B,2     FLOATING ADD
FDV    OPD     55300000B,2     FLOATING DIVIDE
FMP    OPD     55400000B,2     FLOATING MULTIPLY
FSB    OPD     55500000B,2     FLOATING SUBTRACT
GCD    OPD     53700000B,2     GET CHARACTER AND DECREMENT
GCI    OPD     56500000B,2     GET CHARACTER AND INCREMENT
ISC    OPD     54100000B,2     INTERNAL TO STRING CONV. (FLOATING OUTPUT)
IST    OPD     55000000B,2     INPUT FROM SPECIFIED TELETYPE
LAS    OPD     54600000B,2     LOAD FROM SECONDARY MEMORY
LDP    OPD     56600000B,2     LOAD POINTER (AB)
OST    OPD     55100000B,2     OUTPUT TO SPECIFIED TELETYPE
SAS    OPD     54700000B,2     STORE IN SECONDARY MEMORY
SBRM   OPD     57000000B,2     SYSTEM BRM
SBRR   OPD     05140000B,2     SYSTEM BRR
SIC    OPD     54000000B,2     STRING TO INTERNAL CONV. (FLOATING INPUT)
SKSE   OPD     56300000B,2     SKIP IF STRINGS EQUAL
SKSG   OPD     56200000B,2     SKIP IF STRING GREATER
STI    OPD     53600000B,2     SIMULATE TELETYPE INPUT
STO    OPD     53400000B,2     STEAL TTY OUTPUT
STP    OPD     56700000B,2     STORE POINTER (AB)
TCI    OPD     57400000B,2     TELETYPE CHARACTER INPUT
TCO    OPD     57500000B,2     TELETYPE CHARACTER OUTPUT
WCD    OPD     53500000B,2     WRITE CHARACTER AND DECREMENT
WCH    OPD     56400000B,2     WRITE CHARACTER
WCI    OPD     55700000B,2     WRITE CHARACTER AND INCREMENT
WIO    OPD     56000000B,2     WORD I/O



* DIRECTIVE DEFINITIONS:

ASC    OPD      0,2,0,1        ASCII STRING
BES    OPD      1,2,0,1        BLOCK END SYMBOL
BSS    OPD      2,2,0,1        BLOCK START SYMBOL
COPY   OPD      3,2,0,1        REGISTER CHANGE
CRPT   OPD      4,2,0,1        CONDITIONAL REPEAT
DATA   OPD      5,2,0,1        DATA WORD
DEC    OPD      7,1,0,1        SET NUMBER RADIX TO 10
DELSYM OPD      8,1,0,1        DELETE SYMBOL
ELSE   OPD      9,1,0,1        ELSE
ELSF   OPD     10,2,0,1        ELSE IF
END    OPD     11,1,0,1        END OF PROGRAM
ENDF   OPD     12,1,0,1        END IF
ENDM   OPD     13,1,0,1        END MACRO
ENDR   OPD     14,1,0,1        END REPEAT
EQU    OPD     15,2,0,1        EQUATE
EXT    OPD     16,0,0,1        EXTERNAL
FREEZE OPD     17,1,0,1        FREEZE TABLES
FRGT   OPD     18,2,0,1        FORGET SYMBOL
IDENT  OPD     19,1,0,1        IDENTIFICATION SYMBOL
IF     OPD     20,2,0,1        IF
LIBEXT OPD     25,1,0,1        OUTPUT LABEL AS LIBRARY WYMBOL
LIST   OPD     21,0,0,1        TURN ON LISTING
MACRO  OPD     22,0,0,1        MACRO DEFINITION
NARG   OPD     23,1,0,1        NUMBER OF ARGUMENTS
NCHR   OPD     24,0,0,1        NUMBER OF CHARACTERS
NOLIST OPD     26,0,0,1        TURN OFF LISTING
OCT    OPD     27,1,0,1        SET NUMBER RADIX TO 8
POPD   OPD     28,0,0,1        POP DEFINITION
RELORG OPD     29,2,0,1        RELATIVE ORIGIN
RETREL OPD     30,1,0,1        RETRIEVE ORIGIN
RPT    OPD     31,2,0,1        REPEAT
TEXT   OPD     32,2,0,1        STRING (FOUR CHARACTERS PER WORD)
LMACRO OPD     33,0,0,1        ALTERNATIVE MACRO DEF'N
REM    OPD     35,0,0,1        PRINT REMARK ON TEXT FILE
FRGTOP OPD     37,2,0,1        FORGET SELECTED OPCODES

:ZERO: EQU     *
:LC:   EQU     :ZERO:
       FRGT    :ZERO:,:LC:


       FREEZE

       END                     LAST LINE OF NARP INITIALIZATION PROGRAM.
