       PROGRAM MONITOR'VERSION;

       DECLARE STRING S,T,MON'VERSION ← "E6(M)";

       DECLARE FIELD BP(0), RP(1), WP(2);


       STRING FUNCTION MONITOR'VERSION(S), MONITOR ← 254;

       S$WP←S$RP←S$BP; T←MON'VERSION;
       WCI(GCI(T//DONE),S//QUIT) WHILE 1;
QUIT:
DONE:  RETURN S;

       END;

          COMMON CHTD;
*
*   CHT DECLARATIONS
*
          DECLARE FIXED FIELD
             CUN1(0:0,23),     /*1ST HALF OF UNIQUE NAME*/
             CUN2(1:0,23),     /*2ND HALF OF UNIQUE NAME*/
             CDK(2:2,23),      /*DISK ADDRESS*/
             CD(3:0,0),        /*DIRTY BIT*/
             CU(3:1,1),        /*UNABILABLE BIT*/
             CSTA(3:1,5),      /*STATUS BITS*/
             CPG(3:6,12),      /*CORE PAGE NUMBER*/
             CPL(3:13,15),     /*PAGE LOCKS*/
             CPL'SYS(3:13,13), /*PAGE LOCKED FOR SYSTEM*/
             CPL'UTIL(3:14,14),/*PAGE LOCKED FOR UTILITY*/
             CPL'USER(3:15,15),/*PAGE LOCKED FOR USER*/
             CSCH(3:16,23),    /*SCHEDULE COUNT*/
             CFCP(4:6,23),     /*FREE-CORE-LIST POINTER*/
             CCPTR(5:6,23);    /*COLLISION POINTER*/

*  BITS IN THE STATUS FIELD, CSTA.
          DECLARE
             WRIP ← 1,         /*WRITE IN PROGRESS*/
             RDER ← 2,         /*READ ERROR*/
             RDIP ← 4,         /*READ IN PROGRESS*/
             DKWR ← 20B;       /*DISK WRITE IN PROGRESS*/
*
*  FIELDS IN AN LPT (LOCKED-PAGE TABLE) ENTRY
*
          DECLARE FIXED FIELD
             LPT'LOCK(0:0,2),  /*CHT LOCK FOR WHICH ENTRY IS RESPONSIBLE*/
             LPT'REASON(0:3,5),/*REASON PAGE IS LOCKED*/
             LPT'PAGE(0:8,14), /*LOCKED PAGE'S CHT2 INDEX*/
             LPT'PROCESS(0:15,23),/*PRT INDEX OF PROCESS WHICH LOCKED PAGE*/
             LPT'TIME(1:0,23); /*HIGH ORDER HALF OF RTC WHEN PAGE WAS LOCKED*/
*
*  FIELDS IN A PHYSICAL MAP ENTRY
*
          DECLARE FIXED FIELD
             PM'EF(0:0,0),     /*EMPTY OR RING ERROR*/
             PM'CPA(0:5,12);   /*CORE PAGE NUMBER*/
*
*  DHT DECLARATIONS
*
          DECLARE
             ONDK ← 4B7,       /*CLEAN ON DISK*/
             WUN ← 1B7;        /*WRITE UNIQUE NAME*/

          END;

          COMMON DKAL;
*
*  DISK ALLOCATION DECLARATIONS
*
*
* DISK FIELD DECLARATIONS
*
          DECLARE FIXED FIELD TSU(0:2,3), DKNO(0:22,23),TRACK(0:4,11),
          BAND(0:12,17),SECT(0:18,21),U(0:0,0);
          DECLARE FIXED FIELD DTSU(0:3,4),DSECT(0:17,21),
          DBAND(0:10,16);
          MACRO DKADDR(A,B,C,D,E,F)←(A@U V' B@TSU V' C@DKNO
          V' D@TRACK V' E@BAND V' F@SECT);
*
*
          DECLARE DKTSU←1,SECTA←5,TRACKA←96;
          DECLARE ARRAY DISKA[4]←(0,-1,-1,-1),
          BANDA[4]←(24,0,0,0);
          DECLARE UTRACK←1;
          DECLARE MAXDK←(SECTA*TRACKA*24)*1-1;
*
*  SRMEM DECLARATIONS FOR DISK
*
          DECLARE FIXED FIELD SRTAPE(0:2,3),SRDMP(0:9,9),
          SRBAND(0:5,6),SRUNIT(0:4,4),SRTSU(0:7,8);

          END;

          COMMON PARD;
          INCLUDE DKAL;
*
*   DECLARATION OF MONITOR GLOBAL ENVIRONMENT
*
          DECLARE M'G ← 6B5;

*
*  HORRIBLE KLUDGE TO PLACE SOME FIELD DESCRIPTORS IN KNOWN LOCATIONS
*
          DECLARE FDK ← M'G+4100B;
          DECLARE FDK1 ← FDK+1;
          DECLARE FDK2 ← FDK1+1;
          DECLARE FDK3 ← FDK2+1;
*
*  SYSTEM PARAMETERS
*  CONTEXT BLOCK ALLOCATION
          DECLARE LPMTE←4, LSPTE←33, LSPCSE←5;
          DECLARE MAPS ← 200B;
          DECLARE PMTS←300B, NPMTE←128,PMTF←PMTS+NPMTE*LPMTE;
          DECLARE SPTS←PMTF, NSPTE←8, SPTF←SPTS+NSPTE*LSPTE;
          DECLARE SPCSS←SPTF, NSPCSE←16, SPCSF←SPCSS+NSPCSE*LSPCSE;
          DECLARE ICTS←SPCSF, ICTL←18, ICTF←ICTS+3*ICTL;
          DECLARE OFTS←ICTF, OFTL←16, OFTF←OFTS+5*OFTL;
          DECLARE APTL←65, APTS←2751B-APTL+1;
          DECLARE TRSTATE←2752B+M'G, SWSTATE←2764B+M'G;
          DECLARE CTC←2776B+M'G, ITIMER←2777B+M'G;
          DECLARE SESS←OFTF+M'G, SESE←APTS-1+M'G;
*
*  DISK ADDRESS DECLARATIONS
          DECLARE RT0DKA←DKADDR(0,2,0,0,17,0),
          RT1DKA←DKADDR(0,2,0,0,17,1),
          RT2DKA←DKADDR(0,2,0,0,17,2),
          RT3DKA←DKADDR(0,2,0,0,17,3),
          CB0DKA←DKADDR(0,2,0,0,6,3),
          MCP0DKA←DKADDR(0,2,0,0,15,0),
          MCP1DKA←DKADDR(0,2,0,0,15,1),
          MCP2DKA←DKADDR(0,2,0,0,15,2),
          MCP3DKA←DKADDR(0,2,0,0,15,3),
          MCP4DKA←DKADDR(0,2,0,0,15,4),
          MCP5DKA←DKADDR(0,2,0,0,16,0),
          MCP6DKA←DKADDR(0,2,0,0,16,1),
          MCP7DKA←DKADDR(0,2,0,0,16,2),
          MCP8DKA←DKADDR(0,2,0,0,16,3),
          MCP9DKA←DKADDR(0,2,0,0,16,4),
          UCP0DKA←DKADDR(0,2,0,0,13,2),
          UCP1DKA←DKADDR(0,2,0,0,13,3),
          UCP2DKA←DKADDR(0,2,0,0,13,4),
          UCP3DKA←DKADDR(0,2,0,0,14,0),
          UCP4DKA←DKADDR(0,2,0,0,14,1),
          UCP5DKA←DKADDR(0,2,0,0,14,2),
          MIB0DKA←DKADDR(0,2,0,0,6,2),
          AMC'PG1'DKA←DKADDR(0,2,0,0,14,3),
          AMC'PG2'DKA←DKADDR(0,2,0,0,14,4);
*
*   FIXED UNIQUE NAMES
*
*
*  MIB OWNER = 1
*    UNIQUE PART: REAL CORE   = 1
*                 MONITOR     = 2
*                 UTILITY     = 3
*                 LISTENER PR.= 4
*                 AMC-ITP     = 5
*
          MACRO EUN1(TP,US,UNN,PN) ← (TP LSH 22) V'
          (US LSH 6) V' (UNN RSH 16),(UNN LSH 8) V' PN;
          MACRO RNX(R) ← R$WD0',R$WD1',R$WD2';
          DECLARE FIXED FIELD WD0'(0),WD1'(1),WD2'(2);
*
          DECLARE LONGLONG RT0RN ← (EUN1(0,1,1,1),RT0DKA,0);
          DECLARE LONGLONG RT1RN ← (EUN1(0,1,1,2),RT1DKA,0);
          DECLARE LONGLONG RT2RN ← (EUN1(0,1,1,3),RT2DKA,0);
          DECLARE LONGLONG RT3RN ← (EUN1(0,1,1,4),RT3DKA,0);
          DECLARE LONGLONG CB0RN ← (EUN1(2,1,4,1),CB0DKA,0);
          DECLARE LONGLONG MCP0RN ← (EUN1(0,1,2,1),MCP0DKA,0);
          DECLARE LONGLONG MCP1RN ← (EUN1(0,1,2,2),MCP1DKA,0);
          DECLARE LONGLONG MCP2RN ← (EUN1(0,1,2,3),MCP2DKA,0);
          DECLARE LONGLONG MCP3RN ← (EUN1(0,1,2,4),MCP3DKA,0);
          DECLARE LONGLONG MCP4RN ← (EUN1(0,1,2,5),MCP4DKA,0);
          DECLARE LONGLONG MCP5RN ← (EUN1(0,1,2,6),MCP5DKA,0);
          DECLARE LONGLONG MCP6RN ← (EUN1(0,1,2,7),MCP6DKA,0);
          DECLARE LONGLONG MCP7RN ← (EUN1(0,1,2,8),MCP7DKA,0);
          DECLARE LONGLONG MCP8RN ← (EUN1(0,1,2,9),MCP8DKA,0);
          DECLARE LONGLONG MCP9RN ← (EUN1(0,1,2,10),MCP9DKA,0);
          DECLARE LONGLONG UCP0RN ← (EUN1(0,1,3,1),UCP0DKA,0);
          DECLARE LONGLONG UCP1RN ← (EUN1(0,1,3,2),UCP1DKA,0);
          DECLARE LONGLONG UCP2RN ← (EUN1(0,1,3,3),UCP2DKA,0);
          DECLARE LONGLONG UCP3RN ← (EUN1(0,1,3,4),UCP3DKA,0);
          DECLARE LONGLONG UCP4RN ← (EUN1(0,1,3,5),UCP4DKA,0);
          DECLARE LONGLONG UCP5RN ← (EUN1(0,1,3,6),UCP5DKA,0);
          DECLARE LONGLONG MIB0RN ← (EUN1(0,1,0,0),MIB0DKA,0);
          DECLARE LONGLONG AMC'PG1'RN←(EUN1(0,1,5,1),AMC'PG1'DKA,0);
          DECLARE LONGLONG AMC'PG2'RN←(EUN1(0,1,5,2),AMC'PG2'DKA,0);

*
*  PMT ORIGINS
*
          DECLARE CB0PMT ← 1;
          DECLARE RT0PMT ← 2;
          DECLARE RT1PMT ← 3;
          DECLARE RT2PMT ← 4;
          DECLARE RT3PMT ← 5;
          DECLARE MCP0PMT ← 6;
          DECLARE MCP1PMT ← 7;
          DECLARE MCP2PMT ← 8;
          DECLARE MCP3PMT ← 9;
          DECLARE MCP4PMT ← 10;
          DECLARE MCP5PMT ← 11;
          DECLARE MCP6PMT ← 12;
          DECLARE MCP7PMT ← 13;
          DECLARE MCP8PMT ← 14;
          DECLARE MIB0PMT ← 15;
          DECLARE UCP0PMT ← 16;
          DECLARE UCP1PMT ← 17;
          DECLARE UCP2PMT ← 18;
          DECLARE UCP3PMT ← 19;
          DECLARE UCP4PMT ← 20;
          DECLARE UCP5PMT ← 21;
          DECLARE MCP9PMT ← 22;
*
*  MAP ORIGINS
*
          DECLARE CB0MAP ← M'G/4000B;
          DECLARE MCP0MAP ← CB0MAP+1;
          DECLARE MCP1MAP ← CB0MAP+2;
          DECLARE MCP2MAP ← CB0MAP+3;
          DECLARE MCP3MAP ← CB0MAP+4;
          DECLARE MCP4MAP ← CB0MAP+5;
          DECLARE MCP5MAP ← CB0MAP+6;
          DECLARE MCP6MAP ← CB0MAP+7;
          DECLARE MCP7MAP ← CB0MAP+8;
          DECLARE MCP8MAP ← CB0MAP+9;
          DECLARE MCP9MAP ← CB0MAP+10;
          DECLARE RT0MAP ← CB0MAP+13;
          DECLARE RT1MAP ← CB0MAP+14;
          DECLARE RT2MAP ← CB0MAP+15;
          DECLARE RT3MAP ← CB0MAP+16;
          DECLARE MIB0MAP ← CB0MAP+18;
*
*  REAL CORE PAGE ORIGINS
*

*
*  RESIDENT TABLES
*
          DECLARE RT0CPA ← 0B;
          DECLARE RT1CPA ← 1B;
          DECLARE RT2CPA ← 2B;
          DECLARE RT3CPA ← 3B;
*
*  RESIDENT MONITOR CODE
*
          DECLARE MCP0CPA ← 4B;
          DECLARE MCP1CPA ← 5B;
          DECLARE MCP2CPA ← 6B;
          DECLARE MCP3CPA ← 7B;
          DECLARE MCP4CPA ← 10B;
          DECLARE MCP5CPA ← 11B;
          DECLARE MCP6CPA ← 12B;
          DECLARE MCP7CPA ← 13B;
          DECLARE MCP8CPA ← 14B;
*
*  AMC PAGES
*
          DECLARE AMC'PG1'CPA ← 15B;
          DECLARE AMC'PG2'CPA ← 16B;
*
*  MONITOR STARTUP CODE (LATER DESTROYED)
*
          DECLARE MCP9CPA ← 17B;
*
*  UTILITY CODE (LISTENER, ETC.)
*
          DECLARE UCP0CPA ← 20B;
          DECLARE UCP1CPA ← 21B;
          DECLARE UCP2CPA ← 22B;
          DECLARE UCP3CPA ← 23B;
          DECLARE UCP4CPA ← 24B;
          DECLARE UCP5CPA ← 25B;
*
*  CONTEXT BLOCK FOR INITIAL PROCESS
*
          DECLARE CB0CPA ← 26B;
*
*  MIB FOR INITIAL PROCESS
*
          DECLARE MIB0CPA ← 27B;
*
*  COPIES OF CB AND PAGE 0 FOR WRITING ON DISK/DRUM
*
          DECLARE CB0CPA'COPY ← 36B;
          DECLARE RT0CPA'COPY ← 37B;
*
*
*  FIXED MAP AND PMT ASSIGNMENTS
*
          DECLARE NEW'PAGE'BYTE←127;
          DECLARE OCTAL ARRAY PRMAP[64:1,MAPS+M'G];
          DECLARE FIXED FIELD PRMPMT(0:16,23), PRMRO(0:12,12);
          DECLARE MMAPA←MIB0MAP;
          DECLARE MMAPB←MMAPA+5;
          DECLARE MSC1←MMAPB+1;
          DECLARE MSC2←MSC1+1;
          DECLARE MSC3←MSC2+1;
          DECLARE MPMTA←MIB0PMT;
          DECLARE FIXED FIELD COMM(0:0,5), PRX(0:6,23), DAT(1:0,23);
          DECLARE MSTATUS←-1,
             MKEY←777B,
             MNAME←1;

          END;

          COMMON PMTD;
*
*  PROCESS MEMORY TABLE DECLARATIONS - SEE DOCUMENT PMS/M-19.
*
          INCLUDE PARD;
*  THE PROCESS MEMORY TABLE
          DECLARE LONGLONG ARRAYONE PMT[NPMTE:,PMTS+M'G];
          DECLARE FIXED FIELD
          PMTUN1(0:0,23),       /*1ST WORD OF UNIQUE NAME*/
          PMTUN2(1:0,23),       /*2ND WORD OF UNIQUE NAME*/
          PMTINDEX(1:16,23),    /*PMT INDEX - PRIVATE PAGES ONLY*/
          PMTDKA(2:2,23),       /*DISK ADDRESS*/
          PMTFP(2:0,0),         /*FILE PAGE FLAG*/
          PMTNC(2:1,1),         /*NO CHARGE FLAG*/
          PMTRO(3:0,0),         /*READ-ONLY FLAG*/
          PMTRF(3:1,1)=FDK,     /*REFERENCED FLAG*/
          PMTDWS(3:2,2),        /*PAGE IS IN DWS*/
          PMTAL(3:3,11),        /*ACCESS LOCK*/
          PMTSF(3:12,12),       /*SCHEDULED FLAG*/
          PMTCCE(3:13,13),      /*CLASS CODE ERROR FLAG*/
          PMTRDE(3:14,14),      /* HARD DRUM READ ERROR*/
          PMTERR(3:13,14),      /*CCE OR RDE*/
          PMTCL(3:15,23);       /*CONTROL LOCK*/
          DECLARE FIXED LONG FIELD PMTUN(0:0,23);* FULL UNIQUE NAME
*

          END;

          COMMON TRAPD;
          INCLUDE PARD;
          DECLARE NRDTRPS←8;
          DECLARE CHARACTER ARRAYONE RDTCODES[NRDTRPS] ←
          ('ABE', 'FLO', 'FLU', 'ROI', 'IAT', 'UFN', 'FXO', 'DIZ');
          DECLARE FIXED FIELD STPC(0:6,23), STAR(1:0,23),
          STBR(2:0,23), STCR(3:0,23), STDR(4:0,23);
          DECLARE FIXED FIELD
          STXR(6:0,23), STLR(7:0,23), STGR(8:0,23),
          STFE(5:0,11), STSR(9:0,23);
*
*  CPU STATUS BITS - SUB-FIELDS OF STSR
*
          DECLARE FIXED FIELD INSTD(9:23,23),
          OV(9:22,22), TOV(9:21,21),
          CARRY(9:20,20), PDFLAG(9:19,19),
          TDFLAG(9:18,18), XMONT(9:17,17),
          XUTILT(9:16,16), M940M(9:14,14),
          CC(9:12,13);
          DECLARE XMONC←1@XMONT;

          END;

          COMMON GLOBAL;
*
*   GLOBAL MACROS AND DEFINITIONS
*
          INCLUDE TRAPD;
          DECLARE INITIAL'QUANTUM←-1000 A' (4B7-1);
          DECLARE NUMBER'MIBS←128;* MAXIMUM NO. OF MIBS FOR SYSTEM
          DECLARE WAKEUPC←1B6,IWAKEUPC←2B6,
          RETURNC←3B6, BLOCKC←4B6;
          DECLARE BLOCKOUTC←5B6,UNLOADC←6B6,
          GIVEUPC←7B6,CHANGERTC←10B6;
          DECLARE ATT1←1,ATT2←2,ATT3←4,ATT4←8;
          DECLARE ARRAY STSA[4]←(6,8,12,24);
          DECLARE PRO1←1,PRO2←2,PRO3←4,PRO4←8;
          DECLARE ARRAY ARRAY'D[2048:,M'G+4096];
          DECLARE FIXED FIELD MADF(0:6,23),MSTRF(0:2,3), MADF1(1:6,23);
          DECLARE FIELD OPCODE(0:3,8);
          DECLARE FIXED FIELD WD0(0), WD1(1), WD2(2),WD3(3);
          DECLARE FIXED FIELD FDFB(0:8,12), FDSIZE(0:3,7);
          DECLARE FIELD SDSIZE(0:2,3), SDPOS(0:4,5);
          DECLARE FIELD IATYPE(0:0,1);
          DECLARE FIELD ADLB(0:2,2), ADLE(0:4,4), ADLUB(0:7,23),
          ADUB(0:11,23);
          DECLARE FIELD SBPTR(0:0,23), SRPTR(1:0,23), SWPTR(2:0,23),
          SEPTR(3:0,23);
          DECLARE ITAG ← 2B6;* INDIRECT BIT IN AN IAW
          DECLARE XTAG ← 4B6;
          DECLARE FIXED SIGNED FIELD FDDISP(0:13,23);
          MACRO EVEN(A) ← ((A A' 1)=0);
          MACRO TNO(A) ← A$FDFB;
          MACRO MAX(A,B)←(A IF A>=B ELSE B);
          MACRO MIN'(A,B) ← (A IF A<=B ELSE B);
          MACRO XMONTRAP ← .CSA, .IOR XMONC, .XSA, .LDA G'[TRSTATE-M'G+STSR$FDDISP],
          .IOR XMONC, .STA G'[TRSTATE-M'G+STSR$FDDISP];
          DECLARE POP4←104B;
          MACRO UNPROTECT(A)← .LDA A , .UNPRO;
          MACRO LOAD'STATE(A)← .LDX A , .LOADS;
          MACRO SAVE'STATE(A)← .STX G'[A-M'G+STXR$FDDISP],
          .EAX G'[A-M'G], .STORS;
          MACRO CLEAR'MAP← .CMAP;
          MACRO CLEAR'MAPS← .CMAPS;
          MACRO PAGESA(A)← (A LSH 11);
          MACRO PAGENO(A)← (A RSH 11);
          MACRO MRING(A)← (A$MADF >= 6B5);
          MACRO YRING(A)← (A$MADF < 6B5 AND A$MADF >= 403B3);
          MACRO URING(A)← (A$MADF < 4B5);
          MACRO BYTESIZE(A)← STSA[A$MSTRF];
          MACRO XMBLOCK(A)← UNPROTECT(PRO3), .LDA A , .USCL, .SLOK;
          MACRO RDCTC(A)← .CCA, .STA A;
          MACRO RDIT(A)← .CTA, .STA A;
          MACRO SIT(A)← .LDA A ,.CAT;
          MACRO ATTENTION(A)← .LDA A , .ATTN;
          MACRO RDUN(A,B)← .RUN, .STA A, .STB B;
          MACRO UNLESS← IF NOT;
          MACRO ORIG(A,B) ← (((A) A' N'(B-1)+B) IF ((A) MOD B)#0 ELSE (A));
          MACRO PUNT'(A)← .POP4 A;
          DECLARE LONG LONG'ZERO←(0,0);
          DECLARE LONGLONG LONGLONG'ZERO←(0,0,0,0);

          END;

          COMMON PROFILE;
*
* CONTEXT BLOCK ALLOCATION
*
          INCLUDE PARD,PMTD, TRAPD, GLOBAL;
          DECLARE POP1=M'G,POP2=@POP1+1;
          DECLARE SESP=@POP2+1,SESL=@SESP+1;
          DECLARE RDTPC=@SESL+1,RDTPAR=@RDTPC+1,BRUT=@RDTPAR+1,
          BRUT1=@BRUT+1;
          DECLARE G10=@BRUT1+1,SPENTRY=@G10+2,SAVEG=@SPENTRY+2;
          DECLARE INIT'POP=@SAVEG+1←4B4,START'POP=@INIT'POP+1←14B4,
          FREE'POP=@START'POP+1←0;
          DECLARE ARRAY MIBA=@FREE'POP+1,MIBB=@MIBA+2,
          SPT'=@MIBB+2,OFT'=@SPT'+2,SPCS'=@OFT'+2,
          ICT'=@SPCS'+2,APT'=@ICT'+2;* SPT'-APT' MUST BE IN GIVEN SEQUENCE
          DECLARE CSP=@APT'+2;
          DECLARE SPCSL=@CSP+1;
          DECLARE MAPCYCLE=@SPCSL+1,
          OA=@MAPCYCLE+1,TOP=@OA+1;
          DECLARE MIBARST=@TOP+1,MIBARE=@MIBARST+(NPMTE-1)/24;
          DECLARE NIT=@MIBARE+1,MIBPMT=@NIT+1;
          DECLARE MIBPMTA=@MIBPMT+1,MIBPMTB=@MIBPMTA+1;
*
*
*           GLOBAL VARIABLES IN CONTEXT BLOCK
*
*   PROFILE FOR USER
*
          DECLARE CBVERS=@MIBPMTB+1;* CONTEXT BLOCK VERSION
          DECLARE UTTY=@CBVERS+1;* TTY LINE NUMBER
          DECLARE ATTY=@UTTY+1;*  ATTACHED TTY LINE NUMBER
          DECLARE PRUNO=@ATTY+1;* PROCESS USER NUMBER
          DECLARE MIBDKA=@PRUNO+1;* DISK ADDRESS OF MIB BELONGING TO PRUNO
          DECLARE PRANO=@MIBDKA+1;* PROCESS ACCOUNT NUMBER
          DECLARE PRGRNO=@PRANO+1;* PROCESS GROUP NUMBER
          DECLARE PRTI=@PRGRNO+1;* PRT INDEX OF PROCESS
          DECLARE LONG PRCT=@PRTI+1;* COMPUTE TIME USED BY PROCESS
          DECLARE PRCTT=@PRCT+2;* COMPUTE TIME LOADED IN OTI
           DECLARE NEXT'CTIMER=@PRCTT+1;* NEXT C-TIME CLOCK TO GO OFF
           DECLARE ICT'TIMERS=@NEXT'CTIMER+1;* BIT J=1 => ICT[J] TIMING
           DECLARE NITIMER=@ICT'TIMERS+1;* IF N/I ON BUT NOT IN ICT
           DECLARE CTIME=@NITIMER+1;* TO REPLACE PRCTT ABOVE
           DECLARE WW'MASK=@CTIME+1;* WAKEUP WAITING MASK IN "BLOCK"
           DECLARE DORMCD=@WW'MASK+1;* BECOME DORMANT
          DECLARE OPPROC=@DORMCD+1;* PROCESS OPEN FOR MODIFICATION
*
*   APT VARIABLES
*
          DECLARE LTBW=@OPPROC+1;* NUMBER OF PAGES IN TBW
          DECLARE OLDEST'CWS=@LTBW+1;* APT PTR TO OLDESS CWS ENTRY
          DECLARE MUMBLE=@OLDEST'CWS+1;* APT AGING CONTROL WORD
          DECLARE LCWS=@MUMBLE+1;* NUMBER OF PAGES IN CWS
          DECLARE LDWS=@LCWS+1;* NUMBER OF PAGES IN DWS
          DECLARE MLCWS=@LDWS+1;* MAXIMUM LEGAL VALUE OF LCWS
          DECLARE MLDWS=@MLCWS+1;* MAXIMUM LEGAL VALUE OF LDWS
          DECLARE OLCWS=@MLDWS+1;* OVERFLOW LENGTH OF CWS
          DECLARE OLDWS=@OLCWS+1;* OVERFLOW LENGTH OF DWS
*
*   MISCELLANEOUS
*
          DECLARE PIWE=@OLDWS+1;* SYSTEM COPY OF PIW
          DECLARE ACSPT=@PIWE+1;* ACTIVE SPT ENTRIES
          DECLARE TPAR=@ACSPT+1;* PARAMETER FOR FIXED TRAPS
          DECLARE RDTLR=@TPAR+1;* LR SAVED HERE DURING TRAP PROCESSING
          DECLARE PMT'PTR=@RDTLR+1;* PTR FOR USE IN SEARCHING PMT
          DECLARE PNIC'COUNT=@PMT'PTR+1;* USED BY PNIC'TRAP
          DECLARE PAGE'FAULTS=@PNIC'COUNT+1;* PAGE FAULT COUNTER FOR PROCESS
          DECLARE SPARE=@PAGE'FAULTS+1;
          DECLARE SPSTATE ← @SPARE+1;* STATE STORED HERE BY SP'CALL, ETC.
          DECLARE STKOV'LE = SPSTATE+10;* SPACE FOR LOCAL ENVIRONMENT
*                                         OF STKOV'TRAP
*
*   CB VARIABLE INITIALIZATION
*     SEE APT'INIT FOR INITIALIZATION OF LCWS, LDWS, ETC.
*
          DECLARE POP2'=POP2←SESS;
          DECLARE SESP'=SESP←SESS, SESL'=SESL←SESE;
          DECLARE CSP'=CSP←1;
          DECLARE MAPCYCLE'=MAPCYCLE←MMAPA;
          DECLARE PRUNO'=PRUNO←1,PRANO'=PRANO←1;
          DECLARE PRGRNO'=PRGRNO←1;
          DECLARE PRTI'=PRTI←1,ACSPT'=ACSPT←2;
          DECLARE ATTY'=ATTY←-1;
          DECLARE MIBDKA'=MIBDKA←MIB0DKA;
          DECLARE INIT'PC=SWSTATE←@INIT'POP;
          DECLARE INIT'GR=SWSTATE+STGR$FDDISP←M'G;
          DECLARE ITIMER'=ITIMER←INITIAL'QUANTUM;
          DECLARE PRCTT'=PRCTT←INITIAL'QUANTUM;
*
*    PMT INITIALIZATION
*
          DECLARE PMTPTR'=PMT'PTR←1;
          MACRO SETPMT(L,I,R,FP,NC,RO,RF,SF,CCE,NA)←
          DECLARE LONGLONG L=PMTS+LPMTE*(I-1)+M'G←
          (RNX(R) V' FP@PMTFP V' NC@PMTNC, RO@PMTRO V' RF@PMTRF V'
          SF@PMTSF V' CCE@PMTCCE V' NA@PMTAL V' NA@PMTCL);
*
*   RESIDENT TABLES
*
          SETPMT(PMT1',RT0PMT,RT0RN,1,1,0,0,1,0,1);
          SETPMT(PMT2',RT1PMT,RT1RN,1,1,0,0,1,0,1);
          SETPMT(PMT3',RT2PMT,RT2RN,1,1,0,0,1,0,1);
          SETPMT(PMT4',RT3PMT,RT3RN,1,1,0,0,1,0,1);
*
*   MONITOR CODE
*
          SETPMT(PMT5',MCP0PMT,MCP0RN,1,1,1,0,1,0,1);
          SETPMT(PMT6',MCP1PMT,MCP1RN,1,1,1,0,1,0,1);
          SETPMT(PMT7',MCP2PMT,MCP2RN,1,1,1,0,1,0,1);
          SETPMT(PMT8',MCP3PMT,MCP3RN,1,1,1,0,1,0,1);
          SETPMT(PMT9',MCP4PMT,MCP4RN,1,1,1,0,1,0,1);
          SETPMT(PMT10',MCP5PMT,MCP5RN,1,1,1,0,1,0,1);
          SETPMT(PMT11',MCP6PMT,MCP6RN,1,1,1,0,1,0,1);
          SETPMT(PMT12',MCP7PMT,MCP7RN,1,1,1,0,1,0,1);
          SETPMT(PMT13',MCP8PMT,MCP8RN,1,1,1,0,1,0,1);
          SETPMT(PMT14',MCP9PMT,MCP9RN,1,1,1,0,1,0,1);
*
*   MIB0
*
          SETPMT(PMT15',MIB0PMT,MIB0RN,1,0,0,0,1,0,1);
*
*   UTILITY CODE
*
          SETPMT(PMT16',UCP0PMT,UCP0RN,1,1,0,0,1,0,2);
          SETPMT(PMT17',UCP1PMT,UCP1RN,1,1,1,0,1,0,2);
          SETPMT(PMT18',UCP2PMT,UCP2RN,1,1,1,0,1,0,2);
          SETPMT(PMT19',UCP3PMT,UCP3RN,1,1,1,0,1,0,2);
          SETPMT(PMT20',UCP4PMT,UCP4RN,1,1,1,0,1,0,2);
          SETPMT(PMT21',UCP5PMT,UCP5RN,1,1,1,0,1,0,2);
*
*   CONTEXT BLOCK
*
          SETPMT(PMT22',CB0PMT,CB0RN,1,0,0,0,1,0,1);
*
*  MAP INITIALIZATION
*
          MACRO MAPI(L,I,A,B,C,D) ←
          DECLARE L=MAPS+M'G+I←
          ((A@PRMRO V' B@PRMPMT) LSH 12) V' (C@PRMRO V' D@PRMPMT);
          MAPI(MA1',48,0,CB0PMT,1,MCP0PMT);
          MAPI(MA2',49,1,MCP1PMT,1,MCP2PMT);
          MAPI(MA3',50,1,MCP3PMT,1,MCP4PMT);
          MAPI(MA4',51,1,MCP5PMT,1,MCP6PMT);
          MAPI(MA5',52,1,MCP7PMT,1,MCP8PMT);
          MAPI(MA9',53,1,MCP9PMT,0,0);
          MAPI(MA10',54,0,0,0,RT0PMT);
          MAPI(MA11',55,0,RT1PMT,0,RT2PMT);
          MAPI(MA12',56,0,RT3PMT,0,0);
          MAPI(MA13',57,0,MIB0PMT,0,0);
*
*  SPT INITIALIZATION IS DONE IN SPT1'INIT.
*
*
*  APT INITIALIZATION IS DONE IN APT'INIT
*

          END;

          COMMON SPCSD;
          INCLUDE PROFILE;
          DECLARE OCTAL ARRAY SPCS[NSPCSE:LSPCSE,SPCSS+M'G]=@SPCS';
          DECLARE FIXED FIELD
          NIS(0:0,0),     /*NON-INTERRUPTABILITY SET*/
          NIC(0:1,1),     /*NON-INTERRUPTABILITY COPIED*/
          NISC(0:0,1),    /*NON-INTERRUPTABILITY SET OR COPIED*/
          CSCSP(0:2,5),   /*SPT INDEX OF CURRENT SUB-PROCESS*/
          CSPC(0:6,23),   /*SAVED P COUNTER*/
          CS940M(1:0,0),  /*940 MODE FLAG*/
          CSR0SP(1:2,5),  /*SPT INDEX OF USER MAP*/
          CSLR(1:6,23),   /*SAVED L REGISTER*/
          CSR1SP(2:2,5),  /*SPT INDEX OF UTILITY MAP*/
          CSGR(2:6,23);   /*SAVED G REGISTER*/
          DECLARE FIXED LONG FIELD
          CSNIET(3:0,23);* NON-INTERRUPTABILITY EXPIRATION TIME

          END;

          COMMON FLS;
*   OFT DECLARATIONS;
          INCLUDE PROFILE;
          MACRO BLOCKM(A,B,C)←BCOPY(B,A,C);
          MACRO I'←INTEGER;
          DECLARE ARRAYONE OFT[OFTL:5,OFTS+M'G]=@OFT';
          DECLARE MIBAR'←(NPMTE-1)/24+1;
          DECLARE ARRAY MIBAR[MIBAR':,@MIBARST]←(0);
*
*  INITIALIZE RESERVED PMT ENTRIES
*
          DECLARE ARRAY MIBAR[(MIB0PMT-1)/24]←4B7 RSH ((MIB0PMT-1) MOD 24);
          DECLARE FIXED FIELD TYPE(2:0,3), OFTAL(0:15,23), OFTCL(1:15,23),
          OFTIB(2:8,15), OFTMIB(2:16,23), OFTUN1(3:0,23),
          OFTUN2(4:0,23), OTI(0:6,12), OFTMOD(0:5,5),
          LONG FIELD OFTUNL(3);
*   MIB DECLARATIONS;
          DECLARE   UPRL←32;* USER PROFILE LENGTH;
          DECLARE   OBTL←128;* OBJECT TABLE LENGTH;
          DECLARE   LLKL←16;* MAX LENGTH OF LOCKLIST ON OBJECT;
          DECLARE   MAXP←128;* MAX NO OF PAGES IN FILE;
*
          DECLARE   OBT←UPRL, OBTE←OBT+OBTL-1;
          DECLARE   SIBS←OBTE+1, SIBE←2047;
*
          DECLARE FLK←6;*LOCK LIST DISPLACEMENT;
          DECLARE FDA←8;* FILE OVERHEAD
          DECLARE PRMLK←5, PROLK←3;* TIMING FOR OPEN PROCESS
          DECLARE SFILET←0,LFILET←1,PROCT←2,FRIENDT←6,MIBACKT←5,
          ACKT←3,SACKT←ACKT+20B,REST←4,GARBT←8;
          DECLARE MAXLP←1999;
          DECLARE FIXED FIELD ACKFR(0:9,9);* ACCESS KEY FROZEN BIT
          DECLARE FIXED LONG FIELD LF0(0);
*  PROCESS DECLARATIONS
          DECLARE FIXED FIELD PROCST(3:0,2),
          PROCI(3:3,3), PROCPRT(3:12,23),
          PROCUN1(0:0,23), PROCUN2(1:0,23),
          PROCDKA(2:2,23), PROCMOD(4:0,23), LONG FIELD PROCUNL(0);
          DECLARE FIXED FIELD   U(0:0,0), R(0:1,1),W(0:2,2),
          X(0:3,3), O(0:4,4),
          T(0:1,4), RWXO(0:1,4);
          DECLARE FIXED FIELD   LV1(0:10,23), LV2(1:0,23),
          SIBA(0:13,23),PFOF(5:16,19),PFOO(5:20,23),
          SIBL(0:5,12), PFO(5:12,23),PFOP(5:12,15);
          DECLARE FIXED FIELD LKL(5:4,11), S(5:0,0),DU(5:1,2),
          WD2(2:0,23), FLEN(2:13,23),FLEN1(2:2,12);
          DECLARE FIXED FIELD DFW(3),DFR(4),DFS(5);
*   MIB DECLARATIONS FOR UPRL;
          DECLARE   MIBVER←0;
          DECLARE   MIBUN←1;
          DECLARE MIBAN←2;* USER ACCOUNT NUMBER
          DECLARE MIBGR←3;* USER GROUP NUMBER
          DECLARE MIBSYS'←4;* SYSTEM OWNER
          DECLARE MIB'CLEANUP'TIME←5;* CLEANUP TIME FOR MIB
          DECLARE UNIQUE'NAME←6;* UNIQUE NAME GENERATOR
          DECLARE DISKAC1←7, DISKAC2←DISKAC1+1;* DISK CHARGES
          DECLARE DISKAD1←DISKAC2+1, DISKAD2←DISKAD1+1;* LAST DATE BILLED
          DECLARE DISK'RESOURCES←DISKAD2+1;* DISK PAGES AVAIL. TO USER
          DECLARE DISK'USED←DISK'RESOURCES+1;* DISK PAGES USED BY MIB
          DECLARE DISK'CHARGE'TIME←DISK'USED+1;* LAST TIME CHAR. WERE UPD.
          DECLARE MCW←DISK'CHARGE'TIME+1;* MIB CAPABILITY WORD
*
*  OFT[1] INITIALIZATION
*
          DECLARE OFT1'=OFTS+M'G←1@U V' 17B@RWXO V' 2@OFTAL,
          OFT2'=@OFT1'+1←2@OFTAL,
          OFT3'=@OFT2'+1←ACKT@TYPE,
          OFT4'=@OFT3'+1←0,
          OFT5'=@OFT4'+1←1;

          END;

          COMMON RESMON;
          INCLUDE PARD,GLOBAL,DKAL;
          DECLARE RESM←RT0MAP*2048;
          DECLARE SRMEM←RESM+5,CPU0←RESM+6,CPU1←RESM+7,
          RTC←RESM+10B, USITOP←RESM+15B,
          RTQUEUE←RESM+16B,
          RTCL←RESM+12B, CPUIT←RESM+40B;
          DECLARE WAKEUPQ←RESM+300B;
          DECLARE PRTB←302B+RESM;
          DECLARE MSCHQ←310B+RESM;
          DECLARE ITPREL←306B+RESM, ITPBND←307B+RESM;
          DECLARE ORTC0←RESM+337B;
          DECLARE SCHEDQ←340B+RESM;
          DECLARE USIB←2420B+RESM;* MICRO SCHED STACK
          DECLARE AMCSTATE←2500B+RESM;* AMC STATE
          DECLARE MSSTATE←2620B+RESM;* MICRO SCH. STATE
          DECLARE CHIOSTATE←2740B+RESM;* CHIO STATE
          DECLARE TSUD←3200B+RESM;* TSU DUMP FOR DIRECT I/O
*
*  SET REAL TIME CLOCK BASE
*
          DECLARE LONG RTC'BASE←(0,0);
*
*  INITIAL AUXILIARY MEMORY DEVICES
*
       DECLARE DR0←1*10B, DR1←0*4B, DK0←0*200B, DK1←0*100B;
*
*  AMC STORAGE DECLARATIONS
*
          DECLARE ACTL ← RESM+100B, AMCQ ← 102B+RESM, SWAPRQ ← 104B+RESM,
          SWAPIN ← RESM+106B, SWFREL ← RESM+110B, FCL ← 112B+RESM;
          DECLARE RIPQ ← RESM+114B, CTXQ ← RESM+116B, WRTQ ← 120B+RESM,
          NFCL ← RESM+122B, CLBUF ← RESM+126B, ERPROC ← RESM+124B,
          NFSWQN ← RESM+123B;
          DECLARE ROFN ← RESM+125B, KSQ ← 136B+RESM, NKTER ← RESM+152B,
          NCTX ← RESM+153B, NPR ← RESM+154B, DSRLB ← RESM+155B,
          DFBTB ← RESM+156B, KCQB ← RESM+160B, DIOQ←RESM+162B;
          DECLARE AMCREL ← RESM+157B,LKCQB←RESM+161B;
          DECLARE STAPUFLAG←RESM+164B, NPAGSW←RESM+165B,
                   NPAGQ←RESM+166B;* FOR AMC 1.03
          DECLARE NDMPG ← RESM+170B;* NUMBER OF DRUM PAGES NOT IN USE
          DECLARE DIOLK ← RESM+171B;* DIRECT I/O DUMP LOCK
*  SIZES OF AMC THINGS
          DECLARE DHTL ← 1277, /* DHT LENGTH*/
          SWFL ← 64, /* NO. OF FREE NODE ENTRIES*/
          MAXPRO←1;* MAXIMUM NO. OF PROCESSES TO SWAP
*
*  CORE LAYOUT ARRAY FOR INITIALIZING DISK OR DRUM
*
          DECLARE ARRAY DMP'AR[32]←(
          0,1,2,3,4,5,6,7,8,9,10,11,
          12,13,14,15,16,17,18,19,20,21,22,
          23,24,25,26,27,28,29,30,31);
          DECLARE ARRAY DMP'AR[RT0CPA]←RT0CPA'COPY;
          DECLARE ARRAY DMP'AR[CB0CPA]←CB0CPA'COPY;

*
*   RESIDENT NON-FIXED TABLES
*
          DECLARE PRTL←32;
          DECLARE CORES←64;* 64 PAGES OF REAL CORE
          DECLARE CHTS ← RESM+400B, CHTS2 ← RESM+1000B;
          DECLARE DRBT ← RESM + ORIG(1600B,8)+1;* =1601B;
          DECLARE MIBDKA'ARRAY'ST ← RESM + 2200B;
*
*  PRT HAS TO FALL ON 4 WORD BOUNDARY
*
          DECLARE PRTS ← ORIG(3300B,4) + RESM;
          DECLARE SWFRE ← PRTS + 12*PRTL;
          DECLARE KCQST ← SWFRE + SWFL*6;
          DECLARE DSRLST ← KCQST + TRACKA;
          DECLARE DRUML ← DSRLST + 64;* LAST UNASS. DRUM ALLOCATION
*
*   INITIAL DRUM/DISK BAND ALLOCATION
*
          DECLARE LONGLONG INIT'DRM'BANDS←
             (0,77777700B,0,0);* TOP HALF OF DRUM 0 ONLY
          DECLARE LONGLONG INIT'DSK'BANDS←
             (0,377B,-1,77600000B);
*
*  BASIC CHARACTER I/O PARAMETERS
*
          DECLARE
          NCLP ← 40,   /*NUMBER OF INPUT/OUTPUT LINE PAIRS*/
          NCDT ← 5,    /*NUMBER OF DEVICE TYPES*/
          NLBSD ← 16,  /*NUMBER OF LOCAL BIT-SCANNED DEVICES*/
          NL24D ← 4,   /*NUMBER OF LOCAL 2400-BAUD DEVICES*/
          NCBUF ← 64;  /*NUMBER OF CHARACTER BUFFERS*/
*  SIZES OF CHIO THINGS
          DECLARE
          LMTAE ← 4,   /*LENGTH OF A MAIN LINE TABLE ENTRY*/
          LMTCE ← 3,   /*LENGTH OF A CHARACTER POINTER TABLE ENTRY*/
          LDVTBE ← 36, /*LENGTH OF A DEVICE TABLE ENTRY*/
          LLDVTE ← 2,  /*LENGTH OF A LOW SPEED DEVICE BUFFER TABLE ENTRY*/
          LLB24E ← 2,  /*LENGTH OF A LOCAL 2400-BAUD LINE TABLE ENTRY*/
          LLBTBE ← 16, /*LENGTH OF A LOCAL DEVICE BIT TABLE ENTRY*/
          LCBUF ← 8,   /*LENGTH OF A CHARACTER BUFFER*/
          LBUF0 ← 8;   /*LENGTH OF BUFFER 0*/
*  BASE ADDRESSES OF CHIO TABLES
          DECLARE
          MTAS ← ORIG(DRUML, 4),
          MTCS ← ORIG(MTAS+LMTAE*NCLP, 2)+1,
          DVTBS ← ORIG(MTCS+LMTCE*2*NCLP, 4),
          LDVTS ← ORIG(DVTBS+LDVTBE*NCDT, 2),
          LB24S ← ORIG(LDVTS+LLDVTE*NLBSD, 2),
          LBTBS ← ORIG(LB24S+LLB24E*NL24D, 16),
          BUF0S ← ORIG(LBTBS+LLBTBE*(NCDT-1), 32),
          CHIOL ← BUF0S+LBUF0+LCBUF*NCBUF;*LAST UNASS. CHIO LOC.
*
          DECLARE DAST ← CHIOL;* DISK BIT TABLE START
          DECLARE DHTST ← DAST + MAXDK/24 + 1;
          DECLARE DHTEND ← DHTST + DHTL*3;
          DECLARE LCHTE ← 6;
          DECLARE ARRAY CHT[256:,CHTS];
          DECLARE ARRAY CHT2[CORES:LCHTE,CHTS2];
          DECLARE ARRAY DHT1[DHTL:,DHTST],DHT2[DHTL:2,DHTST+DHTL];
          DECLARE ARRAY PRT[PRTL:12,PRTS];
***  ARRAY OF MIB DISK ADDRESSES
           DECLARE ARRAYONE MIBDKA'ARRAY[NUMBER'MIBS:,MIBDKA'ARRAY'ST]
                                       ← (MIB0DKA);

*
*  PRT DECLARATIONS
*
          DECLARE FIXED LONG FIELD PRUNL(0);
          DECLARE FIXED FIELD PRUN1(0),PRUN2(1),
          PRACT(2:0,0),PRDK(2:2,23),PRPIW(3),PRDOR(3:20,20),
          PRSE(4),PRSW(5),PRACTE(5:0,5),
          PRAPT(6:0,5),PRRTP(6:6,23),PRRT(7:1,23),
          PRMCT(8:0,7),PRPRI(8:8,10),PRPGF(8:11,11),PRBLK(8:12,12),
          PRWAQ(8:13,13),PRSWQ(8:17,17),PRSCQ(8:18,18),PRCPU(8:23,23),
          PRNIN(9:0,0),PRPRD(9:1,1),PRSPRI(9:2,2),PRNQTA(9:3,9),
          PRPIET(9:10,23),PRWGHT(10:0,5),PRCIET(10:6,23),
          PRPTR(11:6,23);

          END;

          COMMON PAGE0;
*
*  PAGE0 INITIALIZATION
*
          INCLUDE RESMON,CHTD;
          DECLARE LONG USIBASE'=RESM+14B←(USIB-RESM,USIB-RESM+2);
          DECLARE LONG FUSIB'=USIB+2←(1B6+PRTS+12-RESM,0);
          DECLARE AMC'ST=RESM+20B←1000B;
          DECLARE CHIO'ST=RESM+22B←2;
          DECLARE MICR'ST=RESM+21B←120B;
          DECLARE AMC'BRK = 25B+RESM ← 12343210B;
          DECLARE RTQUEUE'=RTQUEUE←1B6-1;
*
*  CHIO INITIALIZATION
*
       DECLARE CTP'REL=RESM+306B←2B6;
       DECLARE CTP'BND=RESM+307B←4B4;
*
*
*
          MACRO HEAD'(A,C)←DECLARE LONG A=C←(1B6-1,C-5-RESM);
*
*  SWAPPER INITIALIZATION
*
          DECLARE AMCREL'=AMCREL←AMC'PG1'CPA*2048;
          HEAD'(AMCQ',AMCQ); HEAD'(SWAPRQ',SWAPRQ);
          HEAD'(SWAPIN',SWAPIN);
          DECLARE SWFREL'=SWFREL←1B6-1,SWFREL''=SWFREL+1←SWFREL-RESM;
          HEAD'(RIPQ',RIPQ); HEAD'(CTXQ',CTXQ);
          HEAD'(WRTQ',WRTQ); HEAD'(CLBU1',CLBUF);
          HEAD'(CLBU2',CLBUF+2); HEAD'(CLBU3',CLBUF+4);
          HEAD'(CLBU4',CLBUF+6); HEAD'(KSQ1',KSQ);
          HEAD'(KSQ2',KSQ+2); HEAD'(KSQ3',KSQ+4);
          HEAD'(KSQ4',KSQ+6); HEAD'(KSQ5',KSQ+8);
          HEAD'(KSQ6',KSQ+10); HEAD'(DIOQ',DIOQ);
          HEAD'(NPAGQ',NPAGQ);
          DECLARE NFSWQ'=NFSWQN←SWFL;
          DECLARE DSRLB'=DSRLB←DSRLST-RESM;
          DECLARE DFBTB'=DFBTB←DRBT-RESM-1;
          DECLARE STAPUFLAG' = STAPUFLAG←0;
          DECLARE KCQB'=KCQB←KCQST-RESM,LKCQB'=LKCQB←KCQST-RESM-1+TRACKA;
*
*  MICRO SCHEDULER INITIALIZATION
*
          DECLARE MSCHQ'←MSCHQ-RESM;
          DECLARE SCHEDQ'←SCHEDQ-RESM;
          DECLARE LONG WAKEUPQ'=WAKEUPQ←(1B6-1,WAKEUPQ-RESM-11);
          DECLARE ARRAY MSCHQS[8:2,MSCHQ] ←
             ((1B6-1,MSCHQ'-11),(1B6-1,MSCHQ'-9),
               (1B6-1,MSCHQ'-7),(1B6-1,MSCHQ'-5),
               (1B6-1,MSCHQ'-3),(1B6-1,MSCHQ'-1),
               (1B6-1,MSCHQ'+1),(1B6-1,MSCHQ'+3));
          DECLARE ARRAY SCHEDQS[2:2,SCHEDQ] ←
             ((1B6-1,SCHEDQ'-11),(1B6-1,SCHEDQ'-9));

*
*  CHT2,CHT1 DECLARATIONS
*
          MACRO CHTI(L,A,B,C)←DECLARE LONGLONG L=CHTS2+B*6←
          (RNX(A),1@CD V' B@CPG V' C@CSCH);
          MACRO CHTI1(L,A,B)←DECLARE LONG L=CHTS2+B*6+4←(0,1B6-1+A@CPL);
          CHTI(C1',RT0RN,RT0CPA,30B); CHTI1(C1A',40B,RT0CPA);
          CHTI(C2',RT1RN,RT1CPA,30B); CHTI1(C2A',40B,RT1CPA);
          CHTI(C3',RT2RN,RT2CPA,30B); CHTI1(C3A',40B,RT2CPA);
          CHTI(C4',RT3RN,RT3CPA,30B); CHTI1(C4A',40B,RT3CPA);
          CHTI(C5',MCP0RN,MCP0CPA,30B); CHTI1(C5A',40B,MCP0CPA);
          CHTI(C6',MCP1RN,MCP1CPA,30B); CHTI1(C6A',40B,MCP1CPA);
          CHTI(C7',MCP2RN,MCP2CPA,30B); CHTI1(C7A',40B,MCP2CPA);
          CHTI(C8',MCP3RN,MCP3CPA,30B); CHTI1(C8A',40B,MCP3CPA);
          CHTI(C9',MCP4RN,MCP4CPA,30B); CHTI1(C9A',40B,MCP4CPA);
          CHTI(C10',MCP5RN,MCP5CPA,30B); CHTI1(C10A',40B,MCP5CPA);
          CHTI(C11',MCP6RN,MCP6CPA,30B); CHTI1(C11A',40B,MCP6CPA);
          CHTI(C12',MCP7RN,MCP7CPA,30B); CHTI1(C12A',40B,MCP7CPA);
          CHTI(C13',MCP8RN,MCP8CPA,30B); CHTI1(C13A',40B,MCP8CPA);
          CHTI(C14',MCP9RN,MCP9CPA,1); CHTI1(C14A',0,MCP9CPA);
          CHTI(C15',CB0RN,CB0CPA,1); CHTI1(C15A',0,CB0CPA);
          CHTI(C16',UCP0RN,UCP0CPA,1); CHTI1(C16A',0,UCP0CPA);
          CHTI(C17',UCP1RN,UCP1CPA,1); CHTI1(C17A',0,UCP1CPA);
          CHTI(C18',UCP2RN,UCP2CPA,1); CHTI1(C18A',0,UCP2CPA);
          CHTI(C19',UCP3RN,UCP3CPA,1); CHTI1(C19A',0,UCP3CPA);
          CHTI(C20',UCP4RN,UCP4CPA,1); CHTI1(C20A',0,UCP4CPA);
          CHTI(C21',UCP5RN,UCP5CPA,1); CHTI1(C21A',0,UCP5CPA);
          CHTI(C22',MIB0RN,MIB0CPA,1); CHTI1(C22A',0,MIB0CPA);
          CHTI(C23',AMC'PG1'RN,AMC'PG1'CPA,30B);
          CHTI1(C23A',40B,AMC'PG1'CPA);
          CHTI(C24',AMC'PG2'RN,AMC'PG2'CPA,30B);
          CHTI1(C24A',40B,AMC'PG2'CPA);
*
*  PRT INITIALIZATION
*
          DECLARE PRTB'=PRTB ← PRTS-RESM;
          DECLARE LONGLONG P1'=PRTS+12←(RNX(CB0RN)+1@PRACT,0);
          DECLARE LONGLONG P2'=PRTS+12+4←(0,0,0,0);
          DECLARE LONGLONG P3'=PRTS+12+8←(10B,0,0,1B6-1);
*
*

          END;

          COMMON MICROSD;
*
*  MICROPROCESSOR STATE INITIALIZATIONS
*
        INCLUDE RESMON;
*
*  MICRO SCHEDULER INITIALIZATION
*
          DECLARE ARRAY MSA'[32:,MSSTATE]←
          (4B7,0,0,4B7-1,4B7,PRTS-RESM,PRTS+12*PRTL-12-RESM,0,
          0,0,0,1B6-1,0,0,4B7,4B7,
          10B,0,0,0,0,0,0,0,
          10001B,0,0,0,5B7,0,2B6,40000B);
          DECLARE MSR6'=RESM+2666B←27B;* MICRO SCHED. STACK PTR.

*   CHIO SCRATCHPAD INITIALIZATION.  SEE DOCUMENT FOO/S-2.1, PP. 23-24.
          DECLARE
          MTAA←1, MTCA←2,LDVTA←3, XLINE←4,
          ICC←5, DVTBA←6, OUTCC←7, CPUFLAG←12,
          BFLAG←14, LBTBA←28, NCI←32, LCI←37,
          FREEL←41, AVB←42, PRB←44, MP←45,
          PLINE←46, OBITS←47, MAXFB←49, MINFB←50,
          UPAM←51, BUF0←53, LB24T←60, CTPP←123, CTPMODE←124,
          CTPIO←125, CTPREL←126, CTPBND←127;
          DECLARE OCTAL ARRAY CSK[128:,CHIOSTATE]←(0);
          DECLARE OCTAL ARRAY
          CSK[MTAA]←MTAS-RESM, CSK[MTCA]←MTCS-RESM,
          CSK[LDVTA]←LDVTS-RESM, CSK[XLINE]←2*NCLP-1,
          CSK[ICC]←0, CSK[DVTBA]←DVTBS-RESM,
          CSK[OUTCC]←0, CSK[CPUFLAG]←0,
          CSK[BFLAG]←4B7, CSK[LBTBA]←LBTBS-RESM,
          CSK[NCI]←(00B6,04B6,1B7,20B6,24B6),
          CSK[LCI]←3B7,
          CSK[FREEL]←LBUF0+LCBUF*(NCBUF-1),
          CSK[AVB]←-1, CSK[PRB]←0,
          CSK[MP]←64 LSH 16, CSK[PLINE]←0,
          CSK[OBITS]←-1, CSK[MAXFB]←NCBUF/2,
          CSK[MINFB]←NCBUF/4, CSK[UPAM]←100,
          CSK[BUF0]←BUF0S-RESM,
          CSK[LB24T]←LB24S-RESM, CSK[CTPP]←4, CSK[CTPMODE]←1,
          CSK[CTPIO]←0, CSK[CTPREL]←2B6, CSK[CTPBND]←40000B;
*
*  AMC SCRATCHPAD INITIALIZATION
*
          DECLARE ARRAY AMC'ST[64:,AMCSTATE]←(0,0);
          DECLARE ARRAY AMC'ST[1]←(10000B,AMC'PG1'CPA*2048);
          DECLARE ARRAY AMC'ST[17B]←(DHTST-RESM,DHTST+DHTL-RESM,DHTL);
          DECLARE ARRAY AMC'ST[23B] ← DR0+DR1+DK0+DK1;
          DECLARE ARRAY AMC'ST[42B] ← (10B, DSRLST-RESM, -1);
          DECLARE ARRAY AMC'ST[54B] ← DRBT-RESM-1;


          END;

          COMMON ICTD;
*
*               ICT DECLARATIONS
*
          INCLUDE PROFILE,FLS;
          DECLARE FIXED FIELD  BLK(0:11,11), CLICT(0:15,23),
          SOURCE(0:0,2), ACTION (0:3,5);
          DECLARE FIXED FIELD   SPEC(0:6,10), DAT0(1:0,23),
          DAT1(2:0,23);
          DECLARE FIXED LONG FIELD TDAT(1);
          DECLARE  ICTE←ICTL-1,MAXTIM←12000;
          DECLARE  ARRAY ICTC[ICTL]←(0,0,0,
          'CO', 'ES', 'QT','AMC', 'CHI',0,0,
          0, 0, 0,0,0,0,0,0);
          DECLARE ARRAY ICT[ICTL:3,ICTS+M'G]=@ICT';
          DECLARE FIXED FIELD QUIT'CHR(0:5,5),IO(0:7,7);
          DECLARE FIXED FIELD RT(0:23,23),RSI(0:22,22);
          DECLARE FIXED FIELD RAP(0:21,21),DOR(0:20,20),AMCB(0:6,6);
          DECLARE AMC←1@AMCB;
          DECLARE RESPIW←AMC+4B7+77B;* RESERVED PIW BITS
*
*  ICT[0] INITIALIZATION
*
          DECLARE ICT'0'=ICTS+M'G←20010001B;* SOURCE=2, BLK=1, CL=1
          DECLARE ICT'6'=ICTS+M'G+6*3←00010001B;* AMC BLK=1,CL=1

          END;

          COMMON APTD;
*
*  DECLARATIONS FOR ACTIVE PAGE TABLE
*
          INCLUDE GLOBAL,PROFILE, PARD;

          DECLARE NAPTE←APTL-1, AGEPAR1 ← 4;
          DECLARE OCTAL ARRAY APT[APTL:,APTS+M'G]=@APT';
          DECLARE FIXED FIELD
          APTPGL(0:0,2),     /*PAGE LOCKED IN CORE*/
          APTLOCK(0:3,3),    /*LOCK PAGE IN CWS/DWS*/
          APTUH(0:4,11)=FDK1,/*USE HISTORY*/
          APTLOCKS(0:0,11)=FDK2,/*LOCKS AND USE HISTORY*/
          APTDWS(0:12,12),   /*PAGE IS IN DRUM WORKING SET*/
          APTCWS(0:13,13),   /*PAGE IS IN CORE WORKING SET*/
          APTNPG(0:14,14),   /*PAGE IS NEW PAGE*/
          APTPMT(0:16,23)=FDK3;/*POINTER TO PAGE NAME IN PMT*/
          DECLARE LAPTUH ← APTUH$FDSIZE;

          END;

          COMMON APT'INIT;
          INCLUDE APTD;
*  APT INITIALIZATION
          DECLARE MLCWS'=MLCWS←40, MLDWS'=MLDWS←64;
          DECLARE OLCWS'=OLCWS←8, OLDWS'=OLDWS←32;
          DECLARE LCWS'=LCWS←8,LDWS'=LDWS←8;
          DECLARE OCTAL ARRAY APT[APTL:,APTS+M'G]=@APT';
          DECLARE OCTAL ARRAY APT[APTL-8]←
          (MIB0PMT@APTPMT V' (-1)@APTUH V' 1@APTDWS V' 1@APTCWS,
          UCP0PMT@APTPMT V' (-1)@APTUH V' 1@APTDWS V' 1@APTCWS,
          UCP1PMT@APTPMT V' (-1)@APTUH V' 1@APTDWS V' 1@APTCWS,
          UCP2PMT@APTPMT V' (-1)@APTUH V' 1@APTDWS V' 1@APTCWS,
          UCP3PMT@APTPMT V' (-1)@APTUH V' 1@APTDWS V' 1@APTCWS,
          UCP4PMT@APTPMT V' (-1)@APTUH V' 1@APTDWS V' 1@APTCWS,
          UCP5PMT@APTPMT V' (-1)@APTUH V' 1@APTDWS V' 1@APTCWS,
          CB0PMT@APTPMT V' (-1)@APTUH V' 1@APTDWS V' 1@APTCWS);
*

          END;

          COMMON SWPD;
*
          INCLUDE RESMON;
*   FIELDS IN AN AMC REQUEST NODE
          DECLARE FIXED FIELD
          SWUN1(0:0,23),   /*FIRST WORD OF UNIQUE NAME*/
          SWUN2(1:0,23),   /*SECOND WORD OF UNIQUE NAME*/
          SWDKA(2:2,23),   /*DISK ADDRESS*/
          SWWAKF(3:0,1),   /*WAKEUP CONDITION*/
           SWERRCNT(3:2,5), /* COUNTER FOR TRANSFER ERRORS*/
          SWEPRT(3:6,23),  /*PRT POINTER*/
          SWECWS(4:0,5),   /*CWS INDEX*/
          SWWDCNT(4:0,5),  /*WORD COUNT FOR DIRECT I/O*/
          SWCPA(4:6,12),   /*PAGE ADDRESS FOR DIRECT I/O*/
          SWLNODE(4:13,13),/*LEAVE ON DIOQ FOR DIRECT I/O*/
          SWTIM(4:14,15),  /*TIMING FOR DIRECT I/O*/
          SWDUMP(4:16,16), /*DUMP INFORMATION FOR DIRECT I/O*/
          SWRCVR(4:17,17), /* RETRY IF ERROR -- FOR DIRECT I/O*/
          SWRCD(4:18,23),  /*REQUEST CODE*/
          SWINSTN(5:0,5),  /*TSU INSTR. FOR DIRECT I/O*/
          SWEQP(5:6,23),   /*POINTER TO NEXT QUEUE ENTRY*/
          SWFEQP(0:6,23);  /*FREELIST QUEUE POINTER*/
          DECLARE FIXED LONG FIELD SWUN(0:0,23);* BOTH WORDS OF UNIQUE NAME
*  REQUEST CODES
          DECLARE
          CRRDP ← 1,   /*READ PROCESS*/
          CWRPR ← 3,   /*WRITE PROCESS*/
          CRDDT ← 4,   /*DIRECT DRUM TRANSFER*/
          CRDKI ← 5,   /*DIRECT DISK TRANSFER*/
          CRRSP ← 9,   /*RESERVE PAGE IN CORE*/
          CWRPG ← 10,  /*RELEASE CORE PAGE TO DRUM*/
          CRDK ← 11,   /*DRUM TO DISK TRANSFER*/
          CRWUN ← 12,  /*WRITE UNIQUE NAME*/
          CRKD ← 13,   /*DISK TO DRUM TRANSFER*/
          CRGFP ← 14,  /*NEW PAGE*/
          CRDEST ← 15; /*DESTROY PAGE*/
*  ERROR CODES RETURNED BY AMC
          DECLARE
          CPWAIT ← 1,  /*TELL CPU TO WAIT- COME BACK LATER*/
          UNER ← 2,    /*UNIQUE NAME ALREADY EXISTS*/
          DKINU ← 3,   /*DISK ADDRESS IN USE*/
          NINDHT ← 4,  /*NOT IN DHT*/
          DNCHT ← 5,   /*DISK ADDRESS DID NOT COMPARE IN CHT*/
          WAITWK ← 6,  /*WAIT FOR WAKE-UP*/
          DKRAS ← 7,   /*DISK ADDRESS RE-ASSIGNED*/
          HERDR ← 8,   /*HARD ERROR ON DRUM READ*/
          SERDR ← 9,   /*SOFT ERROR FROM DRUM*/
          HERDK ← 10,  /*HARD ERROR ON DISK*/
          UNERK ← 11,  /*UNIQUE NAME ERROR ON DISK AFTER DRUM COMPARED*/
          SERDK ← 12,  /*SOFT ERROR ON DISK READ*/
          ARQOB ← 13,  /*ACTIVATE REQUEST OUT OF BOUNDS*/
          NOREQ ← 14,  /*NO REQUEST NODE*/
          NCHT ← 15,   /*NO CHT ENTRY*/
          SCHOVF ← 16; /*SCHEDULED COUNT OVERFLOW*/
*  MISCELLANEOUS
          DECLARE TSU'DUMP'LENGTH←18;
          DECLARE MAX'LOCKED'PAGES←4;
          DECLARE LSWQN←6;
          DECLARE NSWRCDS ← 15;
          DECLARE OCTAL ARRAYONE AMC'QUEUES[NSWRCDS]←
             (SWAPIN,-1,SWAPRQ,SWAPRQ,SWAPRQ,-1,-1,-1,
                AMCQ,AMCQ,AMCQ,AMCQ,AMCQ,AMCQ,AMCQ);
          DECLARE SWEOQ←777777B;
          DECLARE DRUM'SYSTEM ← 1;* DRUM ONLY - NO DISK

          END;

          COMMON SPTD;
*
*  DECLARATIONS FOR SUB-PROCESS SYSTEM - SEE DOCUMENT MISPS/M-7
*
          INCLUDE GLOBAL, PARD, PROFILE;
*  THE SUB-PROCESS TABLE
          DECLARE OCTAL ARRAYONE SPT[NSPTE:LSPTE,SPTS+M'G]=@SPT';
*  BASIC FIELDS IN AN ENTRY IN THE SUB-PROCESS TABLE (MISPS/M-7 FIG. 1)
          DECLARE FIXED FIELD
          SPTOL(0:3,11),       /*ENTRY'S OWNER LOCK*/
          SPTCL(0:15,23),      /*ENTRY'S CONTROL LOCK*/
          SPTEL(1:3,11),       /*ENTRY'S ENTRY LOCK*/
          SPTKEY(1:15,23),     /*ENTRY'S KEY - FOR UNLOCKING LOCKS*/
          SPTCTRL(2:3,11),     /*ENTRY'S CONTROL POWERS*/
          SPTFATHER(2:16,19),  /*SUB-PROCESS RESPONSIBLE FOR ENTRY*/
          SPTUSP(2:20,23),     /*ENTRY'S UTILITY SUB-PROCESS*/
          SPTRING(3:0,1),      /*RING IN WHICH ENTRY RUNS*/
          SPTEP(3:6,23),       /*ADDR. OF SP'ENTRY ARRAY DESC.*/
          SPTLM(4:0,5),        /*LENGTH OF ENTRY'S MAP*/
          SPTEG(4:6,23),       /*GR VALUE FOR SP'ENTRIES*/
          SPTSB(5:0,23),       /*ENTRY'S STATUS WORD*/
          SPTTM(6:0,23),       /*ENTRY'S TRAP ARMING WORD*/
          SPTSCB(7:0,23),      /*ENTRY'S STATUS CONTROL WORD*/
          SPTTCM(8:0,23),      /*ENTRY'S TRAP CONTROL WORD*/
          SPTMAP(9:0,7),       /*1ST OF 64 8-BIT PMT INDICES*/
          SPTROBITS(30:8,8);   /*1ST OF 64 RO FLAGS FOR MAP*/
*  STATUS BITS - SUB-FIELDS OF THE SB AND SCB FIELDS OF AN SPT ENTRY.
*  SEE MISPS/M-7 FIG. 2
          DECLARE FIXED FIELD
          PRP(0:0,0),      /*READ PROPRIETARY FILE*/
          SYS(0:1,1),      /*SYSTEM PRIVILEGES*/
          DPNIC(0:4,4),    /*DEFAULT PNIC CORRECTION*/
          DPNIM(0:5,5),    /*DEFAULT PNIM CORRECTION*/
          WFI(0:6,6),      /*OPEN OUTPUT FILES*/
          DCWSO(0:7,7),    /*DEFAULT CWSO CORRECTION*/
          DDWSO(0:8,8),    /*DEFAULT DWSO CORRECTION*/
          DPNOD(0:9,9),    /*DEFAULT PNOD CORRECTION*/
          MSP(0:10,10),    /*MASTER SUB-PROCESS PRIVILEGES*/
          SD(0:11,11);     /*SYSTEM DIAGNOSTIC PRIVILEGES*/
*  TRAP ARMING BITS - SUB-FIELDS OF THE TM AND TCM FIELDS OF AN
*  SPT ENTRY.  SEE MISPS/M-7 FIG. 3.
          DECLARE FIXED FIELD
          MACC(0:0,0),     /*MEMORY ACCESS (RING) ERROR*/
          PRO(0:1,1),      /*PAGE READ-ONLY*/
          PNIM(0:2,2),     /*PAGE NOT IN MAP*/
          PNIC(0:3,3),     /*PAGE NOT IN CORE*/
          PI(0:4,4),       /*PRIVILEGED INSTRUCTION*/
          TI(0:5,5),       /*TRAPPED INSTRUCTION*/
          BLLERR(0:6,6),   /*BLL ERROR*/
          ILIM(0:7,7),     /*INDIRECTION LIMIT EXCEEDED*/
          PNOD(0:8,8),     /*PAGE NOT ON DRUM*/
          DWSO(0:9,9),     /*DRUM WORKING SET OVERFLOW*/
          CWSO(0:10,10),   /*CORE WORKING SET OVERFLOW*/
          NEP(0:11,11),    /*NON-EXISTENT PAGE*/
          DMRD(0:12,12),   /*DRUM READ ERROR*/
          NILE(0:13,13),   /*NON-INTERRUPTABILITY LIMIT EXCEEDED*/
          SPCSO(0:14,14),  /*SUB-PROCESS CALL STACK OVERFLOW*/
          PMTO(0:15,15),   /*PROCESS MEMORY TABLE OVERFLOW*/
          DKSE(0:16,16);   /*DISK SPACE EXHAUSTED*/
*  DATA FOR READ/SET'SPT'FIELD
          DECLARE NSPTFLDS ← 15;
          DECLARE LONG ARRAY SPTCODES[NSPTFLDS]←
          ((' OL', 3), (' CL', 2), (' EL', 1), ('KEY', 2),
          ('CTR', 4), ('FTH', 2), ('USP', 4), ('RNG', 4),
          (' EP', 2), (' LM', 4), (' EG', 2), (' SB', 2),
          (' TM', 2), ('SCB', 2), ('TCM', 2));
          DECLARE FIELD ARRAY SPTFLDS[NSPTFLDS] ←
          (SPTOL, SPTCL, SPTEL, SPTKEY, SPTCTRL, SPTFATHER,
          SPTUSP, SPTRING, SPTEP, SPTLM, SPTEG, SPTSB, SPTTM,
          SPTSCB, SPTTCM);
*  PARAMETERS FOR CREATE'SP (SEE MISPS/M-7 PP. 13,14)
          DECLARE
          USER'EP ← 12B, USER'EG←0,
          UTILITY'EP ← 403012B, UTILITY'EG ← 403000B;
          DECLARE NORMAL'SB ←
          1@DPNIC  V' 1@DCWSO  V' 1@DDWSO  V' 1@DPNOD V' 1@WFI;
          DECLARE NORMAL'TM ← 0;
          DECLARE NORMAL'SCB ←
          1@DPNIC  V' 1@DCWSO  V' 1@DDWSO  V' 1@DPNOD V' 1@WFI V'
          1@PRP    V' 1@SYS    V' 1@MSP    V' 1@SD    V' 1@DPNIM;
          DECLARE NORMAL'TCM ← -1;
*  MACROS FOR REFERRING TO FREQUENTLY USED FIELDS OF THE
*  CURRENT SUB-PROCESS.
          MACRO SPNAME ← (1 LSH CSP);
          MACRO SPKEY ← (SPT[CSP]$SPTKEY);
          MACRO SPSTATUS ← (SPT[CSP]$SPTSB);
          MACRO SPRING ← (SPT[CSP]$SPTRING);
*  RO BIT FIELDS
          MACRO ROFD(I) ← DECLARE ARRAY ROFLDS'[I] ←
          2B7 V' 1@FDSIZE V'
          ((I+SPTROBITS$FDFB) MOD 24)@FDFB V'
          ((I+SPTROBITS$FDFB)/24+SPTROBITS$FDDISP)@FDDISP;
          DECLARE ARRAY ROFLDS'[64] ← (0);
          ROFD(00);ROFD(01);ROFD(02);ROFD(03);ROFD(04);
          ROFD(05);ROFD(06);ROFD(07);ROFD(08);ROFD(09);
          ROFD(10);ROFD(11);ROFD(12);ROFD(13);ROFD(14);
          ROFD(15);ROFD(16);ROFD(17);ROFD(18);ROFD(19);
          ROFD(20);ROFD(21);ROFD(22);ROFD(23);ROFD(24);
          ROFD(25);ROFD(26);ROFD(27);ROFD(28);ROFD(29);
          ROFD(30);ROFD(31);ROFD(32);ROFD(33);ROFD(34);
          ROFD(35);ROFD(36);ROFD(37);ROFD(38);ROFD(39);
          ROFD(40);ROFD(41);ROFD(42);ROFD(43);ROFD(44);
          ROFD(45);ROFD(46);ROFD(47);ROFD(48);ROFD(49);
          ROFD(50);ROFD(51);ROFD(52);ROFD(53);ROFD(54);
          ROFD(55);ROFD(56);ROFD(57);ROFD(58);ROFD(59);
          ROFD(60);ROFD(61);ROFD(62);ROFD(63);
          DECLARE FIELD ARRAY ROFLDS=ROFLDS';
*  PMT INDEX FIELDS
          MACRO PXFD(I) ← DECLARE ARRAY PXFLDS'[I] ←
          2B7 V' (SPTMAP$FDSIZE)@FDSIZE V'
          ((I*(SPTMAP$FDSIZE)+SPTMAP$FDFB) MOD 24)@FDFB V'
          ((I*(SPTMAP$FDSIZE)+SPTMAP$FDFB)/24+SPTMAP$FDDISP)@FDDISP;
          DECLARE ARRAY PXFLDS'[64] ← (0);
          PXFD(00);PXFD(01);PXFD(02);PXFD(03);PXFD(04);
          PXFD(05);PXFD(06);PXFD(07);PXFD(08);PXFD(09);
          PXFD(10);PXFD(11);PXFD(12);PXFD(13);PXFD(14);
          PXFD(15);PXFD(16);PXFD(17);PXFD(18);PXFD(19);
          PXFD(20);PXFD(21);PXFD(22);PXFD(23);PXFD(24);
          PXFD(25);PXFD(26);PXFD(27);PXFD(28);PXFD(29);
          PXFD(30);PXFD(31);PXFD(32);PXFD(33);PXFD(34);
          PXFD(35);PXFD(36);PXFD(37);PXFD(38);PXFD(39);
          PXFD(40);PXFD(41);PXFD(42);PXFD(43);PXFD(44);
          PXFD(45);PXFD(46);PXFD(47);PXFD(48);PXFD(49);
          PXFD(50);PXFD(51);PXFD(52);PXFD(53);PXFD(54);
          PXFD(55);PXFD(56);PXFD(57);PXFD(58);PXFD(59);
          PXFD(60);PXFD(61);PXFD(62);PXFD(63);
          DECLARE FIELD ARRAY PXFLDS=PXFLDS';
*  MISCELLANEOUS
          DECLARE
          MAXEPNO ← 1023,
          NTRAPS ← 24;      /*MAXIMUM POSSIBLE NO. OF TRAPS*/
          DECLARE FIXED FIELD
          SPTPMT(0:16,23),  /*PMT INDEX IN AN EXPANDED MAP BYTE*/
          SPTRO(0:12,12);   /*RO BIT IN AN EXPANDED MAP BYTE*/


          END;

          COMMON SPT1'INIT;
          INCLUDE GLOBAL, SPTD;
          DECLARE ARRAY SPT1[LSPTE:,SPTS+M'G] ←
          (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0);
          DECLARE I ← SPTMAP$FDDISP-2;
          MACRO SP1MAP(P0,P1,P2,P3,P4,P5) ←
          DECLARE I ← I+2,
          ARRAY SPT1[I] ← (P0 LSH 16 V' P1 LSH 8 V' P2,
          P3 LSH 16 V' P4 LSH 8 V' P5);
          DECLARE I ← SPTMAP$FDDISP-2;* THIS IS REPEATED TO PLEASE SPL
          MACRO SP1RO1(R0,R1,R2,R3,R4,R5,R6,R7) ←
             DECLARE SP1RO1X ←
             (R0 LSH 15 V' R1 LSH 14 V' R2 LSH 13 V' R3 LSH 12 V'
             R4 LSH 11 V' R5 LSH 10 V' R6 LSH 9 V' R7 LSH 8);
          MACRO SP1RO2(R8,R9,R10,R11,R12,R13,R14,R15) ←
             DECLARE SP1RO2X ←
             (R8 LSH 7 V' R9 LSH 6 V' R10 LSH 5 V' R11 LSH 4 V'
             R12 LSH 3 V' R13 LSH 2 V' R14 LSH 1 V' R15);
*  COMPILING THIS BLOCK INITIALIZES THE 1ST ENTRY IN THE SUB-PROCESS
*  TABLE.  THE PARAMETERS, RING, STATUS, TRAP'MASK, STATUS'CONTROL,
*  AND TRAP'CONTROL CAN BE SET AS DESIRED.  THE MAP CAN BE SPECIFIED
*  BY USING THE MACROS SP1MAP AND SP1RO.  SP1MAP INITIALIZES MAP
*  BYTES WITH PMT INDICES, 6 BYTES PER INVOCATION.  SP1RO CAN
*  ONLY BE USED ONCE - IT SETS UP THE RO FLAGS FOR THE FIRST 16 PAGES.
*  THE PARAMETER LM SHOULD BE SET TO THE BYTE NUMBER (COUNTING FROM
*  0) OF THE LAST NON-ZERO PMT INDEX IN THE MAP.
          DECLARE RING ← 1;
          DECLARE STATUS ← NORMAL'SB;
          DECLARE TRAP'MASK ← NORMAL'TM;
          DECLARE STATUS'CONTROL ← NORMAL'SCB;
          DECLARE TRAP'CONTROL ← NORMAL'TCM;
          DECLARE LM ← 11;* THIS PARAMETER SHOULD BE SET AS DESCRIBED ABOVE.

*  INITIALIZATION OF EVERYTHING EXCEPT MAP AND RO FLAGS
          DECLARE USP ← RING;
          DECLARE EG ← RING*UTILITY'EG;
          DECLARE EP ← RING*UTILITY'EG+USER'EP;
          DECLARE ARRAY SPT1[0] ←
          (2@SPTOL V' 2@SPTCL, 2@SPTEL V' 2@SPTKEY,
          2@SPTCTRL V' USP@SPTUSP, RING@SPTRING V' EP@SPTEP,
          LM@SPTLM V' EG@SPTEG, STATUS, TRAP'MASK,
          STATUS'CONTROL, TRAP'CONTROL);
*  INITIALIZATION OF MAP AND RO FLAGS
          SP1MAP(CB0PMT,0,0,0,0,0);
          SP1MAP(0,UCP0PMT,UCP1PMT,UCP2PMT,UCP3PMT,UCP4PMT);
          SP1RO1(0,0,0,0,0,0,0,1); SP1RO2(1,1,1,1,0,0,0,0);
*  THE FOLLOWING KLUDGERY GETS AROUND THE OLD SP1RO MACRO WHICH CANNOT
*     BE HANDLED IN THE CURRENT SPL.  MACRO BODY TOO LONG.
          DECLARE ARRAY SPT1[SPTROBITS$FDDISP] ← SP1RO1X V' SP1RO2X;

          END;

          COMMON CHIOD;
          INCLUDE RESMON;
*  INPUT/OUTPUT LINE TABLE
          DECLARE OCTAL ARRAY MTA[NCLP:LMTAE, MTAS];
          DECLARE FIXED FIELD
          BS(0:0,1), WS(0:2,3), DE(0:4,4), CLE(0:5,5),
          LF(0:6,7), WOC(0:8,8), WIC(0:9,9), ES(0:10,10),
          RCNO(0:11,16), EBC(0:17,17), DTYP(0:18,23),
          NOQ(1:0,0), NIQ(1:1,1), TABTY(1:2,7),
          LPOS(1:8,15), QUITC(1:16,23),
          XWT(2:0,3), AWT(2:4,7), REF(2:8,10), LQNK(2:11,23),
          LDVN(3:0,7), LOK(3:8,8), LFK(3:9,9), PROC(3:11,23);
          DECLARE FIXED FIELD NAB(2:8,8), LAB(2:9,9);
          DECLARE FIELD BWS(0:0,3);
*  MAIN CHARACTER POINTER TABLE
          DECLARE OCTAL ARRAY MTC[2*NCLP:LMTCE, MTCS];
          DECLARE FIXED FIELD
          XBCNT(0:0,7), RCPF(0:8,23),
          ABCNT(1:0,7), WCPF(1:8,23),
          WKCNT(2:0,11), CCNT(2:12,23),WKCNT18(18:0,11);
*  FIELDS IN THE CHARACTER BUFFERS
          DECLARE FIELD ZLIN(0:0,7), NEXT(0:8,23);
*  FIELDS IN THE CPU/CHIO INTERFACE TABLE (OFFSETS RELATIVE TO CPUIT)
          DECLARE FIXED FIELD
          CRT(0:0,7), NSR(0:8,9), RWCH(0:10,10),
          LNO(0:11,23),
          NFB(1:0,23),
          VALU(2:0,23),
          CARG1(3:0,23),
          CARG2(4:0,23),
          CARG3(5:0,23),
          RWSB(9:0,23),
          RWEB(15:0,23);
*  REQUEST CODES
          DECLARE
          WST ← 1,        /*WRITE STRING*/
          RSND ← 2,       /*READ STRING NON-DESTRUCTIVELY*/
          RSTB ← 3,       /*READ STRING TO BREAK CHARACTER*/
          MBLK ← 4,       /*MOVE MEMORY BLOCK*/
          IG ← 5,         /*IGNORE NON-CPU REQUESTS*/
          NIG ← 6,        /*NO LONGER IGNORE NON-CPU REQUESTS*/
          PCF ← 7,        /*PUT INTO CHIO FIELD*/
          GCF ← 8,        /*GET FROM CHIO FIELD*/
          GSR ← 9,        /*GET SCRATCH-PAD REGISTER*/
          PSR ← 10,       /*PUT SCRATCH-PAD REGISTER*/
          RTUPDATE ← 11,  /*UPDATE REAL TIME IN CORE*/
          DOAPOT ← 12,    /*DO A POT*/
          DOAPIN ← 13;    /*DO A PIN*/
*  DEVICE TABLES
          DECLARE OCTAL ARRAY DVTB[NCDT:LDVTBE, DVTBS];
          DECLARE FIXED FIELD
          ESCCH(0:0,7), NCTI(0:8,15), NCTIF(0:16,23),
          TABCH(1:0,7), NCPI(1:8,15), NCPIF(0:16,23);
*  LOW SPEED DEVICE BUFFER TABLE
          DECLARE OCTAL ARRAY LDVT[NLBSD:LLDVTE, LDVTS];
          DECLARE OCTAL ARRAY LB24[NL24D: LLB24E,LB24S];
          DECLARE FIXED FIELD
          CIPT(0:0,9), COP(0:13,23), CLINE(1:11,23);
*  LOCAL DEVICE BIT TABLE
          DECLARE OCTAL ARRAY LBTB[NCDT-1:LLBTBE, LBTBS];
          DECLARE FIXED FIELD
          NCIP(14:0,15), BSNO(15:21,23);
* DATA FOR CHIOST
          DECLARE FIXED FIELD FIELD FWD0(0:0,23);
          DECLARE NCIOCODES ← 10;
          DECLARE FIELD ARRAY CIOFLDS[NCIOCODES] ←
          (BWS, DTYP, ES, QUITC, WKCNT18, NAB, LAB, LF, LQNK, LOK);
          DECLARE CHARACTER ARRAY CIOCODES[NCIOCODES] ←
          ('BWS', 'SDT', 'EST', 'QIT', 'WKC', 'NAB', 'LAB',
             ' LF', 'LQN', 'LOK');
* MISCELLANEOUS
          DECLARE FLBSDL ← 0;* INPUT LINE FOR 1ST LOCAL BIT-SCANNED DEVICE
          DECLARE FL24DL ← FLBSDL+2*NLBSD;* INPUT LINE FOR 1ST LOCAL
*                                       2400-BAUD DEVICE
          DECLARE CIOWLIM ← 20000;
          DECLARE MAXLNO ← 2*NCLP-1;
          DECLARE MAXDTYPE ← NCDT-1;
          DECLARE TAB2741 ← 177B;* FIX THIS!!
          DECLARE ESC2741 ← 177B;* FIX THIS!!
          DECLARE SHIFT1 ← 37B;
          DECLARE M30'LDVN←3;

          END;

          COMMON DRDKPGD;
       INCLUDE PARD;
          MACRO DRADDR(A,B,C,D,E)←(A@U V' B@DTSU
          V' C@DKNO V' D@DBAND V' E@DSECT);
*
*  RESERVED DISK AND DRUM PAGES
*
          DECLARE LDKPGAR←20,LDRPGAR←36;
          DECLARE ARRAY DKPGAR[LDKPGAR]←(
          DKADDR(1,2,0,0,0,0) V' 2B7, DKADDR(1,2,0,0,6,1),
          DKADDR(1,2,0,0,7,0) V' 2B7, DKADDR(1,2,0,0,13,1),
*** NEXT 4 ENTRIES HAVE USE BIT RESET BECAUSE THERE IS NO SPACE
*    ALLOCATED FOR DISK 1 BIT TABLE
          DKADDR(0,2,1,0,0,0) V' 2B7, DKADDR(0,2,1,0,6,1),
          DKADDR(0,2,1,0,7,0) V' 2B7, DKADDR(0,2,1,0,13,1),
          DKADDR(1,2,0,0,16,0) V' 2B7, DKADDR(1,2,0,0,17,2),
          UCP0DKA V' 1@U V' 2B7, UCP5DKA V' 1@U,
          RT0DKA V' 1@U V' 2B7, RT3DKA V' 1@U,
          MCP0DKA V' 1@U V' 2B7, MCP9DKA V' 1@U,
          AMC'PG1'DKA V' 1@U,
          AMC'PG2'DKA V' 1@U,
          MIB0DKA V' 1@U,
          CB0DKA V' 1@U);
          DECLARE ARRAY DRPGAR[LDRPGAR]←(
          DRADDR(1,0,0,0,0) V' 2B7, DRADDR(1,0,0,1,7),
          DRADDR(1,0,0,2,0) V' 2B7, DRADDR(1,0,0,3,7),
          DRADDR(1,0,0,4,0) V' 2B7, DRADDR(1,0,0,5,7),
          DRADDR(1,0,0,6,0) V' 2B7, DRADDR(1,0,0,7,7),
          DRADDR(1,0,0,8,0) V' 2B7, DRADDR(1,0,0,9,7),
          DRADDR(1,0,0,10,0) V' 2B7, DRADDR(1,0,0,11,7),
          DRADDR(1,0,0,12,0) V' 2B7, DRADDR(1,0,0,13,7),
          DRADDR(1,0,0,14,0) V' 2B7, DRADDR(1,0,0,15,7),
          DRADDR(1,0,1,0,0) V' 2B7, DRADDR(1,0,1,1,7),
          DRADDR(1,0,1,2,0) V' 2B7, DRADDR(1,0,1,3,7),
          DRADDR(1,0,1,4,0) V' 2B7, DRADDR(1,0,1,5,7),
          DRADDR(1,0,1,6,0) V' 2B7, DRADDR(1,0,1,7,7),
          DRADDR(1,0,1,8,0) V' 2B7, DRADDR(1,0,1,9,7),
          DRADDR(1,0,1,10,0) V' 2B7, DRADDR(1,0,1,11,7),
          DRADDR(1,0,1,12,0) V' 2B7, DRADDR(1,0,1,13,7),
          DRADDR(1,0,1,14,0) V' 2B7, DRADDR(1,0,1,15,7),
*  BAD DRUM SPOTS (NO NEED TO DO THIS NOW -- THEY ARE GOOD AGAIN)
          DRADDR(1,0,0,36B,0) V' 2B7, DRADDR(1,0,0,36B,23),
          DRADDR(1,0,0,45B,0) V' 2B7, DRADDR(1,0,0,45B,23));

          END;

          COMMON MIB'INIT'D;
*
*  MIB INITIALIZATION DECLARATIONS
*
          INCLUDE DKAL,FLS,PROFILE,GLOBAL;
*  UNMIBDKA PAGE DECLARATION
          DECLARE ARRAY MIBS[2048:,MIB0MAP*2048]←0;
          DECLARE ARRAY MIBS[MIBVER]←(0,1,1,1),
          MIBS[MCW]←-1,
          MIBS[UNIQUE'NAME]←100B,
        MIBS[DISK'RESOURCES]←(50000,0);* 50000D IS ARBITRARY (75K IS U.B.)
* REAL CORE FILE
          DECLARE ARRAY MIBS[OBT]←(
          1@U V' SFILET@T V'
          SIBS@SIBA V'(FLK+FDA+5)@SIBL);
          DECLARE ARRAY MIBS[SIBS]←(
          6'REAL',6'-COR',6'E   ',0,6'BIN ',15B,
          RT0RN$WD0,RT0RN$WD1 A' N' 377B,6*4000B-1,0,0,0,0,0,
          RT0RN$WD2 V' 1@U, RT1RN$WD2 V' 1@U,
          RT2RN$WD2 V' 1@U, RT3RN$WD2 V' 1@U);
* MONITOR FILE
          DECLARE ARRAY MIBS[OBT+1]←(1@U V' SFILET@T V'
          (SIBS+30)@SIBA V' (FLK+FDA+11)@SIBL);
          DECLARE ARRAY MIBS[SIBS+30]←(
          6'MONI',6'TOR ',0,0,6'BIN ',15B,
          MCP0RN$WD0,MCP0RN$WD1 A' N' 377B,12*4000B-1,0,0,0,0,0,
          MCP0RN$WD2 V' 1@U,MCP1RN$WD2 V' 1@U,MCP2RN$WD2 V' 1@U,
          MCP3RN$WD2 V' 1@U,MCP4RN$WD2 V' 1@U,MCP5RN$WD2 V' 1@U,
          MCP6RN$WD2 V' 1@U,MCP7RN$WD2 V' 1@U, MCP8RN$WD2 V' 1@U,
          MCP9RN$WD2 V' 1@U);
* LISTENER FILE
          DECLARE ARRAY MIBS[OBT+2]←(1@U V' SFILET@T V'
          (SIBS+60)@SIBA V'(FLK+FDA+6)@SIBL);
          DECLARE ARRAY MIBS[SIBS+60]←(
          6'LIST',6'ENER',0,0,6'BIN ',15B,
          UCP0RN$WD0,UCP0RN$WD1 A' N' 377B,7*4000B-1,0,0,0,0,0,
          UCP0RN$WD2 V' 1@U,UCP1RN$WD2 V' 1@U,UCP2RN$WD2 V' 1@U,
          UCP3RN$WD2 V' 1@U,UCP4RN$WD2 V' 1@U,UCP5RN$WD2 V' 1@U);
* LISTENER PROCESS
          DECLARE ARRAY MIBS[OBT+3]←(1@U V' PROCT@T V'
          (SIBS+90)@SIBA V' (FLK+5)@SIBL);
          DECLARE ARRAY MIBS[SIBS+90]←(
          6'INIT',6'IAL-',6'PROC',6'ESS ',6'PROC',15B,
          CB0RN$WD0,CB0RN$WD1 ,CB0RN$WD2,1,1);
* AMC-ITP PAGES
          DECLARE ARRAY MIBS[OBT+4]←(1@U V' SFILET@T V'
          (SIBS+120)@SIBA V' (FLK+FDA+2)@SIBL);
          DECLARE ARRAY MIBS[SIBS+120]←(
          6'AMC-',6'ITP ',0,0,6'BIN ',15B,
          AMC'PG1'RN$WD0,AMC'PG1'RN$WD1 A' N' 377B,3*4000B-1,0,0,0,0,0,
          AMC'PG1'RN$WD2 V' 1@U,AMC'PG2'RN$WD2 V' 1@U);
* 'UTILITY' INITIAL OBJECT INITIALIZATION

          DECLARE FLINKT ← 15, FSCOMT ← 14, FLN ← 8;
          DECLARE OBT'O ← OBT+5, N'SIB'O ← SIBS+150;
          MACRO MIB'OBJ(Y, Z) ← DECLARE SIB'O ← N'SIB'O,
          OBT'O ← OBT'O+1, N'SIB'O ← N'SIB'O+(Z),
          ARRAY MIBS[OBT'O] ← (1@U V' (Y)@T V' SIB'O @SIBA V'
          (Z)@SIBL), MIBS[SIB'O];
          MACRO MIB'UNDK ← 1, MIB0DKA;

* ACCESS KEYS - MIB OWNER (= SYSTEM), ACCT AND GROUP FRIENDS
          MIB'OBJ(ACKT, FLK+2) ←
          (6'OWNE', 6'R   ', 0, 0, 6'KEY ', 10B, 0, 1);
          MIB'OBJ(ACKT, FLK+2) ←
          (6'A-FR', 6'IEND', 0, 0, 6'KEY ', 0, 0, 200000B);* ACC 10B
          MIB'OBJ(ACKT, FLK+2) ←
          (6'G-FR', 6'IEND', 0, 0, 6'KEY ', 0, 0, 200001B);* ACC 10B

* BUILT-IN COMMANDS
          MIB'OBJ(FSCOMT, FLK) ←
          (6'CONT', 6'INUE', 0, 0, 6'TCMD', 1000B);
          DECLARE CONT'OB ← OBT'O-OBT;
          MIB'OBJ(FSCOMT, FLK) ←
          (6'SAVE', 6'-CUR', 6'RENT', 0, 6'TCMD', 1000B);
          MIB'OBJ(FSCOMT, FLK) ←
          (6'RELE', 6'ASE ', 0, 0, 6'TCMD', 1000B);
          MIB'OBJ(FSCOMT, FLK) ←
          (6'RESE', 6'T   ', 0, 0, 6'TCMD', 1000B);
          MIB'OBJ(FSCOMT, FLK) ←
          (6'FINI', 6'SHED', 0, 0, 6'TCMD', 1000B);
          MIB'OBJ(FSCOMT, FLK) ←
          (6'QUIT', 0, 0, 0, 6'TCMD', 1000B);

* FILE-MAINTENENANCE AND ENTRY POINTS
          MIB'OBJ(SFILET, FLK+FDA+4) ←
          (6'FILE', 6'-MAI', 6'NTEN', 6'ANCE', 6'TCMD', 1017B,
          EUN1(0,1,6,0), 4*4000B-1, 0, 0, 0, 0, 0);
          DECLARE FMAIN'OB ← OBT'O-OBT;
          MIB'OBJ(FLINKT, FLK+FLN) ←
          (6'EXAM', 6'INE-', 6'FILE', 0, 6'TCMD', 1017B,
          MIB'UNDK, FMAIN'OB,
          6'FILE', 6'-MAI', 6'NTEN', 6'ANCE', 6'TCMD');
          MIB'OBJ(FLINKT, FLK+FLN) ←
          (6'LIST', 6'-FIL', 6'ES  ', 0, 6'TCMD', 1017B,
          MIB'UNDK, FMAIN'OB,
          6'FILE', 6'-MAI', 6'NTEN', 6'ANCE', 6'TCMD');
          MIB'OBJ(FLINKT, FLK+FLN) ←
          (6'DELE', 6'TE-F', 6'ILES', 0, 6'TCMD', 1017B,
          MIB'UNDK, FMAIN'OB,
          6'FILE', 6'-MAI', 6'NTEN', 6'ANCE', 6'TCMD');
          MIB'OBJ(FLINKT, FLK+FLN) ←
          (6'RENA', 6'ME-F', 6'ILES', 0, 6'TCMD', 1017B,
          MIB'UNDK, FMAIN'OB,
          6'FILE', 6'-MAI', 6'NTEN', 6'ANCE', 6'TCMD');

* EMULATOR, SPECIAL ENTRIES AND SUBSYSTEM LINKS
          MIB'OBJ(SFILET, FLK+FDA+7) ←
          (6'EMUL', 6'ATOR', 0, 0, 6'PIF ', 1017B,
          EUN1(0,1,7,0), 7*4000B-1, 0, 0, 0, 0, 0);
          DECLARE EMUL'OB ← OBT'O-OBT;
          MIB'OBJ(FLINKT, FLK+FLN) ←
          (6'RECO', 6'VER-', 6'940 ', 0, 6'PCMD', 1017B,
          MIB'UNDK, EMUL'OB,
          6'EMUL', 6'ATOR', 0, 0, 6'PIF ');
          MIB'OBJ(FLINKT, FLK+FLN) ←
          (6'DUMP', 6'-940', 0, 0, 6'TCMD', 1017B,
          MIB'UNDK, CONT'OB,
          6'CONT', 6'INUE', 0, 0, 6'TCMD');
          MIB'OBJ(FLINKT, FLK+FLN) ←
          (6'DDT ', 0, 0, 0, 6'PCMD', 1017B,
          MIB'UNDK, EMUL'OB,
          6'EMUL', 6'ATOR', 0, 0, 6'PIF ');


          END;

          COMMON RNTD;
          INCLUDE PARD;
       DECLARE ARRAY RNT[19:5]←
          ((CB0MAP,RNX(CB0RN), CB0CPA), (MCP0MAP,RNX(MCP0RN), MCP0CPA),
          (MCP1MAP,RNX(MCP1RN), MCP1CPA), (MCP2MAP,RNX(MCP2RN), MCP2CPA),
          (MCP3MAP,RNX(MCP3RN), MCP3CPA), (MCP4MAP,RNX(MCP4RN), MCP4CPA),
          (MCP5MAP,RNX(MCP5RN), MCP5CPA), (MCP6MAP,RNX(MCP6RN), MCP6CPA),
          (MCP7MAP,RNX(MCP7RN), MCP7CPA), (MCP8MAP,RNX(MCP8RN), MCP8CPA),
          (MCP9MAP,RNX(MCP9RN), MCP9CPA),
          (RT0MAP,RNX(RT0RN), RT0CPA), (RT1MAP,RNX(RT1RN), RT1CPA),
          (RT2MAP,RNX(RT2RN), RT2CPA), (RT3MAP,RNX(RT3RN), RT3CPA),
          (MIB0MAP,RNX(MIB0RN), MIB0CPA),
          (CB0MAP,-1,-1,-1,CB0CPA'COPY),
          (RT0MAP,-1,-1,-1,RT0CPA'COPY),
          (-1,0,0,0,0));
*  INITIALIZE G'[7]
          DECLARE RNT'0'=M'G+7←@RNT[0];

          END;

          COMMON ERRD;
*
*  ERROR MACROS
*
          MACRO  M1  ← ('PMI',110);* PMT INDEX OUT OF BOUNDS
          MACRO  M2 ←  ('PMU',116);** PMT ENTRY NOT ASSIGNED
          MACRO  M3  ← ('PMF',122);* PMT ENTRY FULL
          MACRO  M4  ← ('PMC',121);* PMT ENTRY CONTROL LACKING
          MACRO  M5  ← ('FPN',5);* FILE PAGE NON-EXISTENT
          MACRO  M6  ← ('MOB',6);* MIB INDEX OUT OF BOUNDS
          MACRO  M7 ← ('NPR',7);* NO PRT ENTRY AVAILABLE
          MACRO  M8  ← ('ONA',8);* NO ACCESS TO MIB OBJECT
          MACRO  M9 ← ('WRV',9);* WRONG VERSION
          MACRO  M10 ← ('ONE',10);* MIB OBJECT NON-EXISTENT
          MACRO  M11 ← ('OFF',11);* OFT FULL
          MACRO  M12 ← ('OFE',12);* OFT ENTRY UNASSIGNED
          MACRO  M13 ← ('OFA',13);* NO ACCESS TO OFT ENTRY
          MACRO  M14 ← ('ONW',14);* NO WRITE ACCESS TO OBJECT
          MACRO  M15 ← ('FIS',15);* OBJECT INDEX POINTER IN OFT TOO BIG
          MACRO  M16← ('NIP',16);* PROCESS NOT INITIALIZED
          MACRO  M17 ← ('MSE',17);* MAXIMUM SIZE OF OBJECT EXCEEDED
          MACRO  M18 ← ('RSE',18);* DISK RESOURCES EXCEEDED
          MACRO  M19 ← ('FPE',19);* FILE PAGE ALREADY EXISTS
          MACRO  M20 ← ('MIF',20);* MIB FULL
          MACRO  M21 ← ('MOF',21);* MIB OBJECT TABLE OVERFLOW
          MACRO  M22 ← ('FLF',22);* FRIEND LIST FULL
          MACRO  M23 ← ('NOM',23);* NO OWNER ACCESS TO MIB
          MACRO  M24 ← ('NRM',24);* NO READ ACCESS TO MIB
          MACRO  M25 ← ('MLF',25);* MIB LOCK LIST FULL
          MACRO  M26 ← ('NOB',26);* NO OWNER ACCESS TO OBJECT
          MACRO  M27 ← ('NAM',27);* NO ACCESS TO MIB
          MACRO  M28 ← ('NAE',28);* NAME ALREADY EXISTS IN MIB
          MACRO  M29 ← ('DPR',29);* TRYING TO DELETE PROCESS IN MIB
          MACRO  M30 ← ('DLF',30);* TRYING TO DELETE LARGE FILE
          MACRO  M31 ← ('FNE',31);* FILE NOT EMPTY
          MACRO  M32 ← ('WRT',32);* WRONG OBJECT TYPE
          MACRO  M33 ← ('STS',33);* SPECIAL SYSTEM STATUS NEEDED
          MACRO  M34 ← ('TNC',34);* TERMINAL NOT CONTROLLED
          MACRO  M35 ← ('PRS',35);* PROPRIETARY PROGRAM STATUS NEEDED
          MACRO  M36 ← ('OFI',36);* OFT INDEX OUT OF BOUNDS
          MACRO  M37 ← ('UCL',37);* TRYING TO SET CONTROL LEVEL
          MACRO  M38 ← ('ICE',38);* ICT ENTRY EMPTY
          MACRO  M39 ← ('ICI',39);* ICT INDEX OUT OF BOUNDS
          MACRO  M40 ← ('ICF',40);* ICT ENTRY FULL
          MACRO  M41 ← ('ICO',41);* ICT FULL
          MACRO  M42 ← ('ICA',42);* NO ACCESS TO ICT
          MACRO  M43 ← ('NIS',43);* NON-INTERRUPTABILITY ALREADY SET
          MACRO  M44 ← ('ICD',44);* ICT DATA INCORRECT
          MACRO  M45 ← ('ICR',45);* ICT REQUEST TO CALL NOT CONTROLLED SUB-PROCESS
          MACRO  M46 ← ('CND',46);* CHARACTER CONSTANT NOT DEFINED AS AN INTERRUPT
          MACRO  M47 ← ('PRI',47);* PROCESS HAS BEEN INITIALIZED
          MACRO  M48 ← ('PND',48);* PROCESS NOT DORMANT
          MACRO  M49 ← ('POP',49);* ONE PROCESS ALREADY OPEN FOR MODIFICATION
          MACRO  M50 ← ('EWC',50);* EXCESSIVE WORD COUNT GIVEN
          MACRO  M51 ← ('WUN',51);* WRONG UN TYPE REQUESTED
          MACRO  M52 ← ('UOO',52);* UN GENERATOR OUT OF ORDER
          MACRO  M53 ← ('PNA',53);* PROCESS NOT ACTIVE
          MACRO  M54 ← ('AKF',54);* ACCESS KEY FROZEN
          MACRO  M55 ← ('DRE',55);* DISK RESOURCES EXHAUSTED
          MACRO  M56 ← ('SNC',56);* SPT ENTRY NOT CONTROLLED
          MACRO  M57 ← ('MCS',57);* ILLEGAL MCW BITS SELECTED
          MACRO  M58 ← ('WRB',58);* WRONG RESOURCE BLOCK
          MACRO  M59 ← ('NES',59);* NOT ENOUGH RESOURCES
          MACRO  M60 ← ('REX',60);* RESOURCES EXPIRED
          MACRO  M61 ← ('PRD',61);* PROCESS DORMANT
          MACRO  M62 ← ('NPT',62);* NOT PATRON OF MIB
          MACRO  M63 ← ('   ',63);*
          MACRO  M64 ← ('   ',64);*
          MACRO  M65 ← ('   ',65);*
          MACRO  M66 ← ('   ',66);*
          MACRO  M67 ← ('   ',67);*
          MACRO  M68 ← ('   ',68);*
          MACRO  M69 ← ('ONP',69);* OFT ENTRY NO PROCESS OPEN FOR MODIFICATION
          DECLARE FIXED FIELD WD0(0),WD1(1);

          END;

        COMMON PMS'MACROS;
          INCLUDE PROFILE, APTD, PMTD, GLOBAL;
*  THESE MACROS ARE USED IN VARIOUS PROGRAMS IN THE PROCESS MEMORY
*  SYSTEM JUST TO MAKE THE CODE MORE READABLE.

*  CWS'FULL IS TRUE WHEN THE LENGTH OF THE CORE WORKING SET (LCWS) IS
*  EQUAL TO OR GREATER THAN THE "OVERFLOW LENGTH" OF THE CORE WORKING
*  SET  (OLCWS).  WHEN CWS'FULL IS TRUE AND ANOTHER PAGE HAS TO BE
*  ADDED TO CWS, SOME PAGE CURRENTLY IN CWS MUST FIRST BE REMOVED.
*  DWS'FULL IS AN EXACTLY ANALOGOUS INDICATOR FOR THE DRUM WORKING SET.
*  THESE INDICATORS ARE VALID WHENEVER LCWS, LDWS, OLCWS, AND OLDWS ARE
*  VALID.
          MACRO CWS'FULL ← (LCWS>=OLCWS);
          MACRO DWS'FULL ← (LDWS>=OLDWS);

*  IN'CWS IS TRUE WHEN APT[APTX] FALLS IN THE CWS SECTION OF APT.
*  IN'TBW IS TRUE WHEN APT[APTX] FALLS IN THE TBW (TO BE WRITTEN)
*  SECTION OF APT.  IN'DWS IS TRUE WHEN APT[APTX] FALLS IN THE DWS
*  SECTION OF APT.  THESE MACROS CAN BE USED ONLY WHEN THE (LOCAL)
*  VARIABLE APTX HAS A MEANINGFUL VALUE AND LCWS, LTBW, AND LDWS ARE
*  VALID.  APTL IS A PARAMETER DECLARED IN PARD.
          MACRO IN'CWS ← (APTX>=APTL-LCWS);
          MACRO IN'TBW ← (APTX>=APTL-LTBW);
          MACRO IN'DWS ← (APTX>=APTL-LDWS);

*  WHEN LCWS, LTBW, AND LDWS ARE VALID, LAST'CWS, LAST'TBW, AND
*  LAST'DWS ARE THE APT INDICES OF THE LAST ELEMENTS IN, RESPECTIVELY,
*  THE CWS, TBW, AND DWS SECTIONS OF APT.
          MACRO LAST'CWS ← (APTL-LCWS);
          MACRO LAST'TBW ← (APTL-LTBW);
          MACRO LAST'DWS ← (APTL-LDWS);

*  GET'PMT'POINTER IS BASICALLY JUST
*         PMTE ← @PMT[PMTX];
*  ITS REASON FOR EXISTING IS TO PROVIDE A CHEAP OUT-OF-BOUNDS CHECK
*  ON PMTX.  IF THE EAX CAUSES AN ABE TRAP, THE TRAP ROUTINE WILL NOTE
*  THAT THE OPCODE IN THE INSTRUCTION FOLLOWING THE EAX IS A TSB AND
*  WILL THEREFORE TRANSFER CONTROL TO PMTX'ILLEGAL.  PMTX, PMTE, AND
*  PMTX'ILLEGAL SHOULD ALL BE LOCAL.
          MACRO GET'PMT'POINTER ←
             .LDX PMTX, EAX $(PMT$WD0), TSB PMTX'ILLEGAL, STX PMTE;

        END;

       COMMON UTILITY'CB;
       INCLUDE PROFILE;
       DECLARE ARRAY UTILITY'CB[1000B:,M'G+3000B] ←
          (2436416B, 0, 421000B, 422000B, 0, 0,
           2436403B, 434241B, 0, 0, 2436520B, 0,
           0, 0, 2436001B);

       END;