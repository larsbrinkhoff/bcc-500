       COMMON COMM;
       INCLUDE SPAR;

*****************
*   SPL PAGE 0  *
* COMMUNICATION *
*     AREA      *
*****************


***
*** STATE VARIABLES
***

       DQ NRINGS←3;* NUMBER OF RINGS


       DI SMAP'COUNTER;* COUNTS NUMBER OF WORST CASE CALLS ON SMAP
       DI REDUNDANT'SMAPS;* COUNTS NUMBER OF WORST CASE CALLS ON SMAP
*                              IN WHICH THE PAGE WAS ALREADY IN THE MAP.
       DI HERALD;* COMMAND MODE HERALD
       DI RECOMPILE;* SOME RECOMPILATION NEEDED
       DI STKCHANGE;* SOME STACK BOUNDARY CHANGED
       DI NOGO;* MUST UNWIND THIS MANY LEVELS TO PROCEED
       DI BRKTN;* FUNCTION TN OF BROKEN STATEMENT
       DI SBRKTN;* SAVED BRKTN DURING TASK 2
       DI BRKSI;* SI OF BROKEN STATEMENT, ←0 WHEN EDITED
       DI SBRKSI;* SAVED BRKSI DURING TASK 2
       DI BRKRG;* RING NUMBER OF BROKEN STATEMENT
       DI SBRKRG;* SAVED BRKRG DURING TASK 2
       DI DIRTN1,DIRSI1,DIRRG1;* SAME FOR TASK 1 DIRECT STATEMENT
       DI DIRTN2,DIRSI2,DIRRG2;* SAME FOR TASK 2 DIRECT STATEMENT
       DI DREPTN,DREPRG;* TN AND RING FOR 'REPORT' STRING
       DI DTN1,DRG1;* TN AND RING FOR CURRENT EXPRESSION
       DI SMFILE;* FILE FOR DRUM AND DISK SIMULATION
       DI CPFTN;* TN OF BLOCK BEING COMPILED
       DA REXISTS[NRINGS];* #0 IF RING EXISTS

* RING-INVARIANT TABLE SPACE ADDRESSES
       DI AGLOB←20000B;* FILE ADDRESS OF GNT
       DP AGW←234000B;* WINDOW ADDRESS OF GNT
       DI TABBOT←20000B;* FILE ORIGIN OF TABLES
       DI TABLIM←4B7-1;* FILE LIMIT OF TABLES
       DP VARA←360000B;* (WINDOW) ADDRESS OF VARIABLES
       DP LGBIT←360400B;* ORIGIN OF LOW-G BIT TABLE
       DP LGBLIM←360410B;
       DP RSGBIT←LGBLIM;* ORIGIN OF RSGS BIT TABLE
       DP RBLIM←362000B;
       DP WGDESC←RBLIM;* DESCRIPTOR FOR WGS ALLOCATOR
       DP WGLIM←363000B;
       DP TREEBOT←WGLIM;* ORIGIN OF TREE AREA
       DP TREELIM←400000B;* END OF TREE AREA
       DP LITBUF←360000B;* LITERAL BUFFER (IN USER SPACE)
       DP ELITBUF←370000B;* END OF LITBUF

* STATE VARIABLES
       DI XPANFAC;* PERCENTAGE EXPANSION FOR IB WHEN FULL
       DI RING;* CURRENT CODE RING
       DI CODEFLAG;* PRINT CODE FLAG
       DI STATFLAG;* PRINT STATISTICS DURING COMPILATION
       DI TREEFLAG;* PRINT TREE FLAG
       DI PPTFLAG;* PRINT PPT FLAG
       DI IMPROVE;* OPTIMIZE CODE FLAG
       DI FLOCFLAG;* IGNORE FLOC FLAG
       DI BARE;* BARE MACHINE FLAG
       DI CODEXP;* PERCENTAGE EXPANSION FOR CODE FOR FUNCTION
       DI SYMFT;* 940 FOR 940-TYPE FILES, 0 FOR M1-TYPE
       DI EDTERM;* TERMINATOR FROM LINE EDIT
       DQ LTV←12;* LENGTH OF TAB VECTOR
       DA TABS[LTV+1];* TAB POSITIONS
       DI LTABS←LTV;* EXTERNALLY AVAILABLE LTV
       DI QUITF;* >=0 IF 'QUIT' HAS OCCURRED
       DI QUITMODE;* #0 TO ABORT ON 'QUIT'
       DECLARE LABEL QUITGO;* GO HERE ON 'QUIT' IF QUITMODE SET
* THE FOLLOWING NUMBER OF QUITS IN A ROW WILL SEND CONTROL TO
* QUITGO EVEN IF QUITMODE = 0.
       DECLARE PARAMETER QUIT'ABORT'LEVEL ← 3;
       DI PROCNO;* PROCESS NUMBER (I.E., PRT INDEX) OF THIS PROCESS
       DI SSPNO;* SUBPROCESS NUMBER OF SPL
       DI SPL'SPCSL;* SPL'S INITIAL ENTRY IN SUB-PROCESS CALL STACK
       DI USPNO;* SUBPROCESS NUMBER OF USER
       DI M1MODE;* #0 IF RUNNING PROGRAMS ON REAL M1
* WORKING SET SIZE PARAMETERS AND VARIABLES
       DECLARE PARAMETER
           OPTIMAL'OLCWS ← 30, /*"BEST" VALUE FOR OLCWS*/
           OPTIMAL'OLDWS ← 30; /*"BEST" VALUE FOR OLDWS*/
       DECLARE INTEGER
           DESIRED'OLCWS, /*PREFERRED OLCWS. NORMALLY OPTIMAL'OLCWS*/
           DESIRED'OLDWS, /*PREFERRED OLDWS.  NORMALLY OPTIMAL'OLDWS*/
           SAVED'OLCWS,   /*VALUE OF OLCWS WHEN SPL WAS ENTERED*/
           SAVED'OLDWS;   /*VALUE OF OLDWS WHEN SPL WAS ENTERED*/

*** RING VARIABLES

       DQ NRVARS←50, VARNO←0;
       DA RVARS[NRVARS];
       DI BRVARS←@RVARS[0];
       DM RV←=RVARS[VARNO],INTEGER VARNO←VARNO+1;

       DI EFORMAT RV;* INDENTATION AND SPACING FORMAT
       DI EMARGIN RV;* INDENTATION MARGIN
       DI EINDENT RV;* INDENTATION INCREMENT
       DI ECONTSP RV;* CONTINUATION LINE INCREMENT
       DI UMCONT RV;* 1=PRINT CTRL CHARS, 0=USE &
       DI E1TN RV;* FUNCTION TN OF FIRST EDITOR ADDRESS
       DI E1SI RV;* STATEMENT SI FOR SAME
       DI E1LN RV;* LINE INCREMENT FOR SAME
       DI E2TN RV,E2SI RV,E2LN RV;* SAME AS ABOVE FOR SECOND ADDRESS
       DI ECLTN RV,ECLSI RV,ECLLN RV;* SAME FOR CURRENT LINE
       DI EDUTN RV,EDUSI1 RV,EDUSI2 RV,EDUSI3 RV;* UNHOOKED INTERVAL
       DI EDITN RV,EDISI1 RV,EDISI2 RV;* INSERTED INTERVAL
       DI DBKTN RV,DBKSI RV,DBKFL RV;* SPECIAL BREAKPOINT
       DI DNSMASH RV;* NUMBER OF BREAKPOINTS ACTUALLY INSERTED
       DI CALLSTACK RV;* TOP OF USER CALL STACK
       DP TABTOP RV;* POINTER TO TABLE AREA
       DP TREETOP RV,POINTER TREEMEM RV;* POINTERS TO TREE AREA
       DP CODEBOT RV,POINTER CODETOP RV,POINTER CODELIM RV;* POINTERS TO CODE AREA
       DP FIXER RV;* ADDRESS OF FIXUP CODE
       DP STKBOT RV,POINTER STKTOP RV;* POINTERS TO STACK AREA
       DP FFREE RV;* FREELIST BEAD FREELIST
       DP BWGA RV;* BEGINNING OF WGS
       DP EWGA RV;* CURRENT END OF WGS
       DP BRSGA RV;* BEGINNING OF RSGS
       DP ERSGA RV;* END OF RSGS
       DP LRSGA RV;* LOWER LIMIT OF RSGS
       DP BOWGA RV;* BEGINNING OF OWGS
       DP EOWGA RV;* CURRENT END OF OWGS
       DI MOBTN RV;* GNT TN OF MACHINE OPCODE IB
       DI DMYTN RV;* GNT TN OF DUMMY FUNCTION
       DI RTEFD RV;* ADDRESS OF FD FOR RUNTIME'FAILURE
       DI LCPFD RV;* ADDRESS OF FD FOR LONG'COMPARE
       DP GBASE RV;* ORIGIN OF CURRENT GLOBAL ENVIRONMENT


***
*** STRINGS AND ARRAYS
***
       DS CSTR(80);* COMMAND LINE STRING
       DS UPS(200);* UNPACK STRING FOR STATEMENT
       DS EEES(20);* WORK STRING FOR EDITOR
       DA PPTB[300];* PREPROCESSED INPUT BUFFER
***    THE DIMENSION OF PPTB SHOULDBE ITLN, BUT
***    ITS DECLARED IN PPDEC
       DP PPTA←@PPTB[0];

       COMMON STST;
       INCLUDE STBD;

************************
* SPL STORAGE ROUTINES *
*    GLOBAL STORAGE    *
************************


       DM DCA←DECLARE ARRAY;
* NEW-LINE STRING
       DS NEWLINE←"&/";

***
*** GLOBAL CELLS
***

* CELLS FROM GNT AND IB, SET UP BY SSELECT
       DP ICBA;* WINDOW ADDRESS OF IB
       DI ICTYPE;* GSTYPE (FROM GNT)
       DI ICGTN;* TN IN GLOBAL NAME TABLE
       DI ICFTYPE;* IBFTYPE
       DI ICRECOMP;* IBRECOMP
       DI ICTFL;* IBTFL
       DI ICLTT;* IBLTT
       DI ICLSU;* IBLSU
       DI ICLST;* IBLST
       DI ICFSTAT;* IBFSTAT
       DI ICLSTAT;* IBLSTAT
       DA ICHT;* HASH TABLE, 0-ORIGIN
       DA ICTT;* TOKEN TABLE, 1-ORIGIN
       DA ICST;* SYMBOL TABLE, 1-ORIGIN
       DI ICLBL;* LENGTH OF BLOCK LIST
       DA ICBT;* BLOCK LIST, 1-ORIGIN
       DI ICLCODE;* GSLCODE (FROM GNT)
       DI ICECODE;* IBECODE
       DA ICCODE;* CODE AREA, 0-ORIGIN
       DI ICLLIT;* IBLLIT
       DI ICNEWL;* GSNEWL (FROM GNT)
       DP ICGSP;* POINTER TO GNT ENTRY
       DI ICNXW;* IBNXW

* OTHER GLOBAL CELLS
       DECLARE ARRAY SSFSYM;* POINTER TO SYMBOL
       DI SSFSIZE;* SIZE OF SYMBOL
       DI SSNAME;* OFFSET OF NAME
       DI SHCODE;* SYMBOL HASH CODE
       DP SHCHAIN;* HEAD OF HASH CHAIN
       DI ICTOKEN;* TN OF LAST SYMBOL LOOKED UP
       DI INSYMF;* INCREMENTED WHEN SYMBOL INSERTED
       DI ICAA;* ABSOLUTE ADDRESS OF IB
       DI ICNPW;* NUMBER OF IB PAGES IN WINDOW
       DP ICWBA;* GTWBA, ATWBA, OR TWBA
       DECLARE LABEL CERRX;* ERROR BRANCH LOCATION
       DI NOERRP;* SUPPRESS ERROR MESSAGE FLAG
       DECLARE FUNCTN CERRFN;* ERROR PRINTING FUNCTION
       DI DBFLAG;* GOTO FLAG FOR DEBUGGER
       DI SSID;* SOURCE STATEMENT I.D.
       DP NODE;* LAST NODE BUILT OR SCANNED
       DI RELLOC;* RELATIVE CODE LOCATION
       DI ILEV;* INDENTATION LEVEL
       DI SILEV;* INDENTATION LEVEL FOR CURRENT STATEMENT
       DI MAXLR;* LENGTH OF ASSIGNED LOCAL ENVIRONMENT
       DI WGCTR;* AMOUNT OF WGS ASSIGNED
       DI RSGCTR;* AMOUNT OF RSGS ASSIGNED
       DI CCONST;* CONSTANT FOR UCLEAR
       DS FOSTR;* FORMAT STRING
       DI FOSWI;* FORMAT SWITCH INDEX
       DI FOFILE;* FORMAT FILE NUMBER

* BOOKKEEPING VARIABLES FOR ADDRESS SPACE
       DP ULBA;* LAST WINDOW PAGE ADDRESS FOR CODE
       DI ULVP;* LAST VIRTUAL PAGE NUMBER FOR CODE
       DI ULFN;* LAST FILE NUMBER FOR CODE
       DP UWBA←214000B;* ADDRESS OF USER PAGE WINDOWS
       DCA UPPTAB[NUPW];* VIRTUAL PAGE NUMBERS IN WINDOWS
       DCA UPTTAB[NUPW];* TIME WHEN PAGES LAST REFERENCED
       DCA UPFTAB[NUPW];* FILE NUMBERS FOR PAGES IN UPPTAB
       DI UPCTR;* "TIMER" FOR PAGE REFERENCES
       DP TWBA←324000B;* ADDRESS OF IB PAGE WINDOWS
       DP ATWBA←270000B;* ADDRESS OF SECOND IB PAGE WINDOWS
       DP GTWBA←234000B;* ADDRESS OF GNT PAGE WINDOWS


*** TABLE GIVING LENGTH OF REQUIRED STORAGE
       DCA TTLTAB[TTNTT]←(
   0,1,1,2,4,4,4,2,2,4,2,1,1,0);

*** TABLE TO CONVERT MODES TO TYPES
       DCA TMTTAB[SMNSM]←(
   0,TTFUNC,TTARRAY,TTFIELD,TTARRAY,TTFIELD,TTFUNC);

*** TABLE TO CONVERT EXTERNAL MODES TO INTERNAL
       DCA TXMTAB[SMNSM]←(
   SMVALUE,SMFUNC,SMARRAY,SMFIELD,SMARRAY,SMFIELD,SMFUNC);


*** ERROR MESSAGE BUFFER
       DQ NERB←10;
       DECLARE ARRAY ERNB[NERB];
       DI ERBP,ERBC;


* MAXIMUM T.V. INDEX FOR DIFFERENT SORTS OF FUNCTION
* (ONLY USED BY SINIT AND TVEA)
       DCA TMITAB[8*NRINGS]←(
   4B7,4B7,4B7,
   -1,-1,377B,
   -1,377B,-1,
   117B,11B,11B,
   -1,-1,-1,
   -1,-1,14B,
   77B,77B,77B,
   17B,17B,17B);
       DCA TMDTAB[8]←(
   -1,377B,377B,-1,-1,-1,-1,-1);

* T.V. ORIGINS, BY SORT
* RELATIVE TO G' IF BIT 0 IS ON
* TRAP-TYPE IF BIT 1 IS ON
* 1-ORIGIN IF BIT 2 IS ON
       DCA TTVTAB[8]←(
   0,604000B,403016B,7B7+6,7B7+6,30604002B,4B7,6B7+12B);


* TABLE OF SPECIAL INTRINSIC FUNCTION TN'S
       DCA FNVEC[10];

       COMMON SCST;
       INCLUDE STBD,SCOPS;

*********************
* SPL CODE ROUTINES *
*  GLOBAL STORAGE   *
*********************


***
*** TREE TABLES
***

       DA TGHT;* TREE NODE HASH TABLE
       DI TGLHT;* LENGTH OF TGHT
       DP TVHTB,TVHTE;* VARIABLE SEQUENCING HASH TABLE
       DI TVLHT;* LENGTH OF TVHT
       DI TVLHM;* MASK TO FRM TVHT INDEX

* FIELDS IN VARIABLE SEQUENCING HASH TABLE
       DFF TVHSEQ(0:0,11);* SEQUENCE NUMBER
       DFF TVHTOKEN(0:12,23);* TOKEN NUMBER
       DFF TVHVAL(0);* COMBINED VALUE WORD
       DFF TVHNODE(1);* POINTER TO NODE FOR VARIABLE
       DQ TVLLE←1,TVHLE←1 LSH TVLLE;* LENGTH OF ENTRY (POWER OF 2)


       DQ TOVAR←42400B+OPVAR;
       DQ TONIL←1400B+OPNIL;


*
* DECLARATIONS FOR TYPE MATCHER
*

* FIELDS AND PARAMETERS
       DFF ACTYPE(0:12,13);* ACTION TYPE:
        DQ ATE←0,ATS←1,ATC←2;
       DFF ACTNO(0:14,23);* ACTION (ETC.) NUMBER
* IN NTT
       DFF NTM1(0),NTM2(1);* MASKS IN NTT
       DFF NTTT(2:0,1);* TABLE TYPE:
        DQ NTTBO←0,NTTCBO←1,NTTUO←2;
       DFF NTNT2(2:12,23);* NUMBER OF 1'S IN NTM2
       DFF NTSTY(3);* ASSOCIATED STT
       DQ NTORG←4;
* IN STT
       DFF STT1(0),STT2(1);* TYPE MASKS IN STT
       DFF STCOMM(2:0,0);* TYPES COMMUTE
       DFF STACT(2:12,23);* ACTION
       DQ STLE←3;

       COMMON PSTO;
       INCLUDE SPAR;

**************
* SPL PARSER *
*  STORAGE   *
**************



*** DECLARATIONS FOR PARSER

* MISCELLANEOUS
       DM DFA←DECLARE ARRAY;
       DM NEXT←GETTOKEN();

* D CLARATIONS FOR INPUT STREAM DESCRIPTOR
       DF ISDRP(0);* 12-BIT CHAR. DESCRIPTOR, RELATIVE TO SYMBOL
*              TABLE, OF TOKEN JUST READ FROM PPT
       DF ISDWP(1);* SAME FOR LAST TOKEN OF CURRENT PPT
       DF MCDNA(0);* NUMBER OF ARGUMENTS FOR MCD
       DF MCDAA(1);* ARGUMENT BASE ADDRESS FOR MCD
       DF ISDMA(2);* ADDRESS OF MACRO CALL DESCRIPTOR
       DQ LISD←3;* LENGTH OF ISD
*
       DM HWINC(X,Y)←.ISD $X, BEQ Y;* ASSUMES ISDRP=(0),ISDWP=(1)
       DM HWPTR(X)←INCDES(5B7,X);
       DM HWPOS(X)←LNGDES(5B7,X);
       DM HWGET(X,N)←$(X+N);
       DM HWPUT(X,N,Y)←$(X+N)←Y;
       DM LNGHW(X,Y)←LNGDES(X,Y);
       DM INCHW(X,Y)←INCDES(X,Y);

* DECLARATIONS FOR PARAMETER VECTOR
       DQ DPDIM←0;* DIMENSION CHAIN FOR ARRAY
       DQ DPSIZE←1;* ITEM SIZE FOR ARRAY
       DQ DPBSIZE←2;* BYTE SIZE FOR STRING
       DQ DPLENGTH←3;* LENGTH FOR STRING
       DQ DPBASE←4;* BASE ADDRESS FOR STRING OR ARRAY
       DQ DPFWNO←0;* WORD DISPLACEMENT FOR FIELD
       DQ DPFIB←1;* INITIAL BIT FOR FIELD
       DQ DPFFB←3;* FINAL BIT FOR FIELD
       DQ LPARV←5;* LENGTH OF PARAMETER VECTOR

* TOKEN NUMBERS OF INTEREST
       DQ BEGCHT←6000B;* START OF SPECIAL CHARACTERS
       DQ TFMIN←6000B;* MINIMUM "FUNNY" TOKEN FOR GUIT
       DQ TNBMIN←7400B,TNBMAX←7600B;* MIN. AND MAX. MULT. BLANK TOKENS
       DQ TCOMMENT←7601B;* COMMENT TOKEN
       DQ TPPERR←7602B;* PP ERROR TOKEN
       DQ TSTRCON←7603B;* CONTINUED STRING CONSTANT TOKEN
       DQ TLARR←BEGCHT+'←',TLPAR←BEGCHT+'(',TRPAR←BEGCHT+')',
          TCOMMA←BEGCHT+',',TSEMI←BEGCHT+';',TSTAR←BEGCHT+'*';
       DQ TDOT←BEGCHT+'.',TAT←BEGCHT+'@',TSLASH←BEGCHT+'/',
          TLESS←BEGCHT+'<',TGREATER←BEGCHT+'>',
          TEQUAL←BEGCHT+'=',TCOLON←BEGCHT+':',
          TLBRAK←BEGCHT+'[',TRBRAK←BEGCHT+']';
       DQ TDO←6412B,TENTRY←6415B,TFIELD←6422B,TFUNCTION←6425B,
          TVALUE←6466B,TFRETURN←6424B,TORIGIN←6473B;


* COMMUNICATION BETWEEN PARSE, PMAC, SCALL, AND SCTRE
       DECLARE REFERENCE IDPTR;* POINTER TO CURRENT SOURCE ID
*              (CISDRP OR IN ISD STACK)
       DI NXTSYM;* LOOK-AHEAD TOKEN
       DI THISYM;* CURRENT TOKEN
       DI PREVSYM;* PREVIOUS TOKEN
       DI NODEID;* ID TO PUT IN NODES
       DI CURSI;* SI OF NXTSYM (CURRENT PPT)
       DI CFSSI;* SI ARGUMENT OF PARSE
       DI CESSI;* SI AT ; OR ERROR
       DI CESTI;* TI AT ; OR ERROR
       DI STYPES;* MASK FOR ALLOWABLE STATEMENT TYPES
       DI STYPE;* ACTUAL STATEMENT TYPE
       DI XREF;* <0 TO OUTPUT CROSS-REFERENCES
       DP NULLCH;* 'NIL' TREE NODE
       DECLARE FUNCTN GUIT;* GET-NEXT-TOKEN ROUTINE

       COMMON SGST;
       INCLUDE STBD,SGDEC;

*******************
* SPL CODE OUTPUT *
*  GLOBAL SCALARS *
*******************


***
*** GLOBAL CELLS
***

       DI BASLR;* ORIGIN OF TEMPS IN LOCAL ENVIRONMENT
       DI CURLR;* NEXT FREE CELL IN LOCAL ENV.
       DI FRETLR;* LOC. OF FRETURN IN LOCAL ENV.
       DI CONTA;* CURRENT (A)
       DI CONTX;* CURRENT (X)
       DI RELORG;* FUNCTION-RELATIVE ORIGIN OF CODE
       DI LITLOC;* FUNCTION-RELATIVE LOCATION IN LITERALS
       DP RESULT;* RESULT ADDRESS OR 0
       DI RMODE;* RESULT MODE
       DI NORCSIZE;* DEFAULT CHARACTER SIZE
       DP VAA;* ABSOLUTE ADDRESS OF ALLOCATED BLOCK
       DI VINSA;* INSTRUCTION ADDRESS FOR SAME
       DI VIWA;* INDIRECT ADDRESS FOR SAME
       DI ABSLOC;* ABSOLUTE LOCATION IF >=0
       DI INITSR;* ADDRESS OF SETUP SUBROUTINE
       DI INITSF;* -1 IF SETUP ROUTINE NOT CLOSED
       DI CFLOC;* (D)FLOC OF FUNCTION
       DI LASTB;* F-RELATIVE LOC. OF LAST BDEF
       DI NRETVAL;* -1 IF NO RETURNS SEEN, 0 IF 0 OR 1 VALUE, 1 IF >1

       COMMON SGTAB;
       INCLUDE STBD,SGDEC,SCOPS;

*******************
* SPL CODE OUTPUT *
*  GLOBAL TABLES  *
*******************





***
*** TABLES ASSOCIATED WITH BLL
***


* TABLE TO CONVERT TYPE NUMBERS TO BLL F.P. TYPES
       DECLARE ARRAY TFPTAB[TTNTT]←(
   -1,FPINT,FPINT,FPREAL,FPDBL,FPCPLX,FPSTR,FPLAB,
   FPLONG,FPLLONG,-1,FPINT,FPINT,-1);

* TABLE TO CONVERT TYPE NUMBERS TO BLL A.P. TYPES
       DECLARE ARRAY TAPTAB=TFPTAB;

* TABLE TO DEFINE TYPES THAT MUST BE PASSED THROUGH STORAGE
       DECLARE ARRAY TSPTAB[TTNTT]←(
   1,0,0,0,0,0,1,1,0,0,1,0,0,0);


***
*** OPCODE TABLES
***

       DECLARE ARRAY TADOTB[3]←(ZADD,ZFAD,ZCFAD);
       DECLARE ARRAY TSBOTB[3]←(ZSUB,ZFSB,ZCFSB);
       DECLARE ARRAY TRCTAB[7]←(0,ZBLT,ZBEQ,ZBLE,ZBGT,ZBNE,ZBGE);

       COMMON UPPT;
       INCLUDE SPAR,KTDEC;

*
* LEXICAL ANALYSIS TABLES
*

*****
* 9/30/73  JACK FREEMAN
* THE DECLARATIONS IN THIS BLOCK ARE FROM FILE UPPT ON PFS@SPL-03.  THAT
* FILE WAS PRODUCED BY THE SNOBOL PROGRAM MKLEX (ALSO ON PFS@SPL-03) OP-
* ERATING ON THE FILE UPTAB (ALSO ON PFS@SPL-03).
*****

       DECLARE X23←132B;
       DECLARE TKN1←6400B+7B;
       DECLARE TKN3←6400B+20B;
       DECLARE TKN2←6400B+72B;

       DECLARE OCTAL ARRAY SPLCT[65]←(
        00000030B,00000010B,00101010B,00000014B,
        00000014B,00000010B,00000014B,00201050B,
        00000014B,00000014B,00000114B,00040014B,
        00000014B,00040014B,00000410B,00000014B,
        00000052B,00000052B,00000052B,00000052B,
        00000052B,00000052B,00000052B,00000052B,
        00000052B,00000052B,00000014B,00000210B,
        00000014B,00000014B,00000014B,00000010B,
        00000014B,00000051B,00002051B,00000051B,
        00010051B,00004051B,00000051B,00000051B,
        00000051B,00020051B,00000051B,00000051B,
        00000051B,00000051B,00000051B,00000051B,
        00000051B,00000051B);
       DECLARE OCTAL ARRAY SPLCT[50]←(
        00000051B,00000051B,00000051B,00000051B,
        00000051B,00000051B,00000051B,00000051B,
        00000051B,00000014B,00000010B,00000014B,
        00000014B,00000014B,40000000B);

       DECLARE OCTAL ARRAY SPLLX[96]←(
        00000100B,40000200B,00000020B,40000402B,
        00000001B,50000024B,00000004B,50000602B,
        00000200B,50000724B,00000400B,50000602B,
        00000002B,50000034B,00001000B,00000120B,
        00000010B,148*1B4+40001000B,77777767B,40001200B,
        00000040B,50000024B,77777776B,00001402B,
        00000040B,149*1B4+00001002B,77777737B,00000002B,
        00001000B,00000120B,00000002B,50000036B,
        00000400B,50000060B,00002000B,50000052B,
        00004000B,50000072B,00010000B,50000106B,
        00020000B,KTIMAG*1B4+40001630B,00000002B,
        50000054B,00000040B,149*1B4+00001002B,77777737B,
        KTINT*1B4+00001602B,00000002B,50000060B);
       DECLARE OCTAL ARRAY SPLLX[50]←(
        00004000B,50000072B,00010000B,50000106B,
        00020000B,KTIMAG*1B4+40001630B,77757777B,
        KTREAL*1B4+00001630B,00040000B,50000074B,
        00000002B,50000100B,77777775B,152*1B4+00001002B,
        00000002B,50000100B,00020000B,KTIMAG*1B4+40001630B,
        77757777B,KTREAL*1B4+00001630B,00040000B,
        50000110B,00000002B,50000114B,77777775B,
        151*1B4+00001002B,00000002B,50000114B,77777775B,
        KTDBL*1B4+00001630B,00100000B,1*1B4+40002002B,
        00200000B,0*1B4+40002002B,00000020B,40000524B,
        00000100B,40000200B,77777677B,00000004B,
        00000020B,40000532B,00000001B,50000024B,
        77777776B,157*1B4+00002200B);

       DECLARE FUNCTION ARRAYONE SPLAT[9]←(XS1,XS10,
        XS2,XSERR,XS17,XS3,XSCON,XSSTR,XSXERR);

       DECLARE OCTAL ARRAY SPLKW[187]←(
        00000000B,6'&002NDA',00010001B,6'&007RRA',
        6'YONE',6'   A',00030002B,6'&004RRA',6'Y  A',
        00070003B,6'&001&' A',00000004B,6'&001Y B',
        00000005B,6'&010HAR',6'ACTE',6'R  C',00160006B,
        6'&006OMP',6'LEXC',00220007B,6'&005OMM',
        6'ON C',00000010B,6'&006ECL',6'ARED',00300011B,
        6'&005OUB',6'LE D',00330012B,6'&001O D',
        00000013B,6'&005LSE',6'IF E',00400014B,6'&003LSE',
        6'   E',00430015B,6'&004NTR',6'Y  E',00460016B,
        6'&005NDF',6'OR E',00510017B,6'&004NDI',
        6'F  E',00540020B,6'&002NDE',00000021B,6'&002ORF');
       DECLARE OCTAL ARRAY SPLKW[50]←(
        00610022B,6'&004IEL',6'D  F',00630023B,6'&004IXE',
        6'D  F',00660024B,6'&006RET',6'URNF',00710025B,
        6'&007UNC',6'TION',6'   F',00740026B,6'&012TRA',
        6'P&'EN',6'TRYF',00000027B,6'&003OTO',6'   G',
        00000030B,6'&001F I',01070031B,6'&006NCL',
        6'UDEI',01110032B,6'&006NTE',6'GERI',00000033B,
        6'&002SHL',01170034B,6'&002CYL',01210035B,
        6'&004ABE',6'L  L',01230036B,6'&007ONG',
        6'LONG',6'   L',01260037B,6'&003ONG',6'   L',
        00000040B,6'&004ACR',6'O  M',01350041B,6'&002ODM',
        01400042B,6'&006ONI',6'TORM');
       DECLARE OCTAL ARRAY SPLKW[100]←(
        00000043B,6'&002OTN',01450044B,6'&001&' N',
        00000045B,6'&001R O',01510046B,6'&004CTA',
        6'L  O',00000047B,6'&010ARA',6'METE',6'R  P',
        01560050B,6'&002OPP',01620051B,6'&006OIN',
        6'TERP',00000052B,6'&002SHR',01670053B,6'&002CYR',
        01710054B,6'&005ETU',6'RN R',01730055B,6'&003EAL',
        6'   R',00000056B,6'&005TRI',6'NG S',02010057B,
        6'&005CAL',6'AR S',02040060B,6'&005IGN',
        6'ED S',02070061B,6'&005YSP',6'OP S',00000062B,
        6'&001O T',02150063B,6'&011RAP',6'&'ENT',
        6'RY T',00000064B,6'&006TIL',6'ITYU',00000065B);
       DECLARE OCTAL ARRAY SPLKW[150]←(
        6'&001&' V',02260066B,6'&004ALU',6'E  V',
        00000067B,6'&004HER',6'E  W',02330070B,6'&004HIL',
        6'E  W',00570071B,6'&001&' E',01640072B,
        6'&006ROG',6'RAMP',01530073B,6'&005RIG',
        6'IN O',01040074B,6'&001&' G',01320075B,
        6'&001&' L',01760076B,6'&001&' R',00000077B,
        6'&001&' X',02230100B,6'&006NKN',6'OWNU',
        02410101B,6'&007XTE',6'RNAL',6'   E',02120102B,
        6'&007P&'E',6'NTRY',6'   S');

       DECLARE OCTAL ARRAY SPLKWX[69]←(
        41000000B,70006400B,00120001B,00140003B,
        00250007B,00360012B,02640014B,01000016B,
        02510022B,00000025B,01140030B,00000033B,
        00000036B,02530040B,01420043B,01470046B,
        02460051B,02430054B,00000057B,02550061B,
        02700063B,02170066B,02610071B,02300074B,
        02360100B,02570104B,00000107B,00000111B,
        00000114B,00000117B,00000121B,00000123B,
        00000126B,00000132B,00000135B,00000140B,
        00000142B,00000145B,00000147B,00000151B,
        00000153B,00000156B,00000162B,00000164B,
        00000167B,00000171B,00000173B,00000176B,
        00000201B,00000204B);
       DECLARE OCTAL ARRAY SPLKWX[50]←(
        00000207B,00000212B,00000215B,00000217B,
        00000223B,00000226B,00000230B,00000233B,
        00000236B,00000241B,00000243B,00000246B,
        00000251B,00000253B,00000255B,00000257B,
        00000261B,00000264B,00000270B);
       END;*
       COMMON UPST;
       INCLUDE PPDEC,UPPT;

* UPST
*
* THIS FILE CONTAINS THE SPL UNPREPROCESSOR DECLARATIONS
* AND ALSO THE RESERVED WORD, CLASS, AND LEXICAL SCAN TABLES.
*



       DI PLISI; *INSERT TEXT BEFORE THIS SI
       DI PLITN; *INSERT TEXT IN THIS BLOCK
       DI PLISI1; *FIRST INSERTED SI
       DI PLISI2; *LAST INSERTED SI
       DI PLITN1; *FIRST INSERTED BLOCK TN
       DI PLITN2; *LAST INSERTED BLOCK TN
       DI PLLNCT; *NUMBER OF LINES INSERTED
       DI PLWDCT; *NUMBER OF WORDS READ FROM EXTERNAL FILE
* MISCELLANIOUS DECLARATIONS
       DECLARE ARRAY KWTBL; *KEYWORD TABLE USED BY KWST
       DECLARE ARRAY KWTBLX; *KEYWORD TABLE INDEX
       DP UPV; *TEMPORARY POINTER VARIABLE
       DP USPV; *POINTER TO SELECTED SYMBOL CELL
       DI UPPSI; *SI OF UNPREPROCESSING STATEMENT
       DI USI1,USI2; *FIRST TWO WORDS OF SELECTED SYMBOL CELL
       DI UPI1,UPI2; *MAIN FOR LOOP INDEX AND UPPER BOUND
       DI UNERR; *THIS RECEIVES ERROR NUMBERS WHEN ERRORS OCCUR
       DI UNTK; *SELECTED TOKEN NUMBER
       DI UNSPCT; *SPACE COUNT
       DI UNSMOD; *SPACE MODE 4=2&INDENT, 3=1&INDENT, 2=DUPLICATE, 1=STANDARD
       DI UTKIND; *HALFWORD INDEX OF INDENTED TOKEN
       DI UNCHN; *FIRST CHARACTER NUMBER OF TOKEN NUMBER UNTOKN
       DI UNCHNE; *LAST CHARACTER+1 NUMBER OF TOKEN NUMBER UNTOKN
       DS UNFFS←"&&%"; *ESCAPE REPRESENTATION OF PAGE EJECT
       DI UNCSTR; *CONTINUE STRING FLAG

       COMMON PRST;
       INCLUDE UPST;

* PRST
*
* THIS FILE CONTAINS THE SPL PREPROCESSOR DECLARATIONS
*

       DECLARE ARRAY PPOPT[10]←(@SPLCT,@SPLAT,@SPLLX,@SPLKW,@SPLKWX);
*          *PREPROCESSOR OPTION ARRAY
       DECLARE ARRAY PPOPTF[8]←(0,11211B3,02220B3,12222B3,10023100B,
           10024100B,10011000B,0);
*          *PREPROCESSOR OPTION FLAG ARRAY
       DECLARE ARRAY PLID[PLIDL+1];
       DS PLIDS;
       DI PKCN; *BIT POSITION FOR PACKED NUMBERS
       DI PLIDF; *COMMON OR PROGRAM SENSED FLAG
       DI PLFILE; *INPUT FILE NUMBER -2=CLOSED EXTERNAL FILE, -1=STRING,
*          *0=TELETYPE, >0=OPEN EXTERNAL FILE.
       DI PLTYP; *PREPROCESSOR LANGUAGE OPTION
       DI PLIBTP; *IB TYPE PARAMETER TO ZNEWIB FUNCTION
       DI PIT; *LAST TOKEN INDEX IN PPTB
       DI PLBCT; *INTER TOKEN BLANK COUNT
       DI PWFL; *FIRST LETTER OF IDENTIFIER
       DI PWLS; *TOTAL LENGTH OF IDENTIFIER
* PLEX STATE VARIABLES
       DI PLCH; * CURRENT CHARACTER
       DI PLNI; * NEXT PLT INDEX
       DI PLSN; * SCAN INDICATOR
       DI PLCHC; * CURRENT CHARACTER CLASS
       DI PLERR; * PREPROCESSOR ERROR NUMBER
       DI PLBM; * LAST BLANK MASK
       DI PLPAR; * ACTION PARAMETER
       DECLARE STRING PIS(150); *INPUT STRING TO PLEX
       DECLARE STRING PLSTR(25); * BUFFER STRING
       DECLARE ARRAY PCT; * CHARACTER CLASS TABLE
       DECLARE FUNCTN ARRAY PAT; * ACTION TABLE
       DECLARE ARRAY PLT; * LEXICAL TABLE
       DECLARE ARRAY KWTB; * KEYWORD TABLE
       DECLARE ARRAY KWTBX; *KEYWORD TABLE INDEX
       DI PLFG; *PACKED OPTION WORD FOR PREPROCESSOR

       COMMON EDST;
       INCLUDE UPST;

* EDST
*
* THIS FILE CONTAINS THE SPL EDITOR DECLARATIONS
*

       DI EDSTK; *LABEL TOKEN IN CURRENT IB
       DI EDLSCP; *ADDRESS SCOPE 1=INTER-IB, 0=INTRA-IB
       DI EDIR; *SEARCH INCREMENT--SIGNED NUMBER OF LINES
       DI EDABT1; *SEARCH ABORT INDICATOR FOR CURRENT IB
       DI EDABT2; *SECOND ABORT INDICATOR FOR TERMINAL IB IF SCOPE=PROGRAM
       DI EDLSSI; *LAST SI OF SEARCH
       DI EDLSTN; *LAST TN OF SEARCH
       DI EDNSB; *NUMBER OF SUBSTITUTIONS
       DI EDNEWL; *NEW LINE IF=0 FOR SUBSTITUTION
       DI EDSTN; *IB TOKEN NO. FOR WHICH SEARCH ENVIRONMENT IS SET UP
       DI EDTKNO; *USED IN EDTK AS FIRST TOKEN TO START SEARCH AT
       DI EDINTV; *INTERVAL/ADDRESS FLAG, 0=ADDRESS
       DI EDSUX1, EDSUX2; *FIRST AND LAST CHAR. NOS. OF REPLACEMENT
       DI EDKT1,EDKT2; *FIRST AND LAST TOKEN NOS. OF FOUND TOKEN STRING
       DI EDKT3; *TOKEN NUMBER TO RESUME SEARCH AT FOR MULTIPLE SUBSTITUTES
       DI EDLTN,EDLSI; *IB TOKEN AND LINE SI USED AS TEMP AND PARAMETER
       DI E3TN,E3SI,E4TN,E4SI; *TEXT FROM INTERVAL
       DI EDTFG; *GET FLAG 1=YES, 0=NO
       DI EDLXCH; *TEMP STORAGE FOR CHARACTER
       DI EDSB; *SUBSTITUTE STRING TERMINAL CHARACTER
       DI EDLXV; *NUMBER COLLECTED AND TRANSLATED BY EDNUM
       DI EDLANG; *LANGUAGE BEING EDITED
       DI EDFN; *FILE NUMBER
       DS EDMS1←" LINES = ";
       DS EDMS2←" WORDS&/";
       DS EDMS3←" LINES DELETED&/";
       DS EDMS4←" LINES CHANGED&/";
       DS EDMS5←" LINES MOVED&/";
       DS EDMS6←"#";
       DS EDMS7←" = <>#";
       DS EDMS8←" SUBSTITUTIONS&/";
       DS EDMS9←"LIMITED TO ";
       DS EDMS10←"Y OR N?   ";
       DS EDMS11←" SUBSTITUTE IN THIS LINE? ";
       DS EDMS12←"?? TYPE 'Y' FOR YES, 'N' FOR NO&/";
       DS EDLIST(0); *TEMP CHARACTER STRING FOR PORTIONS OF COMMAND LINE
       DS EDFNM(20); *FILE NAME
       DS EDPS(60); *DEFAULT SEARCH STRING FOR SUBSTITUTIONS
       DS EDPSRS(60); *DEFAULT SEARCH STRING FOR ADDRESSES
       DS EDTKNS(0); *SEARCH FOR THIS TOKEN STRING IN EDTK
       DS EDSUBS(60); *SUBSTITUTE STRING
       DS EDPST(60); *DEFAULT SUBSTITUTED STRING
       DECLARE ARRAY EDID[5]; *STORAGE FOR NAMES
       DECLARE ARRAY EDTKA[20]; *USED FOR TOKEN SEARCH STORAGE
       DECLARE ARRAY EDTKM[20]; *MASKS FOR TOKEN SEARCH
       DECLARE ARRAY EDCSH[4]←(18,12,6,0); *USED FOR SHIFT COUNTS
       DECLARE STRING ARRAY EDCMAR[23]←(
           "APPEND",
           "",
           "CHANGE",
           "DELETE",
           "EDIT",
           "","","",
           "INSERT",
           "","",
           "LIST",
           "MODE",
           "NEXT",
           "",
           "PREVIOUS",
           "",
           "READ",
           "SUBSTITUTE",
           "TABS",
           "UNDO",
           "VALUE",
           "WRITE");

       COMMON DBCOM;
       INCLUDE STBD;

       DQ NCOMMAND←17;* NUMBER OF DEBUGGER COMMANDS
*
*MESSAGES
       DS MCR←"&/";
       DS MCOMMA←",";
       DS MZAPPED←"ZAPPED&/";
       DS DBT1←"TASK 1";
       DS PSTR(80);* PRINT ACCUMULATION STRING
       DS QSTR(80);* ARGUMENT STRING
       DS REPS(150);
       DS DGPB←"G'[",DLPB←"L'[",DXPB←"X'[",DXP←"X'",DRPB←"R'[";
*ARRAYS
       DECLARE ARRAY DTW[18]←(1,1,1,2,1,4,4,2,1,1,1,4,2,1,1,2,2,1);
       DECLARE ARRAY DMODA[13]←('I','O','8','R','6','X',
               'S','B','U','M','F','W','Y');
       DECLARE ARRAY DBCA[NCOMMAND]←('E','N','P','M','G',
               'C','S','B','K','D','T','R','L','F','A','W','V');
       DECLARE ARRAY DXCA[NCOMMAND]←('/','>','<','#','$',
               ',','+','.','[',']',';','(','↑',')','%','!','←');
       DECLARE FUNCTN ARRAY DFAA[NCOMMAND]←(DSE,DSN,DSP,DSM,DSG,
               DSC,DSS,DSB,DSK,DSD,DST,DSR,DSL,DSF,DSA,DSW,DSV);
       DECLARE ARRAY MODES[73B];* MODIFIER TABLE
* ELEMENTS 0 THROUGH 13 OF MODES ARE RESERVED FOR THE EDITOR, AND USED
* AS FOLLOWS:
*      "AFTER": 0,7
*      "BEFORE": 1,8
*      "CONFIRM": 2,9
*      "INTERPRET": 3,10
*      "SUBSTITUTION LIMITS": 4,11
*      UNUSED: 5,6,12,13.
* ELEMENTS 14 AND 15 OF MODES ARE UNUSED.
* ELEMENTS 16 THROUGH 72B ARE RESERVED FOR THE DEBUGGER.

       DECLARE ARRAY DSTATE[3*LSTATE];* TEMP FOR 1ST PROG STATE
       DECLARE ARRAY DSUB[8],DSUB1[8],DSUB2[8];
       DECLARE ARRAY DHSTACK[3];
       DECLARE ARRAY DSPM[128];
       DECLARE ARRAY DTEMP[50];*HOLDS BREAKPOINT ADDRESSES, TEMPS
*
*POINTERS
       DP POINT;* TEMPORARY POINTER
*
*PERMANENT MODE FLAGS
       DI PMODPT;* PRINT FORMAT
       DI PMODGH;* COUNT ON PARTICULAR BREAK
       DI PMODEN;* PRINT MOESSAGE EVERY
       DI PMODD;* DOUBLE FORMAT
       DI PMODP;* POINTER FORMAT
       DI PMODLQ;* PRINT CURRENT STATEMENT
       DI PMOD01;* PRINT BARE OR ABSOLUTE
*

*
*GLOBAL VARIABLES
       DECLARE LABEL DERRT;* FOR ERROR RETURN
       DI DBC;* COMMAND CHARACTER
       DI DEEA,DEEB,DEEC,DEED;* DEE OPERAND
       DI DEEX;* DEE OPERAND ADDRESS
       DI DEET,DEETP,DEETD;* DEE OPERAND TYPE
       DI DEVERY;* TEMP PRINT MESSAGE EVERY FLAG
       DI DSEM,DSED,DSEP;* PRINT FORMAT
       DI DSSEM,DSSED,DSSEP;*USED TO CHECK FOR CHANGE OF PRINT MODE
       DI DPCNT,DLREG,DNEWF,DNEWL,DNOUN;*USED IN UNWINDING THE STACK
       DI DGNTC,DGNTI,DGNTE,DGNTB;*USED IN GET NEXT TOKEN
       DI DRTNF;* RETURN FROM PROGRAM FLAG
       DI DCDC=DEEA;* COUNT DOWN COUNT
       DI DCDA;* COUNT DOWN ADDRESS
       DI DBKSP;* SPECIAL REENTRY FLAG
*      DI *DNSMASH;* 1ST CELL NOT SMASHED,RELATIVE TO CODETOP
       DI DGMODE,DGTYPE,DGDTYPE;* MODE, TYPE, DEBUG TYPE FOR EVAL SYMBOL;
       DI DLOUD;* TEMP LOUD MODE FLAG
       DI DRLB,DRUB;* BOUNDS FOR SIMULATOR BOUNDS RETURN
       DI DINC;* INCREMENT FOR KIND 2
       DI DBKNP;* USED IN SCAN FOR NEXT BREAKPOINT
       DI BRKDP;* DISPLACEMENT OF PCNT FROM BEGINNING OF BREAK STAT
       DI SBRKDP;* SAVED BRKDP DURING TASK 2
*      DI *DBKTN,*DBKSI;* ADDRESS OF TRACE BREAKPOINT
*      DI *DBKFL;*FLAG TO TELL IF TRACE BKP COINCIDES WITH A BKP
*      DI *BRKRG;* BREAK RING NUMBER
       DI BRKFLG;* INDICATES WHEN PCNT IS NOT IN A PROGRAM
       DI SBRKFLG;* SAVED BRKFLG DURING TASK 2
       DI DABSF;* VIRTUAL VS ABSOLUTE REAL CORE
       DI DUSERF;* USE USER ADDRESS SPACE IF <0
       DI DTASK;* TASK LEVEL
       DI DDIR;* EXAMINE DIRECTION
*      DI *DTN1;* EXAMINE TOKEN NUMBER
       DI DTN2;
*      DI DRG1;* EXAMINE RING NUMBER
       DI DRG2;
       DI DLOC1,DLOC2;* EXAMINE LOCATION
       DI DADD1,DADD2;* EXAMINE ADDRESS
       DI DDIM1,DDIM2;* EXAMINE DIMENSION
       DI DKIND1,DKIND2;* EXAMINE KIND
*      DI *DIRTN1;* DIRECT STATEMENT TN FOR TASK 1
*      DI *DIRSI1;* DIRECT STATEMENT SI FOR TASK 1
*      DI *DIRTN2;* DIRECT STATEMENT TN FOR TASK 2
*      DI *DIRSI2;* DIRECT STATEMENT SI FOR TASK 2
*      DI *DIRRG1;* DIRECT STATEMENT RING FOR TASK 1
*      DI *DIRRG2;* DIRECT STATEMENT RING FOR TASK 2
       DI DLEVNO;* LEVEL NUMBER FROM LEVEL COMMAND
*
*      DI *DREPTN;* REPORT FUNCTION NUMBER
*      DI *DREPRG;* REPORT RING NUMBER
       DI DUNF;* UNDEFINED FLAG
       DI DBASE,DDIM,DLB,DSIZE;
       DI DPRSZ,DELSZ;
       DI DCRING;* CURRENT RING

*
*THE FOLLOWING ARE DEFINED ELSEWHERE BUT MUST BE INCLUDED FOR SPL
      DECLARE DSINIT,DSRING;
      DECLARE ARRAY DPHM[128],DSSAV[3*LSTATE],DBB[200];
       DECLARE DPHMAP←@DPHM[0],DSSAVE←@DSSAV[0];
       DECLARE DBBUF←@DBB[0],EDBBU ←DBBUF+200;
