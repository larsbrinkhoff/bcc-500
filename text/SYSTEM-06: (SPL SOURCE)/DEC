       COMMON SPAR;

*************
* UNIVERSAL *
* PARAMETER *
*  PACKAGE  *
*************


***
*** STUFF TO CONVERT FOR M1
***

* FUNCTION TO GENERATE DESCRIPTOR FOR ARRAY
*      (SEE BELOW)
* MACRO FOR @A[I]
       MACRO A(X,I)←@X[I];
* MACRO FOR P.F
       MACRO F(P,X)←P.X;
* MACRO FOR P.F←E
       MACRO E(P,X,Y)←(P.X←Y);
* MACRO FOR E@F
       MACRO U(X,P)←((X)@P);
* LOGICAL OPERATORS
       MACRO AA←A';  MACRO VV←V';
       MACRO NN←N';  MACRO XOR←E';
* EXTEND SIGN OF FIELD
       MACRO SE(X,Y)←((X)$Y);
* RIGHT JUSTIFIED FIELD MASK
       MACRO FRMASK(X)←(FMASK(X) RSH FSHIFT(X));
* MACRO FOR SWITCH GOTO
       MACRO GOTOS(X)←GOTO (X);
* RETURN MACROS
       MACRO FRETN←FRETURN;
       MACRO RETN←RETURN;
* COPY STRING DESCRIPTOR
       MACRO SDCOPY(X,Y)←(X←Y);
* FIELDS FOR STRING DESCRIPTOR
       DECLARE FIELD BP(0),RP(1),WP(2),EP(3);
       DECLARE FIELD SL(0),SR(1),SW(2),SU(3);
* CONTENTS MACRO
       MACRO CONTENTS(X)←INTEGER($(X));
* REFERENCE MACRO
       MACRO REF←@;

* VARIANTS OF BCOPY
       MACRO PCCOPY←BCOPY;
       MACRO CPCOPY←BCOPY;
       MACRO MOVE(Y,X,Z)←BCOPY(X,Y,Z);
       MACRO CLEAR←BSET;
* FATAL ERROR (IN FRETURN)
       MACRO FTLERR←VALUE FATAL'ERROR();

* MACROS FOR FIELD SHIFT AND MASK
       DECLARE FIXED FIELD F'BA(0:8,12), F'BL(0:3,7),
   SIGNED FIELD F'DISP(0:13,23);
       MACRO FSHIFT(X)←(24-X$F'BA-X$F'BL);
       MACRO FMASK(X)←(-(1 RCY X$F'BL) RSH X$F'BA);
       MACRO FDISP(X)←X$F'DISP;


***
*** THINGS OF GENERAL USEFULNESS
***

       MACRO DQ←DECLARE PARAMETER;
       MACRO DF←DECLARE FIELD;
       MACRO DFF←DECLARE FIXED FIELD;
       MACRO DFS←DECLARE SIGNED FIELD;
       MACRO DI←DECLARE INTEGER;
       MACRO DA←DECLARE ARRAY;
       MACRO DP←DECLARE POINTER;
       MACRO DS←DECLARE STRING;
       MACRO DM←MACRO;
       MACRO ARRAYY←ARRAY;
       MACRO REFERENCE←INTEGER;
       MACRO REALL←REAL;
       MACRO FUNCTN←FUNCTION;
       MACRO SWITCH←LABEL ARRAY;

*************
* EXTERNAL  *
* FUNCTIONS *
*************

* IN MRUN
       DECLARE EXTERNAL FLLO,FCOB,SGNP,OIF,OOF;
       DECLARE STRING EXTERNAL APPND,CGETF;
       DECLARE ARRAY EXTERNAL ARRDESC,ARRAY'FIXER,REAL'ARRAY'FIXER;
       DECLARE LABEL EXTERNAL LABEL'FIXER;
* IN MTABX
       DECLARE EXTERNAL SSFIND,SSINS,SGSYM,SGST,
   SNEXT,SPREV,SGNEXT,SGPREV,SSFGS,GET,PUT;
       DECLARE POINTER EXTERNAL SSPTR,SSPTS,STPTR,UPTR;
       DECLARE STRING EXTERNAL SWSYM,SWEA,COMMAND,ZEDIT;
       DECLARE EXTERNAL SEXP,SBFI,STUI,STINS,PSTINS,SUNHOOK,SFCA;
       DECLARE POINTER EXTERNAL STGET;
* IN MCMDX
       DECLARE EXTERNAL CINT,SFREEP;
       DECLARE STRING EXTERNAL WWD;
* IN MINIX
       DECLARE EXTERNAL NXSS;
* IN MERR
       DECLARE EXTERNAL ERRMSG;
* IN MCALX
       DECLARE EXTERNAL CFMAC;
       DECLARE POINTER EXTERNAL CSSC;
* IN MTCX
       DECLARE POINTER EXTERNAL TCGET,TCN0,TCN1,TCN2,TCN3,TCN4,TCN5,
   TCVC,TCIC,TCC,TCSF,TCCH,TCSE,TCMA,TCLAB;
       DECLARE EXTERNAL TCVFI,TCOA;
* IN MPARS
       DECLARE POINTER EXTERNAL EXPR,PARSE,DECPROC,NEXPR,MCHAIN;
       DECLARE EXTERNAL ISTRC,GNAME,ISCON;
* IN MPMAC
       DECLARE EXTERNAL GUIT,GETTOKEN,SETCISD,CONTK;
* IN MGENX
       DECLARE POINTER EXTERNAL TSCAN,TSSCR,TSLCR,TSBRA,TSGT;
       DECLARE EXTERNAL TSMA,TSIIA,TSMFIT,TSUL,TFFP,TFLAB;
       DECLARE EXTERNAL TFIV,TFCIL,TLSC,TFGET,TFGSEQ,TAD;
       DECLARE POINTER EXTERNAL TSSC,TSGL;
       DECLARE EXTERNAL TSPP,TSPPZ,TFGOTO,TXVAR,TXCON;
       DECLARE POINTER EXTERNAL TSTEMP,TSWOP;
* IN MCGX
       DECLARE EXTERNAL TXNIL,TXPLUS,TXMINUS,TXTIMES,TXQUOT,
   TXNEG,TXLOGNOT,TXNOT,TXREL,TXBO,TXPRED,TXXERR,
   TXSET,TXREF,TXINDIR,TXUNTAIL,TXIF,TXGOTO,TXSEQ,TXLABEL;
       DECLARE EXTERNAL TFFCN,TFAPT,TFCHZ,TXCALL,TXNCALL,TXRET,TXFRET;
       DECLARE POINTER EXTERNAL TFCST;
       DECLARE EXTERNAL TFCLF,TEMACH,TEWHILE,TEFOR,TEELSEIF,TEEIF;
* IN MDCLX
       DECLARE EXTERNAL TFGSP,TFSIS,TDGET,TMUC,TFIC,TDCHK;
       DECLARE POINTER EXTERNAL TVEA,TFGBLK,TAW;
       DECLARE EXTERNAL TEVDEC,TEFDEC,TEFBLK;
* IN MCCL
       DECLARE EXTERNAL YCFD,SCLFD,YGFD,TEINCLUDE,TEEND;
* IN MEDIT
       DECLARE EXTERNAL EDLB;
       DECLARE STRING EXTERNAL EDMOD,EDGSP,EDGS,EDLI;
* IN MPREX
       DECLARE EXTERNAL PLEXI;
* IN MUNPX
       DECLARE EXTERNAL ZEDSA,ZUNPP,UNSC,UNSM,UNOP,UNKW,UNCON,UNFE;
* IN DEBUG
       DECLARE STRING EXTERNAL DCOPY;
       DECLARE EXTERNAL DGT,DRUN,DGARG,DGPROG,DGNUM;
       DECLARE EXTERNAL DSKIPB,DGRING,DCOS,DGBKA,DOEA,DCEAA;
       DECLARE EXTERNAL DUNSTK,DUNSI,DGNT,DGLREG,DGSSET,CORE,COREF;

       COMMON STBD;
       INCLUDE SPAR;

***********************
* SPL STORAGE MANAGER *
* BASIC  DECLARATIONS *
***********************


* USER MACHINE PARAMETERS
       DQ NRINGS←3;* NUMBER OF RINGS
       DQ NUPW←4;* NUMBER OF USER PAGE WINDOWS
       DQ LSTATE←10;* LENGTH OF STATE
       DQ ENDCSTACK←3;* MARKER FOR END OF CALL STACK
       DQ MINSL←1000B;* MINIMUM STACK LENGTH

* FIELDS FOR VIRTUAL ADDRESSES
       DF VPA(0:0,12),VWA(0:13,23);

***
*** FIELDS IN INFORMATION BLOCK
***

               DQ IBTFN←0,IBTCB←1,IBTGN←2;* IB TYPES (GSTYPE)
       DF IBRECOMP(0:2,2);* RECOMPILE FLAG
       DF IBFTYPE(0:3,5);* LANGUAGE
               DQ IBFTSPL←0,IBFTFTN←1;
       DF IBSIZE(0:6,23);* TOTAL LENGTH OF IB
       DF IBTFL(1:0,11);* TOKEN FREE LIST
       DF IBLTT(1:12,23);* LENGTH OF TOKEN TABLE
       DF IBLSU(2);* LENGTH OF USED PART OF SYMTAB
       DQ IBOHT←3;* RELATIVE ORIGIN OF HASH TABLE
       DQ IBLHT←16;* LENGTH OF HASH TABLE
*      DF IBHCC(0:0,11);* CONSTANT CHAIN IN HT
*      DF IBHSC(0:12,23);* SYMBOL CHAIN IN HT
   DQ Q←IBOHT+IBLHT;
       DF IBLHEAD(Q:0,9);* LENGTH OF HEADER (ORG OF TT)
       DF IBFSTAT(Q:10,23);* SI OF FIRST STATEMENT
       DF IBNXW(Q+1:0,9);* EXTRA WORDS FOR SYMBOL
       DF IBLSTAT(Q+1:10,23);* SI OF LAST STATEMENT
       DF IBECODE(Q+2);* LENGTH OF CODE AREA IN USE
       DF IBLIT(Q+3);* RELATIVE ORG OF LITERALS IN CODE
       DF IBLLIT(Q+4);* LENGTH OF LITERALS
       DF IBBLR(Q+5);* FIRST AVAILABLE CELL IN LOCAL ENV.
       DF IBMLR(Q+6);* LENGTH OF LOCAL ENV.
       DF IBGTN(Q+7);* GLOBAL TN OF BLOCK
       DQ IBOBT←Q+8;* RELATIVE ORG OF BLOCK LIST
       DQ IBLE←Q+8;* INITIAL IB LENGTH


***
*** FIELDS IN TOKEN TABLE
***

       DF TKSYM(0:0,0);* SYMBOL FLAG
       DF TKPARAM(0:1,1);* PARAMETER
       DF TKUSE(0:3,3);* USED FLAG
       DF TKGLOB(0:4,4);* GLOBAL INDIRECTION FLAG
       DF TKIMPL(0:5,5);* IMPLICIT TYPE FLAG
       DF TKTYPE(0:6,9);* TOKEN TYPE
               DQ TTUND←0,TTINT←2,TTREAL←3,TTDBL←4,
          TTCPLX←5,TTSTR←6,TTLAB←7,TTLONG←8,TTLLONG←9,
          TTARRAY←10,TTFIELD←11,TTFUNC←12,TTMAC←13;
               DQ TTNTT←14;
       DF TKFLAGS(0:0,9);* FLAGS (FREE IF ALL 0)
       DF TKSI(0:10,23);* SI FOR TOKEN

       DQ TNLIM←3777B;* MAXIMUM S/C TN
       DQ TNCMIN←4000B;* MINIMUM SMALL INTEGER TN
       DQ TNCMAX←5777B;* MAXIMUM SMALL INTEGER TN
       DQ TNCZRO←TNCMIN;* SMALL ZERO TN
       DQ TNRMIN←6000B;* MINIMUM RW TN
       DQ TNRMAX←7777B;* MAXIMUM RW TN


***
*** FIELDS IN SYMBOL TABLE
***

* FIELDS FOR SYMBOLS
       DF SYSIZE(0:0,6),SYHPTR(0:12,23),SYFLAGS(1:2,11),SYTN(1:12,23);
       DF SYLN(1:0,1);* NUMBER OF NAME WORDS -1
       DQ SYMAXLN←FRMASK(SYLN)+1;* MAXIMUM NUMBER OF NAME WORDS
       DQ SYMAXCN←SYMAXLN*4;* MAXIMUM NUMBER OF NAME CHARACTERS
       DF SYDIM(1:2,4);* NUMBER OF DIMENSIONS
       DF SYMODE(1:5,6);* MODE
               DQ SMVALUE←0,SMFUNC←1,SMARRAY←2,SMFIELD←3;
               DQ SMARR1←4,SMSFIELD←5,SMEXT←6;* FOR VDEC ONLY
               DQ SMNSM←7;
       DF SYDUMMY(1:7,7);* DUMMY FLAG
       DF SYEQUIV(1:8,8);* EQUIVALENCING FLAG
       DF SYDTYPE(1:9,11);* SYMBOL DEBUGGING TYPE
               DQ SDNOR←0,SDOCTAL←1,SDCHAR←2,SDPOINT←3;
       DF SYVAL(2);* SYMBOL VALUE
       DQ SYLE←4;* LENGTH OF NORMAL SYMBOL ENTRY

* SPECIAL FIELDS FOR FUNCTION NAME TABLE
       DF FSIFN(3:0,11);* INTRINSIC FUNCTION NUMBER +1, OR 0
       DF FSGTN(3:12,23);* GNT TN OF PROGRAM NAME
       DQ FSLE←1;* EXTRA WORDS

*** FLAGS IN TTVTAB
       DF TVTRAP(0:1,1);* TRAP-TYPE (BRU) IF 1, BLL IF 0
       DF TV1ORG(0:2,2);* 1-ORIGIN IF 1

       COMMON STDEC;
       INCLUDE STBD;

***********************
* SPL STORAGE MANAGER *
*  FULL DECLARATIONS  *
***********************



***
*** FIELDS IN SYMBOL TABLE
***

       DF BTYPE(0:0,0);* BLOCK TYPE
               DQ BTSC←0,BTTEXT←1;

* FIELDS FOR TEXT BLOCK
       DF PTBKF(0:1,1);* BREAKPOINT FLAG
       DF PTCOS(0:2,2);* CODE OUT OF SEQUENCE FLAG
       DF PTRECOMP(0:3,3);* RECOMPILE FLAG
       DF PTSIZE(0:4,9);* SIZE OF ENTRY (WORDS)
       DF PTFP(0:10,23);* FORWARD POINTER
       DF PTLCODE(1:0,9);* LENGTH OF CODE
       DF PTBP(1:10,23);* BACK POINTER
       DF PTEOS(2:0,0);* END OF STATEMENT FLAG
       DF PTSTYPE(2:1,3);* STATEMENT TYPE (CF. SCOPS)
       DF PTONT(2:4,4);* ODD NUMBER OF TOKENS FLAG
       DF PTIND(2:5,7);* INDENTATION
       DQ PTTO←5;* HALF-WORD ORIGIN OF TOKEN STRING
       DF HW0(0:0,11),HW1(0:12,23);
       DM LASTHW(X)←(X.PTSIZE*2+X.PTONT-2);
       DM GHW(X,N)←(X[(N) RSH 1]$HW0 IF ((N) AA 1)=0 ELSE
        X[(N) RSH 1]$HW1);* GET N'TH HALF-WORD OF X
       DM PHW(X,N,Y)←(X[(N) RSH 1]$HW0←Y IF ((N) AA 1)=0
        ELSE X[(N) RSH 1]$HW1←Y);

* SPECIAL FIELDS FOR GLOBAL NAME TABLE
       DF GSRECOMP(1:3,3);* IBRECOMP OR PTRECOMP SET
       DF GSASGL(1:4,4);* ASSIGNED LOCAL ENV.
       DF GSFIXED(1:7,7);* FIXED FUNCTION
       DF GSORG(1:8,8);* ORIGIN'ED
       DF GSIBA(2);* ABSOLUTE ADDRESS OF IB
       DF GSORD(3:0,11);* TN OF NEXT BLOCK IN ORDER
       DF GSNL(3:12,23);* NUMBER OF LINES OF SOURCE
       DF GSADDR(4);* ADDRESS OF CODE OR COMMON AREA
       DF GSLCODE(5);* LENGTH OF AREA
       DF GSBMF(6:0,0);* BREAKPOINT MODE FLAG: 1=SI, 0=COUNT
       DF GSTYPE(6:1,3);* TYPE OF IB
       DF GSBKSI(6:10,23);* BREAKPOINT SI (GSBMF=1)
       DF GSBKCT(6:10,23);* BREAKPOINT COUNT (GSBMF=0)
       DF GSNEWL(7);* NEWL WORD FOR BLL DESCRIPTORS * COPIED IN SGFN *
       DQ GSLE←5;* EXTRA VALUE WORDS

***
*** FIELDS FOR GLOBAL FREE STORAGE MACHINERY
***

       DF GFPTR(0);* POINTER TO NEXT FREE BLOCK (CIRCULAR)
       DF GFCNT(1);* SIZE OF BLOCK
       DF GFADDR(2);* G-RELATIVE ADDRESS OF BLOCK
       DF GFLIST(0);* FREELIST OR 0
       DF GFROVER(1);* ROVER
       DQ GFLE←3;* LENGTH OF DESCRIPTOR OR LIST ENTRY

       COMMON SCDEC;
       INCLUDE SPAR;

********************
* SPL TREE BUILDER *
*   DECLARATIONS   *
********************


***
*** FIELDS IN TREE NODES
***

       DF TREF(0:0,5);* REFERENCE COUNT -1
       DF THPTR(0:6,23);* HASH CHAIN POINTER
       DF TADDR(1);* ADDRESS OF RESULT
       DF TTYPE(2:0,4);* RESULT TYPE
       DF TFLAGS(2:5,15);* RESULT STATUS FLAGS
       DF TDEF(2:5,5);* DEFINED (FUNCTION OR LABEL)
       DF TCLOBA(2:6,6);* CLOBBERS (A)
       DF TCLOBX(2:7,7);* CLOBBERS (X)
       DF TCOMPX(2:8,8);* CAN BE COMPUTED IN X
       DF TOREF(2:9,9);* GENERATES A REFERENCE
       DF TEFF(2:10,10);* HAS AN EFFECT
       DF TWFF(0:10,10);
       DF TOCC(2:15,15);* BITS 6-8 HAVE BEEN COMPUTED
       DF TOPR(2:16,23);* OPERATOR NUMBER: *** COPIED IN PARSE ***
       DF TOPWORD(2);* OPERATOR AND FLAG WORD
       DF TICID(3);* ID OF TOKEN GIVING RISE TO NODE
* SPECIAL FIELDS IN TOPTAB
* TFLAGS ALSO PRESENT, EXCEPT FOR TDEF
       DF TOGFI(0:0,5);* NODE GENERATION FUNCTION INDEX
       DF TOOC(0:12,14);* NUMBER OF OPERANDS +1
       DF TOTAI(0:16,20);* TYPE ARRAY INDEX
       DF TOAOC(0:21,23);* NON-NODE OPERAND COUNT
* FIELDS IN NORMAL NODE
       DF TO1(4);* OPERAND 1
       DF TO2(5);* OPERAND 2
       DF TO3(6);* OPERAND 3
       DF TO4(7);* OPERAND 4
       DF TO5(8);* OPERAND 5
       DQ TOLE←4;* NUMBER OF WORDS IN NODE BESIDES OPERANDS
* FIELDS IN NODE FOR VARIABLE
       DF TVSEQ(FDISP(TO1):0,11);* VARIABLE SEQUENCE NUMBER
       DF TVTOKEN(FDISP(TO1):12,23);* TOKEN NUMBER
* SPECIAL FIELDS FOR CONSTANTS
       DECLARE INTEGER FIELD TOIV(FDISP(TO1));
       DECLARE REAL FIELD TORV(FDISP(TO1));
       DECLARE DOUBLE FIELD TODV(FDISP(TO1));
       DECLARE COMPLEX FIELD TOCV(FDISP(TO1));
* FIELDS IN PSEUDO-NODE FOR BRANCH LOCATION
       DF BACHN(FDISP(TADDR):3,3);* CHAIN FLAG
       DF BAREF(FDISP(TADDR):4,4);* REFERENCED FLAG
       DF BAABS(FDISP(TADDR):5,5);* DO NOT MODIFY ADDRESS FLAG
       DF BALOC(FDISP(TADDR):12,23);* CHAIN OR DEFINITION (= INSSRD)
       DF BADWORD(FDISP(TADDR));* DATA WORD
       DF BACA(FDISP(TO1));* SAVED (A)
       DF BACX(FDISP(TO2));* SAVED (X)
       DF BACF(FDISP(TO3));* SAVED FLAGS
       DQ BANLE←TOLE+3;* LENGTH OF BRANCH NODE
       DF BWCHN(0:3,3);
       DF BWREF(0:4,4);


***
*** SPECIAL FIELDS FOR VDEC PARAM
***

       DF VDCWA(FDISP(TO1));* DIMENSION CHAIN FOR ARRAY, WORD ADDRESS FOR FIELD
       DF VISBA(FDISP(TO2));* ITEM SIZE FOR ARRAY, BIT ADDRESS FOR FIELD
       DF VBS(FDISP(TO3));* BYTE SIZE FOR STRING
       DF VSLLB(FDISP(TO4));* LENGTH FOR STRING, LAST BIT FOR FIELD
       DF VOG(FDISP(TO5));* ORIGIN FOR VARIABLE STORAGE

       COMMON SCMWF;
       INCLUDE SPAR;

***************
* SPL MACHINE *
* WORD FORMATS*
***************


***
*** LAYOUT OF MACHINE ADDRESSES
***

* PRINCIPAL FIELDS
       DF INSTAG(0:0,2),IWTAG(0:2,4);* ADDRESS MODE TAG
               DQ ATD←0,ATI←1,ATX←2,ATPD←4,ATIPD←5,
          ATBX←3,ATBXD←6,ATREL←7;
               DQ ATROD←ATPD,ATROX←ATIPD;
       DF INSST(0:10,12),IWST(0:7,9);* ADDRESS MODE SUBTAG
               DQ ASTLR←0,ASTILR←1,ASTIM←7,ASTIMX←6;
       DF INSRT(0:10,11),IWRT(0:7,8);* RELATIVE MODE SUBTAG
               DQ ARTSR←1,ARTISR←2;
       DF INSOP(0:3,8),INSPOP(0:9,9);* OPCODE FIELDS
       DF IWTRAP(0:5,5);* TRAP BIT IN IW
       DF IWTYPE(0:0,1);* INDIRECT WORD TYPE
               DQ IWTNOR←0,IWTFLD←1,IWTSTR←2,IWTARR←3;
       DF IWRELX(0:6,6);* X-RELATIVE BIT FOR RELATIVE IW
* FIELDS FOR VARIOUS MODES
       DF INSGD(0:10,23),IWGD(0:6,23);* GLOBAL OR ABSOLUTE
       DF PDPTR(0:16,23); DFS PDDISP(0:10,15);* POINTER-DISPLACEMENT
               DQ PDPXR←0;
       DF BXBASE(0:16,23),BXINDEX(0:10,15);* BASE-INDEX
               DQ BXBXR←0,BXIXR←0;
       DF BXDINDEX(0:16,23); DFS BXDDISP(0:10,15);* BASE-INDEX-DISPLACEMENT
               DQ BXDNX←0;
       DFS INSSRD(0:12,23),IWSRD(0:9,23);* SOURCE-RELATIVE
       DF INSLRD(0:13,23),IWLRD(0:10,23);* LOCAL-RELATIVE
       DFS INSIMV(0:13,23),IWIMV(0:10,23);* IMMEDIATE
* FIELDS FOR PARAMETER WORDS
       DF APMODE(0:3,4);* ACTUAL PARAMETER MODE
               DQ APMVAR←1,APMELT←2,APMCON←3,APMARR←0;
       DF APTYPE(0:5,8);* ACTUAL PARAMETER TYPE
       DF APLAST(0:9,9);* LAST ACTUAL PARAMETER
       DF FPMODE(0:4,4);* FORMAL PARAMETER MODE
               DQ FPMVAL←1,FPMARR←0;
       DF FPADRF(0:3,3);* PASS ADDRESS FLAG
               DQ FPCONT←0,FPADDR←1;
       DF FPTYPE(0:5,8);* FORMAL PARAMETER TYPE
       DF FPLAST(0:9,9);* LAST FORMAL PARAMETER
* TYPE NUMBERS FOR F.P.S (AND A.P.S)
       DQ FPINT←1,FPLONG←2,FPREAL←3,FPDBL←4,
   FPCPLX←5,FPLLONG←6,FPSTR←7,FPLAB←8;
       DQ APREGS←U(ATD,INSTAG)+U(0,INSGD);* WORD FOR A.P. IN CENTRAL REG.S
       DQ APINT←FPINT;
* FIELDS FOR ABNORMAL INDIRECT WORDS
       DF FIWBA(0:8,12);* INITIAL BIT
       DF FIWBL(0:3,7);* FIELD LENGTH
       DF FIWSIGN(0:2,2);* SIGN EXTENSION FLAG
       DFS FIWDISP(0:13,23);* WORD DISPLACEMENT (SIGNED)
       DF SIWCS(0:2,3);* CHARACTER SIZE
       DF SIWCA(0:4,5);* CHARACTER ADDRESS
       DF SIWWA(0:6,23);* WORD ADDRESS
       DF AIWORG(0:2,2);* INDEXING ORIGIN
       DF AIWMIB(0:3,3);* MARGINAL INDEX BIT
       DF AIWLEB(0:4,4);* LARGE ELEMENT BIT
       DF AIWNMULT(0:5,6);* ITEM SIZE (LEB=0)
       DF AIWLMULT(0:5,10);* ITEM SIZE (LEB=1)
       DF AIWNLIM(0:7,23);* UPPER BOUND (LEB=0)
       DF AIWLLIM(0:11,23);* UPPER BOUND (LEB=1)
       DF AIWADDR(1);* ADDRESS (ANOTHER IW)
* FIELDS FOR BLL DESCRIPTOR
       DF FDNEWP(0);* NEW P
       DF FDCLL(1:0,0);* CALL/GOTO FLAG
       DF FDSTK(1:1,1);* STACKING FLAG
       DF FDCPA(1:2,2);* COPY ARGUMENTS FLAG
       DF FDCPR(1:3,3);* COPY RESULTS FLAG
       DF FDUSTK(1:3,3);* UNWIND STACK FLAG
       DF FDNEWL(1:6,23);* NEW L
       DF FDBITS(1:0,5);* OPTION BITS
               DQ NFDBITS←6;
       DQ FNEWP←FDISP(FDNEWP),FNEWL←FDISP(FDNEWL);
* (NEWL FIELDS IN WORD 0)
       DF FWCLL(0:0,0);
       DF FWSTK(0:1,1);
       DF FWCPA(0:2,2);
       DF FWCPR(0:3,3);
       DF FWUSTK(0:3,3);
       DF FWNEWL(0:6,23);

       COMMON SCOPS;
       INCLUDE SPAR;

****************
* SPL OPERATOR *
*   NUMBERS    *
****************


***
*** OPERATOR NUMBERS
***

* ATOMIC
       DQ OPVAR←1;* VARIABLE
       DQ OPCON←2;* CONSTANT
       DQ OPSC←3;* CHAINED STRING CONSTANT
       DQ OPNIL←4;* MISSING OPERAND
       DQ OPBLOCK←5;* BLOCK FORM FLAG
       DQ OPBRANCH←6;* BRANCH LOCATION PSEUDO-NODE
       DQ OPREG←7;* MACHINE REGISTER
       DQ OPCHEAT←8;* CHEATER FUNCTION
* ARITHMETIC
       DQ OPPLUS←10,OPMINUS←11,OPTIMES←12,OPQUOT←13;* + - * /
       DQ OPMOD←14,OPPOW←15,OPNEG←16;* MOD ↑ U-
* INTEGER
       DQ OPLOGOR←24,OPLOGAND←23;* V' A'
       DQ OPLOGEOR←25,OPLOGNOT←26;* E' N'
       DQ OPLSH←27,OPLCY←29;* LSH LCY
       DQ OPRSH←28,OPRCY←30;* RSH RCY (EXTERNAL)
* PREDICATE
       DQ OPOR←34,OPAND←35,OPNOT←37;* OR AND NOT
       DQ OPREL←38;* RELATIONS
               DQ ORLT←1,OREQ←2,ORLE←3,ORGT←4,ORNE←5,ORGE←6;
       DQ OPLREL←39;* LONG RELATIONS (INTERNAL)
* MISCELLANEOUS
       DQ OPBDOL←41;* B$
       DQ OPTAIL←42;* . (EXTERNAL)
       DQ OPSET←43;* ←
       DQ OPREF←44;* U@
       DQ OPINDIR←45;* U$
       DQ OPCHAIN←46;* ,
       DQ OPUNTAIL←47;* B@
       DQ OPMACH←49;* MACHINE INSTRUCTION
* INDEFINITE
       DQ OPNSUB←50;* [] SIMPLE (EXTERNAL)
       DQ OPLIST←51;* INITIALIZATION LIST
       DQ OPNCALL←52;* () SHORT FORM
       DQ OPSUB←53;* [] (EXTERNAL)
       DQ OPCALL←54;* ()
*
       DQ OPBX←55;* BX OPERATION (INTERNAL)
       DQ OPPD←56;* PD OPERATION (INTERNAL)
* CONTROL
       DQ OPWHILE←57;* WHILE
       DQ OPFORT←58;* FOR-TO
       DQ OPFORW←59;* FOR-WHILE
       DQ OPENDFOR←60;* ENDFOR
       DQ OPIF←61;* IF
       DQ OPGOTO←63;* GOTO
       DQ OPRET←64;* RETURN
       DQ OPFRET←65;* FRETURN
       DQ OPSEQ←66;* &,WHERE
       DQ OPELSEIF←69;* ELSEIF,ELSE
       DQ OPENDIF←70;* ENDIF
* DECLARATIONS
       DQ OPLABEL←72;* LABEL
       DQ OPVDEC←73;* VARIABLE DECLARATION
       DQ OPPARAM←74;* VDEC PARAMETERS
       DQ OPFDEC←75;* PROGRAM,ORIGIN,FIXED,ENTRY,COMMON,ETC.
       DQ OPINCLUDE←79;* INCLUDE
       DQ OPEND←80;* END
* NUMBER OF OPERATORS
       DQ OPQCOUNT←80;


***
*** STATEMENT TYPE BITS
***

       DQ STDEC←1;* DECLARATION
       DQ STEXPR←2;* EXPRESSION
       DQ STMISC←4;* OTHER
       DQ STFIRST←10B;* PROGRAM, COMMON, INCLUDE
       DQ STFD←20B;* FUNCTION, ENTRY
       DQ STORG←40B;* ORIGIN, FIXED

       COMMON SDOPS;
       INCLUDE SPAR;

*******************
* SPL DECLARATION *
*     FIELDS      *
*******************


***
*** FIELDS IN TO2 FOR VDEC AND FDEC
***

       DF DTYPE(0:0,4);* VARIABLE OR FUNCTION TYPE
       DF DDTYPE(0:5,7);* VARIABLE DEBUGGING TYPE
       DF DMODE(0:8,10);* VARIABLE MODE
       DF DFXFD(0:11,11);* 1 IF FIXED FIELD
       DF DFTYPE(0:8,10);* FUNCTION LANGUAGE
               DQ FPSPL←0;* SPL PROGRAM
               DQ FCSPL←1;* SPL COMMON BLOCK
               DQ FSPEC←2;* T.V. ENTRY SPECIFICATION ONLY
               DQ FENTRY←3;* ENTRY
               DQ FORG←4;* ORIGIN
               DQ FFIXED←5;* FIXED
       DF DFLOC(0:13,15);* FUNCTION DESCRIPTOR LOCATION
               DQ FLNORMAL←0;* NORMAL (LEGAL IN ALL RINGS)
               DQ FLMONITOR←1;* MCALL (MONITOR ONLY)
               DQ FLUTILITY←2;* UCALL (UTILITY ONLY)
               DQ FLTRAP←3;* RING-DEPENDENT TRAP (ALL RINGS)
               DQ FLSYSPOP←4;* SYSPOP (USER ONLY)
               DQ FLFTRAP←5;* FIXED TRAP (MONITOR ONLY)
               DQ FLPOP←6;* POP (ALL RINGS)
               DQ FLSP←7;* SUBPROCESS ENTRY (ALL RINGS)
          DQ NFLOC←8;
          DQ RETOK←70600000B;* 1'S FOR FLOC VALUES WHERE RETURN LEGAL
          DQ SYSPTN←16;* TRAP NUMBER OF SYSPOP 0
       DF DFRET(0:16,16);* 1 IF FUNCTION HAS FRETURN
       DF DFPAR(0:17,17);* 1 IF F.P., 0 IF DECLARE
       DF DNONE(0:18,18);* 1 IF UNADORNED NAME
       DF DFREF(0:19,19);* 1 IF CALL BY REFERENCE ('@' F.P.)

       COMMON SGDEC;
       INCLUDE SCMWF;

*******************
* SPL CODE OUTPUT *
*  DECLARATIONS   *
*******************


***
*** MACHINE OPCODES
***

       DQ ZHLT←0,ZLDA←1,ZLDB←2,ZLDX←3,ZLDD←4,ZEAX←5,ZLNX←6,ZXMA←7,
   ZAND←10B,ZIOR←11B,ZEOR←12B,ZSTD←13B,
   ZSTF←14B,ZSTA←15B,ZSTB←16B,ZSTX←17B,
   ZADD←20B,ZSUB←21B,ZADC←22B,ZSUC←23B,
   ZADM←24B,ZADX←25B,ZMIN←26B,ZMDC←27B,
   ZMUL←30B,ZDIV←31B,ZICP←32B,ZCPZ←33B,
   ZCMZ←34B,ZISD←35B,ZDSD←36B,ZEXU←37B,
   ZASHD←40B,ZASHA←41B,ZLSHD←42B,ZLSHA←43B,
   ZCYD←44B,ZCYA←45B,ZTSB←46B,ZLAX←47B,
   ZBRU←50B,ZBLT←51B,ZBEQ←52B,ZBLE←53B,
   ZBGT←54B,ZBNE←55B,ZBGE←56B,ZBLL←57B,
   ZBLLN←60B,ZBRX←61B,ZBSX←62B,ZSRS←63B,
   ZEAC←64B,
   ZFLX←70B,ZFLD←71B,ZFCP←72B,ZFAD←73B,
   ZFSB←74B,ZFMP←75B,ZFDV←76B,ZOPR←77B;
* PSEUDO OPCODES
       DQ ZIMUL←100B,ZIDIV←101B,ZIMOD←102B;
       DQ ZCFAD←110B,ZCFSB←111B,ZCFMP←112B,ZCFDV←113B;
*
       DQ NOPS←120B;


***
*** OPERATE INSTRUCTIONS
***

       DM OQ(X)←U(ZOPR,INSOP)+IQ(X);
       DM IQ(X)←U(ATREL,INSTAG)+U(ASTIM,INSST)+U(X,INSIMV);
       DM LQ(X)←U(ATREL,INSTAG)+U(ASTLR,INSST)+U(X,INSLRD);
       DM RQ(X)←U(ATREL,INSTAG)+U(ARTSR,INSRT)+U(X,INSSRD);
       DQ ZZDP←U(ZSRS,INSOP)+IQ(41B);
       DQ ZZNDP←U(ZSRS,INSOP)+IQ(40B);
       DQ ZZCNA←OQ(9);
       DQ ZZCLA←OQ(16);
       DQ ZZFNEG←OQ(38);
       DQ ZZFIX←OQ(36);
       DQ ZZFLOAT←OQ(37);
       DQ ZZCAX←OQ(6);
       DQ ZZCXA←OQ(8);
       DQ ZZLSC←OQ(35);
       DQ ZZMVB←OQ(23);
       DQ ZZASP←OQ(28);
       DQ ZZCLS←OQ(27);
       DQ ZZMVS←OQ(25);
       DQ ZZCXB←OQ(5);
       DQ ZZMVC←OQ(24);
       DQ ZZCAB←OQ(0);
       DQ ZZCBA←OQ(2);
       DQ ZZRET←LQ(0)+U(ZBLL,INSOP);
       DQ ZZRETN←LQ(0)+U(ZBLLN,INSOP);

       DQ ZZCFNEG←OQ(99);*** ***
       DI CFLAGS;* FLAGS FOR CODE STATUS

***
*** RESULT TYPE BITS
***

       DQ RFXFER←2B7;* FALSE TRANSFER  * MUST BE USED ALONE *
       DQ RTXFER←1B7;* TRUE TRANSFER   * MUST BE USED ALONE *
       DQ RVALA←4B6;* VALUE IN A
       DQ RVALX←2B6;* VALUE IN X
       DQ RVALS←1B6;* VALUE IN STORAGE
       DQ RADDRA←4B5;* ADDRESS IN A
       DQ RADDRX←2B5;* ADDRESS IN X
       DQ RADDRS←1B5;* ADDRESS IN STORAGE
       DQ RADDR←4B4;* ADDRESS IN NODE.TADDR
       DQ RNOVAL←2B4;* NO VALUE DESIRED
       DQ NRMODE←10;* NUMBER OF RESULT TYPES


***
*** SPECIAL DECLARATIONS FOR BLOCK IF AND FOR
***

       DM IFSTK←TREEMEM; DM FORSTK←TREEMEM;* STACK POINTERS
       DF BSTKOP(0);* OPENDIF OR OPENDFOR
       DF BSTKID(1);* STATEMENT ID OF BLOCK INITIATOR

* FIELDS FOR IF-STACK ENTRY
       DF IFCLS(2);* BADWORD FOR END LABEL
       DF IFNEXT(3);* BADWORD FOR NEXT CLAUSE
       DF IFCONST(4);* -1 IF LAST PREDICATE NOT CONSTANT, 0 OR 1 IF SO
       DQ IFLE←5;* LENGTH OF STACK ENTRY

* FIELDS FOR FOR-STACK ENTRY
       DF FORLL(2);* BADWORD FOR LOOP ENTRY
       DF FORVAR(3);* ADDRESS OF VARIABLE, OR 0
       DF FORINC(4);* INCREMENT, IF CONSTANT
       DF FORLIM(5);* LIMIT, IF CONSTANT OR VARIABLE
       DF FORELL(6);* BADWORD FOR END LABEL
       DF FORLF(7:0,0);* 1 IF < TEST, 0 IF <=
       DF FORSIGN(7:1,1);* SIGN OF INCREMENT
       DF FORBASE(7:2,23);* SAVED VALUE OF BASLR
       DQ FORLE←8;* LENGTH OF STACK ENTRY


***
*** FIELDS IN CFLAGS
***

       DF CAOKF(0:23,23);* (A)=CONTA
       DF CXOKF(0:22,22);* (X)=CONTX
       DF CCCOKF(0:21,21);* (CC)=(A)
       DF CNDPF(0:20,20);* DOUBLE PRECISION=0
       DF CDPF(0:19,19);* DOUBLE PRECISION=1
       DF CFTF(0:18,18);* CONTROL CAN REACH HERE

       DM AOK←CFLAGS$CAOKF;
       DM XOK←CFLAGS$CXOKF;
       DM CCOK←CFLAGS$CCCOKF;
       DM FLOWTHRU←CFLAGS$CFTF;
*****
* 5/7/73  JACK FREEMAN
* THIS SEEMS LIKE AS GOOD A PLACE AS ANY TO DECLARE THE MISSING VARIABLE
* "POISON".  IT MAY BE THAT POISON IS SUPPOSED TO BE ANOTHER BIT IN
* CFLAGS AND DEFINED SIMILARLY TO FLOWTHRU, ETC., JUST ABOVE.
       DECLARE INTEGER POISON;
*****

       COMMON PPDEC;
       INCLUDE SPAR;

* PPDEC
*
* THIS FILE CONTAINS THOSE SPL DECLARATIONS COMMON TO
* THE EDITOR, PREPROCESSOR, AND UNPREPROCESSOR.
*

       DQ TNBMIN←7400B; DQ TNBMAX←7577B; *BLANK (SPACE) TOKEN NUMBERS
       DF HW0F(0:0,11),HW1F(0:12,23); *HALF-WORD FIELDS
* MACRO DEFINITIONS
       DM RESET(PTR)←SETS(PTR,0,0); *RESET STRING DISCRIPTER
       DM INCD(PTR,X)←PTR←INCDES(PTR,X); *INCREMENT R OR W PTR
       DM MKPI(J,K)←INCDES(J+(46B6-1),K);
*          *MAKES READ AND WRITE POINTERS FOR STRINGS, BASE J, OFFSET K
       DM MKPTR(J,K,L,M)←J$SL←J$SR←J$SW←MKPI(K,L) & J$SU←MKPI(K,M);
*          *MAKES A STRING DISCRIPTOR FOR STRING J WITH LOWER
*          *BOUND L, UPPER BOUND M, AND LOCATION K
       DQ TKNCL←7600B; *PAGE EJECT TOKEN (CTRL-L)
       DQ TKN50←7601B; *COMMENT TOKEN
       DQ TKN55←7602B; *ERROR
       DQ TKN56←7603B; *CONTINUE STRING
       DQ TNKMIN←6400B; *FIRST KEYWORD TOKEN
* MISCELLANIOUS
       DQ CHNL←307B; *NEW LINE
       DQ CHMB1←200B;
       DQ CHMB2←277B;
       DQ CHFF←306B;
       DQ TTYIN←0; *TELETYPE INPUT FILE NUMBER


       DQ PPOPTI←5; *VECTOR SIZE IN PPOPT
       DQ ITLN←300,ITNI←ITLN*2-6;
       DQ PLIDL←8;
       DQ PLCL←51;
* FIELD DECLARATIONS FOR KWTB TABLE.
       DF KWF1(0:0,11); *NEXT STRING INDEX
       DF KWF2(0:12,23); *RELATIVE TOKEN NUMBER
       DF KWF3(0:0,5); *MINIMUM FIRST CHARACTER
       DF KWF4(0:0,5); *MAXIMUM FIRST CHARACTER
       DF KWF5(0:9,23); *STRING TABLE POINTER
       DF KWF6(0:6,23); *TOKEN BASE
       DF KWF7(0:0,11); *CHARACTER LIST HEADER
       DF KWF8(0:12,23); *TOKEN TO STRING POINTER
       DF KWF9(0:0,5); *NUMBER OF CHARACTERS IN STRING
* FIELD DECLARATIONS FOR PLT TABLE.
       DF PLF3(0:0,0); *SCAN INDICATOR
       DF PLF6(0:12,16); *ACTION INDEX INTO PAT TABLE
       DF PLF7(0:17,23); *NEXT PLT INDEX
       DF PLF8(0:2,2); *STRING WRITE INDICATOR
       DF PLF9(0:3,11); *PARAMETER FOR ACTION
       DF PLFG1(0:0,2); *NEW SYMBOL DEF. 1=OK, 0=ERROR
       DF PLFG2(0:3,5); *NEW BLOCK DEF. 2=IGNORE, 1=OK, 0=ERROR
       DF PLFG3(0:6,8); *END BLOCK DEF. 2=IGNORE, 1=OK, 0=ERROR
       DF PLFG4(0:9,11); *LINE INSERT FLAG 2=IG, 1=OK, 0=ERR
       DF PLFG5(0:12,14); *ERROR FLAG 2=PRINT-RETURN, 1=PRINT-EDIT, 0=RETURN
       DF PLFG6(0:15,17); *BLANK CONVENTION 1=IGNORE, 0=INCLUDE
* BLANK BITS IN OPERATOR TOKEN
       DF OPTLB(0:16,16); *BLANK ON LEFT
       DF OPTRB(0:17,17); *BLANK ON RIGHT
       DQ OPTMSK←7777B-U(1,OPTLB)-U(1,OPTRB);

       COMMON KTDEC;
       INCLUDE SPAR;

* DECLARATIONS FOR ENCODED CONSTANTS
       DQ KTMIN←7000B, KTMAX←7377B;* MIN AND MAX CONSTANT TOKENS
       DF KTTYPE(0:16,18);* CONSTANT TYPE, CHOSEN FROM:
       DQ KTINT←0,KTREAL←1,KTDBL←2,KTIMAG←3,KTSTR←4,KTCHAR←5;
       DF KT6V8(0:19,19);* 1 IF EXPLICIT 6 OR 8 BEFORE STR OR CHAR CONST
       DF KTCSIZE(0:20,20);* 0 IF 6-BIT ENCODING, 1 IF 8-BIT
       DF KTSIZE(0:21,23);* NUMBER OF 4, 6, OR 8-BIT BYTES,
*                           0 MEANS COUNT FOLLOWS IN NEXT HALF-WORD
       DQ KCDOT←10,KCPLUS←11,KCMINUS←12,KCD←13,KCE←14,KCB←15;* SPECIAL 4-BIT BYTES