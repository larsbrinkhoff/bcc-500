       COMMON SDEC';
       INCLUDE COMM,STDEC,STST,SCDEC,SCOPS,SDOPS,SGST;

***************
*     SPL     *
* DECLARATION *
*  PROCESSOR  *
***************

***
*** TEFDEC(A)
***
* PROCESSOR FOR FUNCTION, ENTRY, COMMON,
* AND T.V. DECLARATIONS



       COMMON FDEC';
       INCLUDE SDEC';

       DI FTN,FSPEC'WORD,FFLOC,FLOC'INDEX,MAX'INDEX;
       DP FTP,FSP,P,Q;


       PROGRAM TEFDEC;
       INCLUDE FDEC';

       DECLARE FUNCTION ARRAY TEFFA[6]←(
        TEFBLK,TEFBLK,TEFSPEC,TEFENTRY,TEFORG,TEFFIXED);

FUNCTION TEFDEC(POINTER A95);
       FTN←A95.TO1;
       SSPTR(FTN:FTP,FSP);
       FFLOC←(FSPEC'WORD←A95.TO2)$DFLOC;
       P←A95.TO4;
       FLOC'INDEX←TFIC(P,-1);
       MAX'INDEX←TMITAB[NRINGS*FFLOC+RING];
       IF (TEFFA[FSPEC'WORD$DFTYPE])(A95) DO;
          $FTP←$FTP A' N' 1@TKIMPL V' (1@TKGLOB+1@TKPARAM);
          FTP.TKTYPE←FSPEC'WORD$DTYPE;
          FSP.SYDTYPE←FSPEC'WORD$DDTYPE;
          FSP.SYMODE←SMFUNC;
       ENDIF;
       RETURN RNOVAL;


       PROGRAM TEFSPEC;
       INCLUDE FDEC';

* PROCESSOR FOR 'MONITOR' ETC. STATEMENTS

FUNCTION TEFSPEC(POINTER Z95);
            IF FLOC'INDEX<0 OR FLOC'INDEX>TMDTAB[FFLOC] DO;
* INDEX OUT OF RANGE ?
                 CERR(69);* CONTINUES
                 RETURN 0;
            ENDIF;
            FSP.SYVAL←IQ(TMUC(FFLOC,FLOC'INDEX));
            RETURN 1;

       PROGRAM TEFENTRY;
       INCLUDE FDEC';

* PROCESSOR FOR 'FUNCTION' AND 'ENTRY' STATEMENTS

       DI COPY'ARGS,ENTRY'LOC,TRAP'ENTRY'FLAG,BFTN,SFTN;
       DP T'V'PTR;

FUNCTION TEFENTRY(POINTER Z95);
            TRAP'ENTRY'FLAG←T'V'PTR←0;
* NOT ALLOWED IN CURRENT RING ?
            (CERR(70) IF MAX'INDEX=-1) IF FLOCFLAG=0;
            IF P.TOPR#OPNIL DO;
* INDEX NOT ALLOWED ?
                 (CERR(71) & GOTO TEFIR) IF FFLOC=FLNORMAL;* CONTINUES
                 T'V'PTR←TVEA(FFLOC,FLOC'INDEX:,TRAP'ENTRY'FLAG//TEFIE) IF FLOCFLAG=0;
            ELSEIF FFLOC#FLNORMAL AND FFLOC#FLPOP DO;
* INDEX REQUIRED
                 CERR(72);* CONTINUES
            ENDIF;
TEFIR:      P←Z95.TO3;
            IF COPY'ARGS←(P.TOPR#OPNIL OR FSPEC'WORD$DFRET#0) DO;
                 TSBI(ZBRU,COPY'ARGS←TSBRA()) IF FLOWTHRU;
            ENDIF;
            ENTRY'LOC←RELLOC;
            TFPL(P);  NODE←Z95;
            IF FSPEC'WORD$DFRET DO;
                 FRETLR←TFGET(TTLTAB[TTLAB])$INSLRD
               IF FRETLR<0;
                 TSW(U(ATREL,INSTAG)+U(ASTLR,INSST)+
               U(FPCONT,FPADRF)+U(FPMVAL,FPMODE)+
               U(FPLAB,FPTYPE)+U(FRETLR,INSLRD));
            ENDIF;
            IF COPY'ARGS DO;
                 Q←CODETOP+RELLOC-1;
                 PUT(Q,GET(Q) VV U(1,FPLAST));
            ENDIF;
            IF FFLOC=FLMONITOR OR FFLOC=FLUTILITY DO;
                 CFLOC←FFLOC IF CFLOC=FLNORMAL;
            ENDIF;
            TSA(ZBSX,RQ(INITSR)) IF INITSR>=0;
            IF COPY'ARGS>1 DO;
                 TSBDEF(COPY'ARGS);
                 COPY'ARGS←1;
            ENDIF;
            IF FSPEC'WORD$DFRET=0 AND FRETLR>=0 DO;
                 TSGL(1);
                 PUT(VAA,U(1,IWTRAP));
                 TSA(ZLDX,VINSA);
                 TSA(ZSTX,LQ(FRETLR));
            ENDIF;
            BFTN←ICGTN;
            SSPTR(FTN:FTP,FSP);
            MAX'INDEX←FSP.SYVAL;
            IF FSP.SYMODE#SMFUNC OR FTP.TKGLOB=0 DO;
* ATTEMPT TO REDECLARE NAME ?
                 CERR(64) IF TDCHK(FTN)#0;
                 MAX'INDEX←0;
            ENDIF;
            SFTN←SSFGS(FTN,1,1);
            SSPTR(SFTN:FTP,FSP);
            Q←FSP.SYVAL;
            IF FSP.FSGTN=0 DO;
                 IF Q=0 DO;
                      IF MAX'INDEX DO;
                           FSP.SYVAL←Q←MAX'INDEX;
                      ELSE DO;
                           Q←YCFD(SFTN);
                      ENDIF;
                 ENDIF;
                 FSP.FSGTN←BFTN;
            ELSEIF FSP.FSGTN#BFTN DO;
* ENTRY NAME ALREADY EXISTS
                 CERR(77);
            ENDIF;
            FTP.TKTYPE←FSPEC'WORD$DTYPE ;
            FSP.SYDTYPE←FSPEC'WORD$DDTYPE;
            P←Z95.TO3;
            SSELECT(BFTN);
            Q←Q+GBASE;
            PUT(Q+FNEWP,@ICCODE[0]+ENTRY'LOC);
            PUT(Q+FNEWL,U(COPY'ARGS,FDCPA) VV GET(Q+FNEWL)
          AA NN FMASK(FDCPA) VV FMASK(FDCLL));
            SSPTR(FTN:FTP,FSP);
            FSP.SYVAL←Q-GBASE;
            IF T'V'PTR DO;
                 PUT(T'V'PTR,U(Q,IWGD)+(U(ATI,IWTAG) IF TRAP'ENTRY'FLAG ELSE
               U(ATD,IWTAG)));
            ENDIF;
            RETURN 1;
* INDEX OUT OF RANGE
TEFIE: CERR(69);* CONTINUES
       GOTO TEFIR;

       PROGRAM TEFFIXED;
       INCLUDE FDEC';

* PROCESSOR FOR 'FIXED' STATEMENT

FUNCTION TEFFIXED(POINTER Z95);
* NOT LEGAL IN COMMON BLOCK ?
            CERR(117) IF ICTYPE=IBTCB;
            IF P.TOPR#OPNIL DO;
                 FLOC'INDEX←TFIC(P,4B7);
* ILLEGAL ORIGIN ?
                 CERR(76) IF FLOC'INDEX<GBASE OR FLOC'INDEX>GBASE+BRSGA;*** ***
                       TRW(ICBA.IBMLR,ICNEWL$FWNEWL-GBASE)
                        IF ICGSP.GSASGL;
                       ICGSP.GSASGL←0;
                       ICNEWL$FWSTK←0;
                       ICNEWL$FWNEWL←FLOC'INDEX;
            ELSEIF ICNEWL$FWSTK=0 AND ICGSP.GSASGL=0 DO;
                       ICNEWL$FWSTK←1;
                       ICNEWL$FWNEWL←ICBA.IBMLR;
            ENDIF;
            ICGSP.GSNEWL←ICNEWL;
            ICGSP.GSFIXED←1;
            RETURN 0;


       PROGRAM TEFORG;
       INCLUDE FDEC';

* PROCESSOR FOR 'ORIGIN' STATEMENT

FUNCTION TEFORG(POINTER Z95);
*** NOT RIGHT
            IF P.TOPR=OPNIL DO;
* ONLY LEGAL IN COMMON BLOCK ?
                 CERR(118) IF ICTYPE#IBTCB;
                 FLOC'INDEX←0;
            ELSE DO;
                 FLOC'INDEX←TFIC(P,4B7);
* ILLEGAL ORIGIN ?
                 CERR(76) IF FLOC'INDEX<CODETOP OR FLOC'INDEX>=CODELIM;
                 CODETOP←FLOC'INDEX;
            ENDIF;
            ICGSP.GSORG←1;
            ICGSP.GSADDR←FLOC'INDEX;
            RETURN 0;


       PROGRAM TEFBLK;
       INCLUDE FDEC';
       DI BFTN;

* PROCESSOR FOR 'PROGRAM' AND 'COMMON' STATEMENTS

FUNCTION TEFBLK(POINTER Z95);
* IB NAME WRONG ?
            BFTN←ICGTN;
            CERR(54) IF BFTN#SSFGS(FTN,0,0);
            SSELECT(BFTN);
            RETURN 0;

***
*** TEVDEC(A)
***
* PROCESSOR FOR VARIABLE DECLARATIONS



       COMMON VDEC';
       INCLUDE SDEC';

       DI VTYPE,VMODE,VTN,SPEC'WORD,VDTYPE,VABSLOC,EQUIV'ADDR,VVALUE;
       DI DIM'FLAG,LEN'FLAG,EQUIV'FLAG,ORG'FLAG,INIT'FLAG,PARAM'FLAG;
       DP VTP,VSP;
       DP DCWA93,ISBA93,BS93,SLLB93,EQUIV'P,ORG'P,INIT'P;


       PROGRAM TEVDEC;
       INCLUDE VDEC';

FUNCTION TEVDEC(POINTER Z93);
       VDEC'SETUP(Z93);
       IF VTP.TKSYM=0 DO;
* DECLARAND IS NOT A SYMBOL
            CERR(63);
       ENDIF;
       IF SPEC'WORD$DFPAR#0 AND (INIT'FLAG VV EQUIV'FLAG VV ORG'FLAG)#0 DO;
* INITIALIZATION, EQUIVALENCE NOT ALLOWED
            CERR(73);
       ENDIF;
       V'REDEC'CHECK(//TEVRR);
       RETURN RNOVAL;
TEVRR: IF VTP.TKUSE DO;
* DECLARAND HAS ALREADY BEEN USED
            CERR(162);
       ENDIF;
* ATTEMPT TO REDECLARE NAME ?
       CERR(64) IF TDCHK(VTN);
       ABSLOC←VABSLOC;
       IF VMODE=SMFIELD OR VMODE=SMSFIELD DO;
            VDEC'FIELD();
       ELSEIF VMODE=SMVALUE OR VMODE=SMFUNC DO;
            VDEC'SCALAR(//TEVDP);
       ELSEIF VMODE=SMEXT DO;
* EXTERNAL
            GOTO TEVDP IF INIT'FLAG OR EQUIV'FLAG OR ORG'FLAG OR LEN'FLAG
          OR DIM'FLAG;
            YGFD(VTN:VVALUE,VTP,VSP);
            PARAM'FLAG←1;
       ELSEIF VMODE=SMARRAY OR VMODE=SMARR1 DO;
            VDEC'ARRAY(//TEVDP);
       ENDIF;
       SSPTR(VTN:VTP,VSP);
       VTP.TKPARAM←PARAM'FLAG;
       VTP.TKTYPE←VTYPE;
       VSP.SYDTYPE←VDTYPE;
       VSP.SYMODE←TXMTAB[VMODE];
       VSP.SYEQUIV←(EQUIV'FLAG VV ORG'FLAG);
       VSP.SYVAL←VVALUE;
       RETURN RNOVAL;
* REDUNDANT PARAMETERS
TEVDP: CERR(66);

       PROGRAM VDEC'SETUP;
       INCLUDE VDEC';
***
*** VDEC'SETUP()*
***
* SET UP GLOBAL VARIABLES FOR VDEC

       DP P93;

FUNCTION VDEC'SETUP(POINTER A93);
       NODE←A93;
       VTN←A93.TO1;
       SPEC'WORD←A93.TO2;
       P93←A93.TO3;
       INIT'P←A93.TO4;
       EQUIV'P←A93.TO5;
       INIT'FLAG←(INIT'P.TOPR#OPNIL);
       EQUIV'FLAG←(EQUIV'P.TOPR#OPNIL);
       VABSLOC←EQUIV'ADDR←-1;
       PARAM'FLAG←0;
       IF EQUIV'P.TOPR=OPCON DO;
            VABSLOC←TFIC(EQUIV'P,4B7);
* ILLEGAL ORIGIN ?
            CERR(98) IF RING#2 AND (VABSLOC<GBASE OR
          VABSLOC>GBASE+FRMASK(INSGD));* KLUDGE FOR MONITOR
       ELSEIF EQUIV'P.TOPR=OPVAR DO;
* ILLEGAL EQUIVALENCE ?
            CERR(99) IF (EQUIV'ADDR←EQUIV'P.TADDR)=0
          OR INIT'FLAG#0 AND EQUIV'ADDR$INSTAG#ATD;
       ELSEIF EQUIV'FLAG DO;
* ILLEGAL OBJECT IN EQUIVALENCE
            CERR(116);
       ENDIF;
       VTYPE←SPEC'WORD$DTYPE;
       VDTYPE←SPEC'WORD$DDTYPE;
       VMODE←SPEC'WORD$DMODE;
       IF SPEC'WORD$DFREF DO;
            VTYPE←TTINT;
            VDTYPE←SDPOINT;
            VMODE←SMVALUE;
       ENDIF;
       IF P93.TOPR=OPPARAM DO;
            DCWA93←P93.VDCWA;
            ISBA93←P93.VISBA;
            BS93←P93.VBS;
            SLLB93←P93.VSLLB;
            ORG'P←P93.VOG;
       ELSE DO;
            DCWA93←ISBA93←BS93←SLLB93←ORG'P←P93;
       ENDIF;
       DIM'FLAG←(DCWA93.TOPR#OPNIL);
       LEN'FLAG←(SLLB93.TOPR#OPNIL);
       ORG'FLAG←(ORG'P.TOPR#OPNIL);
       SSPTR(VTN:VTP,VSP);
       RETURN;

       PROGRAM V'REDEC'CHECK;
       INCLUDE VDEC';
***
*** V'REDEC'CHECK()*
***
* CHECK IF A DECLARATION IS A RESETTING OF A PARAMETER
* OR A FURTHER INITIALIZATION OF A CONSTANT ARRAY,
* FAIL IF NEITHER, OTHERWISE DO EVERYTHING REQUIRED

       DI T,V,W,S93,B93,LE;
       DP P,Q;
       DQ NTMASK←4B7 RSH TTINT+4B7 RSH TTREAL+
        4B7 RSH TTDBL+4B7 RSH TTCPLX;

FUNCTION V'REDEC'CHECK(), FRETURN;
       IF INIT'FLAG#0 AND EQUIV'FLAG=0 AND ORG'FLAG=0 AND VTP.TKPARAM#0
   AND VTYPE=VTP.TKTYPE AND VDTYPE=VSP.SYDTYPE AND VTP.TKGLOB=0 DO;
            IF NTMASK LSH VTYPE<0 AND VMODE=SMVALUE
          AND VMODE=VSP.SYMODE AND VSP.SYEQUIV=0 DO;
* REDECLARATION OF PARAMETER
                 VSP.SYVAL←TFIV(INIT'P,VTYPE,0);
                 RETURN;
            ELSEIF (VMODE=SMARRAY OR VMODE=SMARR1) AND DIM'FLAG#0
          AND ISBA93.TOPR=OPNIL AND VSP.SYMODE=SMARRAY AND
          (Q$INSTAG#ATREL OR Q$INSST#ASTLR WHERE Q←
          VSP.SYVAL) DO;
* ADDING VALUES TO EXISTING CONSTANT ARRAY
                 VAA←(Q$INSGD+GBASE IF Q$INSTAG=ATD ELSE
               SE(Q$INSSRD,INSSRD)+ELITBUF);
                 W←GET(VAA);
                 T←(W$AIWLLIM IF (LE←W$AIWLEB) ELSE
               W$AIWNLIM)+1-(B93←W$AIWORG);
                 S93←(W$AIWLMULT IF LE ELSE W$AIWNMULT)+1;
                 V←TFIC(DCWA93.TO1,4B7)-B93;
* CONSTANT SUBSCRIPT OUT OF RANGE ?
                 CERR(163) IF V<0 OR V>=T;
                 P←GET(VAA+FDISP(AIWADDR));
                 P←(VAA+1+SE(P$IWSRD,IWSRD) IF P$IWTAG=ATREL
               ELSE P$IWGD);* ATREL=>ARTSR
                 TFCIL(INIT'P,VTYPE IF VTYPE#TTUND ELSE -S93,
               P+S93*V,T-V);
                 RETURN;
            ENDIF;
       ENDIF;
       FRETURN;

       PROGRAM VDEC'FIELD;
       INCLUDE VDEC';
***
*** VDEC'FIELD()*
***
* PROCESS A FIELD DECLARATION

       DI T,V,W,K;

FUNCTION VDEC'FIELD();
            IF DIM'FLAG DO;
* FIELD WITH PARAMETERS
* ILLEGAL EQUIVALENCE ?
                 CERR(99) IF EQUIV'ADDR#-1;
                 T←TFIC(DCWA93,4B7);
                 V←TFIC(ISBA93,0);
                 W←TFIC(SLLB93,23);
                 IF V<0 OR V>23 OR W<V OR W>23 OR
               T<-FRMASK(FIWDISP)/2-1 OR T>FRMASK(FIWDISP)/2 DO;
* BAD PARAMETERS FOR FIELD
                      CERR(65);
                 ELSE DO;
                      PARAM'FLAG←1;
                      IF V=0 AND W=23 AND T>=-FRMASK(INSIMV)/2-1
                    AND T<=FRMASK(INSIMV)/2 DO;
* FULL-WORD
                           VVALUE←IQ(T);
                      ELSE DO;
* NOT FULL-WORD
                           T←IWTFLD@IWTYPE+V@FIWBA+
                         (W-V+1)@FIWBL+(VMODE=SMSFIELD)@FIWSIGN+
                         T@FIWDISP;
                           IF SPEC'WORD$DFXFD OR ABSLOC>=0 OR RING>0 DO;
TEVFD:                          PUT(TSGL(1),T);
                                VVALUE←VINSA;
                           ELSE DO;
                                PUT(GBASE+(K←TFGSEQ(1,LGBIT,0,
                              FRMASK(BXBASE)/2+1//TEVFD)),T);
                                RSGCTR←RSGCTR+1;
                                VVALUE←ATD@INSTAG+K@INSGD;
                           ENDIF;
                      ENDIF;
                 ENDIF;
            ELSE DO;
* FIELD WITHOUT PARAMETERS
                 VVALUE←TDGET(TTLTAB[TTFIELD],EQUIV'ADDR);
            ENDIF;
       RETURN;

       PROGRAM VDEC'SCALAR;
       INCLUDE VDEC';
***
*** VDEC'SCALAR()*
***
* PROCESS A SCALAR DECLARATION
* FAIL IF REDUNDANT PARAMETERS

       DI T,V,W,K;
       DP P,Q,D;

FUNCTION VDEC'SCALAR(), FRETURN;
            T←(TTFUNC IF VMODE=SMFUNC ELSE VTYPE);
            K←TTLTAB[T];
            IF INIT'FLAG DO;
* INITIALIZED SCALAR
                 IF T=TTSTR AND LEN'FLAG#0 DO;
* REDUNDANT PARAMETERS
TEVDP:                CERR(66);
                 ELSE DO;
                      VAA←0 IF EQUIV'FLAG=0 ELSE TDGET(0,EQUIV'ADDR);
                      VVALUE←TFIV(INIT'P,T,VAA);
                      PARAM'FLAG←1 IF EQUIV'FLAG=0;
                 ENDIF;
            ELSEIF T#TTSTR OR LEN'FLAG=0 DO;
* SCALAR WITHOUT INITIALIZATION OR PARAMETERS
                 VVALUE←TDGET(K,EQUIV'ADDR);
            ELSE DO;
* STRING WITH PARAMETERS
                 TFGSP(BS93,SLLB93:T,V,W);
                 VVALUE←TDGET(K,EQUIV'ADDR);
                 P←VAA;
                 Q←VINSA;
                 ABSLOC←TFIC(ORG'P,-1);
                 TFGET(W);
                 IF VABSLOC>=0 OR TFSIS()#0 DO;
                      PUT(P+FDISP(SL),PUT(P+FDISP(SR),
                    PUT(P+FDISP(SW),T+VAA)));
                      PUT(P+FDISP(SU),V+VAA);
                 ELSE DO;
                      D←TSGL(2);
                      PUT(D,T+Q$INSLRD+4);
                      PUT(D+1,V-T);
                      TSW(ZZCLA);
                      TSA(ZADD,VINSA);
                      TSA(ZSTA,Q+FDISP(SL));
                      TSA(ZSTA,Q+FDISP(SR));
                      TSA(ZSTA,Q+FDISP(SW));
                      TSA(ZADD,VINSA+1);
                      TSA(ZSTA,Q+FDISP(SU));
                 ENDIF;
            ENDIF;
       RETURN;

       PROGRAM VDEC'ARRAY;
       INCLUDE VDEC';
***
*** VDEC'ARRAY()*
***
* PROCESS AN ARRAY DECLARATION
* FAIL IF REDUNDANT PARAMETERS

       DI T,V,W,I,J,K,S,B,LE;
       DP P,Q,R,D;
       DI AS93,IA93,IS93;
       DQ AINMAX←FRMASK(AIWNLIM),AILMAX←FRMASK(AIWLLIM);
       DECLARE ARRAY AUBTAB[2]←(AINMAX+1,AILMAX+1);
       DECLARE ARRAY ARRDIM[FRMASK(SYDIM)];

FUNCTION VDEC'ARRAY(), FRETURN;
            K←T←TTLTAB[TTARRAY];
            IF DIM'FLAG=0 DO;
                 FRETURN IF LEN'FLAG;
                 VVALUE←TDGET(T,EQUIV'ADDR);
            ELSE DO;
                 IF LEN'FLAG DO;
                      GOTO TEVDP IF INIT'FLAG;
                      S←TTLTAB[TTSTR];
                 ELSEIF VTYPE=TTSTR AND ISBA93.TOPR=OPNIL AND INIT'FLAG#0
               AND ORG'FLAG=0 AND EQUIV'FLAG=0 AND ICTYPE=IBTFN DO;
                      S←1;
                 ELSEIF LE←(ISBA93.TOPR#OPNIL) DO;
                      S←TFIC(ISBA93,4B7);
                      IF S<1 OR S>FRMASK(AIWLMULT)+1 DO;
* BAD ITEM SIZE FOR ARRAY
                           CERR(67);
                      ENDIF;
                      VTYPE←TTUND IF S#TTLTAB[VTYPE];
                 ELSE DO;
                      S←TTLTAB[VTYPE];
                 ENDIF;
                 IS93←S-1;
                 B←(VMODE=SMARR1);
                 AS93←J←0;
                 D←DCWA93;
                 WHILE D.TOPR#OPNIL DO;
                      W←(V←TFIC(D.TO1,4B7))+B-1;
                      IF V<0 OR W>AUBTAB[LE] DO;
* ARRAY DIMENSION OUT OF RANGE
                           CERR(68);
                      ENDIF;
                      D←D.TO2;
* TOO MANY DIMENSIONS FOR ARRAY ?
                      CERR(108) IF J=FRMASK(SYDIM);
                      ARRDIM[J]←V;
                      J←J+1;
                      AS93←AS93+K;
                      K←K*V;
                 ENDFOR;
                 T←S*K/T;
                 R←Q←TSGL(AS93);
                 IA93←VINSA;
                 TFGET(AS93) IF INIT'FLAG=0 AND TFSIS()=0;
                 VVALUE←VINSA;
                 ABSLOC←TFIC(ORG'P,-1);
* ILLEGAL ORIGIN ?
                 CERR(98) IF ORG'FLAG#0 AND (ABSLOC<GBASE OR ABSLOC>
               CODELIM-T);
                 TDGET(T,EQUIV'ADDR) IF INIT'FLAG=0 OR EQUIV'ADDR#-1
               ELSE TSGL(T);
                 PARAM'FLAG←1;
                 D←VIWA;
                 K←1;
                 FOR I←0 TO J-1 DO;
                      W←(V←ARRDIM[I])+B-1;
                      IF I=J-1 DO;
                           IF D$IWTAG=ATREL AND D$IWRT=ARTSR DO;
                                D$IWSRD←D$IWSRD-(Q+
                              FDISP(AIWADDR)-ELITBUF);
                                S←S-TTLTAB[TTARRAY];
                           ENDIF;
                           TFGAD(B@AIWORG+(IS93@AIWLMULT+
                         W@AIWLLIM+1@AIWLEB IF LE
                         ELSE IS93@AIWNMULT+W@AIWNLIM),
                         D,Q,S,K);
                      ELSE DO;
                           TFGAD(B@AIWORG+(T-1)@
                         AIWNMULT+W@AIWNLIM+1@AIWMIB,
                         ATREL@IWTAG+ARTSR@IWRT+
                         (T*V*K-FDISP(AIWADDR))@IWSRD,
                         R,T*V,K);
                           R←R+T*(K←K*V);
                      ENDIF;
                 ENDFOR;
                 IF IA93#VVALUE DO;
                      TSA(ZLDD,IA93);
                      TSA(ZSTD,VVALUE);
*** ABOVE ONLY WORKS FOR 1-DIMENSIONAL ARRAYS
                 ENDIF;
                 IF LEN'FLAG DO;
                      TFGSP(BS93,SLLB93:T,V,W);
                      TFGET(K*W);
*** GENERATE CODE TO SET UP STRING DESCRIPTORS
* NOT IMPLEMENTED
                      CERR(113);
                 ENDIF;
                 IF INIT'FLAG DO;
* INITIALIZED ARRAY
                      TFCIL(INIT'P,VTYPE IF VTYPE#TTUND ELSE -S,
                    VAA,T);
                 ENDIF;
            ENDIF;
       RETURN;
* REDUNDANT PARAMETERS
TEVDP: CERR(66);

***
*** TFGSP(A,B)
***
* A IS THE NODE FOR THE CHARACTER SIZE FOR A STRING FORM,
* B IS THE NODE FOR THE CHARACTER COUNT.  CHECK BOTH FOR
* INTEGER CONSTANCY (EXCEPT THAT A MAY BE NIL).
* RETURN WORDS 0 AND 3 OF THE DESCRIPTOR -THE ORIGIN,
* AND THE NUMBER OF WORDS OCCUPIED BY THE STRING
* ERROR IF THE PARAMETERS ARE ILLEGAL OR NON-CONSTANT



       PROGRAM TFGSP;
       INCLUDE SDEC';

       DI U11,V11,W11,N11,T11;

FUNCTION TFGSP(POINTER Y11,Z11);
       N11←TFIC(Y11,NORCSIZE);
       V11←TFIC(Z11,4B7);
       IF N11#6 AND N11#8 AND N11#12 AND N11#24 DO;
* BAD CHARACTER SIZE
               CERR(56);
       ENDIF;
       U11←(2 IF N11=12 ELSE 4-N11/8);
* ILLEGAL STRING LENGTH ?
       CERR(106) IF V11<0 OR V11>(FRMASK(SIWWA)+1)*U11;
       W11←U(IWTSTR,IWTYPE)+U(4-U11,SIWCS)-U(1,SIWWA);
       T11←V11+U11-1;
       RETURN (W11+U(U11-1,SIWCA),W11+U(T11 MOD U11,SIWCA)+
   U(T11/U11,SIWWA),(N11*V11+23)/24);

***
*** TFGAD(W0,W1,A,K,N)
***
* GENERATE N ARRAY DESCRIPTORS AT ABSOLUTE ADDRESS A,
* STARTING WITH (W0,W1) AND INCREMENTING W1 BY K EACH TIME
* IWTYPE IS SET TO IWTARR IN W0
* X-MODIFICATION IS TURNED ON IN W1



       PROGRAM TFGAD;
       INCLUDE SDEC';

       DI I12;

FUNCTION TFGAD(W012,W112,POINTER A12,INTEGER K12,N12);
       W012←W012+U(IWTARR,IWTYPE);
       N12←2*N12-2;
       IF W112$IWTAG=ATD DO;
               W112$IWTAG←ATX;
       ELSEIF W112$IWTAG=ATROD DO;
               W112$IWTAG←ATROX;
       ELSE DO;* MUST BE RELATIVE MODE
               W112$IWRELX←1;
       ENDIF;
       FOR I12←0 BY 2 TO N12 DO;
               PUT(A12+I12,W012);
               PUT(A12+I12+1,W112);
               W112←W112+K12;
       ENDFOR;
       RETURN;

***
*** TFSIS()
***
* SET UP INITIALIZATION SUBROUTINE IF REQUIRED
* RETURN 1 IF COMMON BLOCK, 0 IF FUNCTION



       PROGRAM TFSIS;
       INCLUDE SDEC';

       DP P13;
       DI T13;

FUNCTION TFSIS();
       RETURN 1 IF ICTYPE=IBTCB;
       IF INITSR<0 DO;
               INITSR←RELLOC;
               TSW(U(ZHLT,INSOP));* BECOMES STX LINK
       ENDIF;
       RETURN 0;


***
*** TEIS()
***
* END INITIALIZATION SUBROUTINE IF REQUIRED

FUNCTION TEIS();
       RETURN IF INITSR<0 OR INITSF>=0;
       T13←TFGET(1);
       P13←CODETOP+INITSR-RELORG;
       PUT(P13,U(ZSTX,INSOP)+T13);
       TSA(ZBRU,TSIIA(T13//FTLERR));
       INITSF←0;
       RETURN;

***
*** TFPL(P)
***
* PROCESS THE (REVERSED) FP DECLARATION CHAIN P



       PROGRAM TFPL;
       INCLUDE SDEC';

       DQ TFPMASK←FMASK(DTYPE)+FMASK(DDTYPE)+FMASK(DMODE);
       DI W14,Z14;
       DP TP14,SP14;

FUNCTION TFPL(POINTER P14);
       RETURN IF P14.TOPR=OPNIL;
       TFPL(P14.TO2);
       P14←P14.TO1;
* EXPECTED VDEC ?
       CERR(74) IF P14.TOPR#OPVDEC;
       SSPTR(P14.TO1:TP14,SP14);
       Z14←U(TP14.TKTYPE,DTYPE)+U(SP14.SYDTYPE,DDTYPE)+
   U(SP14.SYMODE,DMODE);
       IF Z14=U(TTUND,DTYPE)+U(SDNOR,DDTYPE)+U(SMVALUE,DMODE) DO;
            TEVDEC(P14);
       ELSEIF W14$DNONE=0 WHERE W14←P14.TO2 DO;
* CONFLICTING DECLARATIONS ?
            CERR(75) IF (W14 AA TFPMASK)#Z14 AND W14$DFREF=0;
       ELSE DO;
            P14.TO2←W14 AA NN TFPMASK VV Z14;
       ENDIF;
       TSW(TFFP(P14));
       RETURN;

***
*** TDGET(N,A)
***
* GET N LOCAL WORDS IF A=-1, OTHERWISE RETURN A



       PROGRAM TDGET;
       INCLUDE SDEC';

       DI D16;

FUNCTION TDGET(N16,A16);
       IF (VINSA←A16)=-1 DO;
            TFGET(N16);
       ELSEIF A16$INSTAG=ATD DO;
            VAA←GBASE+(D16←A16$INSGD);
            VIWA←U(ATD,IWTAG)+U(D16,IWGD);
       ELSEIF A16$INSRT=ARTSR DO;* MUST HAVE INSTAG=ATREL
           VAA←ELITBUF+(D16←SE(A16$INSSRD,INSSRD));
           VIWA←U(ATREL,IWTAG)+U(ARTSR,IWRT)+U(D16,IWSRD);
       ELSEIF A16$INSST=ASTLR DO;
           VIWA←U(ATREL,IWTAG)+U(ASTLR,IWST)+U(A16$INSLRD,IWLRD);
       ENDIF;
       RETURN VINSA;

***
*** TMUC(L,N)
***
* CONSTRUCT THE IMMEDIATE ADDRESS FOR AN MCALL (L=FLMONITOR)
* OR A UCALL (L=FLUTILITY) WITH INDEX N



       PROGRAM TMUC;
       INCLUDE SDEC';


        FUNCTION TMUC(L17,N17);
       RETURN ((-1000B IF L17=FLMONITOR ELSE -2000B IF N17=0
        ELSE 0)-N17);

***
*** TFIC(A,K)
***
* CHECK A FOR BEING AN INTEGER CONSTANT OR NIL
* IF NIL, RETURN K UNLESS K=4B7, IN WHICH CASE GIVE AN ERROR
* IF INTEGER CONSTANT, RETURN THE VALUE
* OTHERWISE GIVE AN ERROR



       PROGRAM TFIC;
       INCLUDE SDEC';


        FUNCTION TFIC(POINTER A18,INTEGER K18);
       IF A18.TOPR=OPNIL AND K18#4B7 DO;
           RETURN K18;
       ELSEIF A18.TOPR=OPCON AND A18.TTYPE=TTINT DO;
           RETURN A18.TOIV;
       ELSE DO;
* PARAMETER NOT INTEGER CONSTANT
            CERR(58);
       ENDIF;

***
*** TVEA(L,N)
***
* COMPUTE THE ABSOLUTE ADDRESS OF ENTRY N IN THE
* TRANSFER VECTOR CORRESPONDING TO (D)FLOC L
* RETURN THE ADDRESS, AND A FLAG WHICH IS 0 IF
* THE T.V. IS BLL-TYPE, 1 IF BRU-TYPE
* FRETURN IF THE INDEX IS OUT OF BOUNDS



       PROGRAM TVEA;
       INCLUDE SDEC';

        DI U26,T26;
       DP P26;

        FUNCTION TVEA(L26,N26), FRETURN;
       IF L26=FLSYSPOP DO;
           FRETN IF N26<0;
           N26←N26+SYSPTN;
           L26←FLTRAP;
       ENDIF;
       U26←TMITAB[NRINGS*L26+RING];
       T26←TTVTAB[L26]$TV1ORG;
       FRETN IF N26<T26 OR N26>U26;
       P26←P26+GBASE IF TTVTAB[L26]<0 WHERE P26←TTVTAB[L26]$IWGD;
       RETN (GET(P26)$IWGD+N26-T26+2,TTVTAB[L26]$TVTRAP);

***
*** TDCHK(T)
***
* CHECK IF THE SYMBOL WITH TN T IN THE CURRENT IB
* HAD A DECLARATION BROUGHT DOWN FROM A COMMON BLOCK:
* IF SO, DELETE IT AND RETURN 0.  ALSO RETURN 0 IF
* THE SYMBOL IS UNDECLARED.  RETURN 1 IF DECLARED AND NOT COMMON



       PROGRAM TDCHK;
       INCLUDE SDEC';

        DP TP28,SP28;

        FUNCTION TDCHK(TN28);
       SSPTR(TN28:TP28,SP28);
       RETURN 0 IF TP28.TKTYPE=TTUND AND SP28.SYMODE=SMVALUE
        ELSE RETURN 1 IF TP28.TKGLOB=0;
       $TP28←$TP28 AA (FMASK(TKSI)+FMASK(TKSYM)) VV U(TTUND,TKTYPE);
       SP28[FDISP(SYFLAGS)]←SP28[FDISP(SYFLAGS)] AA NN FMASK(SYFLAGS)
        VV (U(SMVALUE,SYMODE)+U(SDNOR,SYDTYPE));
       SP28.SYVAL←0;
       RETURN 0;

***
*** TFGBLK(N,D)
***
* FIND AN N-WORD FREE BLOCK IN THE FREELIST DESCRIBED BY D
* RETURN ADDRESS OF BLOCK
* FRETURN IF NO BLOCK CAN BE FOUND



       PROGRAM TFGBLK;
       INCLUDE SDEC';

        DP P64,Q64,L64,R64;
       DI M64,A64;

        FUNCTION TFGBLK(N64,POINTER D64), FRETURN;
       L64←D64.GFLIST;
       R64←D64.GFROVER;
       FRETURN IF L64=0;
       P64←R64;
TFGB1: Q64←P64;
       P64←P64.GFPTR;
       IF (M64←P64.GFCNT-N64)>=0 DO;
           A64←P64.GFADDR;
           IF M64#0 DO;
               P64.GFCNT←M64;
               D64.GFROVER←P64;
               P64.GFADDR←A64+N64;
           ELSEIF P64=Q64 DO;
               P64.GFPTR←FFREE;
               FFREE←P64;
               D64.GFLIST←D64.GFROVER←0;
           ELSE DO;
               D64.GFROVER←Q64←Q64.GFPTR←P64.GFPTR;
               D64.GFLIST←Q64 IF L64=P64;
           ENDIF;
           RETN A64;
       ENDIF;
       FRETN IF P64=R64 ELSE GOTO TFGB1;

***
*** TFFBLK(A,N,D)
***
* FREE N WORDS OF FREESPACE AT A TO THE FREELIST DESCRIBED BY D
* IF THE FREELIST AREA IS FULL, THE SPACE MAY BE LOST
* RETURN NO VALUE



       PROGRAM TFFBLK;
       INCLUDE SDEC';

        DP P65,F65,Q65,L65,R65;
       DI B65,M65;

        FUNCTION TFFBLK(A65,N65,POINTER D65);
       L65←D65.GFLIST;
       IF L65=0 DO;
           RETURN IF (F65←FFREE)=0;
           F65.GFCNT←N65;
           F65.GFADDR←A65;
           FFREE←F65.GFPTR;
           D65.GFLIST←D65.GFROVER←F65.GFPTR←F65;
           RETURN;
       ENDIF;
       R65←D65.GFROVER;
       P65←(L65 IF R65.GFADDR>A65+N65 ELSE R65);
TFFB1: Q65←P65.GFPTR;
       IF (B65←P65.GFADDR)+(M65←P65.GFCNT)=A65 DO;
           IF Q65.GFADDR=A65+N65 DO;
               P65.GFCNT←M65+N65+Q65.GFCNT;
               P65.GFPTR←Q65.GFPTR;
               Q65.GFPTR←FFREE;
               FFREE←Q65;
               D65.GFROVER←P65 IF R65=Q65;
               RETURN;
           ELSE DO;
               P65.GFCNT←M65+N65;
               RETURN;
           ENDIF;
       ELSEIF B65=A65+N65 DO;
           P65.GFADDR←A65;
           P65.GFCNT←M65+N65;
           RETURN;
       ELSEIF B65>A65 DO;
           RETURN IF (F65←FFREE)=0;
           FFREE←F65.GFPTR;
           F65.GFCNT←M65;
           F65.GFADDR←B65;
           F65.GFPTR←Q65;
           P65.GFCNT←N65;
           P65.GFADDR←A65;
           P65.GFPTR←F65;
           RETURN;
       ENDIF;
       P65←Q65;
       GOTO TFFB1;

***
*** TAW(N)
***
* ALLOCATE N WORDS IN WGS
* ACQUIRE A NEW PAGE OF WGS IF REQUIRED
* ERROR IF WGS COLLIDES WITH RSGS
* SET UP VINSA,VIWA,VAA AND RETURN VAA



       PROGRAM TAW;
       INCLUDE SDEC';

        DI I82,J82;

        FUNCTION TAW(N82);
       WGCTR←WGCTR+N82;
TAW0:  VAA←TFGBLK(N82,WGDESC//TAW1)+GBASE;
       VIWA←U(ATD,IWTAG)+U(VAA,IWGD);
       VINSA←U(ATD,INSTAG)+U(VAA-GBASE,INSGD);
       RETURN VAA;
* WRITEABLE GLOBAL STORAGE FULL ?
TAW1:   CERR(160) IF FFREE=0 OR EWGA>=(J82←BRSGA-MINSL);
       I82←4000B-(GBASE+EWGA+MINSL)$VWA;
       I82←J82 IF I82>J82 WHERE I82←EWGA+I82;
       TFFBLK(EWGA,I82-EWGA,WGDESC);
       SCPG((GBASE+EWGA)$VPA,-1);
       EWGA←I82;
       STKTOP←(STKBOT←GBASE+EWGA)+MINSL;
       STKCHANGE←1;
       GOTO TAW0;


***
*** TRW(N,L)
***
* RELEASE N WORDS OF WGS AT G-RELATIVE ADDRESS L

        FUNCTION TRW(N83,L83);
* TRW ERROR ?
        CERR(161) IF N83<0 OR L83<BWGA OR L83+N83>EWGA;
       TFFBLK(L83,N83,WGDESC);
       RETURN;