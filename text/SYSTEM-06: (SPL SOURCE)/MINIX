       COMMON SINIT';
       INCLUDE DRIV',SGDEC,SDOPS;

******************
*      SPL       *
* INITIALIZATION *
******************




* STORAGE FOR INITIALIZATION
       DS INWS;* WORK DESCRIPTOR FOR SYMBOL STRING
       DP INTP,INSP;* POINTERS TO NEW SYMBOL
       DI INTN;* TN OF NEW SYMBOL
       DI INLE;* EXTRA WORD COUNT FOR SSINS

* DECLARATIONS FOR ADDRESS SPACE MANIPULATION
       DQ CXPSIZE←4000B,LASTADDR←1B6;
       DI CXBUF←TWBA,CXFBUF←CXBUF+CXPSIZE,CXWBUF←CXFBUF+CXPSIZE;
       DECLARE ARRAY CXRB[NRINGS+1]←(0,100B,140B,200B);
       DQ RNTGA←7,EPGA←12B;
* PROGRAM IMAGE HEADER
       DQ NPIH←46,NPIP←NPIH+1;
       DECLARE ARRAY PIHEAD[NPIP];
       DI PINDP=PIHEAD[1],PIRNT=PIHEAD[2],PIMAP←REF PIHEAD[3],
   PIEP=PIHEAD[44],PIEG=PIHEAD[45],
   PIVER=PIHEAD[NPIH];
       DQ PITORG←NPIH+1;

***
*** NXSS()
***
* GET NEXT SYMBOL FROM STRING INWS
* FRETURN IF STRING EMPTY
* RETURN 0 IF NO SYMBOL, ONLY COMMA
* OTHERWISE RETURN 1
* LEAVE TOKEN AND SYMBOL POINTERS IN INTP AND INSP



       PROGRAM NXSS;
       INCLUDE SINIT';

       DECLARE ARRAY NXSA[SYMAXLN];
       DI NXSC,NXSP,NXSN;
       DS NXSSS;

FUNCTION NXSS(), FRETURN;
       SETUP(NXSSS,SYMAXCN,@NXSA[0],6);
       WCI(NXSC,NXSSS) WHILE (NXSC←GCI(INWS//FRETN))#',';
       RETN 0 IF LENGTH(NXSSS)=0;
       WCI(0,NXSSS) WHILE (NXSC←LENGTH(NXSSS)) A' 3#0;
       SSFIND(NXSA,NXSC RSH 2);
       SSINS(INLE);
       SSPTR(INTN←ICTOKEN:INTP,INSP);
       RETN 1;


FUNCTION NXSET(NXSP,NXSN);
       SETUP(INWS,NXSN,NXSP,6);
       SETW(INWS,NXSN);
       RETURN;

***
*** ZSINIT(F)
***
* FINISH INITIALIZING CODE AREA
* IF F=1, INITIALIZE STORAGE AREA ALSO


       PROGRAM ZSINIT;
       INCLUDE SINIT';

* IMPOSSIBLE NAME FOR FNT
       DECLARE ARRAY FNTNA[2]←(6'&'FUN',6'C&'  ');
* TABLE FOR INITIALIZING INTRINSIC FUNCTIONS
       DECLARE ARRAY IFISA[92]←(
        6'$BFI',6'X,BE',6'NTIE',6'R,$C',6'FLOA',6'T,$D',
        6'DFLO',6'AT,C',6'RE,C',6'IM,1',6'CSN,',6'2CSR',
        6',3CS',6'D,4C',6'NS,4',6'CRS,',6'4CDS',6',BGC',
        6'I,BW',6'CI,B',6'GCD,',6'BWCD',6',ESE',6'TUP,',
        6'ESET',6'S,ES',6'ETR,',6'ESET',6'W,BL',6'ENGT',
        6'H,BG',6'C,1S',6'TORI',6'NIT,',6'0MAK',6'E,1S',
        6'ETAR',6'RAY,',6'1FRE',6'E,1E',6'XTZO',6'NE,1',
        6'FREE',6'ZONE',6',4SC',6'OPY,',6'ABCO',6'PY,4',
        6'APPE',6'ND,B',6'INCD',6'ES,B',6'LNGD',6'ES,A',
        6'BSET',6',1SE',6'TZON',6'E,4S',6'T&'DE',6'SC,5');
       DECLARE ARRAY IFISA[60]←(
        6'FL&'D',6'ESC,',6'6AR&'',6'DESC',6',7BR',
        6'&'DES',6'C,/1',6'RUNT',6'IME&'',6'FAIL',
        6'URE,',6'/1LO',6'NG&'C',6'OMPA',6'RE,0',6'SPLI',
        6'T,1F',6'REEE',6'XT,1',6'SELZ',6'ONE,',6'BGET',
        6'R,BG',6'ETW,',6'$BDF',6'IX,$',6'8MAK',6'E&'CO',
        6'MPLE',6'X,$9',6'POWE',6'R,  ');
       DI IFI,IFT,IFJ,IFU,IFK,IFX,IFS;
       DP IFP;
       DECLARE ARRAY IFTA[10]←(TTINT,TTINT,TTREAL,TTDBL,TTSTR,
   TTFIELD,TTARRAY,TTLAB,TTCPLX,TTUND);
       DECLARE ARRAY IFFDA[2]←(REF RTEFD,REF LCPFD);
* TABLES FOR INITIALIZING MACHINE OPCODE IB
       DECLARE ARRAY MOISA[66]←(
        6'HLT,',6'LDA,',6'LDB,',6'LDX,',6'LDD,',6'EAX,',
        6'LNX,',6'XMA,',6'ETR,',6'IOR,',6'EOR,',6'STD,',
        6'STF,',6'STA,',6'STB,',6'STX,',6'ADD,',6'SUB,',
        6'ADC,',6'SUC,',6'ADM,',6'ADX,',6'MIN,',6'MDC,',
        6'MUL,',6'DIV,',6'ICP,',6'CPZ,',6'CMZ,',6'ISD,',
        6'DSD,',6'EXU,',6'ASHD',6',ASH',6'A,LS',6'HD,L',
        6'SHA,',6'CYD,',6'CYA,',6'TSB,',6'LAX,',6'BRU,',
        6'BLT,',6'BEQ,',6'BLE,',6'BGT,',6'BNE,',6'BGE,',
        6'BLL,',6'BLLN',6',BRX',6',BSX',6',SRS',6',EAC',
        6',65B',6',66B',6',67B',6',FLX',6',FLD',6',FCP',
        6',FAD',6',FSB',6',FMP',6',FDV',6',OPR',6',   ');
       DECLARE ARRAY MOOSA[60]←(
        6'CAB,',6'XAB,',6'CBA,',6'CBX,',6'XXB,',6'CXB,',
        6'CAX,',6'XXA,',6'CXA,',6'CNA,',6'CNX,',6'ZOA,',
        6'ZAB,',6'ZOB,',6'CGA,',6'XGA,',6'CLA,',6'XLA,',
        6'CSA,',6'XSA,',6'CTA,',6'CCA,',6'NOP,',6'MVB,',
        6'MVC,',6'MVS,',6'CPS,',6'CLS,',6'ASP,',6'LLT,',
        6'COB,',6',,LO',6'ADS,',6'STOR',6'S,LS',6'C,FI',
        6'X,FL',6'OAT,',6'FNA,',6'BRK,',6'CIN,',6'COUT',
        6',,,,',6'SLOK',6',RLO',6'K,AL',6'D,AS',6'T,AA',
        6'X,PR',6'O,,U',6'NPRO',6',ATT',6'N,US',6'CL,C',
        6'MAP,',6'CMAP',6'S,CA',6'T,CA',6'C,RU',6'N,  ');
       DECLARE ARRAY MOBNA[2]←(6'&'MAC',6'H&'  ');
       DI MOI;
* PARAMETERS FOR SETTING UP <DUMMY>
       DS SIFS←"PROGRAM DUMMY;FIXED;END;";
       DQ XXTRA←25;* NUMBER OF EXTRA TOKENS
       DQ EXTRA←20;* AMOUNT OF EXTRA CODE SPACE

* 'FIXER' AND RING TRAP ROUTINES
       DQ NFIXC←52B;
       DECLARE ARRAY FIXCODE[NFIXC]←(
        0B,       0B,       0B,       0B,
 73727774B,71710007B,70310007B,71727771B,
 70317773B,71727771B,70310002B,75027766B,
        0B,06000000B,76010012B,76010011B,
 76010010B,76010007B,76010006B,76010005B,
 76010004B,76010003B,76010002B,76010001B,
 16100005B,       0B,       0B,       0B,
        0B,77736617B,76134025B,76134000B,
 77050002B,       0B,16100000B,       0B,
 70520004B,71710004B,00300007B,75020002B,
 02000000B,       0B);
* F0:    0             ADDRESS OF BROKEN INSTRUCTION
* F1:    0             SAME +1
* F2:    *+1
* F3:    0             USED FOR PATCH AT BLL
* FE:    EXU $F0
*        STX FX
*        LDX BKP
*        STX $F0
*        LDX F3
*        STX $F2
*        LDX FX
*        BRU $F1
* FX:    0             SAVE (X)
* BKP:   BLLN BKD      (G-RELATIVE) BREAKPOINT INSTRUCTION
* RTRAP: BLLN BKD      10 COPIES OF THIS FOR RING TRAPS
*         .
*         .
*         .
* BKD:   IAW *+5       BLL DESCRIPTOR
*        CLL *+1
* BKPC:  0             LOCAL ENVIRONMENT
* BKLR:  0
*        0
*        MCALL-113D    SP'TRAP

*        AP 21         TRAP NUMBER
*        AP 0          TRAP PARAMETER
*        LAST AP *+2   FAILURE RETURN
* BKRET:               P-COUNTER POINTS HERE
*        0
*        IAW *+1       (SHOULD NEVER HAPPEN)
*        0
***********************
* TE:    EAX $TA       (X)=TRAP NUMBER
*        STX TX
*        LDX G'[7]     RESTORE SAVED (X)
*        BRU $TX
* TA:    IAW $RTVECT
* TX:    0

* END OF INITIALIZATION TABLES

FUNCTION ZSINIT(IFF);

       GOTO IFIE IF IFF=0;
       TABTOP←TABBOT;

* CREATE GNT AND FNT

       ZNEWIB(0,IBTGN,-1);
       SSFIND(FNTNA,2);
       SSINS(GSLE);
       HALT() IF ICTOKEN#1;
       ZNEWIB(1,IBTGN,-1);

* PUT FIXUP CODE IN USER SPACE

IFIE:  SSELECT(1);
       FIXER←CODEBOT-LSTATE-NFIXC;
       FOR IFI←0 TO NFIXC-1 DO;
          PUT(FIXER+IFI,FIXCODE[IFI]);
       ENDFOR;
* FIX UP BKD+1, BKP
       PUT(FIXER+31B,U(1,FDCLL)+FIXER+32B);
       PUT(FIXER+15B,FIXCODE[15B]+FIXER+30B-GBASE);

* SET UP ALL TRAP AND CALL VECTORS,
* ASCRIBING THE CODE SPACE TO THE FNT

       FOR IFI←0 TO NFLOC-1 DO;
            IFU←TMITAB[IFI*NRINGS+RING];
            IF IFU>=0 DO;
                 IFT←IFU-(IFJ←TTVTAB[IFI]$TV1ORG);
                 IFP←TTVTAB[IFI]$IWGD;
                 IFP←IFP+GBASE IF TTVTAB[IFI]<0;
                 PUT(IFP,U(ATI,IWTAG)+U(CODETOP,IWGD));
                 PUT(CODETOP,U(IWTARR,IWTYPE)+U(IFU,AIWNLIM)+
               U(IFJ,AIWORG));
                 PUT(CODETOP+1,U(ATREL,IWTAG)+U(ARTISR,IWRT)+
               U(1,IWRELX)+U(1,IWSRD));
                 CODETOP←CODETOP+2;
                 IF IFI=FLTRAP DO;* FIX UP TA
                      PUT(FIXER+50B,FIXCODE[50B]+CODETOP);
                      PUT(CODETOP+IFJ,FIXER+16B+IFJ) FOR IFJ←0 TO 9;
                 ELSE DO;
                      UCLEAR(CODETOP,U(1,IWTRAP),IFT+1);
                 ENDIF;
                 CODETOP←CODETOP+IFT+1;
            ENDIF;
       ENDFOR;
       ICGSP.GSLCODE←ICLCODE←CODETOP-CODEBOT;

* PUT INTRINSIC FUNCTIONS IN FNT

       IF IFF=0 DO;
            CLEAR(A(ICTT,1),0,ICLTT+ICLST);
            CLEAR(A(ICHT,0),0,IBLHT);
            ZSPACK(1);
       ENDIF;
       NXSET(@IFISA[0],366);
       INLE←FSLE;
       IFI←IFK←IFS←0;
IFIL:  IF (IFX←IFT←GCI(INWS//IFIX))<'0' DO;
            IFT←GCI(INWS);
       ENDIF;
       IFT←IFT-'0';
       GOTO IFII IF NXSS(//IFIX)=0;
       IF IFX='$' DO;
            FNVEC[IFS]←INTN;
            IFS←IFS+1;
       ENDIF;
       IF IFT>9 DO;
            IFT←IFT-('A'-'0');
            INSP.FSGTN←1;
       ENDIF;
       INSP.FSIFN←IFI+1;
       INTP.TKTYPE←IFTA[IFT];
       IF IFX='/' DO;
            $IFFDA[IFK]←YCFD(INTN);
            IFK←IFK+1;
       ENDIF;
IFII:  IFI←IFI+1;
       GOTO IFIL;
IFIX:  SFIN(25);

       GOTO DMIE IF IFF=0;

* SET UP SPECIAL IB FOR MACHINE OPCODES

       SSELECT(0);
       SSFIND(MOBNA,2);
       MOBTN←SSINS(GSLE);
       ZNEWIB(MOBTN,IBTCB,-1);
       NXSET(@MOISA[0],261);
       INLE←0;
       MOI←0;
MOIL:  GOTO MOII IF NXSS(//MOIX)=0;
       INSP.SYVAL←MOI;
       INSP.SYDIM←1;
MOII:  MOI←MOI+1;
       GOTO MOIL;
MOIX:  NXSET(@MOOSA[0],238);
       MOI←0;
MOOL:  GOTO MOOI IF NXSS(//MOOX)=0;
       INSP.SYVAL←OQ(MOI);
MOOI:  MOI←MOI+1;
       GOTO MOOL;
MOOX:  SFIN(0);

* CREATE AND COMPILE DUMMY FUNCTION

       SETS(CSTR,0,0);
       APPND(CSTR,SIFS//SIPPE);
       SSELECT(0);
       ZPPDS(CSTR,11223100B//SIPPE);
* LEAVE EXTRA TABLE SPACE FOR DIRECT STATEMENT
       ICTT[1]←ICTT[1] VV U(1,TKUSE);
       DMYTN←ICGTN;
       SXPS(5*XXTRA);
       SXPT(XXTRA);
       STINS(0,PPTB);
       SSELECT(0);
       ICBA.IBFSTAT←ICBA.IBLSTAT←ICFSTAT←ICLSTAT←0;
* JUST RECOMPILE IF NOT INITIALIZING TABLES
DMIE:  ZCOMPF(DMYTN,0,0//SICPE);
* LEAVE EXTRA CODE SPACE FOR DIRECT STATEMENT
       ICGSP.GSLCODE←ICLCODE←ICLCODE+EXTRA;
       CODETOP←CODETOP+EXTRA;
       RETURN;
* PREPROCESSOR ERROR
SIPPE: HALT();
* COMPILER ERROR
SICPE: HALT();

***
*** RESETR(N,B,G,F)
***
* RESET STORAGE IN RING N
* B SPECIFIES THE BOUNDARY BETWEEN RSGS AND CS
* G SPECIFIES THE VALUE OF THE G-REGISTER
* IF F=1, ALSO RESET THE TABLE AREA



       PROGRAM RESETR;
       INCLUDE SINIT';

       DI RSRC,RSRT;
       DP RSRP;

FUNCTION RESETR(RSRN,RSRB,RSRG,RSRF);
       SARING(RSRN);
* CLEAR BIT TABLES
       CLEAR(RSGBIT,0,RSRC←RBLIM-RSGBIT);
       CLEAR(LGBIT,-1,LGBLIM-LGBIT);
       $LGBIT←377B;* *** ADHOC ***
       RSRT←4000B-(RSRG A' 3777B);
       BRSGA←ERSGA←RSRB;
       LRSGA←RSRT IF (LRSGA←ERSGA-RSRC*24)<RSRT;
* SET UP FREE CHAIN FOR WGS
       BWGA←EWGA←GBWS[RSRN];
       RSRP←WGDESC;
       RSRP.GFLIST←RSRP.GFROVER←RSRP+GFLE;
       RSRP←RSRP+GFLE;
       RSRP.GFPTR←RSRP;
       RSRP.GFADDR←EWGA;
       RSRP.GFCNT←0;
* SET UP G-REGISTER, CODE AREA, AND STACK
       RELUD();
       GBASE←RSRG;
       CODEBOT←CODETOP←GBASE+ERSGA;
       CODELIM←GCLI[RSRN];
       STKBOT←STKTOP←GBASE+4;
       STKCHANGE←1;
* SET UP FREELIST FREELIST
       RSRP←WGDESC+GFLE*2;
       RSRP.GFPTR←0;
       RSRP.GFPTR←RSRP-GFLE FOR RSRP←RSRP+GFLE,
   RSRP+GFLE WHILE RSRP<=WGLIM-GFLE;
       FFREE←RSRP-GFLE;
       ZSINIT(RSRF);
       RETURN;

***
*** RELUD()*
***
* RELEASE ALL USER DATA IN CURRENT RING



       PROGRAM RELUD;
       INCLUDE SINIT';

       DI RULL,RUUL,RUPA;

FUNCTION RELUD();
       RULL←GBIA[RING]$VPA;
       RUUL←GCLI[RING]$VPA-1;
       SDPG(RUPA,-1) FOR RUPA←RULL TO RUUL;
       WINIT();
       RETURN;

* 'DUMP', 'RECOVER'


       PROGRAM CLDUMP;
       INCLUDE SINIT', M1'COMM;

* DECLARATIONS
       DQ PIMRW←6000B,PIMRO←2000B;
       DF PIMIDX(0:14,23);
       DI CDPI,CDPJ,CDNP,CDHW,CDTPI,CDDLL,CDDUL,I,NUTS;
       DS CDCM←"* PAGES/";
       DECLARE ARRAY CXWBUF'ARRAY;
* MACROS
       DM PFLSH()←ICGTN←-1;

FUNCTION CLDUMP(), FRETURN;
       GOTO CLD0;

* NORMAL EXIT
CLFS:  FMTO(CDCM);
       OUT(CDNP);
       CLOSE(CLCTI);
       SMAP'INIT();
       RETURN;
* NOT COMPATIBLE
CLOF:  CLOSE(CLCTI);  CERR(25);
* FILE OPENING ERROR
CLFF:  CERR(21);

* 'DUMP' - DUMP CURRENT RING
CLD0:  CLCSTR←CGETF(CLCSTR//FRETN);
       PIHEAD[CLCTJ]←0 FOR CLCTJ←0 TO NPIP-1;
       PIRNT←(GET(GBASE+RNTGA) IF LENGTH(CSTR)=0 ELSE
   PUT(GBASE+RNTGA,CINT(1//FRETN)));
       CLCTI←OOF(CLCSTR,44B//CLFF);
       PIVER←VERSION;
       PIEG←GBASE;
       SSELECT(DMYTN);
       PIEP ← GBASE + EPGA;
       NUTS ← (GBASE+EWGA-1)$VPA;
       SMAP'INIT();
       SRING(-1);
       PFLSH();
* CREATE, MAP IN, AND CLEAR THE PIF HEADER PAGE; MAKE ARRAY
* DESCRIPTOR FOR IT.
       CDNP ← 0;
       SCPG'(CDNP, CLCTI);
       SMAP'(CDNP, CLCTI, CXWBUF);
       BSET(CXWBUF, 0, CXPSIZE);
       CXWBUF'ARRAY ← ARRDESC(CXWBUF, CXPSIZE, 1, 0);
* DUMP USER SPACE
       CDDLL ← CXRB[RING];
       CDDUL ← CXRB[RING + 1];
       CDPI ← CDDLL - 1;
       CDNP ← 1;
       WHILE (CDPI ← SGNP(CDPI, -1)) # -1 AND CDPI < CDDUL DO;
            SMAP(CDPI, -1, CXBUF);
            SCPG'(CDNP, CLCTI);
            SMAP'(CDNP, CLCTI, CXFBUF);
            BCOPY(CXFBUF, CXBUF, CXPSIZE);
            CDHW ← CDNP + (PIMRW IF CDPI <= NUTS ELSE PIMRO);
            PHW(PIMAP, CDPI - CDDLL, CDHW);
            CDNP ← CDNP + 1;
       ENDFOR;
       PINDP ← CDNP;
* DUMP TABLES
       CDTPI ← PITORG;
       CDPI ← -1;
       WHILE (CDPI ← SGNP(CDPI, RING)) # -1 AND CDPI<=(TABTOP-1)$VPA DO;
            SMAP(CDPI, RING, CXBUF);
            SCPG'(CDNP, CLCTI);
            SMAP'(CDNP, CLCTI, CXFBUF);
            BCOPY(CXFBUF, CXBUF, CXPSIZE);
            CDNP ← CDNP + 1;
            CXWBUF'ARRAY[CDTPI] ← CDPI;
            CDTPI ← CDTPI + 1;
       ENDFOR;
       CXWBUF'ARRAY[CDTPI] ← -1;
       CXWBUF'ARRAY[I] ← PIHEAD[I] FOR I ← 0 TO NPIP - 1;
* TRIM THE DUMP FILE
       I ← CDNP - 1;
       WHILE (I ← SGNP'(I, CLCTI)) # -1 DO;
            SDPG'(I, CLCTI);
       ENDFOR;
       SET'FILE'LENGTH(CLCTI, (TABTOP-1)$VWA//SYSERR);
       GOTO CLFS;

     ENTRY CLREC(), FRETURN;
       CLCSTR ← CGETF(CLCSTR//FRETURN);
       CLCTI ← OIF(CLCSTR, 44B//CLFF);
* MAP IN THE HEADER PAGE AND COPY THE STANDARD HEADER INTO PIHEAD
       SMAP'INIT();
       PFLSH();
       SMAP'(0, CLCTI, CXWBUF);
       CXWBUF'ARRAY ← ARRDESC(CXWBUF, CXPSIZE, 1, 0);
       PIHEAD[I] ← CXWBUF'ARRAY[I] FOR I ← 0 TO NPIP - 1;
* CHECK VERSION NUMBER.
       GOTO CLOF IF PIVER # VERSION;
* COMPUTE RING NUMBER, PRINT RING NAME, INITIALIZE RING.
       CLCTJ ← (0 IF PIEG < 4B5 ELSE 1 IF PIEG < 6B5 ELSE 2);
       CSOUT(RNAMES[CLCTJ]);
       COUT('&/', -1);
       SARING(CLCTJ);
       SRING(-1);
       PFLSH();
* RECOVER USER SPACE
       CDDLL ← CXRB[RING];
       CDDUL ← CXRB[RING+1] - 1;
       FOR CDPI ← CDDLL TO CDDUL DO;
            CDHW ← GHW(PIMAP, CDPI - CDDLL);
            IF CDHW # 0 DO;
                 SCPG(CDPI, -1);
                 SMAP(CDPI, -1, CXBUF);
                 SMAP'(CDHW$PIMIDX, CLCTI, CXFBUF);
                 BCOPY(CXBUF, CXFBUF, CXPSIZE);
            ELSE DO;
                 SDPG(CDPI, -1);
            ENDIF;
       ENDFOR;
* RECOVER TABLES
       CDTPI ← PITORG;
       CDNP ← PINDP;
       WHILE (CDPI ← CXWBUF'ARRAY[CDTPI]) # -1 DO;
            SCPG(CDPI, RING);
            SMAP(CDPI, RING, CXBUF);
            SMAP'(CDNP, CLCTI, CXFBUF);
            BCOPY(CXBUF, CXFBUF, CXPSIZE);
            CDTPI ← CDTPI + 1;
            CDNP ← CDNP + 1;
       ENDFOR;
* TRIM TABLE SPACE FILE
       I ← CDNP - 1;
       WHILE (I ← SGNP(I, RING)) # -1 DO;
            SDPG(I, RING);
       ENDFOR;
       SLRING(CLCTJ);
       GOTO CLFS;

* 'MOVE' COMMAND - COPY PAGE TO PAGE


       PROGRAM CLMOVE;
       INCLUDE SINIT';

       DI CLMA1,CLMA2,CLMC1,CLMC2;

FUNCTION CLMOVE(), FRETURN;
       CLMA1←CINT(0//FRETN);
       CLMA2←CINT(1//FRETN);
       CLMC1←CLMC2←-1;
       IF CLMA1<0 DO;
            CLMC1←-2;  CLMA1←-CLMA1;
       ENDIF;
       IF CLMA2<0 DO;
            CLMC2←-2;  CLMA2←-CLMA2;
       ENDIF;
       CLMA1←CLMA1*CXPSIZE IF CLMA1<CXPSIZE;
       CLMA2←CLMA2*CXPSIZE IF CLMA2<CXPSIZE;
       FRETN IF ((CLMA1 VV CLMA2) AA (CXPSIZE-1-LASTADDR))#0
   OR CLMA1>=CXRB[RING+1]*CXPSIZE  OR CLMA2>=CXRB[RING+1]*CXPSIZE;
       MPAGE(CLMA1/CXPSIZE,CLMC1,CLMA2/CXPSIZE,CLMC2//CLM1);
       RETN;
* DRUM ERROR
CLM1:  CERR(24);

***
*** MPAGE(X,C1,Y,C2)
***
* MOVE A PAGE FROM ADDRESS X IN CATEGORY C1
* TO ADDRESS Y IN CATEGORY C2:
* ASSUMES PAGE BUFFER AREA IS EMPTY (FLUSHED)



       PROGRAM MPAGE;
       INCLUDE SINIT';


FUNCTION MPAGE(MPFROM,MPC1,MPTO,MPC2), FRETURN;
       SCPG(MPTO,MPC2);
       SMAP(MPTO,MPC2,CXBUF);
       IF SGNP(MPFROM-1,MPC1)=MPFROM DO;*IF PAGE EXISTS
          SMAP(MPFROM,MPC1,CXFBUF);
          BCOPY(CXBUF,CXFBUF,CXPSIZE);
       ELSE DO;
          BSET(CXBUF,0,CXPSIZE);
       ENDIF;
       RETURN;

***
*** BSTART()
***
* INITIALIZE BARE MACHINE ADDRESS SPACE FROM REAL NAME TABLES



       PROGRAM BSTART;
       INCLUDE SINIT';

       DI BSRS,BSRI,BSVA,BSRA;
       DP BSAP;

FUNCTION BSTART();
       BSRS←RING;
       FOR BSRI←0 TO NRINGS-1 DO;
            GOTO BSTT0 IF REXISTS[BSRI]=0;
            SRING(BSRI);
            IF (BSAP←GET(GBASE+RNTGA))>=GBASE AND BSAP<CXRB[BSRI+1] DO;
                 WHILE (BSVA←GET(BSAP))>=0 AND BSVA<CXRB[BSRI+1]*CXPSIZE DO;
                      BSRA←GET(BSAP+4);
                      MPAGE(BSVA,-1,BSRA,-2//BSTT1)
                    IF (BSRA AA (-LASTADDR/CXPSIZE))=0;
BSTT1:                BSAP←BSAP+5;
                 ENDFOR;
            ENDIF;
BSTT0: ENDFOR;
       SRING(BSRS);
       RETURN;