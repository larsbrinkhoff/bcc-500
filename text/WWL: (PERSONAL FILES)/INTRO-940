.GL  TER-MI-NAL SYS-TEM SUB-ROUTINE STRAIGHT-FOR-WARD-NESS
.GL SOFT-WARE SIMUL-TAN-EOUS-LY RE-TRIEV-AL REGIS-TER
.GL REF-ER-ENCE QUAN-TI-TIES PRO-GRAM-MING PER-FORMS
.GL OPER-ATIONS NONDES-TRUC-TIVE-LY MUL-TI-PLY MULTI-PLE
.GL MOD-IFY MOD-IFI-CA-TION MINI-COM-PUTERS MEM-ORY
.GL INTE-GER IN-STRUC-TIONS IN-DIS-TINGUISH-ABLE HOW-EVER
.GL GREAT-LY EX-PEN-SIVE EXE-CU-TION EX-CEPT DESIG-NAT-ING
.GL DES-CRIBES DE-PEND-ING CON-TROLS CON-TENTS COM-PLETE-LY
.GL COM-PLE-MENTS CATE-GORY CARE-FUL-LY BE-GIN-NING
.GL AP-PEAR-ANCE ALLO-CATION AC-CURACY AC-CUM-ULA-TOR
.GL ABSO-LUTE
1.0  ↑CINTRODUCTION
.SP 2
       /THE ↑CXDS 940 IS A MEDIUM-SIZED, GENERAL PURPOSE COMPUTER
ACCESSED FROM TERMINALS IN A TIME-SHARING MODE.
/THE 940 IS A GOOD MACHINE FOR A STUDY OF ASSEMBLY-LANGUAGE
PROGRAMMING TECHNIQUES AND MACHINE ORGANIZATION.  /IT
IS SUFFICIENTLY LARGE
THAT A USER DOES NOT HAVE TO CONFUSE
HIMSELF WITH VARIOUS TRICKS REQUIRED TO AVOID THE
HARDWARE LIMITATIONS OF TYPICAL MINICOMPUTERS; YET IT IS
SIMPLE ENOUGH THAT THE USER CAN WRITE, ASSEMBLE, LOAD AND RUN A
SMALL PROGRAM WITHOUT HAVING TO LEARN A HUGE NUMBER OF DETAILS.
(/THIS IS NOT TRUE OF THE ↑CIBM 370, FOR EXAMPLE.)

       /THE 940 IS AT THE UPPER END OF A FAMILY OF "MIDI" COMPUTERS
BUILT BEGINNING IN 1961 BY /SCIENTIFIC /DATA /SYSTEMS (↑CSDS),
WHICH LATER BECAME /XEROX /DATA /SYSTEMS (↑CXDS).
/THE FAMILY, NOT PRODUCED SINCE 1968,
CONSISTS OF THE 910, THE 920, THE 930, AND THE 940.
/THESE MACHINES ARE MADE OF DISCRETE COMPONENTS AND ARE THUS
PHYSICALLY LARGE AND EXPENSIVE COMPARED TO THEIR CAPABILITY (AND WITH
MACHINES WHICH ARE BEING BUILT TODAY.)
/SEVERAL HUNDRED WERE BUILT AND MARKETED OVER A TEN-YEAR PERIOD,
HOWEVER, AND MANY ARE STILL IN USE.
       /IN TERMS OF COMPUTING POWER, THE MACHINES ARE VERY LITTLE
BETTER, IF ANY, THAN PRESENT-DAY MINICOMPUTERS.
/IN FACT, IT WOULD BE NO PROBLEM TO MAKE THEM TODAY AS MINICOMPUTERS
AND SELL THEM AT COMPETITIVE PRICES.
/WHERE THEY DIFFER FROM THE MINIS, HOWEVER, IS IN THEIR LONGER WORD
LENGTH (50% LONGER THAN THE STANDARD 16 BITS).
/THIS SHOWS UP NOT JUST IN TERMS OF NUMERICAL PRECISION AND STORAGE
EFFICIENCY, BUT IN CERTAIN SIMPLICITIES IN THE INSTRUCTION SET AND
ADDRESSING MODES WHICH RESULT FROM INSTRUCTIONS NOT HAVING TO BE
ENCODED INTO SHORTER LENGTHS.

       /THE 940 IS A TIME-SHARED VERSION OF THE 930.
/IT IS EQUIPPED WITH A SPECIAL OPERATING SYSTEM (HARDWARE AND SOFTWARE)
WHICH PROVIDES TO SEVERAL USERS SIMULTANEOUSLY THE SERVICES OF A
↑IVIRTUAL ↑IMACHINE.
/A VIRTUAL MACHINE APPEARS TO THE USER TO BE A COMPLETE MACHINE OVER
WHICH HE HAS FULL CONTROL, EVEN THOUGH HE IS IN FACT TIME-SHARING
SLIGHTLY DIFFERENT
HARDWARE WITH OTHER USERS.
/THE USER MAY LOAD THE VIRTUAL MACHINE, EXAMINE ITS STATE, START IT, STOP
IT, AND DO ANY OPERATION HE COULD DO IF HE HAD HIS HANDS ON A ↑IPHYSICAL
EQUIVALENT.

       /THE MEANS BY WHICH THE USER COMMUNICATES WITH THE MACHINE
AND EXERCISES HIS CONTROL OVER IT IS A /TELETYPE OR SIMILAR ON-LINE TERMINAL.
/THE TERMINAL MAY BE USED FOR INPUT AND OUTPUT WHEN THE USER'S
PROGRAMS ARE RUNNING; AND IT IS USED FOR THE INSPECTION OF MEMORY
LOCATIONS, REGISTER CONTENTS, ETC. WHICH ON AN ACTUAL MACHINE USUALLY
INVOLVES LIGHTS
OR INDICATORS.
/THE TERMINAL
PERMITS THE USER TO RESET OR CLEAR HIS (VIRTUAL) MACHINE,
START IT AT A CERTAIN LOCATION, STOP IT, ETC.
/INSTEAD OF PUSHING ACTUAL BUTTONS AND SWITCHES, THE USER TYPES SPECIAL
COMMANDS ON HIS TERMINAL.
/THE TERMINAL MAY ALSO BE USED TO PREPARE INPUT FOR A PROGRAM IN
ADVANCE OF ITS OPERATION, MUCH LIKE THE USE OF A KEYPUNCH WHEN
PREPARING PROGRAM SOURCE LANGUAGE OR DATA; AND IT CAN DISPLAY
(PERHAPS SELECTED PORTIONS OF) THE PROGRAM'S OUTPUT AFTER ITS
TERMINATION.
/THE TERMINAL, THEN, IS A MULTI-USE DEVICE AND ASSUMES DIFFERENT
ROLES AT DIFFERENT TIMES AND IN DIFFERENT CONTEXTS.

       /ASIDE FROM ITS VIRTUES OF SIMPLICITY AND STRAIGHTFORWARDNESS,
WE USE THE 940 IN THIS COURSE BECAUSE THE ↑CBCC 500 SYSTEM, AS A
SPECIAL FEATURE, ↑IEMULATES THE 940 SYSTEM WITH REASONABLE EFFICIENCY.
/WE CAN THUS PROVIDE A NUMBER OF STUDENTS THE OPPORTUNITY TO USE
AN ON-LINE SYSTEM SIMULTANEOUSLY.
/THIS IS ADVANTAGEOUS TO THE STUDENTS NOT ONLY IN TERMS OF HOW
MUCH WORK CAN BE DONE BUT ALSO IN PROVIDING SOME EXPERIENCE IN
ON-LINE COMPUTING.

.SP 4
2.0  940 ↑CORGANIZATION
.SP 2
       /FROM HIS ↑CBCC 500 TERMINAL, THE USER (IF HE WISHES)
SEES A 940 SYSTEM, I.E.,
A COMPLETE COMPUTER SYSTEM CONSISTING OF MEMORY, PROCESSOR,
INPUT↑/OUTPUT DEVICE(S), AND OPERATING CONTROLS AND INDICATORS.
/FIGURE 1 IS A DIAGRAM OF THE MACHINE, WITH EMPHASIS ON
ITS REGISTERS AND DATA PATHS.

.SP 2
2.1  /MEMORY
       /THE MEMORY CONTAINS 16384 ADDRESSABLE CELLS IN WHICH
INFORMATION CONSISTING OF INSTRUCTIONS OR DATA CAN BE STORED.
(16384 IS OFTEN REFERRED TO AS "16/K," WHERE 1/K = 1024.)
/EACH CELL CONTAINS 24 BITS -- BINARY ZEROS OR ONES -- OF STORAGE.
/IT IS UP TO THE USER
TO DETERMINE WHERE IN THE MEMORY AND IN WHAT FORM THE INFORMATION
IS TO BE STORED.
/THERE ARE ESSENTIALLY NO RESTRICTIONS 
AS TO HOW THE MEMORY MAY BE USED (ALTHOUGH THERE ARE SOME
CONVENTIONS).
.EJ
.SP 25
.CE
↑CFIGURE 1.  940 /PROCESSOR.
.SP 2
/FIGURE 2 GIVES THE FORMAT OF AND BIT NAMING CONVENTIONS FOR
A MEMORY CELL IN THE
MACHINE.
/EACH LOCATION IS IDENTIFIED BY A UNIQUE ↑IADDRESS, WHICH
IS A NUMBER RANGING FROM 0 THROUGH 16383.
/AS SEEN IN THE FIGURE,
THE BITS IN A CELL ARE NUMBERED FROM THE MOST SIGNIFICANT TO THE 
LEAST BEGINNING WITH 0.
.SP 14
.CE
↑CFIGURE 2.  /MEMORY /CELL /FORMAT.
.EJ
/SINCE ONE OCTAL DIGIT IS READILY CONVERTIBLE INTO THREE BITS, OCTAL
NOTATION IS USED TO REPRESENT THE CONTENTS OF A CELL.
/WHERE IT MIGHT OTHERWISE BE AMBIGUOUS WE USE THE CONVENTION
OF IDENTIFYING OCTAL NUMBERS BY TERMINATING THEM WITH THE LETTER "/B."
/A CELL WHOSE CONTENTS ARE AS FOLLOW:
.SP 10
IS SAID TO CONTAIN 30563672/B.
       /THE MEMORY PERMITS BOTH STORING INTO AND RETRIEVING INFORMATION
FROM ANY OF ITS CELLS.
/STORING INVOLVES COPYING A NEW VALUE INTO THE CELL; RETRIEVING COPIES
THE CURRENT CONTENTS OUT WITHOUT MODIFYING THE CONTENTS (I.E.,
NON-DESTRUCTIVELY).
/EITHER OF THESE OPERATIONS IS CALLED A ↑IMEMORY ↑IREFERENCE OR
A ↑IMEMORY ↑IACCESS.
/IN UNDERGOING SUCH A REFERENCE THE MEMORY
MUST BE PROVIDED WITH AN ADDRESS AND WITH A ↑ISTORE
OR A ↑IFETCH COMMAND, AS SHOWN IN /FIGURE 3.
/THE MEMORY IS DESIGNED TO OPERATE RAPIDLY, AT SPEEDS MATCHING
THOSE OF THE PROCESSOR.
/THE OPERATING SPEED, OR ↑IMEMORY ↑ICYCLE ↑ITIME, IS INDEPENDENT
OF THE ADDRESS; AND SO THE MEMORY IS TERMED ↑IRANDOM ↑IACCESS
↑IMEMORY (↑CRAM).
/THE (STRICTLY HARDWARE) MEMORY COMMANDS ARE PREPARED AND ISSUED BY THE
IN ITS ROLE OF EXECUTING THE USER'S PROGRAM.
/THE USER, THEN, IS NEVER EXPLICITLY CONCERNED WITH OPERATING THE MEMORY,
BUT IT IS IMPORTANT FOR EACH USER AT THE VERY OUTSET TO
CORRECTLY VISUALIZE THE MEMORY, THE APPEARANCE OF ITS CONTENTS,
AND THE WAY IT WORKS.
.EJ
.SP 23
.CE
↑CFIGURE 3.  /DETAIL OF /MEMORY /ORGANIZATION.
.SP 2
2.2  /PROCESSOR
       /THE PROCESSOR IS THE ENTITY WHICH PERFORMS THE OPERATIONS
REQUIRED TO EXECUTE THE PROGRAM.
/IT FETCHES THE MACHINE-LANGUAGE PROGRAM STEPS (CALLED OPERATIONS
OR ↑IINSTRUCTIONS) FROM MEMORY
AND PERFORMS THE INDICATED ACTIONS, WHICH INCLUDE FURTHER FETCHING OR
THE STORING OF ↑IOPERANDS.
/THE PROCESSOR IS THUS DIVIDED INTO TWO PARTS CALLED THE CONTROL
SECTION AND THE ARITHMETIC SECTION.
/THE CONTROL SECTION ITERATIVELY:
.RM 10,5
.SP
.UN 5
1) FETCHES THE NEXT INSTRUCTION,
.UN 5
2) INTERPRETS AND EXECUTES IT, (HANDS OVER CONTROL TO THE ARITHMETIC
SECTION)
.UN 5
3) DETERMINES THE LOCATION OF THE NEXT INSTRUCTION.
.SP
.UN 10
/THE ARITHMETIC SECTION:
.SP
.UN 5
1) DETERMINES THE ADDRESS OF ANY OPERAND(S),
.UN 5
2) PERFORMS AN OPERATION ON IT (THEM).
.SP
.EM 10,5

       /FROM THE USER'S POINT OF VIEW THE CONTROL SECTION PERFORMS
ITS WORK WITH NO SPECIFIC ATTENTION OTHER THAN AN AWARENESS ON THE
USER'S PART FROM TIME TO TIME OF THE CONTENTS OF A ↑IREGISTER CALLED
THE ↑IPROGRAM ↑IREGISTER OR /P.
(/A REGISTER IS IDENTICAL IN STRUCTURE TO THE MEMORY CELL, EXCEPT 
THAT IT IS A CONSTITUENT OF THE PROCESSOR AND PLAYS A SPECIFIC
ROLE IN THE PROCESSOR'S OPERATION.
/SINCE THE REGISTER IS DEDICATED TO CERTAIN FUNCTIONS IT DOES
NOT HAVE TO BE ADDRESSED IN THE SINCE OF THE MANY "REGISTERS"
OF THE MEMORY.)
/P IS USED TO HOLD THE ADDRESS OF THE INSTRUCTION CURRENTLY BEING
EXECUTED; AT THE END OF THE CURRENT INSTRUCTION /P WILL BE MODIFIED
TO CONTAIN THE ADDRESS OF THE NEXT INSTRUCTION.
/P MAY BE THOUGHT OF AS A ROVING POINTER WHICH RANGES OVER THE PROGRAM
AS IT EXECUTES AND SHOWS AT ANY POINT OF INTERRUPTION THE INSTRUCTION
ADDRESS TO BE NEXT EXECUTED.
/P THUS PROVIDES THE ADDRESS REQUIRED BY THE CONTROL
SECTION WHEN IT GOES TO THE MEMORY TO FETCH AN INSTRUCTION.
       940 INSTRUCTIONS EACH OCCUPY ONE MEMORY CELL AND ARE CONNECTED
TOGETHER IN SEQUENCE BY THE OBVIOUS EXPEDIENT OF PLACING
SEQUENCES OF INSTRUCTIONS INTO SEQUENCES OF CELLS, I.E., CELLS WITH NUMERICALLY
INCREASING ADDRESSES.
/SINCE /P MOST OFTEN INCREMENTS IN CONTENT VALUE AS THE PROGRAM
RUNS, IT IS FREQUENTLY REFERRED TO AS THE "/P ↑ICOUNTER."
(/THIS COUNTING ACTION MAY BE OVERRIDDEN BY THE USE OF
↑IBRANCH OR CONTROL TRANSFER INSTRUCTIONS WHICH SERVE TO CHANGE THE CONTENTS
OF /P ALTOGETHER).  
/AS INSTRUCTIONS CAN BE FETCHED ONLY FROM THE 16/K MEMORY,
/P IS ONLY A 14-BIT REGISTER.
/IF THE MACHINE SHOULD ATTEMPT TO FETCH AN INSTRUCTION LOCATED IN
THE NEXT CELL FROM 16383, /P WILL OVERFLOW AND THE FETCH WILL BE
MADE FROM LOCATION 0 INSTEAD.
.SP 2
2.3  /INSTRUCTION /FORMAT
       /THE FORMAT OF AN INSTRUCTION IS SHOWN BELOW.  /EACH INSTRUCTION
IS DIVIDED INTO PORTIONS CALLED ↑IFIELDS WHICH INDICATE VARIOUS
ASPECTS OF THE INSTRUCTION.

.SP 10
.EJ
/THE FIELDS ARE:

.SP
.RM 10,6
.UN 4
- /BIT 0:  ↑I/SYSTEM ↑I/CALL.

/IF /BIT 0 = 1 AND /BIT 2 = 1, THE INSTRUCTION
IS A
SYSTEM CALL, I.E., A TYPE OF INSTRUCTION WHICH CAUSES A BRANCH
INTO A SPECIFIC ENTRY POINT IN THE ↑IOPERATING ↑ISYSTEM
(SEE /SECTION 2.9).
/INPUT↑/OUTPUT,
FOR EXAMPLE, IS PERFORMED BY MEANS OF SYSTEM CALLS.
/IF /BIT 2 = 0, THE /BIT 0 FIELD IS MEANINGLESS; IT MAY HAVE EITHER VALUE.

.SP 1
.UN 4
- /BIT 1:  ↑I/INDEX ↑I/DESIGNATOR.

/IF /BIT 1 = 1, THE 
ADDRESS CALCULATION KNOWN AS ↑IINDEXING IS TO BE DONE.
/INDEXING IS DESCRIBED LATER.
/IT IS APPLICABLE ONLY TO CERTAIN INSTRUCTIONS.

.SP
.UN 4
- /BIT 2:  ↑I/PROGRAMMED ↑I/OPERATOR ↑I/DESIGNATOR.

/IF /BIT 0 = 0 AND /BIT 2 = 1,
THE INSTRUCTION IS OF A SPECIAL TYPE KNOWN AS A ↑IPROGRAMMED
↑IOPERATOR.  /THIS IS DESCRIBED IN /SECTION 2.8.

.SP
.UN 4
- /BITS 3 - 8:  ↑I/OPERATION ↑I/CODE.

/THIS FIELD HOLDS A SIX-BIT
NUMBER DESIGNATING ONE OF 64 POSSIBLE INSTRUCTIONS.  /THE 940
DOES NOT USE ALL OF THESE COMBINATIONS.  
/A FEW ARE THUS TERMED ↑IILLEGAL ↑IINSTRUCTIONS.
/THE FIELD IS ALSO USED IN CONJUNCTION WITH PROGRAMMED OPERATORS
TO DESIGNATE WHICH ONE OF 64 POSSIBLE OPERATORS IS BEING INVOKED.

.SP
.UN 4
- /BIT 9:  ↑I/INDIRECT ↑I/ADDRESS ↑I/DESIGNATOR.

/IF /BIT 9 = 1,
A DIFFERENT MODE OF ADDRESSING CALLED INDIRECT ADDRESSING,
OR INDIRECTION, IS INVOKED.

.SP
.UN 4
- /BITS 10 - 23:  ↑I/OPERAND ↑I/FIELD.

/THIS FIELD CONTAINS 14 BITS
AND, LIKE THE /P COUNTER, IS CAPABLE OF NAMING ANY ONE OF THE 16/K
MEMORY LOCATIONS.  /THE FIELD IS MOST FREQUENTLY USED TO REFER TO
THE ADDRESS OF AN OPERAND IN MEMORY.  /SOME INSTRUCTIONS, HOWEVER,
USE IT TO HOLD THE OPERAND ITSELF; AND SOME DO NOT USE IT AT ALL.

.EM 10,6
.SP 2
.EJ 10
2.4  /PROCESSOR /REGISTERS
       /THE ARITHMETIC SECTION OF THE PROCESSOR CONTAINS THREE REGISTERS LABELED
/A, /B, AND /X.  /THESE REGISTERS PLAY UNIQUE ROLES IN THE
PROCESSOR AND ARE ADDRESSED IMPLICITLY IN THE INSTRUCTIONS.
/THE USER MUST MAINTAIN AWARENESS OF THEIR CONTENTS, HOWEVER,
SINCE IT IS HE WHO MANAGES THE USE OF THESE REGISTERS WITHIN
THE PROGRAM.

       /A IS CALLED THE ↑IACCUMULATOR.
/IT IS USED BY ALMOST ALL THE ARITHMETIC AND LOGICAL INSTRUCTIONS AND
IS CENTRAL TO THE OPERATION OF ANY PROGRAM.
/B IS THE ↑IAUXILIARY ↑IACCUMULATOR, USED WITH /A IN A FEW
ARITHMETIC INSTRUCTIONS AND IN SHIFTING.
/THE /X REGISTER IS CALLED THE ↑IINDEX ↑IREGISTER AND IS USED TO HOLD A 
QUANTITY--TERMED THE INDEX--FOR OFFSETTING THE OPERAND ADDRESS.
/ALTHOUGH THE INDEXING OPERATION IS AN ADDRESS CALCULATION--A CALCULATION
ON A 14-BIT QUANTITY--/X ALSO CONTAINS 24 BITS.

.SP 2
2.5  /OVERFLOW /INDICATOR
       /THE OVERFLOW INDICATOR IN THE COMPUTER PERMITS THE READY
DETECTION AND SIGNALING OF OVERFLOW CONDITIONS WHICH MIGHT OTHERWISE
GO UNDETECTED OR REQUIRE ADDITIONAL SOFTWARE OVERHEAD TO DETECT
DURING ARITHMETIC OPERATIONS IN THE EXECUTION OF A PROGRAM.
/THE OVERFLOW INDICATOR IS SET TO 1 (TURNED ON) IF ANY OF THE FOLLOWING
OCCURS:
.SP
.RM 11,5
.UN 6
1.  /A SUM OR DIFFERENCE RESULTING FROM AN ADDITION OR SUBTRACTION
CANNOT BE CONTAINED WITHIN THE /A REGISTER.
.SP
.UN 6
2.  /MULTIPLICATION OF 40000000/B (ALSO WRITTEN 4/B7) BY ITSELF.
(/THE /A AND /B REGISTERS CANNOT CONTAIN THIS PRODUCT.)
.SP
.UN 6
3.  /A DIVISION WITH THE ABSOLUTE VALUE OF THE NUMERATOR EQUAL TO
OR GREATER THAN THE ABSOLUTE VALUE OFF THE DENOMINATOR.
(/THE /A REGISTER CANNOT CONTAIN THIS QUOTIENT.)
.SP
.UN 6
4.  /AN ARITHMETIC LEFT SHIFT CHANGES THE VALUE OF THE BIT IN THE
SIGN POSITION OF THE /A REGISTER.
.SP
.UN 6
5.  /BIT 14 OF THE INDEX REGISTER IS NOT EQUAL TO /BIT 15 OF THE
INDEX REGISTER WHEN THE INSTRUCTION ↑URECORD EXPONENT OVERFLOW
(ROV)↑L IS EXECUTED.
.SP
.EM 11,5
/THE 940 INSTRUCTION SET CONTAINS INSTRUCTIONS TO RESET, TEST,
OR TEST AND RESET THE STATE OF THE OVERFLOW INDICATOR (SEE
/SECTION 3, "/OVERFLOW /INSTRUCTIONS").
.SP 2
2.6  /DATA /FORMATS
       /THE 940 HAS VARIOUS INSTRUCTIONS WHICH ARE DESIGNED TO WORK
ON DATA ASSUMED TO BE IN DIFFERENT FORMATS AS FOLLOW:
.SP
2.6.1  ↑I/INTEGERS
       /INTEGERS ARE REPRESENTED AS 2↑↑24'S COMPLEMENT NUMBERS
HAVING THE FORMAT:
.SP 10
/BIT 0 INDICATES THE SIGN OF THE NUMBER, NEGATIVE NUMBERS HAVING A
1 BIT AND POSITIVE NUMBERS HAVING A 0 BIT IN THIS POSITION.
/THE ASSUMED BINARY POINT IS TO THE RIGHT OF /BIT 23, THE LEAST
SIGNIFICANT BIT.
/IN THIS FORM THE RANGE OF REPRESENTATION IS FROM -2↑↑23, OR
-8,388,608, TO +2↑↑23-1, OR 8,388,607.
/ALL OF THE ARITHMETIC INSTRUCTIONS EXCEPT MULTIPLY (↑CMUL) AND
DIVIDE (↑CDIV) CAN BE USED ON INTEGER QUANTITIES.
.SP
2.6.2  ↑-/FIXED-POINT /FRACTIONS
       /THE ARITHMETIC INSTRUCTIONS ARE DESIGNED PRIMARILY TO 
OPERATE ON FIXED-POINT FRACTIONS HAVEING THE FOLLOWING APPEARANCE:
.SP 10
/THE ASSUMED BINARY POINT IS BETWEEN /BITS 0 AND 1 AT THE MORE SIGNIFICANT
END.
/NEGATIVE NUMBERS ARE HANDLED AS COMPLEMENTS WITH RESPECT TO 2
(TWO'S COMPLEMENTS).
/THE RANGE OF REPRESENTATION IS FROM -1.0 TO +1-2↑↑(-23).
/THESE NUMBERS HAVE THE EQUIVALENT OF MORE THAN 6 DECIMAL DIGITS OF
ACCURACY.
/FIXED-POINT SCALING (A FORGOTTEN PROGRAMMING ART) IS USED IN
WORKING WITH SUCH NUMBERS DURING COMPUTATION.
.SP
2.6.3  ↑-/EXTENDED-PRECISION /FIXED-POINT /NUMBERS
       /SEVERAL INSTRUCTIONS GREATLY FACILITATE THE USE OF MULTIPLE
PRECISION DATA.
/NONE, HOWEVER, OPERATE ON SUCH DATA DIRECTLY.
/A DOUBLE-PRECISION FRACTION, FOR EXAMPLE, WOULD LOOK LIKE:
.SP 10
/IN MEMORY SUCH A DATUM WOULD BE STORED IN TWO CONSECUTIVE MEMORY
LOCATIONS.
.SP
2.6.4  ↑-/FLOATING-POINT (/REAL) /NUMBERS
       /WHILE NOT HAVING TRUE FLOATING-POINT INSTRUCTIONS, THE
940 HAS SEVERAL (RATHER ODD) INSTRUCTIONS DESIGNED TO GREATLY
REDUCE THE SOFTWARE OVERHEAD OF SUBROUTINES TO PERFORM CALCULATIONS
ON ↑IREALS.
/THESE INSTRUCTIONS ASSUME THE FOLLOWING REAL-NUMBER FORMAT:
.SP 10
/THE MANTISSA IS A 39-BIT, TWO'S COMPLEMENT, NORMALIZED FIXED-POINT
FRACTION (GIVING ABOUT 11 DECIMAL DIGITS OF ACCURACY).
/THE EXPONENT IS A 9-BIT, 512'S COMPLEMENT INTEGER, PERMITTING AN
EXPONENT RANGE OF 2↑↑-256 TO 2↑↑255, OR ABOUT 10↑↑-77.
/IN MEMORY, THE REAL NUMBER IS STORED IN TWO CONSECUTIVE MEMORY
LOCATIONS AND IS ADDRESSED BY THE FORMER (I.E., SMALLER) ADDRESS.
/THE VIRTUAL 940 (THE BASIC INSTRUCTION SET AUGMENTED BY SYSTEM
CALLS -- SEE /SECTION 2.9) DOES HAVE ARITHMETIC "INSTRUCTIONS" WHICH
DEAL DIRECTLY WITH REALS.
.SP
2.6.5  ↑-/CHARACTER /STRINGS
       /THE VIRTUAL MACHINE ADDS OTHER CAPABILITIES NOT FOUND IN THE
HARDWARE INSTRUCTION SET.
/AN IMPORTANT ONE IS THE ABILITY TO FETCH AND STORE INDIVIDUAL
8-BIT BYTES FROM MEMORY, ACCORDING TO THE FOLLOWING
FORMAT:
.SP 10
/THIS ABILITY MAKES THE MACHINE WELL SUITED TO DEAL WITH CHARACTER
STRINGS -- VARIABLE LENGTH SEQUENCES OF BYTES.
/FOR THIS PURPOSE IT IS IMAGINED THAT ALL OF MEMORY CAN BE BYTE
ADDRESSED, AS WELL AS WORD ADDRESSED.
/SINCE THERE ARE THREE BYTES↑/WORD, THE BYTE ADDRESS IS ROUGHLY THREE
TIMES IN VALUE THE ADDRESS OF THE WORD IN WHICH IT IS STORED.
/THE PRECISE CORRESPONDENCE IS
.SP 5
AND THE BYTE POSITION WITHIN THE WORD IS
.SP 5
↑-/BYTE MEMORY↑E THUS LOOKS LIKE THE FOLLOWING:
.SP 18
2.7  /ADDRESS /MODIFICATION /RULES
.SP
       /MOST MACHINES PROVIDE SOME MEANS FOR MODIFYING AT EXECUTION
TIME THE EFFECTIVE ADDRESS OF AN INSTRUCTION FROM THAT WHICH IT ACTUALLY
CONTAINS.
/THIS IS DONE  A) TO REDUCE THE RUN-TIME OVERHEAD OF PROGRAMS DEALING
WITH SIMPLE DATA STRUCTURES AND↑/OR  B) TO AVOID THE PROGRAM'S HAVING TO
MODIFY ↑IITSELF.
/THE 940 PROVIDES ↑IINDEXING AND ↑IINDIRECTION (INDIRECT, OR DEFERRED,
ADDRESSING) FOR THESE PURPOSES.
/THE TWO FEATURES MAY BE USED JOINTLY OR SINGLY IN THE SAME INSTRUCTION.
.SP
2.7.1  ↑I/INDEXING
       /THE MACHINE CONTAINS AN INDEX REGISTER (/X REGISTER) FOR
ADDRESS MODIFICATION, THE USE OF WHICH DOES NOT INCREASE EXECUTION
TIME.
/IF /BIT 1 IN AN INSTRUCTION WHICH ADDRESSES MEMORY (SOME DON'T) IS
1, THE 940 ADDS /BITS 10-23 OF  THE /X REGISTER TO THE ADDRESS
FIELD OF THE INSTRUCTION TO PRODUCE A DIFFERENT ↑-EFFECTIVE ADDRESS 
(THE ADDRESS ACTUALLY REFERENCED).
/THE ADDITION IS DONE STRICTLY MODULO 2↑↑14, COMPLETELY IGNORING
ANY OVERFLOWS WHICH MAY OCCUR.
/IF /BIT 1 IS A ZERO THE /X REGISTER IS NOT ADDED; THE EFFECTIVE
ADDRESS IS MERELY THE ADDRESS FOUND IN THE INSTRUCTION.
       /THE INSTRUCTION SET PROVIDES INSTRUCTIONS FOR MODIFYING AND
TESTING THE /X REGISTER.
.SP
2.7.2  ↑-/INDIRECTION
       /WHEN /BIT 9 OF AN INSTRUCTION (WHICH PERMITS IT) IS 1,
INDIRECTION IS INVOKED.
/THE MACHINE FETCHES THE CONTENTS OF THE ADDRESS FOUND IN THE INSTRUCTION
(OR THE ADDRESS OFFSET BY /BITS 10-23 OF THE /X REGISTER IF THE
INSTRUCTION WORD'S /BIT 1 = 1) AND BEGINS THE ENTIRE ADDRESS MODIFICATION
CYCLE AGAIN USING /BITS 1 AND 9 OF THE NEWLY-FETCHED LOCATION AS A
GUIDE TO FURTHER ACTION.
/THIS PROCESS CAN REPEAT MANY TIMES, DEPENDING ON THE CONTENTS OF
MEMORY.
.SP
2.7.3  ↑-/SIMULTANEOUS /INDEXING AND /INDIRECTION
       /IT IS CORRECT TO SAY THAT FOR EACH INSTRUCTION EXECUTED AN
EFFECTIVE ADDRESS IS ALWAYS CALCULATED, THE RESULTS DEPENDING ON THE
/X AND /I BITS ACCORDING TO THE FOLLOWING ALGORITHM EXECUTED BY THE
HARDWARE:
       /IN THE FOLLOWING, /P IS THE 14-BIT PROGRAM REGISTER, /S
THE 14-BIT MEMORY ADDRESS REGISTER, /M THE 24-BIT MEMORY DATA REGISTER,
/I THE 24-BIT INSTRUCTION REGISTER, /O THE 6-BIT OPERATION CODE
REGISTER, AND /X THE 24-BIT INDEX REGISTER.  /THE ALGORITHM IS EXPRESSED
IN TERMS OF AN INFORMAL PROGRAMMING LANGUAGE.
.SP 2
.NOFILL
↑U*  940 EFFECTIVE ADDRESS CALCULATION:
*  FIRST WE HAVE TO FETCH THE INSTRUCTION.

START: S-P & FETCH;

*  AT THE END OF THE MEMORY CYCLE THE FETCHED DATA IS IN M.

       O-M(3,8);          ↑/*CAPTURE THE OP CODE BITS*↑/
       FOREVER DO;
          I-M;            ↑/*ADDRESS CALC BEGINS HERE*↑/
          I-(I+X)MOD 2↑↑14 IF I(1)=1;
          GOTO DONE IF I(9)=0;
          S-I(10,23) & FETCH;  ↑/*DO INDIRECT STEP*/
       ENDFOR;

DONE:  Q-I(10,23);        ↑/*Q IS THE EFFECTIVE ADDR*↑/↑L
.FILL
.SP 2
(/THE READER WILL NOTE THAT THIS ALGORITHM ACCURATELY DESCRIBES THE
BEHAVIOR OF THE MACHINE FOR ALL FOUR COMBINATIONS OF THE /X AND /I
BITS.)
.SP 2
2.8  /PROGRAMMED /OPERATORS
       /MOST ARITHMETIC MACHINE INSTRUCTIONS REQUIRE IN SOME WAY
THREE ADDRESSES: THOSE OF TWO OPERANDS AND THAT OF THE RESULT.
/THE 940, LIKE MOST ONE-ADDRESS MACHINES, ADDRESSES THE /A REGISTER
BY IMPLICATION FOR THE FIRST OPERAND AND FOR THE RESULT.
/ITS INSTRUCTIONS, THEN, EXPLICITLY ADDRESS ONLY THE SECOND OPERAND.
       /IT IS NOT INFREQUENT THAT A SIMILAR SITUATION DEVELOPS WHEN
A PROGRAMMER IS DESIGNING A SUBROUTINE:  THE SUBROUTINE IS TO PERFORM
SOME OPERATION ON TWO 24-BIT QUANTITIES AND RETURN A SINGLE RESULT.
/THE PROBLEM IS HOW TO CONVEY TO THE SUBROUTINE THE TWO ARGUMENTS
AND RECEIVE THE RESULT.
/THE OBVIOUS CHOICE FOR A MACHINE OF THIS TYPE IS TO USE /A
FOR THE FIRST OPERAND AND FOR THE RESULT.
/BUT THE ADDRESS FIELD OF THE SUBROUTINE CALL INSTRUCTION IS OCCUPIED
WITH THE ADDRESS OF THE SUBROUTINE, FORCING SOME OTHER CHOICE (SUCH
AS THE USE OF /B, PERHAPS).
/THIS IS NOT REALLY BAD, BUT IT MAKES THE USE OF THE SUBROUTINE A
LITTLE AWKWARD, ESPECIALLY IF WE WOULD LIKE TO APPLY ADDRESS
MODIFICATION TO THE SECOND OPERAND.
       /THE 940 /PROGRAMMED /OPERATOR (↑CPOP) FEATURE PERMITS A PROGRAMMER
TO PACK INTO A SINGLE INSTRUCTION BOTH WHICH SUBROUTINE IS TO BE 
ENTERED AND A 14-BIT ADDRESS OF AN OPERAND.
/THE SUBROUTINE CAN WITH GREAT EFFICIENCY AND EASE RETRIEVE THIS
ADDRESS ↑-AND APPLY THE SAME ADDRESS MODIFICATION RULES AS THE BARE
↑-HARDWARE USES.
/THIS MAKES THE ↑CPOP SUBROUTINE LOOK FOR ALL SUBSEQUENT PROGRAMMING
PURPOSES ↑-VERY MUCH LIKE A MACHINE INSTRUCTION.
       /THE BASIS OF THE ↑CPOP IS AS FOLLOWS:
/AN INSTRUCTION IS EITHER A ↑CPOP, OR IT IS NOT.
/THEREFORE ONLY ONE BIT IS REQUIRED IN THE INSTRUCTION WORD TO SPECIFY
WHETHER THE FEATURE IS TO BE USED.
/BIT 2 = 1 IS USED FOR THIS PURPOSE.
/THE REMAINING 6 BITS OF THE OPERATION
CODE FIELD ARE USED TO SPECIFY THE SUBROUTINE
ENTRY POINT.
6 BITS CANNOT, OF COURSE, DIRECTLY POINT TO AN ARBITRARY 14-BIT
ADDRESS.
/BUT THE FIELD CAN DIRECT THE MACHINE TO AN ARBITRARY LOCATION THROUGH
A 64-WORD LINKAGE TABLE.
       /WHEN THE 940 FETCHES A NEW INSTRUCTION AND DETECTS A 1 IN
/BIT 2 OF THAT INSTRUCTION (AND A 0 IN /BIT 0), IT DOES NOT INTERPRET
/BITS 3-8 AS AN OPCODE.
/INSTEAD IT:
.RM 11,5
.SP
.UN 6
1.  /STORES CURRENT VALUE OF OVERFLOW INDICATOR IN /BIT 0 OF MEMORY
LOCATION 0.
.SP
.UN 6
2.  /RESETS THE OVERFLOW INDICATOR.
.SP
.UN 6
3.  /STORES ZEROS IN /BITS 1-8 OF MEMORY LOCATION 0 AND A 1 IN /BIT 9.
.SP
.UN 6
4.  /STORES CURRENT CONTENTS OF /P REGISTER INTO /BITS 10-23 OF 
MEMORY LOCATION 0.
.SP
.UN 6
5.  /LOADS /BITS 2-8 OF THE INSTRUCTION WORD INTO /P REGISTER.
.SP
.EM 11,5
/THE MACHINE DOES ↑INOT APPLY THE ADDRESS MODIFICATION RULES TO A
↑CPOP, NOR DOES IT REFER TO /BITS 10-23 OF THE ↑CPOP INSTRUCTION.
       /THE EFFECT OF THE STEPS JUST OUTLINED IS TO STORE A NORMAL
(EXCEPT THAT /BIT 9 IS ALWAYS SET) SUBROUTINE RETURN LINK (SEE
↑CBRM INSTRUCTION IN /SECTION 3) IN MEMORY LOCATION 0 AND TO TRANSFER
CONTROL TO A MEMORY ADDRESS IN THE RANGE 100/B - 177/B.
/THERE IT IS EXPECTED THAT THE PROGRAMMER WILL HAVE PLACED AN 
UNCONDITIONAL CONTROL TRANSFER TO THE ACTUAL SUBROUTINE ENTRY POINT.
/A GIVEN PROGRAM MAY INCLUDE UP TO 64 (100/B) SUCH SUBROUTINES.
       /THE SUBROUTINE CAN ACCESS THE OPERAND SPECIFIED BACK IN THE
↑CPOP INSTRUCTION, ALONG WITH ANY ADDRESS MODIFICATION SPECIFIED IN
THE ↑CPOP, MERELY BY REFERRING TO MEMORY LOCATION 0 INDIRECTLY.
/BECAUSE OF /BIT 9'S PREVIOUSLY HAVING BEEN SET, THE INDIRECT
REFERENCE IS PROPAGATED ONE MORE LEVEL AND THE EFFECTIVE ADDRESS
IS THEN FORMED AS IF THE ↑CPOP HAD BEEN A MACHINE INSTRUCTION.
/THIS MEANS THAT ANY ↑CPOP CAN USE INDEXING AND↑/OR INDIRECTION FOR
ANY MEANINGFUL PURPOSES.
.SP 2
2.9  /SYSTEM /CALLS
       /AN OPERATING SYSTEM SUCH AS THAT REQUIRED IN TIME-SHARING
CANNOT PERMIT THE USER TO EXECUTE ↑IEVERY INSTRUCTION KNOWN TO THE
HARDWARE.
/SOME INSTRUCTIONS, SUCH AS /I↑//O INSTRUCTIONS FOR EXAMPLE, WOULD
BRING THE (INDEPENDENT) USERS INTO SERIOUS CONFLICT WITH EACH OTHER
AND WITH THE SYSTEM.
/INSTEAD THE SYSTEM MUST PERFORM THE /I↑//O ON THE USER'S BEHALF
WITH DUE REGARD FOR CHECKING HIS AUTHORIZATION FOR SUCH /I↑//O,
FOR SCHEDULING CONSIDERATIONS, DEVICE ALLOCATION, ETC.
/THE USER COMMUNICATES HIS WISHES TO THE SYSTEM (OBTAINS↑/GIVES
DATA FROM↑/TO THE SYSTEM IN THE CASE OF /I↑//O) BY MEANS OF
↑ISYSTEM ↑ICALLS, TRANSFERS OF CONTROL THROUGH CAREFULLY PROTECTED
ENTRY POINTS OF THE SYSTEM SOFTWARE.
       /THE SYSTEM SOFTWARE IS PLACED IN A DIFFERENT AREA OF MEMORY
FROM THAT ADDRESSABLE BY THE USER.
/THIS IS MADE POSSIBLE BY THE 940 VIRTUAL MEMORY FEATURES, NOT
DISCUSSED HERE.
/SINCE THE USER CANNOT ADDRESS THIS MEMORY, THERE IS NO WAY HE CAN
FETCH IMPROPER INFORMATION (SUCH AS SOMEONE ELSE'S PASSWORD) OR
STORE DATA INTO IT, THEREBY POSSIBLY DESTROYING OR ALTERING THE
SYSTEM.
/ALL HE CAN DO IS ↑IENTER IT, AND THEN ONLY AT KNOWN LOCATIONS WITH
VALID PARAMETERS.
       /THE ↑CPOP MECHANISM IS IDEAL FOR THIS PURPOSE SINCE IT PROVIDES
FOR PROTECTED ENTRY (E.G., ONLY THROUGH THE ↑CPOP TRANSFER VECTOR,
OR LINKAGE TABLE) AND MAKES PARAMETER RETRIEVAL SO NATURAL.
/IF THE 940 DETECTS A 1 IN /BIT 2 OF AN INSTRUCTION WORD
↑-AND ALSO SEES A 1 IN /BIT 0↑E, THEN BEFORE PROCEEDING TO PERFORM
THE STEPS DETAILED IN /SECTION 2.8 ABOVE IT FIRST SHIFTS MEMORY
ADDRESSING TO INCLUDE THE SYSTEM CODE.
/WHEN THE LINK RETURN WORD IS SAVED IN MEMORY LOCATION 0, IT IS
PLACED IN THE ↑ISYSTEM'S LOCATION 0; AND WHEN THE BRANCH
IS MADE TO THE ↑CPOP TRANSFER VECTOR IN 100/B - 177/B, IT IS TO THE
↑ISYSTEM'S TRANSFER VECTOR IN THE ↑ISYSTEM'S 100/B - 177/B.
↑CPOP↑ES WITH /BIT 0 SET TO 1 THUS ALL BRANCH TO MEMORY INVISIBLE
TO THE USER AND ARE TERMED ↑CSYSPOP↑ES.
       /BECAUSE OF THEIR GREAT RESEMBLANCE TO MACHINE INSTRUCTIONS
(NOW NOT EVEN REQUIRING THE LOADING OF A SUBROUTINE INTO 
VISIBLE MEMORY AND THE PLACING OF THE CORRECT BRANCH INTO THE
VISIBLE TRANSFER VECTOR), ↑CSYSPOP↑ES ARE ↑IINDISTINGUISHABLE FROM
MACHINE INSTRUCTIONS, EXCEPT THAT THEY MAY TAKE A LITTLE LONGER TO
EXECUTE.
/IN EFFECT THERE ARE 64 NEW "INSTRUCTIONS" NOW AVAILABLE TO A USER.
       /THROUGH THIS MEANS ALL OF THE INSTRUCTIONS DENIED A USER
BECAUSE THEIR EXECUTION MIGHT BRING HIM IN CONFLICT WITH SOMEONE ELSE
(THE ↑IPRIVILEDGED INSTRUCTIONS) HAVE BEEN REPLACED.
/IN ADDITION, A GREAT NUMBER OF SUBROUTINES WHICH MIGHT BE CALLED
FREQUENTLY BY A TYPICAL PROGRAMMER HAVE BEEN INSTALLED IN THE SYSTEM
AND ARE IMMEDIATELY AVAILABLE VIA ↑CSYSPOP↑ES.
/THIS REDUCES CONSIDERABLY THE NECESSITY FOR A USER TO HAVE TO
RETRIEVE A SIMPLE LIBRARY SUBROUTINE AND INSTALL IT IN HIS PROGRAM.
/IT IS ALREADY THERE (IN SYSTEM SPACE); ALL HE HAS TO DO IS CALL IT.
       /OF THE VARIOUS SYSTEM CALLS, MANY FALL INTO THE CATEGORY
IDEALLY SUITED TO THE ↑CPOP: A SINGLE PARAMETER (AND POSSIBLY THE
/A REGISTER) IS INVOLVED.
/ACCORDINGLY SUCH ↑CSYSPOP↑ES LOOK LIKE NORMAL MACHINE INSTRUCTIONS,
AND EACH IS ASSIGNED ITS OWN POSITION IN THE TRANSFER VECTOR AND HAS ITS
OWN MNEMONIC CODE FOR USE WITH ASSEMBLY LANGUAGE.
/OTHERS, HOWEVER, EITHER TAKE NO PARAMETER OR TAKE SEVERAL.
/THESE CASES ALL USE THE SAME ↑CSYSPOP CODE, ↑I↑CBRS↑E (BRANCH TO
SYSTEM); AND USE THE ADDRESS FIELD TO FURTHER SPECIFY WHICH
ACTION TO TAKE.
/HENCE IT IS POSSIBLE TO HAVE MANY MORE THAN 64 SYSTEM CALLS.
