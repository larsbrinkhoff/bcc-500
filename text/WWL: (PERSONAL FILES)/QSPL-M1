.GL  STATE-MENTS RE-MAINS
.GL  REG-IS-TER REF-ER-ENCE REA-SON PUR-POSES PRE-DE-CLARED
.GL PRE-CE-DENCE NUM-BERS EQUIV-ALENT DIS-CUS-SION
.GL DEC-LARA-TIONS COM-PIL-ER BOUND-ARY BOUND-ARIES
.GL  SUB-SET RELA-TION PRE-CEDED OVER-FLOW OTHER-WISE
.GL OPER-ATION OPER-ANDS NOR-MAL-LY MUL-TI-PLI-CA-TION
.GL LO-CA-TION FOL-LOWED FAIL-URE EVAL-U-ATED DIF-FER-ING
.GL COR-RES-POND-ING AR-GU-MENTS AD-DRESS
.GL  UN-DE-FINED CON-TAIN SUP-PLIED
.GL  SUIT-ABLE OPER-ATORS FLEX-IBIL-ITY EX-PRES-SION
.GL  SIG-NI-FI-CANCE SEPAR-AT-ING CON-STANTS
.GL CHAR-AC-TER-IS-TIC CAP-ABLE CALI-FORNIA
.DEFINE FORMAT EXP L(A) J(B)
AAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
.END FORMAT
.PAGING MODE OFF
.SP 5
.CE
↑UQSPL REFERENCE MANUAL↑L
.SP 3
.CE
/L. /P. /DEUTSCH
.SP
.CE
/B. /W. /LAMPSON
.SP 2
.CE
/UNIVERSITY OF /CALIFORNIA, /BERKELEY
.SP 20
.CE
/ISSUED /JUNE 12, 1967
.CE
/REVISED /FEBRUARY 20, 1969
.CE
/REVISED /JANUARY 22, 1970
.CE
/REVISED /DECEMBER 15, 1975
.HEADER ↑CQSPL /MANUAL   /DECEMBER 15, 1975
.PAGE 1
       /THIS MANUAL PROVIDES A BRIEF BUT COMPLETE DESCRIPTION OF
A LANGUAGE INVENTED AND IMPLEMENTED IN 1967 BY /L. /PETER /DEUTSCH
AND /BUTLER /W. /LAMPSON OF THE /UNIVERSITY OF /CALIFORNIA,
/BERKELEY.
/THIS LANGUAGE IS INTENDED TO BE A SUITABLE VEHICLE FOR PROGRAMS 
WHICH WOULD OTHERWISE BE WRITTEN IN MACHINE LANGUAGE FOR REASONS OF
EFFICIENCY OR FLEXIBILITY.
/IT IS PART OF A SYSTEM WHICH ALSO INCLUDES A COMPILER CAPABLE OF
PRODUCING REASONABLY EFFICIENT OBJECT CODE AND A
.NOFILL
RUNTIME WHICH IMPLEMENTS  THE  INPUT↑/OUTPUT AND  STRING-HAN-
.FILL
DLING FEATURES
OF THE LANGUAGE AS WELL AS A FAIRLY ELABORATE STORAGE ALLOCATOR.
/THE SYSTEM AUTOMATICALLY TAKES CARE OF PAGING ARRAYS AND
BLOCKS WITHIN THE MEMORY SYSTEM IF THEY HAVE BEEN SO DECLARED.
.SP 4
↑I/THE ↑I/LANGUAGE:
       /A ↑CQSPL PROGRAM CONSISTS OF ↑ISTATEMENTS SEPARATED BY
SEMICOLONS.
/CARRIAGE RETURNS AND BLANKS HAVE NO SIGNIFICANCE IN THE LANGUAGE
EXCEPT THAT THEY:
       1.  /ACT AS WORD (AND COMMENT) DELIMITERS.
.RM 9
.UN 4
.SP
2.  /ARE TAKEN LITERALLY IN STRING AND CHARACTER CONSTANTS.
.EM 9
.SP
[↑I/WARNING:  /THIS IS ONE OF THE MANY FEATURES OF THE LANGUAGE WHICH
CAN CAUSE TROUBLE FOR THE UNWARY PROGRAMMER.
/IT IS QUITE POSSIBLE TO WRITE TWO STATEMENTS WITHOUT THE SEPARATING 
SEMICOLON AND WIND UP WITH SOMETHING WHICH IS LEGAL, BUT NOT AT ALL 
WHAT WAS INTENDED.
/IT IS A GENERAL CHARACTERISTIC OF ↑CQSPL THAT IT IS VERY PERMISSIVE;
MANY THINGS ARE LEGAL WHICH ARE NOT AT ALL REASONABLE.
/THIS IS A NATURAL CONSEQUENCE OF THE GREAT FLEXIBILITY.]
       /A STATEMENT MAY BE:
.RM 5
       1.  /A COMMENT.
       2.  /AN END STATEMENT.
       3.  /AN EXPRESSION.
       4.  /A DECLARATION.
       5.  /A FUNCTION DEFINITION.
       6.  /A LISTING CONTROL STATEMENT.
.EM 5
.EJ
↑I/COMMENTS:
       A COMMENT STATEMENT BEGINS WITH AN ASTERISK ("*") AND ENDS
WITH A ↑ICARRIAGE ↑IRETURN (NOT ";").
/IT MAY BEGIN ON A NEW LINE OR AFTER A SEMICOLON.  /THUS:
.SP 2
↑U***  WE MAY HAVE A COMMENT WHICH LOOKS LIKE THIS.  ***↑L
.SP 2
↑ULABEL: XYZ←A+B-C     ↑L;* ↑UOR OUR COMMENT MAY GO HERE↑L
.SP 5
↑I/END ↑I/STATEMENT:
       /A SINGLE END STATEMENT CONCLUDES THE PROGRAM.  /THUS:
.SP 2
↑CEND;
.SP 2
OR,
.SP
       ↑CEND;
.EJ
↑I/EXPRESSIONS:
       /MOST STATEMENTS IN A PROGRAM ARE EXPRESSIONS.
/AN EXPRESSION IS MADE UP OF OPERANDS SEPARATED BY OPERATORS.
/PARENTHESES ARE ALLOWED TO ANY REASONABLE DEPTH.
/THE OPERATORS ARE ARRANGED IN A HIERARCHY OF BINDING STRENGTH OR
PRECEDENCE.
/THOSE AT THE TOP OF THE FOLLOWING LIST ARE EXECUTED LATEST; FOR
EXAMPLE, /A+/B*/C IS THE SAME AS /A+(/B*/C).
.SP 2
.RM 0,5
.FORMAT EXP
&\DENOTES SUCCESSIVE EVALUATION.
/THE VALUE OF THE RESULT IS THE VALUE OF THE LAST EXPRESSION IN THE 
STRING.
/THUS
.FILL
.SP
.RM 16
/A+/B & /C+/D;
.SP
.EM 8
OR MORE PLAUSIBLY
.SP
.RM 8
↑UF(A,B) & G(L,Y);↑L
.SP
.EM 8
WHICH CAUSES BOTH FUNCTIONS TO BE CALLED IN THE ORDER IN WHICH THEY
ARE WRITTEN.
.SP
.RM 8
.EM 16
.FORMAT EXP
↑CWHERE\IS SIMILAR TO &, BUT CAUSES THE FOLLOWING EXPRESSION
TO BE EVALUATED FIRST.
/IT MAY NOT BE ITERATED.
/THUS
.FILL
.SP
.RM 16
↑UF(X,Y) WHERE N←14;↑L
.SP
.EM 16
.SP
↑UFOR,WHILE↑L
.RM 8
TAKES THE FORM
.SP
.RM 8
<EXPRESSION> ↑CFOR <FOR CLAUSE>;
.SP
.EM 8
OR
.SP
.RM 8
<EXPRESSION> ↑CWHILE <EXPRESSION>;
.SP
.EM 8
/THE EXPRESSION IS EVALUATED REPEATEDLY UNDER CONTROL OF THE FOR
CALUSE (SEE BELOW FOR THE SYNTAX OF THIS CONSTRUCT).
/THE FINAL VALUE OF THE EXPRESSION INVOLVING ↑CFOR OR ↑CWHILE IS
UNDEFINED.
/OF COURSE, SOMETHING LIKE
.SP
.RM 8
↑U(A[I])[J]←0 FOR I=1 TO N FOR J=I TO M;↑L
.SP
.EM 8
IS LEGAL.
.EJ
.EM 8
.FORMAT EXP
↑CIF\TAKES THE FORM
.FILL
.SP
.RM 16
<EXPRESSION> /I/F <EXPRESSION> ↑CELSE

.RM 3
<EXPRESSION;
.EM 3
.SP
.EM 8
/THE SECOND EXPRESSION IS EVALUATED.
/IF IT IS NON-ZERO, THE FIRST EXPRESSION IS EVALUATED.
/ITS VALUE BECOMES THE VALUE OF THE WHOLE THING, AND THE THIRD
EXPRESSION (WHICH, BY THE WAY, MAY CONTAIN ANOTHER ↑CIF) IS SKIPPED.
/OTHERWISE THE FIRST EXPRESSION IS SKIPPED, AND THE THIRD IS EVALUATED.
/THUS
.SP
.RM 8
↑UX←4 IF Y=6 ELSE X←5 IF Y>=0 ELSE X←6;↑L
.SP
.EM 8
/IF THE FINAL ↑CELSE IS OMITTED, 0 WILL BE SUPPLIED.
.SP
.EM 8
.FORMAT EXP
←\IS THE ASSIGNMENT OPERATOR.
/IT RANKS ON THE SAME LEVEL AS "." FOR ITS LEFT-HAND OPERAND, AND
JUST BELOW ↑CIF FOR ITS RIGHT-HAND ONE.
/THE RIGHT-HAND OPERAND IS EVALUATED, AND ITS VALUE BECOMES THE VALUE
OF THE LEFT-HAND ONE.
/THE WHOLE EXPRESSION IS THEN TREATED AS THOUGH ONLY THE LEFT-HAND
SIDE HAD BEEN WRITTEN.
.FILL
.SP
.FORMAT EXP
↑COR\IS THE LOGICAL ↑IOR↑E.
/IF EITHER OPERAND IS A RELATION OR AN EXPRESSION CONTAINING LOGICAL
OPERATORS CONNECTING AT LEAST ONE RELATION, THEN THE RESULT IS 0 OR 1
DEPENDING ON WHETHER BOTH OPERANDS ARE TRUE (NON-ZERO).
/IF BOTH OPERANDS HAVE ORDINARY VALUES, THESE VALUES ARE COMBINED WITH
THE MACHINE'S ↑CMRG INSTRUCTION.
/THUS
.FILL
.SP
.RM 16
↑UA<4 OR B<5↑L
.SP
.EM 8
IS TRUE IF EITHER RELATION HOLDS; AND
.SP
.RM 8
↑UA<4 OR X+1↑L
.SP
.EM 8
IS TRUE IF /A<4 OR IF /X+1 IS NOT ZERO.
/IN BOTH THESE CASES, THE SECOND OPERAND IS NOT EVALUATED IF THE FIRST
ONE IS TRUE.
/BUT
.SP
.RM 8
↑UF(X,Y) OR Z↑L
.SP
.EM 8
IS THE 24-BIT LOGICAL ↑IOR OF /Z AND THE VALUE OF THE FUNCTION.
/THE OPERANDS OF AN ↑COR ARE NEVER RE-ORDERED.
.EM 8
.SP
↑UAND, EOR↑L
.RM 8
↑CAND IS THE LOGICAL ↑IAND.
/IT IS EXACTLY THE SAME AS ↑COR IN THE WAY IT TREATS ITS OPERANDS,
DIFFERING ONLY IN THE RESULT.
.SP
↑CEOR ALWAYS CONVERTS ITS OPERANDS TO VALUES AND USES THE 940 ↑CEOR
INSTRUCTION.
.EM 8
.SP
.FORMAT EXP
↑CNOT\IS THE LOGICAL ↑INOT.
/IF ITS SINGLE OPERAND IS A RELATION (SEE ABOVE DISCUSSION OF ↑COR) ITS
VALUE IS INVERTED (0 BECOMES 1, 1 BECOMES 0).
/OTHERWISE, A 24-BIT COMPLEMENT IS TAKEN (WITH ↑CEOR =-1).
.FILL
.SP
= # < <= > >=
.RM 8
ARE THE RELATIONS.
/EACH ONE EVALUATES ITS OPERANDS AND THEN PERFORMS THE INDICATED TEST.
/FOR THESE AND ALL THE ARITHMETIC OPERATIONS, THE OPERANDS MAY BE
RE-ORDERED IF IT SUITS THE COMPILER'S CONVENIENCE.
.EM 8
.SP
.FORMAT EXP
↑CMOD\/A ↑CMOD /B IS THE REMAINDER OF /A↑//B.
.FILL
.SP
.FORMAT EXP
+ -\PERFORM 24-BIT INTEGER ADDITION OR SUBTRACTION.
.FILL
.SP
* ↑/ ↑ULSH RSH LCY RCH↑L
.RM 8
"*" AND "↑/" PERFORM 24-BIT INTEGER MULTIPLICATION AND DIVISION.
/NO TEST IS MADE FOR OVERFLOW ON DIVISION.
.SP
/THE SHIFT OPERATIONS SHIFT THE FIRST OPERAND THE NUMBER OF PLACES
INDICATED BY THE SECOND OPERAND.
/VACATED BITS ARE REPLACED BY ZEROS (I.E., ONLY LOGICAL SHIFTING
IS DONE).
/THE CYCLE OPERATORS DO AN END-AROUND SHIFT.
.EM 8
.SP
+ - ↑UGOTO RETURN SRETURN DO ↑L(ALL UNARY OPERATORS)
.RM 8
/THE UNARY "+" AND "-" DO THE OBVIOUS THING.
↑CDO IS A NOISE WORD AND IS IGNORED BY THE COMPILER.
/IT MAY BE CONVENIENT FOR CONSTRUCTIONS SUCH AS THIS:
.SP
.RM 8
↑UDO F(X,Y);↑L
.SP
.EM 8
ALTHOUGH
.SP
.RM 8
↑UF(X,Y);↑L
.SP
.EM 8
TECHNICALLY WILL WORK JUST AS WELL.
.SP
↑CGOTO TRANSFERS TO THE ADDRESS WHICH IS THE VALUE OF ITS OPERAND
(SEE THE DISCUSSION OF LABELS BELOW.)
.SP
↑CRETURN AND ↑CSRETURN EVALUATE THEIR OPERAND(S), OF WHICH THERE MAY
BE AT MOST THREE.
/THEY LEAVE THE VALUES IN THE /A, /B, AND /X REGISTERS RESPECTIVELY AND
RETURN THROUGH THE RETURN LINK OF THE MOST RECENTLY DEFINED FUNCTION
(SEE BELOW).
/IF THIS IS NOT DESIRED, THE ↑CRETURN MAY BE MODIFIED BY FOLLOWING IT 
WITH ↑CFROM <EXPRESSION>.
/IN THIS CASE THE RETURN IS TO THE ADDRESS WHICH IS ONE GREATER
THAN THE VALUE OF THE EXPRESSION.
/THUS
.SP
.RM 8
↑URETURN X+Y FROM FCNL;↑L
.EM 8
.SP
/THE PROGRAMMER SHOULD BE SURE THAT ↑CFCNL HAS A PROPER RETURN ADDRESS
IN IT, SINCE THE COMPILER WILL NOT CHECK THIS.
/THE OPERAND OF ↑CRETURN MAY BE OMITTED.
↑CRETURN IS A NORMAL RETURN, OR A NO-SKIP RETURN (FAILURE RETURN) FROM
FUNCTIONS CALLED WITH A FAILURE LOCATION (SEE FUNCTION CALLS BELOW).
↑CSRETURN IS A SKIP RETURN, OR A NORMAL RETURN FROM FUNCTIONS CALLED WITH
A FAILURE LOCATION.
.EM 8
.SP
.FORMAT EXP
()\(FUNCTION CALLS)
.FILL
.RM 8
/THE ARGUMENTS OF THE FUNCTION ARE ENCLOSED IN THE PARENTHESES, SEPARATED
BY COMMAS.
/THUS
.SP
.RM 8
↑UF(X,Y+5,Z);↑L
.SP
.EM 8
/NOTE THAT THE FUNCTION MAY BE SPECIFIED BY AN EXPRESSION; THUS
.SP
.RM 8
↑U(A+B)(X,Y+5,Z);↑L
.EM 8
.SP
IS PERFECTLY LEGAL.
/IT CAUSES CONTROL TO BE TRANSFERRED TO THE LOCATION WHICH IS THE VALUE
OF THE EXPRESSION /A+/B WITH THE SPECIFIED ARGUMENTS.
↑I/CAUTION↑E!
THE ↑IVALUES OF THE FIRST THREE FUNCTION ARGUMENTS ARE TRANSMITTED IN
THE /A, /B AND /X REGISTERS RESPECTIVELY.
/THE ADDRESSES OF THE VALUES OF FURTHER ARGUMENTS ARE PUT INTO ↑CNOP
INSTRUCTIONS WHICH PRECEDE THE FUNCTION CALL.
/THE FUNCTION IS CALLED WITH A ↑CPOP WHICH LEAVES THE LINK IN 0 AND
TRANSFERS TO THE LOCATION ADDRESSED BY IT.
/THUS
.SP
.RM 8
↑UF(X,Y+5,Z,P+1,Q);↑L
.EM 8
.SP
COMPILES THE CODE
.SP
.RM 8
↑ULDA P; ADD =1; STA T:+1; 

LDA Y; ADD =5; CAB;

LDA X; LDX Z; NOP Q;

NOP T:+1; CALL* F;↑L
.EM 8
.SP
/IN ADDITION TO 0 OR MORE ARGUMENTS, A FUNCTION CALL MAY ALSO HAVE
A ↑IFAILURE ↑ILOCATION.
/THIS CORRESPONDS TO A NO-SKIP RETURN (↑CRETURN OPERATION) FROM A
FUNCTION WHICH ALSO HAS A SKIP-RETURN (↑CSRETURN OPERATION).
/THE FAILURE LOCATION COMES AFTER THE ARGUMENTS AND IS PRECEDED BY A
COLON, THUS:
.SP
.RM 8
↑UF(A1,A2:L);↑L
.EM 8
.SP
/THE FAILURE LOCATION MAY BE EITHER A LABEL, IN WHICH CASE CONTROL WILL
GO THERE IN CASE OF FAILURE, OR ↑CRETURN OR ↑CSRETURN (POSSIBLY
FOLLOWED BY A ↑ISINGLE EXPRESSION, WHICH WILL BE EXECUTED IN CASE OF
FAILURE.
/A FUNCTION NORMALLY RETURNS JUST ONE VALUE, WHICH IS PASSED IN THE 
/A-REGISTER.
/HOWEVER, IT MAY RETURN NO VALUES, OR UP TO THREE; ADDITIONAL VALUES
ARE PUT IN THE /B AND /X REGISTERS.
/THE FIRST VALUE IS ALWAYS THE ONE USED FOR FURTHER COMPUTATION
(E.G., IN SITUATIONS LIKE ↑UF(X)+1↑L), BUT ANY SUBSET OF THE VALUES
CAN BE SAVED BY PUTTING A ↑ISAVE ↑ILIST AFTER THE FAILURE LOCATION,
PRECEDED BY ANOTHER COLON, THUS:
.SP
.RM 8
↑UF(X,Y:M:V1,V2,V3);↑L
.EM 8
.SP
OR EVEN
.SP
.RM 8
↑UF(P,R::X,Y,Z);↑L
.EM 8
.SP
IF THERE IS NO FAILURE LOCATION.
/THE SAVE LIST MUST BE A LIST OF SIMPLE VARIABLES.
/IT IS ALL RIGHT TO HAVE A COMMA WITH NO NAME; THE CORRESPONDING 
RETURN VALUE JUST GETS LOST.
/SEE BELOW FOR A DISCUSSION OF FUNCTION DECLARATIONS.
/NOTE THAT THIS CALLING CONVENTION IS ↑INOT THE SAVE AS ↑CFORTRAN'↑ES.
/IN PARTICULAR, IN THE ABOVE EXAMPLE NOTHING THE FUNCTION DOES (WITHIN 
REASON) CAN AFFECT THE VALUE OF /A OR /Z.
/IT IS POSSIBLE TO TRANSMIT THE ↑IADDRESS OF /A OR /Z WITH THE
REFERENCE OPERATOR, HOWEVER (SEE BELOW).
.EM 8
.SP
.FORMAT EXP
.LITERAL
.\IS THE TAILING OPERATOR.
/THE "." MUST BE FOLLOWED BY A FIELD NAME (SEE DISCUSSION OF
DECLARATIONS BELOW).
/THE RESULTING OBJECT REFERS TO THE SPECIFIED FIELD RELATIVE TO 
THE ADDRESS WHICH IS THE VALUE OF THE FIRST OPERAND.
/THUS, IF WE HAVE
.FILL
.SP
.RM 16
↑UDECLARE FIELD A(1), B(2);↑L
.EM 8
.SP
AND IF /X CONTAINS 143, THEN /X./A REFERS TO LOCATION 144, /X./B
TO 145, /X./A./B TO 2 + THE CONTENTS OF LOCATION 144.
/A TAILED OPERAND MAY APPEAR ON EITHER SIDE OF AN ASSIGNMENT.
/SEE THE DISCUSSION OF ↑CPAGED DECLARATIONS FOR THE TREATMENT OF
PAGED BLOCKS.
.EM 8
.SP
.FORMAT EXP
@ $\ARE THE REFERENCE AND INDIRECTION OPERATORS.
/THE REFERENCE OPERATOR "@" IS UNARY ONLY, AND INDIRECTION MAY BE
USED IN BOTH A UNARY AND BINARY FASHION.
/THE REFERENCE OPERATOR TAKES AN OPERAND WHICH MUST BE AN ADDRESS
(I.E., ACCEPTABLE ON THE LEFT SIDE OF AN ASSIGNMENT) AND RETURNS
THIS ADDRESS AS ITS VALUE.
/NOTE THAT THIS IMPLIES THAT ITERATION OF THE REFERENCE OPERATOR
IS ILLEGAL (IN FACT IT DOES NOT MAKE ANY SENSE).
.FILL
.RM 8
.SP
/THE INDIRECTION OPERATOR IN ITS UNARY SENSE EVALUATES ITS OPERAND
AND RETURNS THIS VALUE AS AN ↑IADDRESS.
/THE SEQUENCE "@$" IS ALMOST EQUIVALENT TO NO OPERATION, EXCEPT
THAT "$" ON AN ADDRESS IS COMPILED WITH THE 940'S INDIRECT BIT
AND WILL THEREFORE BE AFFECTED BY THE PRESENCE OF INDIRECT OR INDEX
BITS IN THE CONTENTS OF ADDRESSES.
/IF WE HAVE WRITTEN
.RM 8
.SP
↑UDECLARE FIELD S(0);↑L
.EM 8
.SP
THEN <EXPRESSION>./S IS EQUIVALENT TO $<EXPRESSION>, WITH THE EXCEPTION
NOTED ABOVE.
.SP
/BINARY $ IS USED AS FOLLOWS.
/THE CONSTRUCT /T$/F IS ALMOST EQUIVALENT TO @/T./F.
/I.E., IT REFERS TO BE BITS OF /T (AND ↑INOT THE WORD ADDRESSED BY
/T) SELECTED BY /F.
/THE WORD DISPLACEMENT OF /F IS IGNORED, AND /F MUST NOT CROSS A
WORD BOUNDARY.
.EM 8
.SP
.FORMAT EXP
[]\INDICATE SUBSCRIPTING.
/A ↑ISINGLE SUBSCRIPT IS ALLOWED.
/AS WITH FUNCTION CALLS, THE OBJECT BEING SUBSCRIPTED MAY BE AN 
ARBITRARY EXPRESSION.
/IF IT HAS BEEN DECLARED AS AN ARRAY, THE COMPILER LOADS THE SUBSCRIPT
INTO THE /X REGISTER AND COMPILES AN INDIRECT REFERENCE THROUGH THE
ARRAY NAME.
/I.E., IT EXPECTS THE ARRAY NAME TO CONTAIN THE BASE ADDRESS OF THE
ARRAY WITH THE INDEX BIT ON.
/FOR ANY OTHER EXPRESSION THE "[]" OPERATOR IS EQUIVALENT TO "$"
PLUS ".".
/THUS
.FILL
.SP
.RM 16
↑U(A-B)[C OR D]+1;↑L
.EM 8
.SP
COMPILES AS
.SP
.RM 8
↑ULDA C; MRG D; STA T;

LDA A; SUB B; ADD T;

XXA; LDA 0,2; ADD =1;↑L
.EM 16
.EM 0,5
.EJ
↑I/PRIMARIES:
       /THE PRIMARIES FOR EXPRESSIONS MAY BE NUMBERS, NAMES, STRING
CONSTANTS, OR CHARACTER CONSTANTS.
.SP 2
↑INUMBERS
       /A NUMBER MAY BE AN INTEGER CONSTANT OR A REAL CONSTANT.
/AN INTEGER CONSTANT IS A STRING OF DIGITS, POSSIBLY FOLLOWED BY
/B OR /D, POSSIBLY FOLLOWED BY A SINGLE-DIGIT SCALE FACTOR.
/B MAKES THE NUMBER OCTAL; IF IT IS ABSENT, DECIMAL /D IS
ASSUMED.
/THUS 100/D = 1/D2 = 144/B =1/B2+44/B = 100 .
/A REAL CONSTANT IS OF THE FORM XXX.XXX/EXXX.
/EITHER THE DOT OR THE /E MUST BE PRESENT.
/IF THE DOT IS PRESENT, THERE MUST BE SOME DIGITS ↑IBEFORE IT;
IF THE /E IS PRESENT, THERE MUST BE SOME DIGITS AFTER IT.
/FOR FURTHER DETAILS, CONSULT THE DESCRIPTION IN /R-21 OF THE ↑CSIC
SYSPOP, WHICH IS USED TO CONVERT REAL CONSTANTS TO BINARY FORM.
.SP 2
↑INAMES
       /A NAME IS A STRING OF ANY NUMBER OF LETTERS AND DIGITS
BEGINNING WITH A LETTER.
/ONLY THE FIRST SIX CHARACTERS OF THE NAME ARE SIGNIFICANT.
/A NAME MUST BE DECLARED (SEE BELOW).
/ALL NAMES EXCEPT PARAMETERS AND FIELDS ARE TREATED IN EXACTLY THE
SAME WAY WHEN THEY OCCUR IN EXPRESSIONS (EXCEPT FOR SUBSCRIPTING).
/E.G., A STRING NAME REFERS TO THE POINTER TO THE STRING DESCRIPTOR
WHICH IS THE VALUE OF THE NAME.
/THUS, IF /S IS A STRING
.SP
.RM 16
↑US←A+1;↑L
.EM 16
.SP
SIMPLY STORES /A+1 INTO /S; THIS IS PROBABLY NOT REASONABLE.
/FUNCTIONS ARE PROVIDED TO CONVERT BETWEEN STRINGS AND NUMBERS.
.SP 2
↑IRESERVED ↑IWORDS
       /THERE ARE ABOUT 80 RESERVED WORDS (SEE /APPENDIX /B) WHICH
MAY NOT BE USED AS NAMES.
/IN ADDITION, ABOUT 20 LOCATIONS IN THE RUNTIME PACKAGE (SEE /APPENDIX
/C) ARE PREDECLARED AS EXTERNAL; ATTEMPTS TO DECLARE THEM FOR OTHER
PURPOSES WILL FAIL.
.EJ
↑ICHARACTER ↑ICONSTANTS
       /A CHARACTER CONSTANT HAS THE FORM
.SP
.CENTER
'<3 OR FEWER PSEUDO-CHARACTERS>'
.SP
AND MAY BE USED WHEREVER A CONSTANT IS USED.
/A PSEUDO-CHARACTER IS ANY CHARACTER OTHER THAN "&" OR "'" FOLLOWED
BY ONE OF THE FOLLOWING:
.SP
.RM 8
.RM 4
.UN 4
1.  /ANOTHER "&" OR A "'".
/THE TWO ARE EQUIVALENT TO A SINGLE "&" OR "'" IN THE CONSTANT.
.UN 4
2.  /THREE OCTAL DIGITS.
/THE NUMBER THUS DEFINED, TRUNCATED TO 8 BITS, COUNTS AS ONE
CHARACTER.
.UN 4
3.  /A LETTER.
/THE ↑CASCII CODE FOR THE LETTER + 100/B AS THE VALUE OF THE 
PSEUDO-CHARACTER.
.SP
.EM 4
.EM 8
/THE CHARACTERS ARE RIGHT-JUSTIFIED IN THE CONSTANT, WHICH IS
FILLED OUT WITH BLANKS (000) ON THE LEFT.
/IT IS AN ERROR TO HAVE MORE THAN 3 PSEUDO-CHARACTERS IN THE CONSTANT
SINCE THESE WOULD EXCEED THE 24 BITS OF A MACHINE WORD IN WHICH
THE CONSTANT IS STORED.
.SP 2
↑ISTRING ↑ICONSTANTS
       /A STRING CONSTANT HAS THE FORM
.SP
.CE
"<ANY NUMBER OF PSEUDO-CHARACTERS>".
.SP
/IT IS LEGAL IN ANY CONTEXT IN WHICH A STRING NAME IS LEGAL.
/A DESCRIPTOR WILL BE CREATED WHICH POINTS TO THE CONSTANT STRING.
/IF THE STRING CONSTANT APPEARS ALONE IMMEDIATELY AFTER A LEFT ARROW,
THE VARIABLE TO WHICH THE CONSTANT IS BEING ASSIGNED IS ASSUMED TO
HOLD A POINTER TO AN ALREADY EXISTING STRING DESCRIPTOR; IN ALL OTHER
CASES, SPACE FOR A DESCRIPTOR WILL BE ALLOCATED FOR THE CONSTANT
BY THE COMPILER.
/IN ANY CASE, WRITING INTO THE STRING WILL ALTER THE CONSTANT.
       /A VARIETY OF OPERATIONS ARE PROVIDED FOR CONVERTING FIELD
NAMES INTO CONSTANTS:
.SP
.RM 8
.RM 4
.UN 4
1.  /F(<EXPRESSION>) HAS THE VALUE FOR /T AFTER THE STATEMENTS
.SP
.RM 8
↑UT←0; T$F←↑L<EXPRESSION>;
.EM 8
.SP
HAVE BEEN EXECUTED.
/F MUST NOT CROSS WORD BOUNDARIES.
.UN 4
2.  /THE FUNCTION ↑CFSHIFT(F) HAS 23 (THE RIGHTMOST BIT POSITION
OCCUPIED BY /F) AS ITS VALUE.
/F MUST NOT CROSS WORD BOUNDARIES.
/THE VALUE OF ↑CFSHIFT ↑IIS A CONSTANT.
.UN 4
3.  /THE FUNCTION ↑CFMASK(F) HAS AS VALUE A CONSTANT WHICH HAS 
ONE-BITS IN POSITIONS SELECTED BY THE FIELD AS ITS VALUE.
/IT IS EQUIVALENT TO /F(-1).
/F MUST NOT CROSS WORD BOUNDARIES.
.UN 4
4.  /A FIELD NAME /F APPEARING IN ANY CONTEXT OTHER THAN 
.RM 16
/F(

.LITERAL
./F

$/F
.EM 16
IS EQUIVALENT TO A CONSTANT WHOSE VALUE IS THE WORD DISPLACEMENT OF
THE FIELD.
.EM 4
.EM 8
.SP 2
↑ICONSTANT ↑IEXPRESSIONS
       /ANY EXPRESSION INVOLVING OPERATORS OF PRECEDENCE HIGHER
THAN ↑CFOR AND CONSTANT OPERANDS WILL BE EVALUATED BY THE COMPILER
YIELDING A RESULT WHICH BEHAVES EXACTLY LIKE A CONSTANT.
.EJ
↑I/DECLARATIONS:
       /VARIABLES ARE DECLARED WITH ↑CDECLARE OR ↑CFUNCTION STATEMENTS
OR BY APPEARING AS STATEMENT LABELS.
/THE SYNTAX OF VARIABLE ↑CDECLARE IS
.SP
.RM 8
↑CDECLARE [↑CFIXED OR ↑CPAGED] [↑CINTEGER OR ↑CREAL OR
.RM 3
↑CSTRING] [↑CARRAY] [↑CEXTERNAL OR ↑CENTRY OR

↑CLOCAL] <NAMELIST>.
.EM 3
.EM 8
.SP
/THE STUFF AFTER THE ↑CDECLARE MAY BE REPEATED AS MANY TIMES AS 
DESIRED.
/ONCE ↑CFIXED, ↑CPAGED OR ↑CARRAY HAS BEEN USED IT REMAINS IN
EFFECT FOR THE REMAINDER OF THE CURRENT ↑CDECLARE STATEMENT.
↑CINTEGER IS ASSUMED IF IT IS OMITTED, BUT ONCE ↑CSTRING HAS BEEN
USED IT REMAINS IN EFFECT UNTIL ↑CINTEGER APPEARS AGAIN.
/EACH NAME IN THE NAMELIST MAY BE PRECEDED BY "$" (WHICH MAKES IT
AN ENTRY) OR BY "*" (WHICH MAKES IT EXTERNAL, I.E., PREVENTS 
STORAGE FROM BEING ASSIGNED FOR IT).
/IF ↑CFIXED AND ↑CARRAY ARE BOTH AS PRESENT, A NAME MAY BE FOLLOWED
BY AN EXPRESSION IN PARENTHESES (OR BRACKETS).
/THUS
.SP
.RM 8
↑UDECLARE FIXED ARRAY A[12], B[X*2+14];↑L
.EM 8
.SP
/THE EXPRESSION ( WHICH MUST BE A CONSTANT) WILL BE EVALUATED AND
THAT MANY CELLS ASSIGNED FOR THE ARRAY AT COMPILE TIME.
/THE BASE ADDRESS OF THE REGION ASSIGNED, WITH THE INDEX BIT SET,
WILL BE STORED IN THE NAME.
/IF A NAME IS DECLARED ↑CARRAY WITHOUT ANY STORAGE BEING ASSIGNED,
THE SYSTEM WILL ASSUME THAT ITS VALUE IS A POINTER TO AN ARRAY WITH
THE INDEX BIT SET.
/THAT IS, IT WILL COMPILE FOR THE STATEMENT
.SP
.RM 8
↑UB←A[I];↑L
.SP
.UN 8
THE CODE
.SP
↑ULDX I; LDA* A; STA B;
.EM 8
.SP
↑L/EXAMPLE:↑U
.SP
.RM 8
↑UDECLARE INTEGER A,B STRING D, $G1, G2,
.RM 3
EXTERNAL G3, G4,

ARRAY E(X+Y[4]), INTEGER C(10);↑L
.EM 3
.EM 8
.SP
DECLARES TWO SCALAR INTEGERS, ONE INTEGER ARRAY WHICH WILL BE ASSIGNED
10 LOCATIONS WHEN THE DECLARATION IS EXECUTED, TWO LOCAL SCALAR 
STRINGS (/D AND /G2), ONE LOCAL STRING ARRAY WHICH WILL BE ASSIGNED
/X←/Y[4] LOCATIONS WHEN THE DECLARATION IS EXECUTED, ONE SCALAR
STRING WHICH IS AN ENTRY (/G1), AND TWO SCALAR STRINGS WHICH ARE 
ASSUMED TO BE DEFINED ELSEWHERE (/G3 AND /G4).
.EJ
