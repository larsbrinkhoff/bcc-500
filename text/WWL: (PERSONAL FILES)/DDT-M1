.DEFINE FORMAT EXP L(A) J(B)
AAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
.END FORMAT
.DEFINE FORMAT SUBEXP L(A) J(B)
          AAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
.END FORMAT
.PAGING MODE OFF
.SP 16
.CE
↑UDDT
.SP 2
.CE
INTERACTIVE MACHINE LANGUAGE DEBUGGING SYSTEM
.SP 2
.CE
REFERENCE MANUAL
.SP 15
.CE
↑L↑CBCC 500 /COMPUTER
.SP 4
.CE
/DEPARTMENT OF /ELECTRICAL /ENGINEERING
.CE
/UNIVERSITY OF /HAWAII
.SP 2
.CE
/JANUARY 25, 1978
.EJ
.HEADER ↑CDDT /REFERENCE /MANUAL
.PA 1
↑-1.0←←/GENERAL
 ↑CDDT IS A RELOCATING, LINKING LOADER AND DEBUGGING SYSTEM FOR THE ↑CXDS 940.
/IT HAS FACILITIES FOR SYMBOLIC REFERENCE TO AND TYPEOUT OF MEMORY
CELLS AND CENTRAL REGISTERS.
/IT PERMITS THE USER TO INSERT BREAKPOINTS INTO PROGRAMS, PERFORM TRACES, AND
SEARCH PROGRAMS FOR SPECIFIED WORDS AND SPECIFIED EFFECTIVE ADDRESSES.
/IN ADDITION, IT HAS A CONDITIONAL BREAKING FACILITY THAT
WILL ALLOW THE USER TO SPECIFY THE EXACT CONDITION UNDER WHICH HE WANTS
THE PROGRAM TO BREAK.
/FINALLY, ↑CDDT CAN LOAD BOTH ABSOLUTE AND RELOCATABLE FILES IN
THE FORMAT PRODUCED BY THE ASSEMBLER.
 /THE SYSTEM HAS A LANGUAGE BY WHICH IT CAN BE CONTROLLED.
/THE BASIC COMPONENTS OF THIS LANGUAGE ARE ↑ISYMBOLS, ↑ICONSTANTS,
AND ↑ICOMMANDS.
.SP 2
↑-1.1←←/SYMBOLS
 /A ↑ISYMBOL IS ANY STRING OF LETTERS, DIGITS, AND DOTS(.) CONTAINING
AT LEAST ONE LETTER.
(/HOWEVER, A DIGIT STRING FOLLOWED BY /B OR /D AND POSSIBLY ANOTHER
DIGIT IS INTERPRETED AS AN OCTAL OR DECIMAL NUMBER RESPECTIVELY).
/IN SYMBOLS MORE THAN SIX CHARACTERS, ONLY THE FIRST SIX ARE SIGNIFICANT:
THUS, ↑CALPHABET IS EQUIVALENT TO ↑CALPHAB.
/ALL OP CODES RECOGNIZED BY THE ASSEMBLER ARE BUILT-IN SYMBOLS, EXCEPT
FOR SOME /I↑//O INSTRUCTIONS.
/DOT (.) IS A BUILT-IN SYMBOL WITH A SPECIAL MEANING EXPLAINED IN
A LATER SECTION.
/THERE ARE ALSO SOME CONSTRUCTS LIKE ;/A (THE /A-REGISTER) WHICH
UNDER MOST CIRCUMSTANCES ACT EXACTLY LIKE SYMBOLS.
/SEE THE SECTION ON SPECIAL SYMBOLS.
 /EVERY SYMBOL MAY HAVE A VALUE.
/THIS VALUE IS A 24-BIT INTEGER; FOR MOST SYMBOLS IT WILL EITHER BE AN
ADDRESS IN MEMORY OR THE OCTAL ENCODING OF AN OPERATION CODE.
.NOFILL

/EXAMPLES:
      ↑UABC
      AB124
      12XYZ
↑L/THE FOLLOWING ARE NOT SYMBOLS:
      135/B
      /A/B*/C/D
.FILL
 /SYMBOLS MAY BE INTRODUCED TO ↑CDDT IN TWO DIFFERENT WAYS:
.SP
.FORMAT EXP
(1)\/THEY MAY BE WRITTEN OUT BY THE ASSEMBLER AND READ IN FROM THE
BINARY FILE BY ↑CDDT.
.FILL
.SP
.FORMAT EXP
(2)\/THEY MAY BE TYPED IN AND ASSIGNED VALUES DURING DEBUGGING.
.FILL
 /IT IS POSSIBLE FOR A SYMBOL TO BE UNDEFINED.
/THIS MAY OCCUR IF A PROGRAM IS LOADED WHICH REFERENCES AN EXTERNAL
SYMBOL NOT DEFINED IN A PREVIOUSLY LOADED PROGRAM.
/IT MAY ALSO OCCUR IF AN UNDEFINED SYMBOL IS TYPED IN AN EXPRESSION.
/IN GENERAL, UNDEFINED SYMBOLS ARE LEGAL INPUT TO ↑CDDT EXCEPT WHEN
THEIR VALUES WOULD BE REQUIRED IMMEDIATELY FOR THE EXECUTION OF A
COMMAND.
/THUS, FOR EXAMPLE, THE ;/G (↑CGO ↑CTO) COMMAND WOULD GIVE AN ERROR IF
ITS ARGUMENT IS AN UNDEFINED SYMBOL.
 /UNDEFINED SYMBOLS MAY BECOME DEFINED IN SEVERAL WAYS.
/THAY MAY BE DEFINED AS EXTERNAL IN THE ASSEMBLER (I.E., WITH ↑CEXT
OR $) AND READ IN BY ↑CDDT AS PART OF A BINARY PROGRAM.
/ALTERNATIVELY, THEY MAY BE DEFINED BY ONE OF THE SYMBOL DEFINITION
COMMANDS AVAILABLE IN ↑CDDT.
/WHEN THE DEFINITION OCCURS, THE VALUE OF THE SYMBOL WILL BE SUBSTITUTED
IN ALL THE EXPRESSIONS IN WHICH THE SYMBOL HAS APPEARED.
 /IF ↑CDDT TYPES (/U) AFTER TYPING OUT THE CONTENTS OF A CELL IN SYMBOLIC MODE,
IT MEANS THAT THE CELL CONTAINS AN UNDEFINED SYMBOL.
/THE CELL IS CLOSED AT ONCE SO THAT ITS CONTENTS CANNOT BE ERRONEOUSLY CHANGED.
 /THE ONLY RESTRICTION ON THIS FACILITY IS THAT, AS FOR ↑CNARP, THE UNDEFINED
SYMBOL MUST BE THE ONLY THING IN THE ADDRESS FIELD OF THE WORD IN WHICH IT
APPEARS.
/INCORRECT USES OF UNDEFINED SYMBOLS WILL BE DETECTED BY ↑CDDT AND WILL RESULT
IN THE ERROR COMMENT (/U).
 ↑CDDT KEEPS TRACK OF THE REFERENCES TO UNDEFINED SYMBOLS BY BUILDING
POINTER CHAINS THROUGH THE ADDRESS FIELDS OF THE WORDS REFERRING TO THE SYMBOL.
/FOR EACH UNDEFINED SYMBOL, ↑CDDT WILL CONSTRUCT A DIFFERENT POINTER CHAIN
FOR EACH 2/K PAGE IN THE USER'S MAP WHICH CONTAINS A
REFERENCE TO THE SYMBOL.
/THE POINTERS TO THE BEGINNINGS OF THESE CHAINS ARE MAINTAINED IN A 2/K
PAGE ACQUIRED BY ↑CDDT AND NOT ACCESSABLE BY THE USER.
/A CHAIN POINTER IS STORED IN THE RIGHT ELEVEN BITS OF THE ADDRESS
FIELD.
/BIT 10 MARKS THE END OF A CHAIN AND BIT 11 INDICATES WHETHER THE SYMBOL SHOULD
BE PATCHED UP ON 14 BITS OR 24 BITS WHEN THE SYMBOL IS DEFINED.
 /FROM THIS DESCRIPTION IT SHOULD BE OBVIOUS WHAT WILL HAPPEN IF THE
POINTER CHAIN IS DESTROYED.
/A PROBABLE CONSEQUENCE IS THAT A SEARCH DOWN THE POINTER CHAIN WILL NOT
TERMINATE.
↑CDDT WILL OFTEN DO SUCH SEARCHES WHENEVER IT PRINTS AN ADDRESS.
/IF THE CHAIN IT IS SEARCHING HAS MORE THAN 256 LINKS, IT WILL PRINT THE SYMBOL
FOLLOWED BY (/U) AND CONTINUE.
/A CHAIN MAY BE DESTROYED BY CLOBBERING A WORD IN THE CHAIN OR BY REMOVING A
PAGE CONTAINING UNDEFINED REFERENCES FROM THE USER MAP.
/A WORD OF WARNING, /D/D/T'S LOADER MAY BECOME CONFUSED OR GO INTO A LOOP
IF A BINARY PROGRAM IS LOADED WHICH ATTEMPTS TO DEFINE AN UNDEFINED SYMBOL
WHOSE REFERENCE CHAINS ARE NOT ALL IN THE MAP.
/FIXING UP AN UNDEFINED SYMBOL POINTER CHAIN WHICH HAS BEEN CLOBBERED IS
AN EXERCISE WHICH WE LEAVE TO THE READER.
.SP 2
↑-1.2←←/BLOCK←/STRUCTURE
 /A LIMITED FACILITY CALLED THE ↑IBLOCK ↑ISTRUCTURE FACILITY IS PROVIDED
TO SIMPLIFY THE REFERENCING OF LOCAL SYMBOLS WHICH ARE DEFINED IN
MORE THAN ONE SEPERATELY LOADED PROGRAM.
/NOTE THAT /D/D/T'S BLOCK STRUCTURE HAS ONLY A TENUOUS CONNECTION WITH
THE BLOCK STRUCTURE OF ↑CALGOL.
/THE BLOCK STRUCTURE OF A PROGRAM IS ORGANIZED IN THE FOLLOWING MANNER:
EVERY ↑CIDENT READ BY ↑CDDT AS A PART OF A BINARY FILE BEGINS A NEW BLOCK.
/ANY LOCAL SYMBOL KNOWN TO ↑CDDT HAS A BLOCK NUMBER ASSOCIATED WITH IT;
GLOBAL SYMBOLS DO NOT HAVE A BLOCK NUMBER.
/UNDEFINED SYMBOLS ARE ALWAYS TREATED AS A GLOBAL.
 /THE NAME OF A BLOCK IS THE SYMBOL IN THE LABEL FIELD OF THE ↑CIDENT.
/IF TWO /I/D/E/N/TS WITH THE SAME SYMBOL ARE READ, THE MESSAGE
(↑CALREADY ↑CLOADED) IS PRINTED, AND THE LOCAL SYMBOL TABLES FOR THE TWO
/I/D/E/N/TS WILL BE MERGED.
/CONFLICTING SYMBOL DEFINITIONS WILL BE OVERWRITTEN.
 /IF LOCAL SYMBOLS ARE DEFINED IN A BINARY PROGRAM FILE, WITH NO PRECEEDING
↑CIDENT, THEN ↑CDDT WILL ASSIGN AN ↑CIDENT NAME SUCH AS 03/X.
/GLOBAL SYMBOLS MUST BE UNIQUE WITHIN AN ENTIRE PROGRAM AND ARE RECOGNIZED
AT ALL TIMES.
/IF A MULTIPLE DEFINITION IS ENCOUNTERED, THE LATEST ONE TAKES PRECEDENCE.
/LOCAL SYMBOLS ARE RECOGNIZED ACCORDING TO THE FOLLOWING RULES:
.SP
.FORMAT EXP
(1)\/AT ANY GIVEN TIME ONE BLOCK IS CALLED THE PRIMARY BLOCK.
/ALL LOCAL SYMBOLS ASSOCIATED WITH THE PRIMARY BLOCK WILL BE RECOGNIZED.
.FILL
.SP
.FORMAT EXP
(2)\/IF A SYMBOL IS USED WHICH IS NEITHER GLOBAL NOR IN THE PRIMARY BLOCK,
THE ENTIRE TABLE IS SCANNED FOR IT.
/IF IT OCCURS IN ONLY ONE BLOCK, THE SYMBOL IS RECOGNIZED PROPERLY.
/IF IT OCCURS IN MORE THAN ONE BLOCK, THE ERROR MESSAGE (/A) IS PRINTED.
.FILL
.SP
.FORMAT EXP
(3)\/A SYMBOL MAY BE EXPLICITLY QUALIFIED BY WRITING: ↑CSYMA&SYMB.
↑CSYMA MUST BE THE NAME OF A BLOCK.
↑CSYMB IS THEN REFERENCED  AS THOUGH THE BLOCK WHOSE NAME IS ↑CSYMA WERE
PRIMARY.
.FILL
.SP
.FORMAT EXP
(4)\/WHEN A CELL IS OPENED (SEE /SECTION 2.1), THE BLOCK TO WHICH THE SYMBOLIC
PART OF ITS LOCATION BELONGS BECOMES PRIMARY.
/THUS, ↑CNN&XYZ↑/ CAUSES BLOCK /N/N TO BECOME PRIMARY; IF ↑CABC IS A UNIQUE
LOCAL SYMBOL
IN BLOCK ↑CPQ, THEN ↑CABC↑/ CAUSES ↑CPQ TO BECOME PRIMARY.
.FILL
.SP 2
↑-1.3←←/LITERALS
.SP
 /LITERALS HAVE THE SAME FORMAT AND MEANING IN ↑CDDT AS IN THE ASSEMBLER,
I.E., THE TWO CHARACTERS
.BEGIN GROUP
' ='
.END GROUP
SIGNAL THE BEGINNING OF A LITERAL, WHICH IS TERMINATED BY ANY OF THE
CHARACTERS WHICH ORDINARILY TERMINATE AN EXPRESSION.
/IN CONTRAST TO THE ASSEMBLER, THE EXPRESSION IN A ↑CDDT LITERAL ↑IMUST
BE DEFINED.
 /THE LITERAL IS LOOKED UP IN THE LITERAL TABLE.
/IF IT IS FOUND, THE ADDRESS WHICH HAS BEEN ASSIGNED TO IT IS THE VALUE OF
THE SYMBOL.
/IF IT DOES NOT APPEAR IN THE LITERAL TABLE, IT IS STORED AT THE ADDRESS
WHICH IS THE CURRENT VALUE OF THE SPECIAL SYMBOL ;/F, AND THIS
ADDRESS IS TAKEN AS THE VALUE OF THE LITERAL.
;/F IS INCREASED BY 1.
/FOR EXAMPLE, IF THE LITERAL -1 DOES NOT ALREADY EXIST IN THE LITERAL TABLE
AND ;/F IS 1000/B, THEN TYPING ↑CLDA =-1 CAUSES -1 TO BE STORED AT 1000/B,
AND IS EQUIVALENT TO ↑CLDA 1000/B. /THE NEW VALUE OF ;/F IS 1001/B.
/EXCEPTION: /IN PATCH MODE (SEE /SECTION 2.10), LITERALS ARE SAVED AND NOT
STORED UNTIL THE PATCH IS COMPLETED SINCE OTHERWISE THEY WOULD INTERFERE
WITH THE PATCH.
 /WHEN ↑CDDT TYPES OUT A SYMBOL WHOSE VALUE IS AN ADDRESS IN THE LITERAL
TABLE, IT WILL TYPE IT OUT IN THE SAME FORMAT IN WHICH IT WOULD BE INPUT;
THAT IS, AS = FOLLOWED BY THE NUMERIC VALUE OF THE LITERAL.
/IT SHOULD BE NOTED THAT ADDRESSES SPECIFIED AS LITERALS IN A BINARY PROGRAM
FILE LOADED BY ↑CDDT WILL BE PRINTED AS LITERALS, HOWEVER NO ENTRY INTO
/D/D/T'S LITERAL TABLE IS MADE FOR THESE ADDRESSES.
.SP 2
↑-1.4←←/CONSTANTS
 /A ↑ICONSTANT IS ANY STRING OF DIGITS, POSSIBLY FOLLOWED BY A /B OR /D,
IN TURN POSSIBLY FOLLOWED BY ANOTHER DIGIT.
/THE NUMBER REPRESENTED BY THE STRING IS EVALUATED, TRUNCATED TO 24 BITS
AND THEN USED JUST LIKE THE VALUE OF A SYMBOL.
/THE RADIX OF THE NUMBERS IS NORMALLY 8 (OCTAL), BUT MAY BE CHANGED ARBITRARILY
BY THE COMMANDS DESCRIBED IN /SECTION 2.4 BELOW.
/IF A NUMBER IS TERMINATED BY A /B OR /D, IT IS INTERPRETED AS OCTAL OR DECIMAL
RESPECTIVELY REGARDLESS OF THE CURRENT RADIX.
/A DIGIT FOLLOWING A /B OR /D IS INTERPRETED AS A POWER OF 8 OR 10 RESPECTIVELY
BY WHICH THE NUMBER IS TO BE MULTIPLIED.
/THUS 1750/B=175/B1=1000/D=1/D3.
/CONSTANTS ARE ALWAYS PRINTED BY ↑CDDT IN THE CURRENT RADIX.
.SP 2
↑-1.5←←/COMMANDS
 /A ↑ICOMMAND IS AN ORDER TYPED TO ↑CDDT WHICH INSTRUCTS IT TO DO SOMETHING.
/THE COMMANDS ARE LISTED AND THEIR FUNCTIONS EXPLAINED IN /SECTION 2 BELOW.
.SP 2
↑-1.6←←/EXPRESSIONS
 /AN ↑IEXPRESSION IS A STRING OF NUMBERS OR SYMBOLS CONNECTED BY ANY OF A LARGE
NUMBER OF OPERATORS.
/THESE OPERATORS HAVE THE FOLLOWING SIGNIFICANCE:
.SP
.NOFILL
.RM 10
+    ADDITION
-    SUBTRACTION
;*   (INTEGER) MULTIPLICATION
;↑/   (INTEGER) DIVISION
;&   LOGICAL ↑CAND
;<   LESS THAN
;=   EQUAL TO
;>   GREATER THAN
;%   LOGICAL /O/R
;+   /X;+/Y MEANS /X;*3+/Y
;-   /X;-/Y MEANS /X;*3-/Y
;:   REMAINDER ON (INTEGER) DIVISION
;$   LOGICAL EXCLUSIVE /O/R
.FILL
.ER
 /EXPRESSIONS ARE EVALUATED STRICTLY LEFT TO RIGHT.
/ALL OPERATORS HAVE THE SAME PRECEDENCE.
/PARANTHESES ARE NOT ALLOWED.
/THE FIRST SYMBOL OR NUMBER MAY BE PRECEEDED BY A MINUS SIGN.
/BLANK ACTS LIKE A PLUS (+), EXCEPT THAT ALL SUBSEQUENT OPERANDS ARE
TRUNCATED TO 14 BITS BEFORE BEING OPERATED ON THE ACCUMULATED VALUE OF
THE EXPRESSION.
/THIS ALLOWS ONE TO COMPUTE A VALUE WHICH IS LOADED ONLY INTO THE ADDRESS
FIELD OF AN INSTRUCTION.
/THE VALUE OF AN EXPRESSION IS A 24 BIT INTEGER.
/AN EXPRESSION MAY BE A SYMBOL OR CONSTANT.
/THE VALUE OF AN EXPRESSION AFTER A RELATIONAL OPERATION IS EITHER 1 OR 0
IF THE RELATION IS TRUE OR FALSE RESPECTIVELY.
.SP
.RM 5
.NOFILL
/EXAMPLES:       ↑CLDA       HAS THE VALUE   7600000
                ↑CLDA 10    HAS THE VLAUE   7600010
                          IF THE RADIX IS OCTAL
                ↑CLDA 10/D   HAS THE VALUE   7600012

/IF ↑CSYM IS A SYMBOL WITH THE VALUE 1212, THEN
                ↑CSYM       HAS THE VALUE   1212
                ↑CSYM 10    HAS THE VLAUE   1222
                ↑CLDA ↑CSYM   HAS THE VALUE   7601212
.ER
.FILL
 /IF THIS LAST EXPRESSION WERE PUT INTO A CELL AND LATER EXECUTED BY THE PROGRAM
THE EFFECT WOULD BE TO LOAD THE CONTENTS OF ↑CSYM, REGISTER 1212, INTO THE
/A REGISTER.
 /WHEN ↑CDDT TYPES OUT EXPRESSIONS, TWO MODE SWITCHES CONTROL THE FORMAT OF THE
OUTPUT.
/COMMANDS FOR SETTING THESE MODES ARE DESCRIBED IN /SECTION 2.4 BELOW.
/THE WORD PRINTOUT MODE DETERMINES WHETHER QUANTITIES WILL BE PRINTED AS
CONSTANTS OR AS SYMBOLIC EXPRESSIONS.
/IN THE LATTER CASE, THE OPCODE (IF ANY) AND THE ADDRESS WILL BE PUT INTO
SYMBOLIC FORM.
/IF THE FIRST NINE BITS OF THE VALUE ARE ALL ZEROES OR ALL ONES, NO OPCODE
WILL BE PRINTED; IN THE LATTER CASE A NEGATIVE INTEGER WILL BE PRINTED.
/IF THE OPCODE IS NOT RECOGNIZABLE AS A SYMBOL, IT WILL BE TYPED AS A
NUMBER FOLLOWED BY '/B5'.
 /THE ADDRESS PRINTOUT MODE CONTROLS THE FORMAT IN WHICH THE ADDRESS IS TYPED.
↑CDDT TYPES ADDRESSES WHEN ASKED TO OPEN THE PREVIOUS OR NEXT CELL, WHEN IT
REPORTS THE RESULTS OF WORD AND ADDRESS SEARCHES, AND ON BREAKPOINTS.
/IN THE RELATIVE MODE, ADDRESSES ARE TYPED IN SYMBOLIC FORM, I.E., AS
THE LARGEST DEFINED SYMBOL SMALLER THAN THE ADDRESS PLUS A CONSTANT IF
NECESSARY.
/IF THE CONSTANT IS BIGGER THAN 200 OCTAL, OR IF THE VALUE OF THE SYMBOL
IS LESS THAN OR EQUAL TO SOME MINIMUM VALUE (SETTABLE BY THE USER, BUT NORMALLY
THE LOWEST LOCATION OF THE PROGRAM) THE ENTIRE ADDRESS IS TYPED AS A CONSTANT.
/IN ABSOLUTE MODE, ADDRESSES ARE ALWAYS TYPED AS CONSTANTS.
.SP 2
↑-1.7←←/THE←/OPEN←/CELL
 /ONE OTHER MAJOR INGREDIENT OF THE ↑CDDT LANGUAGE IS THE ↑IOPEN ↑ICELL.
/CERTAIN COMMANDS CAUSE A CELL TO BE "OPENED".
/THIS MEANS THAT ITS CONTENTS ARE TYPED OUT (EXCEPT IN ENTER MODE, FOR WHICH
SEE THE ↑\ COMMAND), FOLLOWED BY A TAB.
/IF THE USER TYPES AN EXPRESSION FOLLOWED BY A CARRIAGE RETURN, IT WILL
BE INSERTED INTO THE CELL IN PLACE OF THE CURRENT CONTENTS, AND THEN THE CELL
WILL BE CLOSED.
/THE ↑ICURRENT ↑ILOCATION IS GIVEN THE SYMBOL "." (DOT) WHICH IS ALWAYS
HAS AS ITS VALUE THE ADDRESS OF THE LAST CELL OPENED, WHETHER OR NOT IT
IS STILL OPEN.
.SP
↑I/NOTE:
.SP
.FORMAT EXP
(1)\/COMMA AND STAR (FOR INDEXING AND INDIRECT ADDRESS) MAY BE USED IN
EXPRESSIONS AS THEY ARE USED IN THE ASSEMBLER; E.G., ↑CLDA* 0,2 HAS THE
VALUE 27640000.
.FILL
.SP
.FORMAT EXP
(2)\↑CDDT WILL RESPOND TO ANY ILLEGAL INPUT WITH THE CHARACTER ? FOLLOWED
BY A TAB (IF A CELL IS OPEN) OR CARRIAGE RETURN (OTHERWISE), AFTER WHICH
IT WILL BEHAVE AS IF NOTHING HAD BEEN TYPED SINCE THE LAST THE LAST TAB OR
CARRIAGE RETURN.
/THE COMMAND "?" ALSO ERASES EVERYTHING TYPED SINCE THE LAST TAB OR CARRIAGE
RETURN.
.FILL
.SP 2
↑-1.8←←/MEMORY←/ALLOCATION←AND←↑CDDT
 ↑CDDT MAY CAUSE THE /TIME-/SHARING /SYSTEM TO ASSIGN MEMORY FOR USE EITHER BY
↑CDDT ITSELF OR BY THE USER'S PROGRAM.
/D/D/T'S MEMORY IS USED TO HOLD THE SYMBOL TABLES, WHICH STARTS IN PAGE 0
AND GROWS UPWARD IN MEMORY.
/THE SYMBOL TABLE CONTRACTS AT THE END OF EACH LOAD OF A BINARY FILE AND WHEN
SYMBOLS ARE KILLED; THIS CONTRACTION MAY CAUSE MEMORY TO BE RELEASED.
 ↑CDDT ACQUIRES PROGRAM MEMORY WHEN IT IS REQUIRED FOR LOADING A BINARY FILE
OR WHEN A ;/U (EXECUTE) COMMAND IS GIVEN AND THE VALUE OF ;/F IS SUCH THAT
A NEW BLOCK IS NEEDED TO HOLD THE INSTRUCTION TO BE EXECUTED.
/FOR EXECUTING AN INSTRUCTION, ↑CDDT REQUIRES LOCATION ;/F, ;/F+1, ;/F+2.
/MEMORY IS NEVER GRABBED FOR EXAMINATION OF A REGISTER. /HOWEVER, ENTERING
INFORMATION IN CELLS WHICH ARE IN PAGES NOT IN THE MAP WILL CAUSE A BLOCK
OF MEMORY TO BE ASSIGNED FOR THAT PAGE.
/IF A CELL IS OPENED WHICH IS NOT ASSIGNED THEN ↑CDDT WILL TYPE A ? AND
A TAB, BUT THE CELL WILL REMAIN OPEN.
/INFORMATION MAY BE FILLED INTO SUCH A CELL.
 /IF AN ATTEMPT TO ACQUIRE OR REFERENCE MEMORY LEADS TO A TRAP, ↑CDDT TYPES
(/M) AND ABANDONS WHATEVER IT IS DOING.
/THIS CAN HAPPEN IF THE MACHINE SIZE IS EXCEEDED, OR IF AN ATTEMPT IS
MADE TO CHANGE READ-ONLY MEMORY.
.EJ
↑-2.0←←/D/D/T←/COMMANDS
 /IN THE FOLLOWING DESCRIPTION OF ↑CDDT COMMANDS, </S> WILL BE USED TO
DENOTE AN ARBITRARY SYMBOL.
</E> OR </W> WILL BE USED TO DENOTE AN ARBITRARY EXPRESSION WHICH MAY BE TYPED
BY THE USER. </E> WILL BE USED WHEN THE VALUE OF THIS EXPRESSION IS TRUNCATED
TO 14 BITS BEFORE IT IS USED BY ↑CDDT, WHILE </W> WILL DENOTE A FULL 24 BIT
EXPRESSION.
</A> WILL BE USED TO DENOTE AN ↑IOPTIONAL 14 BIT EXPRESSION.
/IF NONE IS TYPED, THE LAST EXPRESSION TYPED WILL USUALLY BE USED; DEVIATIONS
FROM THIS RULE WILL BE DESCRIBED UNDER THE INDIVIDUAL COMMANDS.
</F> WILL DENOTE A FILE NAME FOLLOWED BY A "." (DOT); ↑CDDT WILL TYPE A TAB
WHENEVER IT EXPECTS A FILE NAME.
.SP 2
↑-2.1←←/CELL←/OPENING←/COMMANDS
.SP
.FORMAT EXP
</A>↑/\/THIS OPENS THE CELL ADDRESSED BY THE VALUE OF </A>.
↑CDDT WILL GIVE A TAB, TYPE AN EXPRESSION WHOSE VALUE IS EQUAL TO THE CONTENTS
OF THE REGISTER, GIVE ANOTHER TAB AND AWAIT FURTHER COMMANDS.
/THE PRECISE FORM OF THE EXPRESSION TYPED IS DEPENDENT ON THE SETTING OF THE
WORD AND ADDRESS PRINTOUT MODES.
/IF THE USER TYPES IN AN EXPRESSION, ↑CDDT WILL INSERT THIS VALUE INTO THE
CELL.
/TYPING ANOTHER COMMAND CLOSES THE CELL, UNLESS IT IS A TYPE VALUE OR
SYMBOL DEFINTION COMMAND.
/IF ANOTHER ↑/ IS GIVEN AS THE NEXT COMMAND WITH NO PRECEEDING EXPRESSION, THE
CONTENTS OF THE CELL ADDRESSED BY THE EXPRESSION TYPED BY ↑CDDT ARE TYPED OUT.
/A FURTHER ↑/ REPEATS THIS PROCESS.
/NOTE, HOWEVER, THAT THE ORIGINAL CELL OPENED REMAINS THE OPEN CELL; ANY
CHANGES MADE WILL GO INTO THAT CELL.
/A FLOATING POINT NUMBER MAY BE INSERTED IN THE OPEN CELL AND THE FOLLOWING
CELL BY TYPIG A '%' FOLLOWED BY A FLOATING POINT NUMBER AND THEN CLOSING
THE CELL.
.FILL
.SP
.FORMAT EXP
/C/R\/CARRIAGE /RETURN. /THIS COMMAND DOES NOT NECESSARILY HAVE ANY EFECT.
/IF THE SPECIFIED CONDITIONS ARE PRESENT, HOWEVER, ANY OF THE FOLLOWING
ACTIONS MAY OCCUR:
.FILL
.SP
.FORMAT SUBEXP
(1)\/IF THERE IS AN OPEN CELL, THE CELL IS CLOSED.
.FILL
.SP
.FORMAT SUBEXP
(2)\/IF ↑CDDT IS IN ENTER MODE, IT LEAVES IT.
.FILL
.SP
.FORMAT SUBEXP
(3)\/IF ↑CDDT IS IN PATCH MODE, THE PATCH IS TERMINATED (FOR A FULLER
DESCRIPTION OF THIS EFFECT, SEE THE PATCH COMMAND IN /SECTION 2.10)
.FILL
.SP
.FORMAT EXP
</A>]\/THIS COMMAND HAS THE SAME EFFECT AS ↑/, EXCEPT THAT THE CONTENTS
OF THE CELL OPENED ARE ALWAYS TYPED IN SYMBOLIC FORM.
.FILL
.SP
.FORMAT EXP
</A>[\/THIS COMMAND HAS THE SAME EFFECT AS ↑/, EXCEPT THAT THE CONTENTS OF
THE CELL OPENED ARE TYPED IN CONSTANT FORM.
.FILL
.SP
.FORMAT EXP
</A>$\/THIS COMMAND HAS THE SAME EFFECT AS ↑/, EXCEPT THAT THE CONTENTS OF THE
CELL OPENED ARE TYPED AS A SIGNED INTEGER.
.FILL
.SP
.FORMAT EXP
</E>"\/THIS COMMAND ACTS LIKE ↑/, EXCEPT THAT THE CELL CONTENTS ARE TYPED
IN ↑CASCII.
/UNPRINTABLE CHARACTERS, AS IN ↑CQED, ARE PRECEEDED BY &, E.G., 141
(CONTROL - /A) PRINTS OUT AS &/A.
.FILL
.SP
.FORMAT EXP
</E>@\/THIS COMMAND HAS THE SAME EFFECT AS ↑/, EXCEPT THAT THE CONTENTS OF
THE CELL OPENED ARE PRINTED IN FORMATTED FORM.
/THE FORMAT WHICH IS USED IS DETERMINED BY THE VALUES OF THE TWO SPECIAL
SYMBOLS %/M AND %/N.
%/M IS A MASK OF BITS TO BE INCLUDED IN THE FIELDS.
/A BIT TURNED ON IN %/N INDICATES THE RIGHT-MOST BIT OF A FIELD.
/THE FORMATTING COMMANDS WILL ACT AS THOUGH THE RIGHT-MOST BIT OF %/N IS
TURNED ON WHETHER IT IS ON OR NOT.
/FOR EXAMPLE, IF CELL 400 CONTAINS 54356321/B AND %/N=10101/B AND
%/M=77770777/B, THEN WE GET:
.SP
.NOFILL
.CENTER
400@   5435 3 21
.SP
.FILL
.RM 10
/SUCCESSIVE FIELDS IN THE OPEN CELL AND THE FOLLOWING CELLS MAY BE CHANGED
BY TYPING EXPRESSIONS FOR THE NEW FIELD VALUES SEPARATED BY ";," . (I.E.,
333;,2;,11).
.ER
.SP
.FORMAT EXP
</E>;'\/THE CONTENTS OF LOCATIONS </E> AND </E>+1 ARE TREATED AS AN ↑CSPS
STRING POINTER, AND THE STRING IS PRINTED.
/CELL </E> IS OPENED.
.FILL
.SP
.FORMAT EXP
</E>%#\/THE CONTENTS OF LOCATIONS </E> AND </E>+1 ARE TREATED AS A FLOATING
POINT NUMBER WHICH IS PRINTED.
/CELL </E> IS OPENED.
.FILL
.SP
.FORMAT EXP
/L/F\/LINE /FEED. /THIS COMMAND OPENS THE CELL WHOSE ADDRESS IS THE CURRENT
LOCATION PLUS ONE, I.E. THE CELL AFTER THE ONE JUST OPENED.
/THE OUTPUT OF ↑CDDT ON THIS COMMAND IS CARRIAGE RETURN, LOCATION (FORMAT
CONTROLLED BY THE ADDRESS PRINTOUT MODE), ↑/, TAB, VALUE OF THE CONTENTS, TAB.
.SP
.FORMAT EXP
;< >\/THE BRACKETS INDICATE A SPACE.
/THIS IS EQUIVALENT TO LINE FEED EXCEPT THAT NOTHING IS PRINTED.
/ITS MAIN USE IS IN ENTERING PROGRAMS OR DATA, E.G.
.NOFILL
.SP
.IN 10
1000↑\   1; 2; 3      (CARRIAGE RETURN)
.SP
.IN 15
IS EQUIVALENT TO
.SP
.IN 10
1000↑\   1            (CARRIAGE RETURN)
.IN 10
1001↑\   2            (CARRIAGE RETURN)
.IN 10
1002↑\   3            (CARRIAGE RETURN)
.SP
.FILL
.FORMAT EXP
↑↑\/THIS COMMAND OPENS THE CELL WHOSE ADDRESS IS THE CURRENT LOCATION MINUS
ONE, I.E. THE PREVIOUS CELL.
/THE OUTPUT IS THE SAME AS FOR THE LINE FEED COMMAND.
.NOFILL
.SP
.RM 10
↑CABC↑/    ↑CLDA ↑CALPHA                  (LINE FEED)
↑CABC+1↑/  ↑CSTA ↑CBETA      ↑CSTA ↑CGAMMA    (LINE FEED)
↑CABC+2↑/  ↑CLDB ↑CDELTA     ↑↑
↑CABC+1↑/  ↑CSTA ↑CGAMMA
.FILL
.ER
.SP
.FORMAT EXP
(\/THIS COMMAND OPENS THE CELL WHOSE ADDRESS IS THE LAST 14 BITS OF THE VALUE
OF THE LAST EXPRESSION TYPED.
/THE OUTPUT IS SAME AS FOR LINE FEED.
.FILL
.SP
.FORMAT EXP
↑\\/THIS COMMAND IS THE SAME AS ↑/, EXCEPT THAT THE CONTENTS OF THE CELL ARE
NOT TYPED.
↑CDDT GOES INTO THE ENTER MODE, IN WHICH THE CONTENTS OF CELLS OPENED BY
LINE FEED, ↑↑, OR ( ARE NOT TYPED.
/MOST OTHER COMMANDS CAUSE ↑CDDT TO GO OUT OF THE ENTER MODE.
/IN PARTICULAR, CARRIAGE RETURN HAS THIS EFFECT.
/WHEN A CELL HAS BEEN OPENED WITH ↑\, ↑CDDT THINKS THAT IT HAS TYPED OUT
ITS CONTENTS.
/THE TYPE VALUE COMMAND WILL, THEREFORE, WORK ON THE CONTENTS OF THE CELL.
.FILL
.SP
/THE TYPE REGISTER SPECIAL MODE CHARACTERS [, ], $, ", ARE ALSO
PRESERVED BY LINE FEED, UP ARROW AND (.
.SP
.FORMAT EXP
;↑\\/THIS COMMAND SUPRESSES TYPEOUT OF CELL ADDRESSES DURING LINE FEED, UP
ARROW AND ( CHAINS.
/CARRIAGE RETURN CANCELS THE COMMAND.
.FILL
.EJ
↑-2.2←←/TYPE←/VALUE←/COMMANDS
.SP
.FORMAT EXP
=\/THIS COMMAND TYPES THE VALUE OF THE LAST EXPRESSION TYPED (;↑CQ) IN CONSTANT
FORM.
/IT MAY APPEAR IN THE FORM </W>=, IN WHICH CASE THE VALUE OF </W> IS TYPED.
/OTHERWISE, THE EXPRESSION REFERRED TO IS THE ONE MOST CURRENTLY TYPED,
EITHER BY ↑CDDT OR BY THE USER.
.FILL
.SP
.FORMAT EXP
#\/THIS COMMAND TYPES THE VALUE OF ;/Q AS A SIGNED INTEGER.
.FILL
.SP
.FORMAT EXP
<↑B-\/THIS COMMAND TYPES THE VALUE OF ;/Q IN SYMBOLIC FORM.
.FILL
.SP
.FORMAT EXP
'\/THIS COMMAND TYPES THE VALUE OF ;/Q TYPED AS A WORD OF TEXT (SEE " COMMAND
ON PAGE 9).
.FILL
.SP
.FORMAT EXP
>\/THIS COMMAND TYPES THE VALUE OF ;/Q IN FORMATTED FORM. (SEE THE </A>@
COMMAND).
.FILL
.SP
.NOFILL
.RM 15
/EXAMPLE:
.SP
↑ULDA=              7600000
LDA 10=           7600010
LDA<↑B-              LDA 0
7600000<↑B-          LDA 0
-1=               77777777
-1#               -1
10221043'         ABC↑L
.SP
.FILL
.ER
.FORMAT EXP
;<↑B-\/THIS COMMAND TYPES ;/Q AS A CHARACTER ADDRESS, E.G. IF THE VALUE OF
THE SYMBOL /X IS 1000, THEN 3002;<↑B- YIELDS /X;+2.
/ALSO, THE CURRENT LOCATION IS SET TO THE WORD ADDRESS OF THE CHARACTER.
.FILL
.SP
.FORMAT EXP
;'\/THIS COMMAND TYPES THE STRING POINTED TO BY THE CONTENTS OF THE CURRENT
LOCATION AND THE FOLLOWING CELL, CONSIDERED AS A ↑CSPS STRING POINTER.
.FILL
.SP
.FORMAT EXP
</E>,</E>;'\/THIS COMMAND TYPES THE STRING POINTED TO BY THE PAIR OF
EXPRESSIONS CONSIDERED AS AN ↑CSPS STRING POINTER.
.FILL
.SP
.FORMAT EXP
%#\/THIS COMMAND TYPES THE CONTENTS OF THE CURRENT LOCATION AND THE
FOLLOWING CELL CONSIDERED AS A FLOATING POINT NUMBER.
.FILL
.SP
.FORMAT EXP
</E>,</E>%#\/THIS COMMAND TYPES THE PAIR OF EXPRESSIONS CONSIDERED AS A
FLOATING POINT NUMBER.
.FILL
.SP 2
↑-2.3←←/SYMBOL←/DEFINITION←AND←/KILLING←/COMMANDS
.SP
/THESE COMMANDS ALL DEFINE THE SYMBOL AS A GLOBAL.
.SP
.FORMAT EXP
</S>:\/THIS COMMAND DEFINES THE VALUE OF THE SYMBOL </S> TO BE THE CURRENT
LOCATION.
.FILL
.SP
.FORMAT EXP
</W><↑B<</S>:\/THIS COMMAND DEFINES </S> TO HAVE THE VALUE OF </W>.
.FILL
.SP
.FORMAT EXP
</W><↑B<</S>;/O\/THIS COMMAND DEFINES </S> AS AN OPCODE WITH VALUE </W>.
.FILL
.SP
.FORMAT EXP
;/K\↑C(KILL) /THIS COMMAND RESETS /D/D/T'S SYMBOL TABLE TO ITS INITIAL
STATE. ↑CDDT WILL TYPE BACK "--/O/K" AND WAIT FOR A CONFIRMING DOT.
/ANY OTHER CHARACTER WILL ABORT THE COMMAND.
.FILL
.SP
.FORMAT EXP
</S>;/K\↑C(KILL) /THIS COMMAND REMOVES ONLY THE SYMBOL </S> FROM THE SYMBOL
TABLE.
.FILL
.SP
.FORMAT EXP
</S>&;/K\↑C(KILL) /THIS COMMAND REMOVES ALL SYMBOLS LOCAL TO TO THE BLOCK
NAMED </S> FROM THE SYMBOL TABLE, AS WELL AS REMOVING THE BLOCK NAME ITSELF.
.FILL
.SP
.FORMAT EXP
%/K\/THIS COMMAND WILL REMOVE ↑IALL UNDEFINED SYMBOLS FROM /D/D/T'S SYMBOL
TABLE.
/THIS IMPLIES THAT ALL REFERENCES TO UNDEFINED SYMBOLS WILL BE LOST.
↑CDDT WILL TYPE "--/O/K" AND EXPECT A CONFIRMING DOT.
.FILL
.SP 2
↑-2.4←←/MODE←/CHANGING←/COMMANDS
.SP
.FORMAT EXP
"\/THIS COMMAND IS FOLLOWED BY A STRING OF ARBITRARY CHARACTERS TERMINATED
BY CONTROL-/D.
/IF A CELL IS OPEN, THE STRING WILL BE INSERTED INTO SUCCESSIVE LOCATIONS
PACKED 3 CHARACTERS PER WORD; OTHERWISE, CHARACTERS BEYOND THE THIRD
WILL BE THROWN AWAY AND THE RESULT TREATED AS A CONSTANT.
/FOR EXAMPLE, IF NO REGISTER IS OPEN, "↑UABCDE↑LCONTROL-/D= YIELDS 10221043.
.FILL
.SP
.FORMAT EXP
;/D\↑C(DECIMAL) /THIS COMMAND CHANGES THE CURRENT RADIX TO DECIMAL.
(SEE /SECTION 1.4).
.FILL
.SP
.FORMAT EXP
;/O\↑C(OCTAL) /THIS COMMAND CHANGES THE CURRENT RADIX TO OCTAL.
.FILL
.SP
.FORMAT EXP
</E>;/R\↑C(RADIX) /THIS COMMAND SETS THE CURRENT RADIX TO THE VALUE OF THE
EXPRESSION, WHICH MUST BE GREATER THAN OR EQUAL TO 2.
.FILL
.SP
.FORMAT EXP
;[\↑C(CONSTANT) /THIS COMMAND CHANGES THE WORD PRINTOUT MODE TO CONSTANT,
I.E., MAKES ↑/ EQUIVALENT TO [.
.FILL
.SP
.FORMAT EXP
;]\↑C(SYMBOLIC) /THIS COMMAND CHANGES THE WORD PRINTOUT MODE TO SYMBOLIC,
I.E., MAKES ↑/ EQUIVALENT TO ].
.FILL
.SP
.FORMAT EXP
;"\↑C(ASCII) /THIS COMMAND MAKES ↑/ EQUIVALENT TO ".
.FILL
.SP
.FORMAT EXP
;$\↑C(SIGNED ↑CINTEGER) /THIS COMMAND MAKES ↑/ EQUIVALENT TO $.
.FILL
.SP
.FORMAT EXP
;@\↑C(FORMATTED) /THIS COMMAND MAKES ↑/ EQUIVALENT TO @.
.FILL
.SP
.FORMAT EXP
;/R\↑C(RELATIVE) /THIS COMMAND CHANGES THE ADDRESS PRINTOUT MODE TO RELATIVE
(SYMBOLIC).
/THIS DETERMINES THE FORMAT FOR THE OUTPUT OF ADDRESSES, BOTH IN
SYMBOLIC EXPRESSIONS AND WHEN GENERATED BY LINE FEED AND UP ARROW.
.FILL
.SP
.FORMAT EXP
;/V\↑C(ABSOLUTE) /THIS COMMAND CHANGES THE ADDRESS PRINTOUT MODE TO ABSOLUTE.
.FILL
.SP
.FORMAT EXP
;3\(3 ↑CCHARS↑/WORD) /THIS SETS THE " AND ' COMMANDS TO ACT ON 8 BIT
CHARACTERS PACKED 3 PER WORD.
.FILL
.SP
.FORMAT EXP
;4\(4 ↑CCHARS↑/WORD) /THIS COMMAND SETS " AND ' COMMANDS TO OPERATE ON 6
BIT CHARACTERS PACKED 4 PER WORD.
.FILL
.SP 2
↑-2.5←←/BREAKPOINT←/COMMANDS
.SP
 /THERE ARE FOUR BREAKPOINTS IN ↑CDDT.
/THE FIRST ONE IS CALLED THE SPECIAL BREAKPOINT.
/THE REMAINING 3 ARE CALLED REGULAR BREAKPOINTS.
/IF A PROGRAM ATTEMPTS TO EXECUTE THE INSTRUCTION AT AN ADDRESS AT WHICH
A BREAKPOINT IS SET, CONTROL RETURNS TO ↑CDDT WHICH WILL PRINT A BREAK MESSAGE
AND AWAIT FURTHER COMMANDS.
/THE BREAK OCCURS BEFORE THE EXECUTION OF THE INSTRUCTION IN THE BREAKPOINT
LOCATION.
;/L IS SET TO THE LOCATION AT WHICH THE BREAK OCCURED.
/THE BREAK MESSAGE WILL NORMALLY PRINT THE ADDRESS OF THE BREAK FOLLOWED BY
THE CONTENTS OF ANY OF THE CENTRAL REGISTERS WHICH HAVE CHANGED SINCE THE
LAST BREAK.
/IF IT IS THE FIRST BREAK AFTER A ;/G THEN ALL THE REGISTERS WILL BE TYPED.
/FURTHERMORE, IF A REGISTER HAS NOT BEEN PRINTED IN THE LAST TEN BREAK
MESSAGES, THEN IT WILL BE PRINTED ANYWAY IN THE FORM ;/A=<EXPRESSION>, INSTEAD
OF THE NORMAL FORM ;/A<↑B-<EXPRESSION>/
/THE CONTENTS OF THE BREAK LOCATION WILL ALSO BE TYPED IN THE BREAK MESSAGE
IF THE SPECIAL SYMBOL %/I IS SET TO A NON-NEGATIVE VALUE.
/THE TYPING OF THE BREAK ADDRESS CAN BE SUPRESSED BY SETTING THE SPECIAL
SYMBOL %/P TO A NON-NEGATIVE VALUE.
/IF ONE INSTRUCTION IS EXECUTED BY THE ;/N OR ;/S COMMANDS, THEN THE BREAK
MESSAGE WILL INCLUDE THE ADDRESS AND NEW CONTENTS OF ANY CELL MODIFIED AS A
RESULT OF EXECUTING THAT INSTRUCTION.
/IN ADDITION TO THESE BREAKPOINTS THERE IS THE CONDITIONAL BREAKPOINT
FACILITY (SEE THE SECTION ON CONDITIONAL BREAKING).
.SP
.FORMAT EXP
</E>!\↑C(SET ↑CSPECIAL ↑CBREAKPOINT) /THIS COMMAND SETS THE SPECIAL
BREAKPOINT TO THE VALUE </E>.
/THE PREVIOUS VALUE OF THE SPECIAL BREAKPOINT WILL OF COURSE BE LOST.
.FILL
.SP
.FORMAT EXP
!\↑C(CLEAR ↑CSPECIAL ↑CBREAKPOINT) /THIS COMMAND CLEARS THE SPECIAL BREAKPOINT.
.FILL
.SP
.FORMAT EXP
</E>;!\↑C(SET ↑CSPECIAL ↑CBREAKPOINT) /THIS COMMAND SETS A REGULAR BREAKPOINT TO
THE VALUE </E>.
/IF ALL THE REGULAR BREAKPOINTS ARE ALREADY SET THEN ↑CDDT WILL TYPE BACK
"↑CFULL?".
/IF A BREAKPOINT ALREADY EXISTS WITH THAT VALUE THEN ↑CDDT WILL TYPE A "?".
.FILL
.SP
.FORMAT EXP
</E>%!\↑C(CLEAR ↑CREGULAR ↑CBREAKPOINT) /THIS COMMAND WILL CLEAR A REGULAR
BREAKPOINT THAT HAS THE VALUE </E>.
IF NO SUCH BREAKPOINT EXISTS, THEN ↑CDDT WILL TYPE "?".
.FILL
.SP
.FORMAT EXP
%!\↑C(CLEAR ↑CALL ↑CBREAKPOINTS) /THIS COMMAND CLEARS ALL 4 BREAKPOINTS.
.FILL
.SP
.FORMAT EXP
;!\↑C(LIST ↑CBREAKPOINTS) /THIS COMMAND LISTS ALL BREAKPOINTS, THE
SPECIAL BREAKPOINT FIRST.
.FILL
.SP 2
↑-2.6←←/CONDITIONAL←/BREAKING
.SP
 /CONDITIONAL BREAKING IS A FEATURE WHICH ALLOWS THE USER TO RUN A PROGRAM
AND HAVE IT BREAK ON THE EXACT INSTRUCTION WHEN A SPECIFIED CONDITION BECOMES
TRUE.
/CONDITIONAL BREAKING IS IMPLEMENTED BY LOADING AN INTERPRETER AT ;/F WHEN
CONTROL IS TRANSFERRED TO THE USER PROGRAM.
/THEREFORE, IF CONDITIONAL BREAKING IS USED, APPROXIMATELY 200 CELLS FOLLOWING
;/F WILL BE CLOBBERED.
/CONDITIONAL BREAK MODE IS ENTERED BY SETTING THE SYMBOL %/B TO A NON-NEGATIVE
NUMBER.
/A NEGATIVE VALUE OF %/B RETURNS ↑CDDT TO NORMAL BREAK MODE.
/TO USE CONDITIONAL BREAKING, PUT ↑CDDT IN CONDITIONAL BREAK MODE AND
SPECIFY A CONDITION TO BREAK ON USING THE %/E COMMAND.
/THEREAFTER, ANY TRANSFER OF CONTROL TO THE USER PROGRAM WILL CAUSE
CONDITIONAL BREAKING TO TAKE EFFECT.
/A USER PROGRAM WILL EXECUTE ABOUT 15 TIMES SLOWER IN CONDITIONAL
BREAK MODE.
 /TO SPECIFY A BREAK CONDITION TYPE %/E.
↑CDDT WILL THEN TYPE A CARRIAGE RETURN AND EXPECT THE USER TO TYPE A LOGICAL
EXPRESSION WHICH OBEYS THE FOLLOWING SYNTAX.
/A CONDITIONAL EXPRESSION IS TERMINATED WITH A /CONTROL-/D.
/CONTROL-/A MAY BE USED TO DELETE CHARACTERS TYPED.
/WHEN THE VALUE OF THIS EXPRESSION BECOMES TRUE THEN THE CONDITION IS
SATISFIED AND ↑CDDT WILL CAUSE THE USER PROGRAM TO BREAK.
.SP
.IN 5
↑I/SYNTAX:
.SP
.FORMAT EXP
<EXPR>\<↑B- ANY NUMBER OF <TERM> SEPARATED BY !
.FILL
.SP
.FORMAT EXP
<TERM>\<↑B- ANY NUMBER OF <PRIMARY> SEPARATED BY *
.FILL
.SP
.FORMAT EXP
<PRIMARY>\<↑B- <OPERAND1> <RELATIONAL> <OPERAND2>
.FILL
.SP
.FORMAT EXP
<RELATNL>\<↑B- = OR # OR > OR < OR <= OR >=
.FILL
.SP
.FORMAT EXP
<OPERND1>\<↑B- ANY NUMBER OF <OPERAND2> SEPARATED BY <OPERATOR>
.FILL
.SP
.FORMAT EXP
<OPERATOR>\<↑B- + OR - OR @ OR BLANK
.FILL
.SP
.FORMAT EXP
<OPERND2>\<↑B- [$] (<CONSTANT> OR <SYMBOL> OR <SPECIAL SYMBOL>
.FILL
.SP
.FORMAT EXP
<SP.SYMBL>\<↑B- ;/A OR ;/B OR ;/X OR ;/L OR ;/E OR ;/O
.FILL
.SP
/A CONSTANT MAY BE ANY LEGAL ↑CDDT CONSTANT.
/A SYMBOL MAY BE ANY DEFINED SYMBOL OPTIONALLY PRECEEDED BY A BLOCK NAME
AND &.
.SP
.IN 5
↑I/SEMANTICS:
 /EXPRESSIONS ARE COMPILED LEFT TO RIGHT.
/THE STRENGTH OF BINDING OF OPERATORS IS AS FOLLOWS:
.SP
<OPERATORS>,<RELATIONALS>,*,!.
.SP
.FORMAT EXP
!\MEANS ↑CCR
.FILL
.SP
.FORMAT EXP
*\MEANS ↑CAND
.FILL
.SP
.FORMAT EXP
@\MEANS ↑CMASK I.E. EXTRACT SECOND OPERAND FROM FIRST OPERAND.
.FILL
.SP
.FORMAT EXP
$\MEANS LITERAL AS OPPOSED TO "CONTENTS OF".
.FILL
.SP
.FORMAT EXP
BLANK\MEANS ADDRESS ADD, E.G. "/B 3" IS THE CONTENTS OF /B+3
.FILL
.SP
.FORMAT EXP
+\MEANS ADD
.FILL
.SP
.FORMAT EXP
-\MEANS SUBTRACT
.FILL
.SP
.FORMAT EXP
;/A,;/B,;/X\ARE THE CONTENTS OF THE CENTRAL REGISTERS.
.FILL
.SP
.FORMAT EXP
;/L\IS THE PROGRAM COUNTER.
.FILL
.SP
.FORMAT EXP
;/E\IS THE EFFECTIVE ADDRESS OF THE CURRENT INSTRUCTION.
.FILL
.SP
.FORMAT EXP
;/O\IS THE 7-BIT OPCODE FIELD OF THE CURRENT INSTRUCTION RIGHT JUSTIFIED.
.FILL
.SP
/EXAMPLES:
.CE
/A 3=;/E*;/O=$43!/B+3=$123
 /THIS EXPRESSION WILL CAUSE CONDITIONAL BREAKING IF THE CONTENTS OF /A+3
IS EQUAL TO THE EFFECTIVE ADDRESS OF THE CURRENT INSTRUCTION AT THE SAME TIME
THAT THE OPCODE OF THE CURRENT INSTRUCTION IS 43 OR IF THE CONTENTS OF /B PLUS
THE CONTENTS OF 3 EQUALS 123.
.SP 2
↑-2.7←←/PROGRAM←/EXECUTION←/COMMANDS
.SP
.FORMAT EXP
</A>,</A>;/G\(/G/O /T/O) /THIS COMMAND ALLOWS TRANSFER OF CONTROL TO THE USER PROGRAM.
/THE FIRST ARGUMENT, IF GIVEN, SPECIFIES THE STARTING ADDRESS.
/THE SECOND ARGUMENT, IF GIVEN, SPECIFIES THE NUMBER OF BREAKPOINTS THE PROGRAM
WILL PASS THROUGH BEFORE THE PROGRAM HALTS.
/THE FIRST ARGUMENT, IF MISSING, IS ASSUMED TO BE THE CURRENT LOCATION.
/THE SECOND ARGUMENT, IF MISSING, IS ASSUMED TO BE ONE.
/IF THERE ARE ANY UNDEFINED SYMBOLS IN /D/D/T'S SYMBOL TABLE, THEN ↑CDDT WILL
TYPE "--/O/K" AND EXPECT A CONFIRMING DOT TO BE TYPED BEFORE IT WILL ALLOW
TRANSFER OF CONTROL TO THE USER PROGRAM.
/THIS IS TRUE ALSO OF ALL THE OTHER PROGRAM EXECUTION COMMANDS.
.SP
.FORMAT EXP
</A>,</A>;/P\↑C(PROCEED) /THIS COMMAND ALSO CAUSES TRANSFER OF CONTROL TO
THE USER PROGRAM, BUT IT IS DESIGNED TO RESTART A PROGRAM AFTER A BREAKPOINT.
/IT IS IDENTICAL TO THE ;/G COMMAND, WITH THE FOLLOWING EXCEPTIONS.
/THE ;/P COMMAND WILL NOT BREAK ON THE FIRST INSTRUCTION EXECUTED IF A
BREAKPOINT IS SET AT THAT ADDRESS, WHEREAS THE ;/G COMMAND WILL BREAK.
/THE ARGUMENTS OF THE ;/P COMMAND ARE INTERPRETED IN THE OPPOSITE ORDER
OF THE ;/G COMMAND.
/ALL CENTRAL REGISTERS WILL BE PRINTED AT A BREAK AFTER A ;/G COMMAND,
WHILE ONLY THE CHANGED CENTRAL REGISTERS ARE PRINTED AFTER THE ;/P  COMMAND.
.FILL
.SP
.FORMAT EXP
</A>,</A>;/V\↑C(ADVANCE) /THIS COMMAND IS IDENTICAL TO THE ;/P COMMAND EXCEPT
THAT A BREAK MESSAGE IS PRINTED AT EVERY BREAKPOINT ENCOUNTERED DURING
EXECUTION OF THE PROGRAM, WHEREAS ;/P WILL PRINT A BREAK MESSAGE ONLY AFTER
THE LAST BREAKPOINT.
.FILL
.SP
.FORMAT EXP
</A>,</A>;/N\↑C(NEXT) /THIS COMMAND CAUSES THE NUMBER OF INSTRUCTIONS SPECIFIED
BY THE FIRST ARGUMENT TO BE EXECUTED STARTING AT THE ADDRESS SPECIFIED BY THE
SECOND ARGUMENT.
/IF THE FIRST ARGUMENT IS OMMITED THEN ;/L IS ASSUMED.
/A BREAK MESSAGE IS PRINTED AT THE END OF THE EXECUTION.
.FILL
.SP
.FORMAT EXP
</A>,</A>;/S\↑C(STEP) /THIS COMMAND IS IDENTICAL TO THE ;/N COMMAND EXCEPT
THAT A BREAK MESSAGE IS PRINTED AFTER THE EXECUTION OF EVERY INSTRUCTION.
.FILL
.SP
.FORMAT EXP
</E>;/U\↑C(EXECUTE) /THIS COMMAND CAUSES THE VALUE OF THE EXPRESSION TO BE
EXECUTED AS AN INSTRUCTION.
/IF IT IS A BRANCH, CONTROL GOES TO THE LOCATION BRANCHED TO.
/IN ALL OTHER CASES CONTROL REMAINS WITH ↑CDDT.
/A SINGLE CARRIAGE RETURN IS TYPED BEFORE EXECUTION OF THE INSTRUCTION.
/IF THE INSTRUCTION DOES NOT BRANCH AND DOES NOT SKIP, OR RETURNS TO THE
FOLLOWING LOCATION, A $ AND ANOTHER CARRIAGE RETURN ARE TYPED AFTER ITS
EXECUTION.
/IF THE INSTRUCTION DOES SKIP, TWO DOLLAR SIGNS ($$) ARE TYPED FOLLOWED BY
A CARRIAGE RETURN.
.FILL
.SP
 ↑CDDT MAY BE PUT IN POP TRACE MODE BY SETTING THE SPECIAL SYMBOL %/O TO
A NON-NEGATIVE VALUE.
/A NEGATIVE VALUE WILL CAUSE ↑CDDT TO LEAVE POP TRACE MODE.
/IN POP TRACE MODE ALL PROGRAMMED OPERATORS TOGETHER WITH THEIR ASSOCIATED
SUBROUTINES WILL BE TREATED LIKE MACHINE INSTRUCTIONS FOR THE ;/N AND ;/S
COMMANDS, I.E., THE BREAK WILL NOT OCCUR UNTIL CONTROL RETURNS TO THE
LOCATION FOLLOWING THE POP.
/SINCE ↑CDDT DETERMINES WHEN IT SHOULD BREAK BY COUNTING /P/O/PS, /B/R/MS,
/S/B/R/MS, /B/R/R/S, AND /S/B/R/RS, IT CAN BE FOOLED BY /P/O/PS WHICH DO
SUFFICIENTLY PECULIAR THINGS.
 ↑CDDT CAN BE PUT IN SUBROUTINE TRACE MODE BY SETTING THE SPECIAL SYMBOL %/U
TO A NON-NEGATIVE VALUE AND REMOVED FROM THIS MODE BY SETTING %/U TO A
NEGATIVE VALUE.
/IN SUBROUTINE TRACE MODE /B/R/MS AND /S/B/R/MS TOGETHER WITH THEIR
ASSOCIATED SUBROUTINES WILL BE TREATED AS SINGLE INSTRUCTION BY THE ;/N
AND ;/S COMMANDS.
 /ATTEMPTS TO PROCEED THROUGH CERTAIN INSTRUCTIONS HAVING TO DO WITH FORKS
WILL PRODUCE ERRONEOUS RESULTS, AND BREAKPOINTS ENCOUNTERED WHEN THE PROGRAM
IS RUNNING IN A FORK WILL NOT DO THE RIGHT THING.
/ATTEMPTS TO PROCEED THROUGH UNREASONABLE INSTRUCTIONS WILL CAUSE THE ERROR
COMMENT $>> TO BE TYPED BY ↑CDDT.
/ALSO, WHEN CONTROL RETURNS TO ↑CDDT FROM A BREAKPOINT OR RUBOUT, THE
INTERRUPT MASK FOR THE PROGRAM IS CLEARED.
.SP 2
↑-2.8←←/INPUT↑//OUTPUT←/COMMANDS
.SP
.FORMAT EXP
</A>;/Y </F>\↑CDDT EXPECTS TO FIND A BINARY PROGRAM ON THE FILE </F>.
/IF THE PROGRAM IS ABSOLUTE, IT IS LOADED IN.
/IF IT IS RELOCATBLE, IT IS READ IN AND RELOCATED AT THE LOCATION SPECIFIED
BY </A>.
/IF THE EXPRESSION IS OMITTED, RELOCATABLE LOADING COMMENCES AT LOCATION ;/F.
;/F IS UPDATED WHEN THE FILE IS LOADED.
/AFTER READING IS COMPLETE, THE FIRST LOCATION NOT USED BY THE PROGRAM IS
TYPED OUT.
/ANY LOCAL SYMBOLS OR OPCODE DEFINITIONS ON THE BINARY FILE ARE IGNORED.
.FILL
.SP
.FORMAT EXP
</A>;/T </F>\/THIS COMMAND IS IDENTICAL TO ;/Y EXCEPT THAT IT ALSO READS LOCAL
SYMBOLS AND OPCODE DEFINTIONS FROM THE FILE AND ADDS THEM TO /D/D/T'S SYMBOL
TABLE.
/ANY SYMBOLS ON THE FILE WILL BE RECOGNIZED BY ↑CDDT THEREAFTER.
.FILL
.SP
.FORMAT EXP
</A>%/Y </F>\/THIS COMMAND IS IDENTICAL TO THE ;/Y COMMAND EXCEPT THAT IT
WILL ALSO READ IN OPCODE DEFINITIONS AND PUT THEM IN /D/D/T'S SYMBOL TABLE,
BUT IT WILL STILL IGNORE LOCAL SYMBOL DEFINITIONS.
.FILL
.SP
/THE FOLLOWING TWO POINTS SHOULD BE NOTED IN CONNECTION WITH ;/Y, %/Y, OR
;/T COMMANDS.
.SP
.FORMAT SUBEXP
(1)\/THE USE OF AN EXPRESSION BEFORE ;/T, OR %/Y OR ;/Y WHEN THE
FILE IS ABSOLUTE (I.E. ↑CSAVE FILE) IS AN ERROR.
.FILL
.SP
.FORMAT SUBEXP
(2)\/THE BLOCK READ IN BECOMES THE PRIMARY BLOCK.
.FILL
.SP
.FORMAT SUBEXP
(3)\/SEVERAL FILES CAN BE LOADED IN A ROW WITH GREATER SPEED IF A SEMI-COLON
IS USED FOR THE FILE NAME TERMINATOR INSTEAD OF A DOT.
/USING A SEMI-COLON CAUSES THE RESORTING OF THE ↑CDDT SYMBOL TABLE TO BE
SUPRESSED AT THE END OF LOADING.
.FILL
.SP
.FORMAT EXP
;/W </F>\/CAUSES ALL GLOBAL SYMBOLS WITH THEIR VALUES TO BE WRITTEN ON THE
SPECIFIED FILE, IN A FORMAT WHICH CAN BE READ BACK IN WITH ;/T.
.FILL
.SP
.FORMAT EXP
;/C </F>\/CAUSES ALL SYMBOLS TO BE WRITTEN ON THE SPECIFIED FILE.
.FILL
.SP 2
↑-2.9←←/SEARCH←/COMMANDS
.SP
.FORMAT EXP
</W>;/W\↑C(WORD ↑CSEARCH) /THIS COMMAND SEARCHES MEMORY BETWEEN THE LIMITS
;1 AND ;2 FOR CELLS WHOSE CONTENTS MATCH </W> WHEN BOTH ARE MASKED BY THE
VALUE OF ;/M.
/THE LOCATIONS AND CONTENTS OF ALL SUCH CELLS ARE TYPED OUT.
.FILL
.SP
.FORMAT EXP
</W><↑B<</W>;/W\/WILL PERFORM THE SAME SEARCH, AND IN ADDITION PERFORMS
THE FOLLOWING REPLACEMENT: IF /Q IS THE ADDRESS OF A CELL SUCH THAT (/Q)
[↑CAND] ;/M=2ND</W>, THEN THE MASKED PART OF 1ST</W> WILL REPLACE THE MASKED PART OF
(/Q).
.FILL
.SP
.FORMAT EXP
</W>;#\↑C(NOT ↑CWORD ↑CSEARCH) /THIS IS THE SAME AS ;/W EXCEPT THAT ALL
CELLS WHICH DO NOT MATCH </W> WILL BE PRINTED.
/THIS IS USEFUL, FOR EXAMPLE, IN FINDING AND PRINTING ALL NON-ZERO CELLS
IN A GIVEN PART OF MEMORY.
.FILL
.SP
.FORMAT EXP
</E>;/E\↑C(EFFECTIVE ↑CADDRESS ↑CSEARCH) /THIS COMMAND SEARCHES MEMORY BETWEEN THE
LIMITS ;1 AND ;2 FOR EFFECTIVE ADDRESSES EQUAL TO </E>.
/INDEXING, IF SPECIFIED, IS DONE WITH THE VALUE OF ;/X.
/INDIRECT ADDRESS CHAINS ARE FOLLOWED TO A DEPTH OF 64.
/THE ADDRESSES AND CONTENTS OF ALL WORDS FOUND ARE TYPED OUT.
/WHEN ;/W OR ;/E IS COMPLETE, '.' IS LEFT POINTING TO THE LAST CELL TYPED
OUT.
.FILL
.SP 2
↑-2.10←/PATCH←/COMMANDS
.SP
.FORMAT EXP
;)\/THIS COMMAND CAUSE A PATCH TO BE INSERTED BEFORE THE INSTRUCTION IN THE
OPEN CELL.
/A CELL MUST BE OPEN FOR THIS COMMAND TO BE LEGAL.
↑CDDT INSERTS IN THIS LOCATION A BRANCH TO THE CURRENT VALUE OF ;/F.
/WHEN THE PATCH IS DONE, ;/F IS UPDATED.
/IT THEN GIVES A CARRIAGE RETURN AND A ) AND WAITS FOR THE USER TO TYPE IN
THE PATCH.
/LEGAL INPUT CONSISTS OF A SERIES OF EXPRESSIONS WHOSE VALUES ARE INSERTED IN
SUCCESSIVE LOCATIONS IN MEMORY.
/EACH OF THESE EXPRESSIONS SHOULD BE TERMINATED BY A LINE FEED OR ;(SPACE),
EXACTLY AS THOUGH THE PROGRAM WERE BEING TYPED IN WITH THE ↑\ COMMAND
INSTEAD OF AS A PATCH.
/THE ↑↑ COMMAND MAY BE GIVEN IN PLACE OF THE LINE FEED AND HAS ITS USUAL
MEANING, EXCEPT THAT THE CONTENTS OF THE PREVIOUS LOCATION ARE NOT TYPED.
/TWO OTHER COMMANDS ARE IN PATCH MODE.
/THEY ARE:
.SP
.FORMAT SUBEXP
(1)\/COLON, WHICH MAY BE USED TO DEFINE A SYMBOL WITH VALUE EQUAL TO THE
CURRENT LOCATION.
.FILL
.SP
.FORMAT SUBEXP
(2)\/CARRIAGE /RETURN, WHICH TERMINATES THE PATCH.
/WHEN THE PATCH IS TERMINATED, ↑CDDT INSERTS IN THE NEXT AVAILABLE LOCATION
THE ORIGINAL CONTENTS OF THE LOCATION AT WHICH THE PATCH WAS INSERTED.
/IT THEN INSERTS IN THE FOLLOWING TWO LOCATIONS BRANCH INSTRUCTIONS TO THE
FIRST AND SECOND LOCATIONS FOLLOWING THE PATCH.
/THIS MEANS THAT IF THE PATCHED INSTRUCTION IS A SKIP INSTRUCTION, THE
PROGRAM WILL CONTINUE TO OPERATE CORRECTLY.
/ANY OTHER COMMAND GIVEN IN PATCH MODE MAY CAUSE UNPREDICTABLE ERRORS.
.FILL
.SP
.FORMAT EXP
;(\/THIS COMMAND IS IDENTICAL TO ;) COMMAND EXCEPT THAT IT PUTS THE INSTRUCTION
BEING PATCHED BEFORE THE NEW CODE INSERTED BY THE USER INSTEAD OF AFTER.
.FILL
.SP 2
↑-2.11←/MISCELLANEOUS←/COMMANDS
.SP
.FORMAT EXP
;/Z\↑C(ZERO) </E>,</E>;/Z
/SETS TO ZERO ALL LOCATIONS BETWEEN THE VALUE OF
THE FIRST EXPRESSION AND THAT OF THE SECOND.
</E><↑B<</E>,</E>;/Z SETS TO THE VALUE OF THE FIRST EXPRESSION ALL
LOCATIONS BETWEN THE VALUES OF THE SECOND AND THIRD.
;/Z ALONE RELEASES ALL MEMORY ACCESSIBLE TO THE USER'S PROGRAM.
↑CDDT WILL TYPE BACK "--/O/K" AND WAIT FOR A CONFIRMING DOT.
/IF THIS MEMORY IS RETURNED, DUE TO LATER ACCESS BY ↑CDDT OR A PROGRAM, IT
WILL BE CLEARED TO ZERO.
.FILL
.SP
.FORMAT EXP
%&\↑C(LIST ↑CBLOCKS) /THIS COMMAND CAUSES ALL BLOCKS KNOWN TO ↑CDDT TO
BE LISTED.
/IF PRINTING OF SYMBOLS IN THAT BLOCK HAS BEEN SUPRESSED, THEN A ;] WILL
BE TYPED FOLLOWING THE BLOCK NAME.
.FILL
.SP
.FORMAT EXP
</S>;]\↑C(SUPRESS) /THIS COMMAND CAUSES SYMBOLS IN THE GIVEN BLOCK </S> TO
BE IGNORED WHEN ↑CDDT PRINTS SYMBOLIC ADDRESSES.
.FILL
.SP
.FORMAT EXP
</S>;[\/THIS COMMAND REVERSES THE ACTION CAUSED BY THE ;] COMMAND.
.FILL
.SP
.FORMAT EXP
%/F\/THIS COMMAND ALLOWS THE USER TO EXIT ↑CDDT, RETURNING TO THE EXECUTIVE
COMMAND PROCESSOR (@) OF THE ↑CBCC 500.
.FILL
.SP
.FORMAT EXP
%/R\↑C(PRINT ↑CMAP) /THE CURRENT PROGRAM MAP IS PRINTED.
.FILL
.SP
.FORMAT EXP
</E>,</E>;/R\↑C(SET ↑CMAP) /THE PROGRAM MAP IS SET AS INDICATED.
/THIS IS EQUIVALENT TO PUTTING THE EXPRESSION IN /A AND /B RESPECTIVELY
AND EXECUTING ↑CBRS 44.
.FILL
.SP
.FORMAT EXP
%/A\/THIS COMMAND LISTS ALL AMBIGUOUS SYMBOLS IN THE ↑CDDT SYMBOL
TABLE AND LISTS THE BLOCKS THAT EACH AMBIGUOUS SYMBOL IS IN.
.FILL
.SP 2
↑-2.12←/SPECIAL←/SYMBOLS
.SP
 ↑CDDT HAS BUILT INTO IT A NUMBER OF SPECIAL SYMBOLS.
/THESE SYMBOLS CAN HAVE THEIR VALUES SET WITH THE FOLLOWING CONSTRUCT </E>;/A
WHERE ;/A IS A SPECIAL SYMBOL.
/IT IS TREATED LIKE ANY OTHER SYMBOL IN ↑CDDT.
/WHENEVER ↑CDDT EXECUTES ANY COMMAND INVOLVING EXECUTION OF INSTRUCTIONS
IN THE USER'S PROGRAM, IT RESTORES THE VALUES OF ALL MACHINE REGISTERS.
/IF ANY OF THESE VALUES HAVE BEEN CHANGED BY THE USER, IT IS THE CHANGED
VALUE THAT IS RESTORED.
.FILL
.SP
.FORMAT EXP
;/A\/THE VALUE OF THIS SYMBOL IS THE CONTENTS OF THE /A REGISTER.
.FILL
.SP
.FORMAT EXP
;/B\/CONTENTS OF THE /B REGISTER.
.FILL
.SP
.FORMAT EXP
;/X\/CONTENTS OF THE /X REGISTER.
.FILL
.SP
.FORMAT EXP
;/L\/CONTENTS OF THE PROGRAM COUNTER.
.FILL
.SP
.FORMAT EXP
;/M\/MASK USED BY WORD SEARCH COMMANDS.
.FILL
.SP
.FORMAT EXP
;0\/THE VALUE OF THIS SYMBOL +1 IS THE SMALLEST ADDRESS WHICH ↑CDDT WILL
EVER ATTEMPT TO PRINT IN SYMBOLIC FORM.
.FILL
.SP
.FORMAT EXP
;1\/LOWER LIMIT FOR SEARCHES USING SEARCH COMMANDS.
.FILL
.SP
.FORMAT EXP
;2\/UPPER LIMIT FOR SEARCHES
.FILL
.SP
.FORMAT EXP
;/Q\/VALUE OF THE LAST EXPRESSION TYPED BY ↑CDDT OR THE USER.
.FILL
.SP
.FORMAT EXP
;/F\/THE VALUE OF THIS SYMBOL IS THE ADDRESS OF THE LOWEST LOCATION IN CORE
NOT USED BY THE USER'S PROGRAM.
/NEW LITERALS AND PATCHES ARE INSERTED STARTING AT THIS ADDRESS.
/IT IS UPDATED BY PATCHES, LITERAL DEFINITIONS, AND LOAD COMMANDS.
.FILL
.SP
.FORMAT EXP
%/N\/THE VALUE OF THIS SYMBOL IS THE FIELD DESCRIPTOR FOR TYPE OUT AND
LOADING OF CELLS IN FORMATTED FORM.
.FILL
.SP
.FORMAT EXP
%/M\/THE VALUE OF THIS SYMBOL IS THE MASK FOR TYPE OUT AND LOADING OF CELLS
IN FORMATTED FORM.
.FILL
.SP
.FORMAT EXP
%/V\/THE VALUE OF THIS SYMBOL IS THE OPCODE NUMBER WHICH WILL NEXT BE USED
IN AUTOMATIC OPCODE DEFINITIONS USING THE OPCODE LINKING FEATURE OF THE ↑CDDT
LOADER.
(SEE THE MANUAL ON BINARY FILE FORMAT FOR THE ↑CDDT LOADER).
.FILL
.SP
/THE REMAINING SPECIAL SYMBOLS ARE USED TO CONTROL MODES IN ↑CDDT.
/THE SPECIFIED ACTION WILL OCCUR IF THE SYMBOL IS SET TO A NON-NEGATIVE
VALUE.
.SP
.FORMAT EXP
%/B\/TURN ON CONDITIONAL BREAKING
.FILL
.SP
.FORMAT EXP
%/I\/PRINT THE INSTRUCTION AT ;/L AS PART OF A BREAK MESSAGE.
.FILL
.SP
.FORMAT EXP
%/P\/SUPRESS PRINTING OF THE VALUE OF THE PROGRAM COUNTER AS A PART OF THE
BREAK MESSAGE.
.FILL
.SP
.FORMAT EXP
%/O\/SUPRESS TRACING OF ↑CPOP SUBROUTINES.
.FILL
.SP
.FORMAT EXP
%/U\/SUPRESS TRACING OF ↑CBRM AND ↑CSBRM SUBROUTINES.
.FILL
.SP 2
↑-2.13←/PANICS
.SP
↑CDDT RECOGNIZES FOUR KINDS OF PANIC CONDITIONS:
.SP
.FORMAT SUBEXP
(1)\/ILLEGAL INSTRUCTION PANICS FROM THE USER'S PROGRAM.
.FILL
.SP
.FORMAT SUBEXP
(2)\/MEMORY ALLOCATION EXCEEDED PANICS FROM THE USER'S PROGRAM.
.FILL
.SP
.FORMAT SUBEXP
(3)\/PANICS GENERATED BY TYPING THE /CONTROL-/K KEY.
.FILL
.SP
.FORMAT SUBEXP
(4)\/PANICS GENERATED BY THE EXECUTION OF ↑CBRS 10 IN THE USER'S PROGRAM.
.FILL
.SP
/FOR THE FIRST TWO OF THESE CONDITIONS ↑CDDT PRINTS OUT A MESSAGE, THE
LOCATION OF THE INSTRUCTION AT WHICH THE PANIC OCCURED, AND THE CONTENTS
OF THIS LOCATION.
/THE MESSAGES ARE AS FOLLOWS:
.SP
.FORMAT SUBEXP
(1)\/ILLEGAL INSTRUCTION PANIC  /I>>
.FILL
.SP
.FORMAT SUBEXP
(2)\/MEMORY ALLOCATION PANIC  /M>>
.FILL
.SP
.FORMAT SUBEXP
(3)\/THE OTHER TWO TYPES OF PANICS CAUSE ↑CDDT TO TYPE A BELL AND CARRIAGE
RETURN.
;/L AND '.' WILL BOTH BE EQUAL TO THE LOCATION AT WHICH THE PANIC OCCURRED.
.FILL
.SP
/IF MEMORY ALLOCATION EXCEEDED PANIC IS CAUSED BY A TRANSFER TO AN ILLEGAL
LOCATION, THE CONTENTS OF THE LOCATION CAUSING THE PANIC IS NOT AVAILABLE
AND ↑CDDT, THEREFORE, TYPES A '?'.
.SP
/TWO OTHER PANIC CONDITIONS ARE POSSIBLE IN ↑CDDT.
.SP
.FORMAT SUBEXP
(1)\/IF THE /CONTROL-/K KEY IS HIT TWICE WITH NO INTERVENING TYPING BY THE
USER, CONTROL LEAVES ↑CDDT AND RETURNS TO THE EXECUTIVE COMMAND PROCESSOR. (@)
.FILL
.SP
.FORMAT SUBEXP
(2)\/IF THE /CONTROL-/K KEY IS HIT WHILE ↑CDDT IS EXECUTING A COMMAND,
EXECUTION AND TYPEOUT ARE TERMINATED AND ↑CDDT TYPES CARRIAGE RETURN AND
BELL AND THEN AWAITS FURTHER COMMANDS.
.FILL