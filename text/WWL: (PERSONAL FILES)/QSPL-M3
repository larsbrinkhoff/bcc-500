.GL  WRIT-TEN TREAT-ED SEMI-COLON SEC-OND PAR-EN-THE-SES
.GL OPER-ATIONS NON-ZERO HOPE-LESS-LY FUNC-TION EF-FIC-IENT
.GL EF-FIC-IEN-CY DUM-MIES DIS-CUS-SION DES-CRIBED
.GL DEF-INI-TION DE-CLAR-A-TIONS CON-VEN-TION CON-VEN-IENT
.GL CON-TAINS COM-MENT CHAR-ACTER AR-GU-MENTS AL-LO-CA-TION
.GL AD-VANCE
↑I/LISTING ↑I/CONTROL:
       /LISTING MAY BE CONTROLLED WITH THE STATEMENTS ↑CLIST AND 
↑CNOLIST.
/EITHER MAY BE FOLLOWED BY ↑CSOURCE, ↑CCODE, OR ↑CBINARY, AND 
TURNS ON OR OFF THE SPECIFIED FORM OF OUTPUT.
/IT IS NOT A GOOD IDEA TO TURN BINARY OUTPUT ON AND OFF, SINCE THIS
WILL IN GENERAL PRODUCE AN UNLOADABLE RESULT.
       /TWO SPECIAL OPTIONS CONCERNING ALLOCATION OF VARIABLES ARE
ALSO CONTROLLED BY ↑CNOLIST.
↑CNOLIST ↑CFREE WILL PREVENT ↑CZRO'↑ES FOR UNINITIALIZED SCALARS FROM
APPEARING ON THE ASSEMBLY-LANGUAGE LISTING; THIS MAY BE USEFUL IF
RE-ENTRANT PROGRAMS ARE DESIRED.
↑CNOLIST ↑CEXTERNAL WILL CAUSE UNDECLARED VARIABLES TO BE TREATED
AS EXTERNAL; NORMALLY THEY ARE TREATED AS ERRORS AND SPACE IS ASSIGNED
FOR THEM.
       ↑CNOLIST ↑CPAGED PUTS THE COMPILER INTO A MODE WHERE THE CODE
PRODUCED FOR TAILING A PAGED POINTER NO LONGER ASSUMES THAT THE BLOCK
LIES WITHIN A SINGLE PAGE.
/IT IS INTENDED FOR PROGRAMS WHERE THE  USER IS ALLOCATING PAGED
STORAGE HIMSELF WITHOUT REGARD TO PAGE BOUNDARIES.
       /THE STATEMENT
.SP
.IN 8
↑CINCLUDE "<FILE NAME>";
.SP
HAS THE EFFECT OF PLACING THE ENTIRE CONTENTS OF THE NAMED FILE
IN THE PROGRAM AT THAT POINT.
/THIS PROCESS MAY BE NESTED, I.E., THE FILE BEING INSERTED MAY ITSELF
CONTAAN ↑CINCLUDE↑ES.
/NOTE THAT SINCE THE FILE IS INSERTED VERBATIM, IT SHOULD ↑INOT
END WITH AN ↑CEND STATEMENT.
/THE ↑CINCLUDE FEATURE IS MEANT PRIMARILY FOR GROUPS OF PROGRAMS
WITH COMMON DECLARATIONS.
/TO THIS END, THE STATEMENT ↑CNOLIST ↑CINCLUDE IS PROVIDED WITH 
THE FOLLOWING EFFECT: IF IT OCCURS IN THE ORIGINAL SOURCE FILE, IT
HAS NO EFFECT, WHILE IF IT OCCURS IN AN ↑CINCLUDE↑ED FILE, IT 
TERMINATES PROCESSING OF  THAT FILE.
/THUS A MAIN PROGRAM COULD HAVE THE FORM
.RM 8
.SP
.NOFILL
     .
     .
     .
(DECLARATIONS)
     .
     .
     .
↑CNOLIST ↑CINCLUDE;
     .
     .
     .
(REMAINDER OF PROGRAM)
↑CEND;
.FILL
.EM 8
.SP
AND ANY SUBPROGRAM COULD USE ITS DECLARATIONS BY ↑CINCLUDE↑E-ING IT.
       /THE STATEMENT
.SP
.IN 8
↑CIDENT <NAME>;
.SP
WILL CAUSE THE NAME TO BE OUTPUT TO ↑CQRUN AS THE PROGRAM NAME.
/NO MORE THAN ONE ↑CIDENT MAY APPEAR IN A PROGRAM.
.EJ
↑I/MACRO ↑I/FACILITY:
       /THE FORMAT OF A MACRO DEFINITION IS:
.SP
.IN 8
↑CDECLARE ↑CMACRO
.IN 11
<NAME>(<DUMMIES>)←<DEFINITION>;
.SP
WHERE <NAME> IS THE NAME OF THE MACRO BEING DEFINED, <DUMMIES> IS
THE LIST OF DUMMY ARGUMENT NAMES, AND <DEFINITION> IS THE DEFINITION.
<NAME> MUST BE A HITHERTO UNMENTIONED IDENTIFIER.
<DUMMIES> MAY BE AN EMPTY LIST; IF IT IS NOT EMPTY, IT IS A SEQUENCE
OF IDENTIFIERS SEPARATED BY COMMAS.
/THESE IDENTIFIERS SERVE ONLY TO INDICATE THE PLACE WITHIN THE 
DEFINITION WHERE ACTUAL ARGUMENTS ARE TO BE SUBSTITUTED: THEIR USE
HERE DOES NOT CONFLICT WITH THEIR PREVIOUS OR SUBSEQUENT USES FOR
ANY PURPOSE.
/THE <DEFINITION> IS ↑IANY SEQUENCE OF TOKENS (IDENTIFIERS, NUMBERS,
OPERATORS, CHARACTER CONSTANTS, OR STRING CONSTANTS) NOT INCLUDING
A SEMICOLON.
/IT NEED NOT BE  A LEGAL STATEMENT, EXPRESSION, OR ANYTHING ELSE.
       /A MACRO CALL LOOKS ALMOST LIKE A FUNCTION CALL, I.E., IT
HAS THE FORM <NAME>(<ARGUMENTS>); HOWEVER, THE <ARGUMENTS> ARE NOT
REQUIRED TO BE LEGAL EXPRESSIONS: THEY NEED ONLY BE SEQUENCES OF 
TOKENS BALANCED WITH RESPECT TO PARENTHESES, NOT CONTAINING SEMICOLONS,
AND DELIMITED BY COMMAS WHICH ARE NOT ENCLOSED IN INNER PARENTHESES.
/FOR EXAMPLE,
.SP
.IN 8
↑CSTRING X(20), #, AND (/B,/C)
.SP
ARE LEGAL ARGUMENTS.
/THE EFFECT OF THE MACRO CALL IS THAT THE DEFINITION, WITH THE
ACTUAL ARGUMENTS, REPLACES THE CALL BEFORE ANY FURTHER PROCESSING IS
DONE ON THE STATEMENT.
/A MACRO CALL MAY APPEAR ANYWHERE IN THE STATEMENT, NOT JUST WHERE
A FUNCTION CALL WOULD BE LEGAL.
/MACROS MAY CALL OTHER MACROS.
/IF LISTING IS BEING DONE, STATEMENTS WILL BE LISTED ↑IBEFORE MACRO
SUBSTITUTIONS HAVE BEEN PERFORMED; THIS IS ALSO TRUE WHEN A STATEMENT
IS LISTED IN RESPONSE TO AN ERROR.
       /A WORD OF WARNING FOR THOSE ACCUSTOMED TO THE ↑CNARP MACRO
FACILITY.
/SINCE SUBSTITUTIONS ARE PERFORMED ON THE BASIS OF TOKENS RATHER
THAN CHARACTERS, NO SUBSTITUTION OCCURS WITHIN CHARACTER OR STRING
CONSTANTS IN THE DEFINITION, E.G.,
.SP
.IN 8
↑UDECLARE MACRO S1(X)←"X";↑L
.SP
WILL NOT CAUSE A SUBSTITUTION.
/ALSO, CONCATENATION IS NOT AVAILABLE.
/FINALLY, EACH DUMMY ARGUMENT HAS A NAME OF ITS OWN AND THE PROPER
NUMBER OF ARGUMENTS MUST BE SUPPLIED AT EACH CALL.
       /TWO EXAMPLES OF USEFUL MACROS ARE AS FOLLOW:
.SP
.IN 8
↑UDECLARE MACRO INC(X)←X←X+1;↑L
.SP
CAUSES ↑CINC(A) TO BE EQUIVALENT TO /A←/A+1;
.SP
.IN 8
↑UDECLARE MACRO TWO(X)←(X)*2;↑L
.SP
CAUSES ↑CTWO(X+Y) TO BE EQUIVALENT TO (/X+/Y)*2.
/NOTE THAT IF THE DEFINITION HAD BEEN SIMPLY /X*2, THEN ↑CTWO(X+Y)
WOULD HAVE BEEN EQUIVALENT TO /X+/Y*2, WHICH IS PRESUMABLY NOT WHAT
IS WANTED.
.EJ
↑I/SPECIAL ↑I/FUNCTIONS:
       /THE FOLLOWING SPECIAL FUNCTIONS ARE A STANDARD PART OF THE
LANGUAGE.
/THEY PROVIDE ALL THE BUILT-IN STORAGE ALLOCATION, STRING HANDLING
AND INPUT↑/OUTPUT FACILITIES.
/IF MORE ELABORATE FACILITIES ARE REQUIRED, RECOURSE MAY BE HAD TO
MACHINE-LANGUAGE ROUTINES.
/THE NECESSARY LINKAGES ARE DESCRIBED UNDER FUNCTION CALLS AND 
DECLARATIONS ABOVE.
.SP 2
.UNDERLINE
STORAGE ALLOCATION FUNCTIONS
.SP 2
.UNDERLINE
↑CMAKE,↑CSETARRAY
.SP
.IN 8
↑CMAKE(<↑EEXPRESSION>)
.SP
CREATES A BLOCK OF STORAGE OF THE LENGTH SPECIFIED BY THE EXPRESSION
(BUT OF AT LEAST TWO CELLS) AND RETURNS A POINTER TO THIS BLOCK AS
ITS VALUE.
/IN FACT, ONE EXTRA CELL IS ASSIGNED BY THE SYSTEM; THE USER SHOULD
KEEP HIS HANDS OFF THIS CELL WHICH IS THE ONE BEFORE THE ONE POINTED
TO BY THE VALUE OF THE ↑CMAKE FUNCTION.
/AN ALTERNATE FORM IS
.SP
.IN 8
↑CMAKE(<↑EEXPRESSION>,<ARRAY NAME>)
.SP
WHICH ASSIGNS THE BLOCK OUT OF THE SPECIFIED ARRAY, WHICH MUST HAVE
BEEN PROPERLY INITIALIZED BEFOREHAND BY A CALL OF
.SP
.IN 8
↑CSETARRAY(<↑EEXPRESSION>,<ARRAY NAME>);
.SP
/ONLY BLOCKS OR THE SIZE SPECIFIED IN THE CALL OF ↑CSETARRAY CAN BE
ASSIGNED IN THIS WAY.
/BLOCKS OF ANY SIZE CAN BE ASSIGNED BY A SIMPLE ↑CMAKE.
.SP 2
↑I↑CPMAKE
       /TO ALLOCATE SPACE ON THE DRUM THE FUNCTION ↑CPMAKE SHOULD BE
USED.
/IT IS EXACTLY LIKE ↑CMAKE, EXCEPT THAT THE SECOND ARGUMENT, IF PRESENT,
SHOULD BE A PAGED POINTER TO AN OBJECT NEAR WHICH THE NEW SPACE SHOULD
BE ASSIGNED IF POSSIBLE.
/PROPER USE OF THIS FEATURE WILL GREATLY IMPROVE THE EFFICIENCY WITH
WHICH PAGED OBJECTS ARE ACCESSED.
/SEE THE DISCUSSION OF THE ↑CPAGED DECLARATION FOR FURTHER INFORMATION
ABOUT THE PROPER USE OF ADDRESSES OBTAINED FROM ↑CPMAKE.
.SP 2
↑I↑CFREE
       /TO RELEASE A BLOCK OF STORAGE, DO
.SP
.IN 8
↑CFREE(<↑EEXPRESSION>) OR ↑CFREE(<↑EEXPRESSION>,
.IN 11
<ARRAY NAME>)
.SP
WHERE THE VALUE OF THE EXPRESSION IS A POINTER TO THE BLOCK.
/THE FUNCTION HAS NO MEANINGFUL VALUE.
/THE STORAGE ALLOCATOR WILL ATTEMPT TO COALESCE FREED BLOCKS, BUT
SINCE IT CANNOT MOVE BLOCKS AROUND, IT IS POSSIBLE TO GRAGMENT STORAGE
HOPELESSLY BY ACQUIRING AND RELEASING BLOCKS OF MANY DIFFERENT 
SIZES IN A INDISCRIMINATE MANNER.
/IF THE SYSTEM RUNS OUT OF SPACE, IT WILL COMPLAIN AND QUIT.
/NOTE THAT
.SP
.IN 8
↑UFREE(MAKE(4));↑L
.SP
ACQUIRES AND IMMEDIATELY RELEASES A BLOCK OF FOUR WORDS.
/IT IS EXACTLY EQUIVALENT TO ↑CNOP (EXCEPT FOR TIMING).
↑CFREE ALSO WORKS FOR DRUM SPACE.
.SP 2
↑I↑CBCOPY
       /TO COPY ONE BLOCK OF STORAGE INTO ANOTHER ONE OF EQUAL SIZE
USE
.SP
.IN 8
↑UBCOPY↑L(<↑EEXPRESSION>,<EXPRESSION>)  .
.SP
/THE FIRST EXPRESSION IS A POINTER TO THE DESTINATION, THE SECOND
TO THE SOURCE.
/THESE MUST BE POINTERS ACQUIRED BY ↑CMAKE (OR CAREFULLY FABRICATED)
SINCE THE LENGTH OF THE BLOCK IS DETERMINED FROM THE CONTENTS OF THE
EXTRA HIDDEN WORD PROVIDED BY ↑CMAKE.
/THE SOURCE BLOCK MUST HAVE BEEN CREATED BY A ↑CMAKE WITH A SINGLE
ARGUMENT.
/IF THE SOURCE BLOCK DOES NOT HAVE THE HIDDEN WORD,
.SP
.IN 8
↑CBCOPY(<EXPRESSION>,<EXPRESSION>,
.IN 11
<EXPRESSION>)
.SP
MAY BE USED, WHERE THE THIRD ARGUMENT SPECIFIES THE NUMBER OF WORDS
TO COPY.
.EJ
.UNDERLINE
/PAGING /FACILITY
.SP 2
.UNDERLINE
↑UNPG,PM,↑/$QPDATA,NPB,PCAT↑L
       /THE PAGING FACILITIES PROVIDE A MEANS FOR THE USER TO ALLOCATE
AND ACCESS A LARGE (UP TO 2↑↑19 WORDS) ADDRESS SPACE, BY BUFFERING
PARTS OF THIS ADDRESS SPACE BETWEEN CORE AND DRUM IN FIXED-SIZE
PAGES.
/THE USER CAN SPECIFY THE PAGE SIZE, THE AMOUNT OF CORE SPACE TO 
ALLOCATE FOR BUFFERS (WHICH CAN BE CHANGED DYNAMICALLY DURING EXECUTION),
AND THE SIZE OF THE ADDRESS SPACE; INDIVIDUAL PAGES MAY BE LOCKED
INTO CORE FOR A TIME AND LATER ALLOWED TO BE SWAPPED OUT AGAIN; THE
USER'S PAGED DATA MAY BE DIVIDED INTO A NUMBER OF CATEGORIES, WHICH
ALLOWS MORE EFFICIENT ALLOCATION OF SPACE BY GROUPING OBJECTS OF THE
SAME CATEGORY ON THE SAME PAGE.
       /AT THE TIME THAT ↑CINIT IS CALLED (SEE THE ↑CINITIALIZE
FUNCTION IN SECTION 6), CERTAIN CELLS IN THE RUNTIME ARE EXAMINED TO
DETERMINE THE SETUP OF THE PAGING LOGIC.
/THE NAMES OF THESE CELLS ARE PRE-DECLARED ↑CEXTERNAL.
/THE CELL ↑CNPL CONTAINS THE PAGE SIZE AS A POWER OF 2, WHICH MUST
BE BETWEEN 8 AND 11.
/THE CELL ↑CNPG CONTAINS THE SIZE OF THE DESIRED ADDRESS SPACE AS A
MULTIPLE OF 2↑↑NPL: THE SIZE CANNOT EXCEED 2↑↑19.
/IF ↑CNPG CONTAINS A ZERO, IT IS ASSUMED THAT NO USE WILL BE MADE
OF THE PAGING LOGIC, AND ANY CALLS ON IT WILL PRODUCE ERROR COMMENTS.
/THE CELL ↑CNPB CONTAINS THE NUMBER OF CORE BUFFERS TO BE PROVIDED.
/IF IT CONTAINS 0, ALL AVAILABLE SPACE WILL BE USED FOR BUFFER.
/THE CELL ↑CNPC CONTAINS THE HIGHEST CATEGORY NUMBER WHICH WILL BE
USED.
/THE CELL ↑CPM CONTAINS A POSITIVE NUMBER IF THE DIRECT DRUM ACCESS
MACHINERY, ↑CBRS 124-127, IS TO BE USED FOR STORING PAGED DATA, OR
A NEGATIVE NUMBER IF A RANDOM FILE CALLED ↑/$QPDATA IS TO BE USED;
THE FORMER IS SOMEWHAT MORE EFFICIENT, ESPECIALLY IF THE ADDRESS SPACE
IS LARGE, BUT THE LATTER CAN BE ACCESSED BY OTHER PROGRAMS VIA THE
ORDINARY FILE MACHINERY WHEREAS THE FORMER CANNOT.
       /A FEW OTHER CELLS ARE OF INTEREST.
/THE CELL ↑CPCAT IS EXAMINED WHENEVER A CALL IS MADE TO ↑CPMAKE.
/IF IT CONTAINS A NON-ZERO NUMBER, THE NEW BLOCK WILL BE ALLOCATED ON
A PAGE RESERVED FOR DATA OF THE DESIGNATED CATEGORY.
/IF IT CONTAINS A ZERO, THE NEW BLOCK WILL BE ALLOCATED ON SOME 
CONVENIENT PAGE WITHOUT REFERENCE TO CATEGORY.
/A CALL OF ↑CPMAKE WITH A VALID DRUM ADDRESS AS THE SECOND ARGUMENT
TAKES PRECEDENCE OVER THE SETTING OF ↑CPCAT.
.SP 2
.UNDERLINE
↑CLOCK,↑CUNLOCK
       /A PAGE MAY BE LOCKED INTO CORE WITH
.SP
.IN 8
↑CLOCK(↑CX);
.SP
WHERE /X IS A DRUM ADDRESS; THE VALUE IS THE CORRESPONDING CORE
ADDRESS, WHICH IS GUARANTEED TO REMAIN VALID UNTIL THE PAGE IS
UNLOCKED.
/THE FUNCTION
.SP
.IN 8
↑UUNLOCK(A);↑L
.SP
WHERE /A IS A CORE ADDRESS, STORES THE CORRESPONDING DRUM ADDRESS
IN A CELL CALLED ↑CPADDR AND RETURNS THE OLD LOCK COUNT (WHICH IS
INCREMENTED BY ↑CLOCK AND DECREMENTED IF NON-ZERO BY ↑CUNLOCK) AS 
VALUE; IT IS ALL RIGHT TO UNLOCK AN UNLOCKED BUFFER.
/THE CELL ↑CNUP ALWAYS CONTAINS THE NUMBER OF BUFFERS WHICH ARE
NOT LOCKED AT THE MOMENT.
       /PAGE BUFFERS ARE ALLOCATED DOWNWARDS (TOWARDS LOW-NUMBERED
ADDRESSES) FROM THE INITIAL SETTING OF A CELL CALLED ↑CBSTORG; THE
BOTTOM OF THE BUFFER AREA IS PUT INTO THE CELL ↑CBARRAY BY THE ↑CINIT
OPERATION.
/IF THE USER WANTS TO REDUCE THE AMOUNT OF SPACE AVAILABLE FOR BUFFERS,
HE MAY USE ↑CBPUT(/X), WHERE /X IS A CORE ADDRESS IN A BUFFER.
/THE BUFFER WILL BE RETURNED TO THE POOL OF SPACE AVAILABLE TO THE 
CORE ALLOCATOR (↑CMAKE).
/THE CONVERSE OPERATION IS ↑CBGET(NCX), WHICH RESTORES THE BUFFER
FOR USE BY THE PAGING LOGIC.
/NOTE THAT THE BUFFER AREA IS DEFINED AT ↑CINIT TIME (AS THE ↑CNPB*2↑↑CNPL
CELLS JUST BELOW (↑CBSTORG)-2↑↑↑CNPL AND ↑CBPUT AND ↑CBGET MAY ONLY
BE USED ON ADDRESSES IN THIS RANGE.
↑CINIT ALLOCATES SPACE UP FROM ↑CBSTORG FOR TABLES FOR THE DRUM 
ALLOCATOR, LEAVING THE FIRST UNUSED CELL IN ↑CSARRAY.
/THUS ↑CSARRAY AND ↑CBARRAY BRACKET THE CORE NOT USED BY THE PAGING
LOGIC AFTER AN ↑CINIT, WHILE ↑CBSTORG AND ↑CESTORG BRACKET THE CORE
AVAILABLE TO IT BEFORE AN ↑CINIT.
.EJ
.UNDERLINE
/STRING /HANDLING /FUNCTIONS
.SP 2
.UNDERLINE
STRING DESCRIPTORS,↑CSETUP
       /A STRING IS DESCRIBED BY A FOUR WORD DESCRIPTOR WHICH SPECIFIES
THE BEGINNING AND END OF THE AREA ASSIGNED TO THE STRING, THE READER
POINTER, AND THE WRITER POINTER.
/THE FUNCTION
.SP
.IN 8
↑CSETUP(<↑ESTRING NAME>,<SIZE>)
.SP
WILL OBTAIN A BLOCK SPECIFIED SIZE AND SET UP THE DESCRIPTOR POINTED
TO BY THE STRING NAME TO POINT TO THAT BLOCK.
/THE NAME MUST ALREADY CONTAIN A POINTER TO A DESCRIPTOR; IF IT CONTAINS A 0
A RUNTIME ERROR WILL RESULT.
/THE ALTERNATE FORM
.SP
.IN 8
↑CSETUP(<↑ESTRING NAME>,<SIZE>,<EXPRESSION>)
.SP
WILL MAKE A DESCRIPTOR WHICH POINTS TO THE SPECIFIED NUMBER OF
CHARACTERS STARTING WITH THE WORD POINTED TO BY THE EXPRESSION.
/THE STORAGE ALLOCATOR IS NOT INVOKED; IT IS THE PROGRAMMER'S RESPONSIBILITY
TO CREATE THE DESCRIPTOR.
/IT IS ALSO THE PROGRAMMER'S RESPONSIBILITY TO ENSURE THAT THE PROPER
AMOUNT OF SPACE IS IN FACT AVAILABLE.
.SP 2
.UNDERLINE
↑USETS,SETR,SETW,LENGTH↑L
       /TO SET THE READER AND WRITER POINTERS OF A STRING, USE
.SP
.IN 8
↑CSETS(<↑ENAME>,<EXPRESSION>,<EXPRESSION>)  .
.SP
/THE FIRST EXPRESSION SPECIFIES THE READER POINTER, THE SECOND
THE WRITER POINTER (WHICH MUST BE GREATER; IF IT IS NOT, THE READER IS
SET EQUAL TO THE WRITER POINTER).
/CHARACTERS ARE NUMBERED STARTING AT 0.
/TO SET THE READER POINTER ONLY, USE
.SP
.IN 8
↑CSETR(<↑ENAME>,<EXPRESSION>)  .
.SP
/TO SET THE WRITER POINTER ONLY, USE
.SP
.IN 8
↑CSETW(<↑ENAME>,<EXPRESSION>)  .
.SP
/TO OBTAIN THE LENGTH OF A STRING (WRITER POINTER - READER POINTER) USE
.SP
.IN 8
↑CLENGTH(<↑ENAME>)  .
.SP
/NONE OF THESE FUNCTIONS EXCEPT ↑CLENGTH HAS A MEANINGFUL VALUE.
.SP 2
.UNDERLINE
↑UGCI,GCD,WCI,WCD,APPEND,GC↑L
       /TO GET THE NEXT CHARACTER FROM A STRING AND INCREMENT THE READER
POINTER, USE
.SP
.IN 8
↑CGCI(<↑ENAME>)  .
.SP
/IF THERE IS NO NEXT CHARACTER, THERE WILL BE AN ERROR COMMENT AND A HALT.
/TO AVOID THIS, USE THE ALTERNATE FORM
.SP
.IN 8
↑CGCI(<↑ENAME>:<FAILURE LOCATION>)
.SP
(SEE DISCUSSION OF FAILURE LOCATIONS BELOW).
/THIS CONVENTION IS ALSO USED FOR THE NEXT FIVE FUNCTIONS.
.SP
.IN 8
↑CGCD(<↑ENAME>)
.SP
READS A CHARACTER FROM THE END OF THE STRING AND DECREMENTS THE WRITER
POINTER.
.SP
.IN 8
↑CWCI(<↑EEXPRESSION>,<NAME>)
.SP
WRITES THE CHARACTER SPECIFIED BY THE EXPRESSION ON THE STRING SPECIFIED
BY THE NAME.
/IT FAILS IF THERE IS NO ROOM.
.SP
.IN 8
↑CWCD(<↑EEXPRESSION>,<NAME>)
.SP
WRITES THE CHARACTER ON THE FRONT OF THE STRING, AT THE LOCATION OF THE 
READER POINTER, AND FAILS FOR THE SAME REASON.
/THESE FUNCTIONS HAVE THE CHARACTER WRITTEN AS THEIR VALUE.
.SP
.IN 8
↑CAPPEND(<↑ENAME>,<NAME>)
.SP
APPENDS THE SECOND STRING TO THE FIRST ONE.
/IT FAILS IF THERE IS NOT ENOUGH ROOM.
/IT HAS NO MEANINGFUL VALUE.
.SP
.IN 8
↑CGC(<↑ENAME>)
.SP
YIELDS THE NEXT CHARACTER OF THE STRING, BUT DOES NOT ADVANCE THE READER
POINTER.
/IT NEVER FAILS, BUT YIELDS JUNK IF THE STRING IS EMPTY.
.SP 2
.UNDERLINE
STRING MOVING,↑CBCOPY,↑CSCOPY
       /THE EXPRESSION /A←/B (WHERE /A AND /B ARE STRING NAMES) SIMPLY
MOVES THE CONTENTS OF /B (PRESUMABLY A POINTER TO A DESCRIPTOR) INTO /A.
/TO COPY THE DESCRIPTOR, THE ↑CBCOPY FUNCTION MIGHT BE USED, SINCE STRING 
DESCRIPTORS ARE JUST 4 WORD BLOCKS;
.SP
.IN 8
↑CBCOPY(/B,/A)  .
.SP
/BE SURE TO READ THE SECTION ON ↑CBCOPY ABOVE.
/TO COPY THE STRING, USE
.SP
.IN 8
↑CSCOPY(/B,/A)  .
.SP
/THE EFFECT IS THAT OF ↑CSETS(/,0,0) FOLLOWED BY ↑CAPPEND(/B,/A).
↑CSCOPY, LIKE ↑CAPPEND, FAILS IF THERE IS NOT ENOUGH ROOM IN /B.
.SP 2
.UNDERLINE
STRING↑/NUMBER CONVERSION,↑CCNS,↑CCSN,↑CCRS,↑CCSR
       /TO CONVERT A STRING /S TO A NUMBER, WRITE
.SP
.IN 8
↑CCSN(/S)  .
.SP
/TO CONVERT A NUMBER /N TO A STRING /S, WRITE
.SP
.IN 8
↑CCNS(/N,/S)  .
.SP
/THIS CONVERTS A SIGNED NUMBER TO ITS DECIMAL REPRESENTATION, PRODUCING ONLY
ENOUGH DIGITS TO ACCURATELY REPRESENT THE NUMBER.
/EXTRA ARGUMENTS MAY BE SUPPLIED WHICH SPECIFY RADIX (10 ASSUMED) AND THE
NUMBER OF CHARACTERS IN THE STRING VERSION (-1 OR FREE FORMAT ASSUMED).
/CORRESPONDING OPERATIONS FOR FLOATING POINT NUMBERS ARE
.SP
.IN 8
↑CCSR(/S)
.SP
AND
.SP
.IN 8
↑CCRS(/R,/S)  .
.EJ
.UNDERLINE
4.  /FILE-NAMING FUNCTIONS
.SP 2
.UNDERLINE
↑UINFILE,OUTFILE,FTYPE,ERROR↑L
       /A FILE IS OPENED FOR INPUT WITH
.SP
.RM 8
↑CINFILE(<↑ESTRING NAME>:<FAILURE LOCATION>) .
.EM 8
.SP
/THE STRING CONTAINS THE FULL NAME OF THE FILE.
/THIS FUNCTION REQUIRES THE PRESENCE OF A ↑IFAILURE ↑ILOCATION TO WHICH
CONTROL TRANSFERS IN THE CASE THE FUNCTION FAILS.
/ITS VALUE IS THE FILE NUMBER.
.SP
.RM 8
↑COUTFILE(<↑ENAME>,<EXPRESSION>[:<FAILURE
.RM 3
LOCATION>])
.EM 3
.EM 8
.SP
DOES THE SAME THING FOR OUTPUT.
/THE EXPRESSION IS THE OPTION WORD WHICH ↑CBRS 16 TAKES IN THE /A-REG.
/IT WILL BE ASSUMED TO BE 0 IF NOT SUPPLIED.
/BOTH OF THESE OPERATIONS LEAVE IN THE LOCATION ↑CFTYPE THE TYPE WORD 
RETURNED BY THE ↑CBRS; IN CASE OF FAILURE, THE ERROR RETURNED BY THE ↑CBRS
IS IN LOCATION ↑CERROR.
.SP 2
.UNDERLINE
↑UINNAME,OUTNAME↑L
       /TO ACQUIRE FILE NAMES, USE
.SP
.RM 8
↑CINNAME(<↑ENAME>:<FAILURE LOCATION>)
.SP
.UN 8
AND
.SP
↑COUTNAME(<↑ENAME>:<FAILURE LOCATION>)
.SP
.EM 8
BOTH OF WHICH COLLECT THE NAME FROM THE TERMINAL AND ↑IAPPENDS ↑IIT ↑ITO
↑ITHE ↑ISTRING ↑ISUPPLIED.
/BOTH TRANSFER TO THE GIVEN LOCATION IN THE EVENT OF FAILURE, AND HAVE
THE TERMINATING CHARACTER AS VALUE.
.SP 2
.UNDERLINE
↑UCLOSE,CLOSALL↑L
       /TO CLOSE A FILE, DO
.RM 8
.SP
↑CCLOSE(<↑EEXPRESSION>) .
.SP
.EM 8
/THE EXPRESSION'S VALUE SHOULD BE THE FILE NUMBER.
/TO CLOSE ALL FILES, DO
.SP
.IN 8
↑CCLOSALL();
.EJ
.UNDERLINE
5.  /INPUT-OUTPUT FUNCTIONS
.SP 2
.UNDERLINE
↑UCIN,COUT,WIN,WOUT,SOUT,CRLF↑L
       /TO READ A CHARACTER, USE
.SP
.IN 8
↑CCIN(↑E<EXPRESSION>);
.SP
/THE VALUE OF THE EXPRESSION SHOULD BE THE FILE NUMBER.
/THIS FUNCTION SIMPLY DOES A ↑CCIO.
/ITS VALUE IS THE CHARACTER READ.
/TO WRITE A CHARACTER, USE
.SP
.IN 8
↑CCOUT(NE<EXPRESSION>[,<EXPRESSION>]);
.SP
/FILE 1 IS ASSUMED IF NOT SPECIFIED.
/THIS FUNCTION HAS THE CHARACTER WRITTEN AS ARGUMENT.
/TO READ AND WRITE A FULL WORD, USE ↑CWIN AND ↑CWOUT IN EXACTLY THE SAME
WAY.
/TO WRITE A STRING, USE
.SP
.IN 8
↑CSOUT(↑E<NAME>[,<FILE>])  .
.SP
/TO WRITE CARRIAGE RETURNS, USE
.SP
.IN 8
↑CCRLF(↑E<EXPRESSION>[,<FILE>]);
.SP
/THE EXPRESSION SPECIFIES HOW MANY SHOULD BE WRITTEN.
.SP 2
.UNDERLINE
↑UIIN,IOUT,RIN,ROUT
       /TO READ A NUMBER, USE
.SP
.IN 8
↑CIIN(↑E<FILE>[,<RADIX>]) .
.SP
/DECIMAL RADIX IS ASSUMED.
/TO WRITE A NUMBER, USE
.SP
.IN 8
↑CIOUT(↑E<EXPRESSION>) .
.SP
/EXTRA ARGUMENTS, IN ORDER, ARE THE FILE (1 ASSUMED), THE RADIX
(10 ASSUMED) AND THE NUMBER OF CHARACTERS TO BE WRITTEN (-1, OR FREE FORMAT
ASSUMED).
/CHARACTERS ARE DISCARDED FROM THE LEFT; THE NUMBER IS FILLED OUT ON THE
LEFT WITH BLANKS.
/A SIGN IS SUPPLIED IF THE NUMBER IS NEGATIVE.
/CORRESPONDING OPERATIONS FOR FLOATING POINT NUMBERS ARE
.SP
.IN 8
↑CRIN(↑E<FILE>[,<FORMAT>])
.SP
FOR FLOATING INPUT, AND
.SP
.IN 8
↑CROUT(↑E<EXPRESSION>,<FILE>[,<FORMAT>])
.SP
FOR FLOATING OUTPUT.
/THE FORMAT WORD IS EXPLAINED IN /R-2.
/IF IT IS OMITTED, IT WILL BE TAKEN AS ZERO, LEADING TO FREE FORMAT
OUTPUT.
.EJ