        COMMON X;

         MONITOR CREATE'FILE'PAGE←24;
        MONITOR NEXT'FILE'PAGE←26;
        MONITOR PUT'PAGE'IN'PMT←27;
        MONITOR ACQPMT←50;
        MONITOR CLRPMT←53;
        MONITOR SP'RETURN←116;
        MONITOR SET'MAP'BYTE←102;
        MONITOR KDIO←200B;

         UTILITY PRINT'STRING←45;
        STRING UTILITY GET'COM'LINE←3;
        STRING UTILITY GET'PARAM←2;
        UTILITY NAME'SEARCH←10;
        UTILITY OPEN'FILE←16;
        STRING UTILITY ERROR'MSG←1;
        UTILITY PRINT'CHAR←46;

         MACRO SYSERR← VALUE SYSTEM'ERROR():SERROR'CODE,SERROR'NO;
        DECLARE SERROR'CODE,SERROR'NO;

         DECLARE BUF'PAGE←20B, MAX'ERRS←3;

         DECLARE STRING S1(100),S2;

         DECLARE WRITE'FLAG,FILE'NO,BUF'BYTE,DRUM'BASE,DRUM'ADDR,FILE'PTR,
         ERR'CNT,PAGE'COUNT;
        DECLARE ARRAY FNAME[8],DIOC[24];

         DECLARE FIELD DUNIT(0:22,23),DSEC(0:17,21),DBAND(0:10,16);
        DECLARE NDSECS←24;
        DECLARE FIELD SWWDCNT(4:0,5),SWCPA(4:6,12),SWLNODE(4:13,13),
         SWDUMPST(4:16,16),SWRCD(4:18,23),SWINSTN(5:0,5),SWDV(2:2,23),
         LONG FIELD SWUN(0);
        DECLARE FIELD TSU'ERRS(17:13,23),TSU'DV(4:10,21);
        DECLARE CRDDT←4,READ'INST←0,WRITE'INST←10B;

         DECLARE ARRAY STACK[256];
        DECLARE PARAMETER
         STACK'BEGINNING ← @STACK[0],
         STACK'END ← @STACK[255];
        DECLARE STACK'POINTER = G' [2], STACK'LIMIT = G' [3];
        END;*
        PROGRAM ENTRY'POINTS;
        INCLUDE X;

         ENTRY SP'TRAP'ENTRY(), SP'ENTRY ← 0;
        SP'RETURN(//SYSERR);
        ENTRY INTERRUPT'ENTRY(), SP'ENTRY ← 1;
        SP'RETURN(//SYSERR);
        ENTRY INITIAL'ENTRY(), SP'ENTRY ← 2;
        STACK'POINTER ← STACK'BEGINNING;
        STACK'LIMIT ← STACK'END;
        DIOK();
        SP'RETURN(//SYSERR);
        ENTRY CONTINUE'ENTRY(), SP'ENTRY ← 3;
        SP'RETURN(//SYSERR);
        END;*
        PROGRAM Y;
        INCLUDE X;

         DECLARE I,J,T,NPAGES;

* PROGRAM TO USE DIRECT I/O TO COPY A FILE TO A SPECIFIED DRUM
* ADDRESS. THE PROGRAM HAS THREE ARGUMENTS:
*   R/W  DRUM-ADDRESS FILE-NAME
* IN THE CASE OF A WRITE IT ONLY TRANSFERS PAGES OF THE FILE WHICH
* EXIST

         ENTRY DIOK();
        SETS(S1);
        S1←GET'COM'LINE(S1//SYSERR);
        GET'PARAM(S1); S2←GET'PARAM(S1);
        IF LENGTH(S2)#1 DO;
BADP1:      PRINT'STRING(-1,"FIRST PARAM MUST BE R OR W&307",0//SYSERR);
            RETURN;
        ELSEIF T←GCI(S2)='R' DO;
            WRITE'FLAG←0;
        ELSEIF T='W' DO;
            WRITE'FLAG←1;
        ELSE DO;
            GOTO BADP1;
        ENDIF;
        S2←GET'PARAM(S1);
        GOTO BAD'NO IF T<'0' OR T>'9'
         FOR DRUM'BASE←0,DRUM'BASE*8+T-'0' WHILE T←GCI(S2//BAD'NO)#'B';
        S2←GET'PARAM(S1);
        NAME'SEARCH(S2,FNAME,1-WRITE'FLAG,6'DIOK',-1//SYSERR);
        FILE'NO←OPEN'FILE(-1,FNAME,'RW',-1//SYSERR);
        BUF'BYTE←ACQPMT(-1//SYSERR);
        SET'MAP'BYTE(-1,BUF'PAGE,BUF'BYTE//SYSERR);
        S2←GET'PARAM(S1);
        GOTO BAD'NO IF T<'0' OR T>'9'
         FOR NPAGES←0,NPAGES*8+T-'0' WHILE T←GCI(S2//BAD'NO)#'B';

         PAGE'COUNT←0;
* GOT EVERYTHING SET UP. READY TO GO
         PRINT'CHAR(-1,307B,0//SYSERR);
        FOR FILE'PTR←0 TO NPAGES-1 DO;
            IF WRITE'FLAG DO;
                FILE'PTR←NEXT'FILE'PAGE(FILE'NO,FILE'PTR-1//SYSERR);
                GOTO DONE IF FILE'PTR>63 OR FILE'PTR<0;
            ELSE DO;
                IF NEXT'FILE'PAGE(FILE'NO,FILE'PTR-1//SYSERR)#FILE'PTR DO;
                    CREATE'FILE'PAGE(FILE'NO,FILE'PTR//SYSERR);
                ENDIF;
            ENDIF;
            CLRPMT(BUF'BYTE//SYSERR);
            PUT'PAGE'IN'PMT(FILE'NO,FILE'PTR,BUF'BYTE//SYSERR);
* GOT THE FILE PAGE CREATED IF NECESSARY AND IN THE MAP. SET UP
* THE DIRECT I/O NODE
             ERR'CNT←0;
RETRY:      BSET(I←@DIOC[0],0,24);
            DRUM'ADDR←DRUM'BASE; DRUM'ADDR$DSEC←(DRUM'BASE$DSEC+FILE'PTR)
            MOD NDSECS;
            DRUM'ADDR$DBAND←DRUM'BASE$DBAND+(DRUM'BASE$DSEC+FILE'PTR)/NDSECS;
            I.SWRCD←CRDDT; I.SWDV←DRUM'ADDR; I.SWWDCNT←11;
            I.SWINSTN←(WRITE'INST IF WRITE'FLAG ELSE READ'INST);
            I.SWDUMPST←1;
            KDIO(DIOC,BUF'PAGE*4000B);

* NOW INTERPRET THE TSU STATE RETURNED
             IF I.TSU'ERRS#0 DO;
                IF MAX'ERRS←MAX'ERRS+1>3 DO;
                    PSN("TOO MANY ERRORS ON PAGE ",FILE'PTR,8);
                    PSN(", DRUM PAGE ",DRUM'ADDR,8);
                    PSN(", STATUS ",I.TSU'ERRS,8);
                    PRINT'CHAR(-1,307B,0//SYSERR);
                ELSE DO;
                    GOTO RETRY;
                ENDIF;
            ENDIF;
            PAGE'COUNT←PAGE'COUNT+1;
        ENDFOR;
DONE:   PSN("COPIED ",PAGE'COUNT,10); PRINT'STRING(-1," PAGES&307",0//SYSERR);
        RETURN;

BAD'NO:  PRINT'STRING(-1,
        "EXPECTED OCTAL NUMBER WITH TRAILING B FOR DRUM ADDRESS&307"//SYSERR);
        RETURN;


         FUNCTION SYSTEM'ERROR();
        PSN("SYSTEM ERROR ON PAGE ",FILE'PTR,8);
        PRINT'CHAR(-1,307B,0//SYSERR);
        SETUP(S1,3,@SERROR'CODE); SETW(S1,3);
        PRINT'STRING(-1,S1,0//SYSERR);
        PSN(", ",SERROR'NO,10);
        PRINT'CHAR(-1,307B,0//SYSERR);
        RETURN;
*


        PROGRAM STUFF;
        INCLUDE X;

         DECLARE STRING NS(30);


         DECLARE INTEGER N, F, R, T, I, D, P, FIELD RP(1),WP(2),EP(3);
        DECLARE STRING S, B(25), STRING FIELD A(0);

         FUNCTION CNS(N, STRING @P, F, R), FRETURN;

         S ← P.A;
        FRETURN IF R < 2 OR R > 36;
        T ← (-N IF F >= 0 AND N < 0 ELSE N);
        B$RP ← B$WP ← B$EP; I ← 0;
LP:     .LDA T; .LSHD -23; .DIV R; .STA T; .STB D;
        WCD(D +('0' IF D < 10 ELSE 'A'-10), B);
        I ← I + 1; GOTO LP IF T # 0;
        WCD('-', B) & I ← I + 1 IF F >= 0 AND N < 0;
        F ← F A' 77B;
        IF F = 0 DO;
            F ← I;
        ELSEIF F <= I DO;
            B$RP ← INCDES(B$EP, -I);
        ELSE DO;
            WCI(' ', S// FRETURN) FOR I ← I + 1 TO F;
        ENDIF;
        WCI(D, S// FRETURN)
         FOR D ← GCI(B// VALUE P.WP ← S$WP & RETURN) WHILE 1;


         FUNCTION PSN(STRING S,INTEGER N,R);
        PRINT'STRING(-1,S,0//SYSERR);
        CNS(N,NS,0,R//SYSERR);
        PRINT'STRING(-1,NS,0//SYSERR);
        RETURN;
        PROGRAM MISSING'STUFF;
        DECLARE FIELD W0(0),W1(1);

         FUNCTION LONG'COMPARE(LONG T,U);
        RETURN 0 IF T$W0=U$W0 AND T$W1=U$W1;
        RETURN 1;
        PROGRAM FUNNY;
        DECLARE I,J;
        BCOPY(I,J,10);
