ITPSIM IDENT
       NOLIST EXT
* PARAMETERS, MACROS, GARBAGE
*
FETCH  MACRO; MRG =4B7; STA CEAT; LDA* CEAT; ENDM
STORE  MACRO; STA CEAT; CXB; LDA STOCNT; SKG =19; BRU *+3
       LDA =2; BRU SIMRET
       CAX; SKN STOFLG; MIN STOCNT; CBA; MRG =4B7; STA STOADD,2
       LDA CEAT; STA STOVAL,2
       SKN STOFLG; BRU *+2; STA* STOADD,2; ENDM
SFETCH MACRO; BRM SFETCH; ENDM
SSTORE MACRO; BRM SSTORE; ENDM
SEAC   MACRO; SKN EIM; BRM TIQ; ENDM
*
*
M940   EQU     1B3
PQFLAG EQU     20B
TQFLAG EQU     40B
*
$CPUSIM ZRO; STA STOFLG; CLA; STA STOCNT; BRU START
*
$CLRSIM ZRO; STA CBA; BRM FLUSHM; BRR CLRSIM

*
* INSTRUCTION CYCLE
*
CARRY  EQU     10B
OV     EQU     2
TOV    EQU     4
POPB   EQU     4B4
WIDTH  EQU     77B
POP940 EQU     1B7
START  LDA P; XMA PS; XMA PP      TO HAVE COPY OF OLD P
       LDA P
       LDA =15; STA EXUCNT; LDA =-1; STA PRVSC
       LDA P
NF     STA ASA; BRM IGET
NF2    XMA NEWI; STA OLDI
NF1    LDA NEWI; LDB SSR; SKB =M940; BRU INI; SKA =POPB; BRU POP
NF3    RSH 15; ETR =WIDTH; STA ICCT
       LDA NEWI; ETR =77B5; CLB; SKE =47B5; LDB =-1; STB LAXF
       LDA NEWI; BRM EAC; STA Q; LDX P; STX ASA; LDX ICCT
       LDX IDT,2; BRU 0,2
*
*
BOC    ZRO; STA BOCT; SKN RUBOUT; BRU BOC1; LDA BOCT; BRR BOC
BOC1   LDA =5; BRU SIMRET
*
INOP   LDA P; STA ASA ; ADD =1; BRM RNG; MIN P
N      LDA SSR; ETR =@1; SKN LOADF; STA SSR; CLA; STA LOADF; BRM BOC
       SKN PRVSC; BRU SIMRT1; LDA =-1
SIMRET LDB NEWI; BRR CPUSIM
SIMRT1 LDX PRVSC; LDA RETNUM,2; BRU SIMRET
RETNUM DATA    -5
       DATA    -4
       DATA    4

FTRPST EQU     602752B
FTRPAD EQU     604002B
RDTPAD EQU     6
SMON   EQU     6B5
SUTIL  EQU     4B5
*FIXED TRAP LOGIC
*(A) = TRAP NUMBER
*(B) = PARAMENTER
FTRP   STA IR; STB TRAPAR
       LDA =P; LDB =FTRPST; LDX =EST-P; STB ASA; BRM CVCOPY
       LDA =2000B; STA SSR
       LDA =SMON; STA GR
       LDA TRAPAR; STA AR
       LDA IR; STA XR
*******TO MAKE SURE NO INFINITE FIXED TRAP LOOPS
       BRM BOC
       LDA =FTRPAD; STA P; LDA =-3; BRU SIMRET
*
*RING DEPENDENT TRAP LOGIC
RDTRP  STA IR; STB TRAPAR; LDA P; STA ASA; LDA GR; ADD =4
       CAX; LDA P; BRM PUT
       LDA GR; ADD =5; CAX; LDA TRAPAR; BRM PUT
       LDA SSR; ETR =@M940; STA SSR
       LDA GR; ADD =RDTPAD; BRM IEAC; SEAC; STA P; LDA =-2; BRU SIMRET
*
*TRAP ENTRY POINTS
MACCQ  ZRO; LDA =1; LDB QQ; BRU FTRP
PROQ   ZRO; LDA =2; LDB QQ; BRU FTRP
PNIMQ  ZRO; LDA =3; LDB QQ; BRU FTRP
PNICQ  ZRO; LDA =4; LDB QQ; BRU FTRP
TOQ    ZRO; LDA =5; CLB; BRU FTRP
PIQ    ZRO; LDA =6; CLB; BRU FTRP
TIQ    ZRO
ITIQ   LDA =7; CLB; BRU FTRP
XMONQ  ZRO; LDA =8; CLB; BRU FTRP
XUTILQ ZRO; LDA =9; CLB; BRU FTRP
BLLQ   ZRO; STA TTT
       LDA NAW; LRSH 18; LDA TTT; LRSH 6; LDA =10; BRU FTRP
ILIMQ  ZRO; LDA =11; CLB; BRU FTRP
ABEQ   ZRO; LDA =1; LDB ASA; BRU RDTRP
FLOQ   ZRO; LDA =2; LDB Q; BRU RDTRP
FLUQ   ZRO; LDA =3; LDB Q; BRU RDTRP
ROQ    ZRO; LDA =4; LDB ROF; BRU RDTRP
IATRPQ ZRO; LDA =5; LDB ASA; BRU RDTRP
UFNQ   ZRO; LDA =6; LDB Q; BRU RDTRP
FLXOQ  ZRO; LDA =7; LDB Q; BRU RDTRP
DIZQ   ZRO; LDA =8; LDB Q; BRU RDTRP
STKOVQ ZRO; LDA =9; CLB; BRU RDTRP

*SETUP FOR POP,UCALL,MCALL,BLL,NBLLGRET, AND GRETN
POP    BRU* POPL
IBLL   BRU* BLL
IBLLN  BRU* BLLN
*********INSERT BLL LOGIC RIGHT HERE
* * PROGRAM TO IMPLEMENT BLL
* * * FIELDS DEFINING THE ORGANIZATION OF VARIOUS DESCRIPTORS ETC
* * * TYPE FIELD OF IAW
* *        DECLARE FIELD IATYPE(0:0,1);
*        DECLARE FIELD IWTAG(0:2,4);
* * FIELDS FOR ARRAY DESCRIPTOR
* *        DECLARE FIELD LB(0:2,2),LONG(0:4,4),
*                LUB(0:11,23),SUB(0:7,23);
* * CONTROL FIELDS OF STRING IAW
* *        DECLARE FIELD FWA(0:6,23),FCPOS(0:4,5),FCTYPE(0:2,3),FIWT(0:0,1);
* * FIELDS FOR BLL DESCRIPTOR
* *        DECLARE FIELD FCLL(1:0,0),FSTK(1:1,1),FCPA(0:2,2),FFTN(0:5,5),
*                FCPR(1:3,3),FREL(1:4,4),FUWSTK(0:3,3),FE(1:6,23);
* * FIELDS FOR ACTUAL AND FORMAL ARGUMENTS
* *        DECLARE FIELD ENDF(0:9,9),FSTR(0:4,4),CVAL(0:3,3),
*                TYPE(0:5,8),STR(0:3,4),D(0:10,23);
*        DECLARE FIELD R8B(0:16,23),OPCODE(0:3,8);
* 
* * VARIABLES USED IN THE PROGRAM
* *        DECLARE MACRO DI←DECLARE INTEGER;
*  DECLARE MACRO DE←DECLARE EXTERNAL;
*        DI NEWG;
* *               NEW VALUE OF G
* *        DI NEWL;
* *               NEW VALUE OF L
* *        DI NEWP;
* *               NEW VALUE OF P
* *        DI NEWF;
* *               NEW VALUE OF F (FUNCTION ORIGIN)
* *        DI OLDG;
* *               OLD G
* *        DI PREVP;
* *              PREVIOUS P ON RETURN
* *        DE SSR;
* *                STATUS REGISTER
* *        DE P,LR,GR;
* *            P-COUNTER, LOCAL AND GLOBAL REGISTERS
* *        DE AR,BR,CR,DR,XR;
* *     CENTRAL REGISTERS
* *        DE Q;
* *                  EFFECTIVE ADDRESS
* *        DE IR;
* *                 INDEXING REGISTER
* *        DI SP;
* *                 STORAGE FOR NEW STACK POINTER
* * * STORAGE FOR BITS FROM SECOND WORD OF BLL DESCRIPTOR
* *        DI E,CLL,STK,CPA,CPR,RELF,UWSTK;
*        DI SPEC;
* *               SET FOR POP UNTIL FIRST ARG IS PASSED
* *        DI MCAL;
*        DI RET;
* *                RETURN TYPE
* *        DI FTN;
* *                FORTRAN BIT
* *        DI NT;
* *                 SET IF THERE SHOULD BE NO ARGUMENTS
* *        DE ASA;
* *                SOURCE REGISTER FOR RINGCHECK
* *        DI R;
* *                  SETUP ASA
* *        DI RASA;
* *               STORAGE FOR ADDRESS TO BE USED AS SOURCE
* *        DI FTNATF;
* *             FORTRAN ARGUMENT TRAP FLAG
* *        DI POPW;
* *               POP INSTRUCTION WORD
* *        DE EAB;
* *                FIELD FLAG FROM INDIRECTION: POSITIVE
* * *                              IF FIELD
* *        DE ROF;
* *                READ-ONLY FLAG FROM INDIRECTION
* *        DE EIM;
* *                IMMEDIATE FLAG FROM INDIRECTION
* *        DI BDADDR;
* *             ADDRESS OF BLL DESCRIPTOR
* *        DI NAW,NFW;
* *            ADDRESS OF NEXT ACTUAL AND FORMAL ARGUMENT
* *        DI NAWP;
* *                              WORDS
* *        DI AP;
* *                 CONTENTS OF ACTUAL ARGUMENT WORD
* *        DI FP;
* *                 CONTENTS OF FORMAL ARGUMENT WORD
* * * STORAGE FOR FIELDS FROM ACTUAL AND FORMAL ARGUMENT WORDS
* *        DI AENDF,ASTR,ATYPE;
*        DI FFTYPE;
*        DI ARGADR;
* *             ADDRESS OF ACTUAL ARGUMENT
* *        DI CPYADR;
* *             ADDRESS TO STORE ACTUAL ARGUMENT
* *        DI BSPOS;
* *              BYTE SIZE AND CHAR POS FROM FIRST WORD
* * *                              OF STRING VALUE
* * 
* * VARIABLES
* *        DI I,TEMP,OLDTEMP,COUNT;
* * LINKAGES TO SIMULATOR
* *        DE GETO,AEA,IEAC,TIQ,BLLQ,GET,RNG,PUTO,STKOVQ,GRING;
*        DE MENT,MEXT,N,IWT;
*        DECLARE MACRO DONE←POP(BRU,N);
* * STUFF TO CONNECT TO SIMULATOR
* *        DECLARE  PARAMETER BRM←43B,BRU←1;
*        DECLARE MACRO TI()←POP(BRM,TIQ);
*        DECLARE MACRO BLLTRAP(XX)←POP(BRM,BLLQ,XX);
*        DECLARE MACRO FETCH(XX)←(ASA←R & POP(BRM,GET,XX));
*        DECLARE MACRO RINGCHECK(XX)←(ASA←R & POP(BRM,RNG,XX));
*        DECLARE MACRO PUT(XX,YY)←(ASA←R&EIM←EAB←-1&IWT←YY&POP(BRM,PUTO,XX));
*        DECLARE MACRO GTRING(XX)←POP(BRM,GRING,XX);
*        DECLARE MACRO STKOV()←POP(BRM,STKOVQ);
*        DECLARE MACRO MENTER()←POP(BRM,MENT);
*        DECLARE MACRO MEXIT(XX,YY)←POP(BRM,MEXT,XX,YY);
*        DECLARE MACRO IA(XX)←(ASA←R&Q←POP(BRM,IEAC,XX));
*        DECLARE MACRO IAI(XX)←(ASA←R&Q←POP(BRM,AEA,XX));
* 
* * POP ENTRY POINT
:POPL  BSS 0
* POPL:  R←P;
       LDA P; STA R
*          POPW←FETCH(P);
       STA ASA
       LDA P; BRM GET; STA POPW
*         IR←POPW$OPCODE;
       LRSH 17B; ETR =77B; STA IR
*         IA(GR);
       LDA R; STA ASA
       LDA GR; BRM IEAC; STA Q
*  ROF←-1;
       LDA =-1; STA ROF
*         TI() IF EIM>-1;
       LDA EIM; SKG =-1; BRU 1X; BRM TIQ
1X     BSS 0
       FRGT 1X
*  NT←0;
       LDA =0; STA NT
*        SPEC←1;
       LDA =1; STA SPEC
*  GOTO BLL3;
       BRU ←BLL3
* * MONITOR CALL ENTRY POINT
:MCALL BSS 0
* MCALL:  MCAL←2;
       LDA =2; STA MCAL
*         R←604000B;
       LDA =604000B; STA R
*  NEWG←6B5;
       LDA =600000B; STA NEWG
*  GOTO CALL;
       BRU ←CALL
* * UTILITY CALL ENTRY POINT
:UCALL BSS 0
* UCALL:  MCAL←1;
       LDA =1; STA MCAL
*         R←403016B;
       LDA =403016B; STA R
*  NEWG←403000B;
       LDA =403000B; STA NEWG
:CALL  BSS 0
* CALL:  IA(R);
       LDA R; STA ASA
       LDA R; BRM IEAC; STA Q
*  ROF←-1;
       LDA =-1; STA ROF
*        SPEC←0;
       LDA =0; STA SPEC
*  GOTO BLL1;
       BRU ←BLL1
* * BLL ENTRY POINT
:BLLN  BSS 0
* BLLN:   NT←1;
       LDA =1; STA NT
*  GOTO BLLX;
       BRU ←BLLX
:BLL   BSS 0
* BLL:    NT←0;
       LDA =0; STA NT
:BLLX  BSS 0
* BLLX:  SPEC←0;
       LDA =0; STA SPEC
:BLL3  BSS 0
* BLL3:   NEWG←GR;
       LDA GR; STA NEWG
*  MCAL←0;
       LDA =0; STA MCAL
:BLL2  BSS 0
* BLL2:  R←P;
       LDA P; STA R
* 
* * ALL ENTRY POINTS COME HERE
:BLL1  BSS 0
* BLL1:   FTNATF←0;
       LDA =0; STA FTNATF
*  IR←XR;
       LDA XR; STA IR
*  BDADDR←Q;
       LDA Q; STA BDADDR
*  IA(BDADDR);
       LDA R; STA ASA
       LDA BDADDR; BRM IEAC; STA Q
*  ROF←-1;
       LDA =-1; STA ROF
*         BLLTRAP(1) IF EIM>-1;
       LDA EIM; SKG =-1; BRU 2X
       LDA =1; BRM BLLQ
2X     BSS 0
       FRGT 2X
*         R←BDADDR;
       LDA BDADDR; STA R
*  NEWP←Q;
       LDA Q; STA NEWP
*         BDADDR←FETCH(BDADDR+1);
       LDA R; STA ASA
       LDA BDADDR; ADD =1; BRM GET; STA BDADDR
*         STK←BDADDR$FSTK;
       LRSH 26B; ETR =1; STA STK
*  CPA←BDADDR$FCPA;
       LDA BDADDR; LRSH 25B; ETR =1; STA CPA
*  CPR←BDADDR$FCPR;
       LDA BDADDR; LRSH 24B; ETR =1; STA CPR
*         RELF←BDADDR$FREL;
       LDA BDADDR; LRSH 23B; ETR =1; STA RELF
*  CLL←BDADDR$FCLL;
       LDA BDADDR; LRSH 27B; STA CLL
*  UWSTK←BDADDR$FUWSTK;
       LDA BDADDR; LRSH 24B; ETR =1; STA UWSTK
*         E←NEWL←BDADDR$FE;
       LDA BDADDR; ETR =777777B; STA NEWL; STA E
*        FTN←BDADDR$FFTN;
       LDA BDADDR; LRSH 22B; ETR =1; STA FTN
*        NEWG←FETCH(GR+14B) IF GTRING(NEWP)<GTRING(P) AND CLL=1;
       LDA NEWP; BRM GRING; STA T:+1
       LDA P; BRM GRING; SKG T:+1; BRU 3X
       LDA CLL; SKE =1; BRU 3X
       LDA R; STA ASA
       LDA GR; ADD =14B; BRM GET; STA NEWG
3X     BSS 0
       FRGT 3X
*         IF STK=1 DO;
       LDA STK; SKE =1; BRU 6X
*           IF CLL=0 DO;
       LDA CLL; SKE =0; BRU 10BX
*             IF UWSTK=0 DO;
       LDA UWSTK; SKE =0; BRU 12BX
*               SP←LR;
       LDA LR; STA SP
*             ELSE DO;
       BRU 11BX
12BX   BSS 0
       FRGT 12BX
*               SP←E;
       LDA E; STA SP
*  NEWL←FETCH(E+1)$FE;
       LDA R; STA ASA
       LDA E; ADD =1; BRM GET; ETR =777777B; STA NEWL
*             ENDIF;
11BX   BSS 0
       FRGT 11BX
*           ELSE DO;
       BRU 7X
10BX   BSS 0
       FRGT 10BX
*             SP←FETCH(NEWG+2)+E;
       LDA R; STA ASA
       LDA NEWG; ADD =2; BRM GET; ADD E; STA SP
*             STKOV() IF SP>FETCH(NEWG+3);
       LDA R; STA ASA
       LDA NEWG; ADD =3; BRM GET; STA T:+1
       LDA SP; SKG T:+1; BRU 13BX; BRM STKOVQ
13BX   BSS 0
       FRGT 13BX
*             NEWL←FETCH(NEWG+2);
       LDA R; STA ASA
       LDA NEWG; ADD =2; BRM GET; STA NEWL
*           ENDIF;
7X     BSS 0
       FRGT 7X
*         ELSE DO;
       BRU 5X
6X     BSS 0
       FRGT 6X
*           NEWL←LR IF NEWL=0;
       LDA NEWL; SKE =0; BRU 14BX
       LDA LR; STA NEWL
14BX   BSS 0
       FRGT 14BX
*         ENDIF;
5X     BSS 0
       FRGT 5X
*        IF CLL=1 DO;
       LDA CLL; SKE =1; BRU 16BX
*           NEWF←NEWP;
       LDA NEWP; STA NEWF
*        ELSE DO;
       BRU 15BX
16BX   BSS 0
       FRGT 16BX
*           NEWF←FETCH(NEWL+2);
       LDA R; STA ASA
       LDA NEWL; ADD =2; BRM GET; STA NEWF
*           NEWP←NEWP+NEWF IF RELF=1;
       LDA RELF; SKE =1; BRU 17BX
       LDA NEWF; ADM NEWP
17BX   BSS 0
       FRGT 17BX
*           NEWG←FETCH(GR+14B) IF GTRING(NEWP)<GTRING(P);
       LDA NEWP; BRM GRING; STA T:+1
       LDA P; BRM GRING; SKG T:+1; BRU 20BX
       LDA R; STA ASA
       LDA GR; ADD =14B; BRM GET; STA NEWG
20BX   BSS 0
       FRGT 20BX
*        ENDIF;
15BX   BSS 0
       FRGT 15BX
*        RINGCHECK(NEWP);
       LDA R; STA ASA
       LDA NEWP; BRM RNG
*        RET←(1 IF GTRING(NEWP)<GTRING(P) ELSE 0);
       LDA NEWP; BRM GRING; STA T:+1
       LDA P; BRM GRING; SKG T:+1; BRU 21BX
       LDA =1; BRU 22BX
21BX   LDA =0
22BX   STA RET
       FRGT 22BX,21BX
* 
*         IF CPA=0 DO;
       LDA CPA; SKE =0; BRU 24BX
*           BLLTRAP(2) IF NT=0;
       LDA NT; SKE =0; BRU 25BX
       LDA =2; BRM BLLQ
25BX   BSS 0
       FRGT 25BX
*  NAW←P+1;
       LDA P; ADD =1; STA NAW
*         ELSE DO;
       BRU 23BX
24BX   BSS 0
       FRGT 24BX
*           NAW←P+1;
       LDA P; ADD =1; STA NAW
*           FOR NFW←NEWP TO 2B7 DO;
       LDA NEWP; STA NFW; BRU 27BX
26BX   BSS 0
       FRGT 26BX
*             R←NEWP;
       LDA NEWP; STA R
*             FP←FETCH(NFW);
       STA ASA
       LDA NFW; BRM GET; STA FP
*             FFTYPE←FP$TYPE;
       LRSH 17B; ETR =17B; STA FFTYPE
*             IF FFTYPE=0 DO;
       SKE =0; BRU 31BX
*               BLLTRAP(2) IF FP$ENDF=1 AND NT=0;
       LDA FP; LRSH 16B; ETR =1; SKE =1; BRU 32BX
       LDA NT; SKE =0; BRU 32BX
       LDA =2; BRM BLLQ
32BX   BSS 0
       FRGT 32BX
*               NEWF←NEWF-FP$D;
       LDA FP; ETR =37777B; CNA; ADM NEWF
*             ELSE DO;
       BRU 30BX
31BX   BSS 0
       FRGT 31BX
*               BLLTRAP(2) IF NT=1;
       LDA NT; SKE =1; BRU 34BX
       LDA =2; BRM BLLQ
34BX   BSS 0
       FRGT 34BX
*               IF SPEC=1 DO;
       LDA SPEC; SKE =1; BRU 36BX
*                 SPEC←0;
       LDA =0; STA SPEC
*  AP←POPW;
       LDA POPW; STA AP
*  NAW←NAW-1;
       SKR NAW; NOP 0
*                 ATYPE←FFTYPE;
       LDA FFTYPE; STA ATYPE
*                 ASTR←FP$FSTR;
       LDA FP; LRSH 23B; ETR =1; STA ASTR
*                 AENDF←FP$ENDF;
       LDA FP; LRSH 16B; ETR =1; STA AENDF
*               ELSE DO;
       BRU 35BX
36BX   BSS 0
       FRGT 36BX
*                 R←P;
       LDA P; STA R
*                 AP←FETCH(NAW);
       STA ASA
       LDA NAW; BRM GET; STA AP
*                 ATYPE←AP$TYPE;
       LRSH 17B; ETR =17B; STA ATYPE
*                 ASTR←AP$STR;
       LDA AP; LRSH 23B; ETR =3; STA ASTR
*                 AENDF←AP$ENDF;
       LDA AP; LRSH 16B; ETR =1; STA AENDF
*               ENDIF;
35BX   BSS 0
       FRGT 35BX
*               BLLTRAP(2) IF AENDF#FP$ENDF;
       LDA FP; LRSH 16B; ETR =1; SKE AENDF; BRU 37BX; BRU 40BX
37BX   LDA =2; BRM BLLQ
40BX   BSS 0
       FRGT 40BX,37BX
*               BLLTRAP(3) IF ATYPE#FFTYPE;
       LDA ATYPE; SKE FFTYPE; BRU 41BX; BRU 42BX
41BX   LDA =3; BRM BLLQ
42BX   BSS 0
       FRGT 42BX,41BX
*               NAWP←NAW;
       LDA NAW; STA NAWP
*               IF ASTR=0 DO;
       LDA ASTR; SKE =0; BRU 44BX
*                 BLLTRAP(3) IF FP$FSTR=1;
       LDA FP; LRSH 23B; ETR =1; SKE =1; BRU 45BX
       LDA =3; BRM BLLQ
45BX   BSS 0
       FRGT 45BX
*               ELSEIF ASTR=2 DO;
       BRU 43BX
44BX   LDA ASTR; SKE =2; BRU 46BX
       FRGT 44BX
*                 NAW←NAW+1;
       MIN NAW
*                 IF FP$FSTR=0 DO;
       LDA FP; SKA =2000000B; BRU 50BX
*                    BLLTRAP(3) IF FTN=0;
       LDA FTN; SKE =0; BRU 51BX
       LDA =3; BRM BLLQ
51BX   BSS 0
       FRGT 51BX
*                    FTNATF←1;
       LDA =1; STA FTNATF
*                    GOTO BL2;
       BRU ←BL2
*                 ENDIF;
50BX   BSS 0
47BX   BSS 0
       FRGT 47BX,50BX
*               ELSE DO;
       BRU 43BX
46BX   BSS 0
       FRGT 46BX
*                 BLLTRAP(3) IF FP$FSTR=0;
       LDA FP; SKA =2000000B; BRU 52BX
       LDA =3; BRM BLLQ
52BX   BSS 0
       FRGT 52BX
*               ENDIF;
43BX   BSS 0
       FRGT 43BX
* 
*               IF (AP AND 70037777B)#0 DO;
       LDA AP; SKA =70037777B; BRU 54BX; BRU 55BX
54BX   BSS 0
       FRGT 54BX
*                 R←P;
       LDA P; STA R
*                 IR←XR;
       LDA XR; STA IR
*  IAI(NAWP);
       LDA R; STA ASA
       LDA NAWP; BRM AEA; STA Q
*                 ARGADR←Q;
       STA ARGADR
*                 IF FP$CVAL#0 DO;
       LDA FP; SKA =4000000B; BRU 57BX; BRU 60BX
57BX   BSS 0
       FRGT 57BX
*                    BLLTRAP(5) IF EIM>-1;
       LDA EIM; SKG =-1; BRU 61BX
       LDA =5; BRM BLLQ
61BX   BSS 0
       FRGT 61BX
*                    RINGCHECK(ARGADR);
       LDA R; STA ASA
       LDA ARGADR; BRM RNG
*  TEMP←ARGADR;
       LDA ARGADR; STA TEMP
*                    TEMP←TEMP+1B7 IF ROF>-1 OR ASTR=3;
       LDA ROF; SKG =-1; BRU 62BX; BRU 64BX
62BX   LDA ASTR; SKE =3; BRU 63BX; BRU 64BX
63BX   BRU 66BX
64BX   LDA =10000000B; ADM TEMP
66BX   BSS 0
       FRGT 66BX,64BX,63BX,62BX
*                    FFTYPE←1;
       LDA =1; STA FFTYPE
*  FP$FSTR←1;
       LDA =1; LSH 23B; ETR =2000000B; XMA FP; ETR =75777777B
       ADM FP
*                 ELSEIF EAB > -1 DO;
       BRU 56BX
60BX   LDA EAB; SKG =-1; BRU 67BX
       FRGT 60BX
*                   TEMP←POP(BRM,GETO,Q) IF FFTYPE =1 ELSE FETCH(ARGADR);
       LDA FFTYPE; SKE =1; BRU 70BX
       LDA Q; BRM GETO; STA TEMP; BRU 71BX
70BX   LDA R; STA ASA
       LDA ARGADR; BRM GET
71BX   BSS 0
       FRGT 71BX,70BX
*                 ELSEIF EIM>-1 DO;
       BRU 56BX
67BX   LDA EIM; SKG =-1; BRU 72BX
       FRGT 67BX
*                   BLLTRAP(5) IF FP$FSTR=0 OR FFTYPE#1;
       LDA FP; SKA =2000000B; BRU 73BX; BRU 75BX
73BX   LDA FFTYPE; SKE =1; BRU 75BX; BRU 76BX
75BX   LDA =5; BRM BLLQ
76BX   BSS 0
       FRGT 76BX,75BX,73BX
*                   TEMP←ARGADR;
       LDA ARGADR; STA TEMP
*                 ELSE DO;
       BRU 56BX
72BX   BSS 0
       FRGT 72BX
*                   TEMP←FETCH(ARGADR);
       LDA R; STA ASA
       LDA ARGADR; BRM GET; STA TEMP
*                 ENDIF;
56BX   BSS 0
       FRGT 56BX
*                 RASA←R;
       LDA R; STA RASA
*  ROF←-1;
       LDA =-1; STA ROF
* 
*                 IF (FP AND 70034000B)=7B7 DO;
       LDA FP; ETR =70034000B; SKE =70000000B; BRU 100BX
*                    CPYADR←NEWL+(FP AND 3777B);
       LDA FP; ETR =3777B; ADD NEWL; STA CPYADR
*                 ELSEIF (FP AND 7B7)= 0 DO;
       BRU 77BX
100BX  LDA FP; SKA =70000000B; BRU 101BX
       FRGT 100BX
*                    CPYADR←NEWG+(FP AND 37777B);
       ETR =37777B; ADD NEWG; STA CPYADR
*                 ELSE DO;
       BRU 77BX
101BX  BSS 0
       FRGT 101BX
*                    BLLTRAP(4);
       LDA =4; BRM BLLQ
*                 ENDIF;
77BX   BSS 0
       FRGT 77BX
*                 GOTO ARRAYY IF FP$FSTR=0;
       LDA FP; SKA =2000000B; BRU 102BX; BRU ←ARRAYY
102BX  BSS 0
       FRGT 102BX
*                 COUNT←(1 IF FFTYPE=1 ELSE
*                       2 IF FFTYPE=2 ELSE
*                       2 IF FFTYPE=3 ELSE
*                       4 IF FFTYPE=4 ELSE
*                       4 IF FFTYPE=5 ELSE
*                       4 IF FFTYPE=6 ELSE
*                       GOTO STRNG IF FFTYPE=7 ELSE
*                       GOTO LABEL IF FFTYPE=8 ELSE
*                       BLLTRAP(4));
       LDA FFTYPE; SKE =1; BRU 104BX
       LDA =1; BRU 105BX
104BX  LDA FFTYPE; SKE =2; BRU 106BX
       LDA =2; BRU 107BX
106BX  LDA FFTYPE; SKE =3; BRU 110BX
       LDA =2; BRU 111BX
110BX  LDA FFTYPE; SKE =4; BRU 112BX
       LDA =4; BRU 113BX
112BX  LDA FFTYPE; SKE =5; BRU 114BX
       LDA =4; BRU 115BX
114BX  LDA FFTYPE; SKE =6; BRU 116BX
       LDA =4; BRU 117BX
116BX  LDA FFTYPE; SKE =7; BRU 120BX; BRU ←STRNG
120BX  BSS 0
       FRGT 116BX,114BX,112BX,110BX,106BX,104BX
       LDA FFTYPE; SKE =10B; BRU 122BX; BRU ←LABEL
122BX  LDA =4; BRM BLLQ
117BX  BSS 0
115BX  BSS 0
113BX  BSS 0
111BX  BSS 0
107BX  BSS 0
       FRGT 111BX,113BX,115BX,117BX,122BX,120BX
105BX  STA COUNT
       FRGT 105BX,107BX
:BL1   BSS 0
* BL1:            R←NEWP;
       LDA NEWP; STA R
*                 PUT(CPYADR,TEMP);
       STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA TEMP; STA IWT
       LDA CPYADR; BRM PUTO
*                 COUNT←COUNT-1;
       SKR COUNT; NOP 0
*                 IF COUNT#0 DO;
       LDA COUNT; SKE =0; BRU 125BX; BRU 126BX
125BX  BSS 0
       FRGT 125BX
*                    R←RASA;
       LDA RASA; STA R
*                    ARGADR←ARGADR+1;
       MIN ARGADR
*                    TEMP←FETCH(ARGADR);
       STA ASA
       LDA ARGADR; BRM GET; STA TEMP
*                    CPYADR←CPYADR+1;
       MIN CPYADR
*                    GOTO BL1;
       BRU ←BL1
*                 ENDIF;
126BX  BSS 0
124BX  BSS 0
       FRGT 124BX,126BX
*               ELSE DO;
       BRU 53BX
55BX   BSS 0
       FRGT 55BX
*                 BLLTRAP(5) IF FP$CVAL#0 OR FP$FSTR=0;
       LDA FP; SKA =4000000B; BRU 127BX; SKA =2000000B; BRU 130BX
       BRU 127BX
130BX  BRU 132BX
127BX  LDA =5; BRM BLLQ
132BX  BSS 0
       FRGT 132BX,127BX,130BX
*                 COUNT←1 IF FFTYPE=1 ELSE
*                       2 IF FFTYPE=2 ELSE
*                       2 IF FFTYPE=3 ELSE
*                       4 IF FFTYPE=4 ELSE
*                       4 IF FFTYPE=5 ELSE
*                       4 IF FFTYPE=6 ELSE
*                       BLLTRAP(4);
       LDA FFTYPE; SKE =1; BRU 133BX
       LDA =1; STA COUNT; BRU 134BX
133BX  LDA FFTYPE; SKE =2; BRU 135BX; BRU 136BX
135BX  LDA FFTYPE; SKE =3; BRU 137BX; BRU 140BX
137BX  LDA FFTYPE; SKE =4; BRU 141BX; BRU 142BX
141BX  LDA FFTYPE; SKE =5; BRU 143BX; BRU 144BX
143BX  LDA FFTYPE; SKE =6; BRU 145BX; BRU 146BX
145BX  LDA =4; BRM BLLQ
146BX  BSS 0
       FRGT 145BX,143BX,141BX,137BX,135BX,133BX
144BX  BSS 0
142BX  BSS 0
140BX  BSS 0
136BX  BSS 0
134BX  BSS 0
       FRGT 134BX,136BX,140BX,142BX,144BX,146BX
*                 IF (FP AND 70034000B)=7B7 DO;
       LDA FP; ETR =70034000B; SKE =70000000B; BRU 150BX
*                    CPYADR←NEWL+(FP AND 3777B);
       LDA FP; ETR =3777B; ADD NEWL; STA CPYADR
*                 ELSEIF (FP AND 7B7)= 0 DO;
       BRU 147BX
150BX  LDA FP; SKA =70000000B; BRU 151BX
       FRGT 150BX
*                    CPYADR←NEWG+(FP AND 37777B);
       ETR =37777B; ADD NEWG; STA CPYADR
*                 ELSE DO;
       BRU 147BX
151BX  BSS 0
       FRGT 151BX
*                    BLLTRAP(4);
       LDA =4; BRM BLLQ
*                 ENDIF;
147BX  BSS 0
       FRGT 147BX
*                 R←NEWP;
       LDA NEWP; STA R
*                 PUT(CPYADR,AR);
       STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA AR; STA IWT
       LDA CPYADR; BRM PUTO
*                 IF COUNT#1 DO;
       LDA COUNT; SKE =1; BRU 153BX; BRU 154BX
153BX  BSS 0
       FRGT 153BX
*                    PUT(CPYADR+1,BR);
       LDA R; STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA BR; STA IWT
       LDA CPYADR; ADD =1; BRM PUTO
*                    IF COUNT#2 DO;
       LDA COUNT; SKE =2; BRU 156BX; BRU 157BX
156BX  BSS 0
       FRGT 156BX
*                    PUT(CPYADR+2,CR);
       LDA R; STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA CR; STA IWT
       LDA CPYADR; ADD =2; BRM PUTO
*                       PUT(CPYADR+3,DR);
       LDA R; STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA DR; STA IWT
       LDA CPYADR; ADD =3; BRM PUTO
*                    ENDIF;
157BX  BSS 0
155BX  BSS 0
       FRGT 155BX,157BX
*                 ENDIF;
154BX  BSS 0
152BX  BSS 0
       FRGT 152BX,154BX
*               ENDIF;
53BX   BSS 0
       FRGT 53BX
:BL2   BSS 0
* BL2:          NAW←NAW+1;
       MIN NAW
*             ENDIF;
30BX   BSS 0
       FRGT 30BX
* *           GOTO TO IF INTERRUPT;
* *             GOTO BL3 IF FP$ENDF=1;
       LDA FP; LRSH 16B; ETR =1; SKE =1; BRU 160BX; BRU ←BL3
160BX  BSS 0
       FRGT 160BX
*           ENDFOR;
       MIN NFW
       LDA NFW
27BX   SKG =20000000B; BRU 26BX
       FRGT 27BX
:BL3   BSS 0
* 
* BL3:      NEWP←NFW+1;
       LDA NFW; ADD =1; STA NEWP
*         ENDIF;
23BX   BSS 0
       FRGT 23BX
*         IF CLL=1 DO;
       LDA CLL; SKE =1; BRU 163BX
*           R←NEWP;
       LDA NEWP; STA R
*           PUT(NEWL,NAW);
       STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA NAW; STA IWT
       LDA NEWL; BRM PUTO
*           PUT(NEWL+1,LR OR (FCPA(CPR) OR FSTK(STK)));
       LDA R; STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA STK; LSH 26B; ETR =20000000B; STA T:+1
       LDA CPR; LSH 25B; ETR =10000000B; MRG T:+1; MRG LR; STA IWT
       LDA NEWL; ADD =1; BRM PUTO
*           PUT(NEWL+2,NEWF);
       LDA R; STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA NEWF; STA IWT
       LDA NEWL; ADD =2; BRM PUTO
*           PUT(NEWG+14B,GR) IF MCAL>0 AND GTRING(NEWP)>GTRING(P);
       LDA MCAL; SKG =0; BRU 164BX
       LDA P; BRM GRING; STA T:+1
       LDA NEWP; BRM GRING; SKG T:+1; BRU 164BX
       LDA R; STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA GR; STA IWT
       LDA NEWG; ADD =14B; BRM PUTO
164BX  BSS 0
       FRGT 164BX
*         ENDIF;
163BX  BSS 0
162BX  BSS 0
       FRGT 162BX,163BX
*         IF STK=1 DO;
       LDA STK; SKE =1; BRU 167BX
*           IF CLL=1 DO;
       LDA CLL; SKE =1; BRU 171BX
*             R←NEWP;
       LDA NEWP; STA R
*             PUT(NEWG+2,SP);
       STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA SP; STA IWT
       LDA NEWG; ADD =2; BRM PUTO
*           ELSE DO;
       BRU 170BX
171BX  BSS 0
       FRGT 171BX
*             R←P;
       LDA P; STA R
*             PUT(GR+2,SP);
       STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA SP; STA IWT
       LDA GR; ADD =2; BRM PUTO
*           ENDIF;
170BX  BSS 0
       FRGT 170BX
*         ENDIF;
167BX  BSS 0
166BX  BSS 0
       FRGT 166BX,167BX
*         MENTER() IF MCAL=2;
       LDA MCAL; SKE =2; BRU 172BX; BRM MENT
172BX  BSS 0
       FRGT 172BX
*         OLDG←GR;
       LDA GR; STA OLDG
*  LR←NEWL;
       LDA NEWL; STA LR
*  GR←NEWG;
       LDA NEWG; STA GR
*  PREVP←P;
       LDA P; STA PREVP
*  P←NEWP;
       LDA NEWP; STA P
*         P←P+1 IF FTN=1 AND FTNATF=0;
       LDA FTN; SKE =1; BRU 173BX
       LDA FTNATF; SKE =0; BRU 173BX; MIN P
173BX  BSS 0
       FRGT 173BX
*        IF RET=1 DO;
       LDA RET; SKE =1; BRU 176BX
*            MEXIT(PREVP,SSR);
       LDA PREVP; LDB SSR; BRM MEXT
*           GR←FETCH(OLDG+14B);
       LDA R; STA ASA
       LDA OLDG; ADD =14B; BRM GET; STA GR
*        ENDIF;
176BX  BSS 0
175BX  BSS 0
       FRGT 175BX,176BX
*         DONE;
       BRU N
:STRNG BSS 0
* STRNG: COUNT←4;
       LDA =4; STA COUNT
*  GOTO BL1 IF MCAL=0;
       LDA MCAL; SKE =0; BRU 177BX; BRU ←BL1
177BX  BSS 0
       FRGT 177BX
*        BSPOS←TEMP$FCTYPE;
       LDA TEMP; LRSH 24B; ETR =3; STA BSPOS
*        OLDTEMP←0;
       LDA =0; STA OLDTEM
*        FOR I←0 TO 3 DO;
       LDA =0; STA I; BRU 202BX
201BX  BSS 0
       FRGT 201BX
*           R←P;
       LDA P; STA R
*  RINGCHECK(TEMP);
       STA ASA
       LDA TEMP; BRM RNG
*         BLLTRAP(6) IF OLDTEMP$FWA>TEMP$FWA OR
*                       OLDTEMP$FWA=TEMP$FWA AND
*                       OLDTEMP$FCPOS>TEMP$FCPOS;
       LDA TEMP; ETR =777777B; STA T:+1
       LDA OLDTEM; ETR =777777B; SKG T:+1; BRU 203BX; BRU 206BX
203BX  LDA TEMP; ETR =777777B; STA T:+2
       LDA OLDTEM; ETR =777777B; SKE T:+2; BRU 204BX
       LDA TEMP; LRSH 22B; ETR =3; STA T:+3
       LDA OLDTEM; LRSH 22B; ETR =3; SKG T:+3; BRU 204BX; BRU 206BX
204BX  BRU 210BX
206BX  LDA =6; BRM BLLQ
210BX  BSS 0
       FRGT 210BX,206BX,204BX,203BX
*           R←NEWP;
       LDA NEWP; STA R
*           TEMP$FCTYPE←BSPOS;
       LDA BSPOS; LSH 24B; ETR =14000000B; XMA TEMP; ETR =63777777B
       ADM TEMP
*           TEMP$FIWT←2;
       LDA =2; CLB; LSH 26B; XMA TEMP; ETR =17777777B; ADM TEMP
*           PUT(CPYADR+I,TEMP);
       LDA R; STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA TEMP; STA IWT
       LDA CPYADR; ADD I; BRM PUTO
*           GOTO BL2 IF I=3;
       LDA I; SKE =3; BRU 211BX; BRU ←BL2
211BX  BSS 0
       FRGT 211BX
*           R←RASA;
       LDA RASA; STA R
*           OLDTEMP←TEMP;
       LDA TEMP; STA OLDTEM
*           TEMP←FETCH(ARGADR+I+1);
       LDA R; STA ASA
       LDA ARGADR; ADD I; ADD =1; BRM GET; STA TEMP
*        ENDFOR;
       MIN I
       LDA I
202BX  SKG =3; BRU 201BX
       FRGT 202BX
:LABEL BSS 0
* 
* LABEL:  IF MCAL=0 DO;
       LDA MCAL; SKE =0; BRU 214BX
*           R←NEWP;
       LDA NEWP; STA R
*           PUT(CPYADR,TEMP);
       STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA TEMP; STA IWT
       LDA CPYADR; BRM PUTO
*           R←RASA;
       LDA RASA; STA R
*           TEMP←FETCH(ARGADR+1);
       STA ASA
       LDA ARGADR; ADD =1; BRM GET; STA TEMP
*           R←NEWP;
       LDA NEWP; STA R
:BL4   BSS 0
* BL4:      PUT(CPYADR+1,(TEMP IF TEMP$FE#0 ELSE
*                         TEMP+LR IF STK=0 ELSE
*                         TEMP+NEWL OR (FSTK(1)+FUWSTK(1))));
       LDA R; STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA TEMP; SKA =777777B; BRU 215BX; BRU 216BX
215BX  LDA TEMP; BRU 217BX
216BX  LDA STK; SKE =0; BRU 220BX
       LDA TEMP; ADD LR; BRU 221BX
220BX  LDA TEMP; ADD NEWL; MRG =24000000B
221BX  BSS 0
217BX  STA IWT
       LDA CPYADR; ADD =1; BRM PUTO
       FRGT 217BX,221BX,220BX,216BX,215BX
*           GOTO BL2;
       BRU ←BL2
*         ELSE DO;
       BRU 213BX
214BX  BSS 0
       FRGT 214BX
*           IR←XR;
       LDA XR; STA IR
*  IA(ARGADR);
       LDA R; STA ASA
       LDA ARGADR; BRM IEAC; STA Q
*  ROF←-1;
       LDA =-1; STA ROF
*           BLLTRAP(6) IF EIM>-1;
       LDA EIM; SKG =-1; BRU 222BX
       LDA =6; BRM BLLQ
222BX  BSS 0
       FRGT 222BX
*           R←RASA;
       LDA RASA; STA R
*           TEMP←FETCH(ARGADR+1);
       STA ASA
       LDA ARGADR; ADD =1; BRM GET; STA TEMP
*           R←ARGADR;
       LDA ARGADR; STA R
*           Q←Q+FETCH(LR+2) IF TEMP$FREL#0;
       LDA TEMP; SKA =2000000B; BRU 223BX; BRU 224BX
223BX  LDA R; STA ASA
       LDA LR; ADD =2; BRM GET; ADM Q
224BX  BSS 0
       FRGT 224BX,223BX
*           RINGCHECK(Q);
       LDA R; STA ASA
       LDA Q; BRM RNG
*           BLLTRAP(6) IF TEMP$FE#0;
       LDA TEMP; SKA =777777B; BRU 225BX; BRU 226BX
225BX  LDA =6; BRM BLLQ
226BX  BSS 0
       FRGT 226BX,225BX
*           TEMP←TEMP AND NOT(FCLL(1)+FSTK(1)+FREL(1));
       LDA TEMP; ETR =15777777B; STA TEMP
*           R←NEWP;
       LDA NEWP; STA R
*           PUT(CPYADR,Q);
       STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA Q; STA IWT
       LDA CPYADR; BRM PUTO
*  GOTO BL4;
       BRU ←BL4
*        ENDIF;
213BX  BSS 0
       FRGT 213BX
:ARRAY BSS 0
* ARRAYY: R←NEWP;
       LDA NEWP; STA R
*        PUT(CPYADR,TEMP);
       STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA TEMP; STA IWT
       LDA CPYADR; BRM PUTO
*        BLLTRAP(6) IF TEMP$FIWT#3;
       LDA TEMP; LRSH 26B; SKE =3; BRU 227BX; BRU 230BX
227BX  LDA =6; BRM BLLQ
230BX  BSS 0
       FRGT 230BX,227BX
*        IF MCAL>0 DO;
       LDA MCAL; SKG =0; BRU 232BX
*           IR←(TEMP$SUB IF TEMP$LONG=0 ELSE TEMP$LUB);
       LDA TEMP; SKA =2000000B; BRU 233BX; ETR =377777B; BRU 234BX
233BX  LDA TEMP; ETR =17777B
234BX  STA IR
       FRGT 234BX,233BX
*           IA(ARGADR);
       LDA R; STA ASA
       LDA ARGADR; BRM IEAC; STA Q
*           RINGCHECK(Q);
       LDA R; STA ASA
       LDA Q; BRM RNG
*        ENDIF;
232BX  BSS 0
231BX  BSS 0
       FRGT 231BX,232BX
*        IR←0;
       LDA =0; STA IR
*        R←ARGADR;
       LDA ARGADR; STA R
*        IA(ARGADR+1);
       STA ASA
       LDA ARGADR; ADD =1; BRM IEAC; STA Q
*        BLLTRAP(6) IF EIM>-1;
       LDA EIM; SKG =-1; BRU 235BX
       LDA =6; BRM BLLQ
235BX  BSS 0
       FRGT 235BX
*        RINGCHECK(Q) IF MCAL>0;
       LDA MCAL; SKG =0; BRU 236BX
       LDA R; STA ASA
       LDA Q; BRM RNG
236BX  BSS 0
       FRGT 236BX
*        R←NEWP;
       LDA NEWP; STA R
*        TEMP←Q OR (4B6 IF ROF<0 ELSE 12B6);
       SKN ROF; BRU 237BX
       LDA =4000000B; BRU 240BX
237BX  LDA =12000000B
240BX  MRG Q; STA TEMP
       FRGT 240BX,237BX
*  ROF←-1;
       LDA =-1; STA ROF
*        PUT(CPYADR+1,TEMP);
       LDA R; STA ASA
       LDA =-1; STA EAB; STA EIM
       LDA TEMP; STA IWT
       LDA CPYADR; ADD =1; BRM PUTO
*        GOTO BL2;
       BRU ←BL2
T:     BSS 5
AENDF  BSS 1
AP     BSS 1
ARGADR BSS 1
ASTR   BSS 1
ATYPE  BSS 1
BDADDR BSS 1
BSPOS  BSS 1
CLL    BSS 1
COUNT  BSS 1
CPA    BSS 1
CPR    BSS 1
CPYADR BSS 1
E      BSS 1
FFTYPE BSS 1
FP     BSS 1
FTN    BSS 1
FTNATF BSS 1
I      BSS 1
MCAL   BSS 1
NAW    BSS 1
NAWP   BSS 1
NEWF   BSS 1
NEWG   BSS 1
NEWL   BSS 1
NEWP   BSS 1
NFW    BSS 1
NT     BSS 1
OLDG   BSS 1
OLDTEM BSS 1
POPW   BSS 1
PREVP  BSS 1
R      BSS 1
RASA   BSS 1
RELF   BSS 1
RET    BSS 1
SP     BSS 1
SPEC   BSS 1
STK    BSS 1
TEMP   BSS 1
UWSTK  BSS 1
ARRAYY ZRO :ARRAY
BL1    ZRO :BL1
BL2    ZRO :BL2
BL3    ZRO :BL3
BL4    ZRO :BL4
BLL    ZRO :BLL
BLL1   ZRO :BLL1
BLL2   ZRO :BLL2
BLL3   ZRO :BLL3
BLLN   ZRO :BLLN
BLLX   ZRO :BLLX
CALL   ZRO :CALL
LABEL  ZRO :LABEL
MCALL  ZRO :MCALL
POPL   ZRO :POPL
STRNG  ZRO :STRNG
UCALL  ZRO :UCALL

FADDF  EQU     777777B
* BLL ENTRY POINTS TO EAC
*INDIRECT ADDRESS CALCULATION
*ASSUMES ASA AND IR ARE SETUP
IEAC   ZRO; LDB =-1; STB EIM; STB EAB; STB ROF
       LDB =16; STB ILIMCT; LDB IEAC; STB EAC; BRU EA3
*ARGUMENT EFFECTIVE ADDRESS
AEA    ZRO; LDB AEA; STB EAC; BRM GET; BRU AEA1
EAC    ZRO; LDB XR; STB IR
AEA1   LDB =-1; STB EIM; STB EAB; STB ROF; LDB =16; STB ILIMCT
       CAX; LRSH 21; ETR =7; CXB; XXA; ETR =37777B
       LDX EADT,2; BRU 0,2
*   DIRECT ADDRESSING
EAC0   ADD GR
EAC01  ETR =FADDF; BRR EAC
*   INDEXED
EAC2   ADD XR; BRU EAC01

*  BASED INDEXED
EAC3   ETR =377B; SKE =0; BRU EAC31; LDA IR; BRU EAC33
EAC31  SKA =200B; BRU EAC32; ADD GR; BRU EAC33
EAC32  ADD LR; SUB =200B
EAC33  STA EAT; LSH 16; ETR =77B
       SKE =0; BRU EAC34; LDA IR; BRU EAC37
EAC34  SKA =40B; BRU EAC35; ADD GR; BRU EAC36
EAC35  ADD LR; SUB =40B
EAC36  BRM GET
EAC37  ETR =FADDF; STA IR; LDA EAT; ETR =FADDF; BRU EA3
*  POINTER DISPLACEMENT
EAC4   BRM EAPD; BRU EAC01
EAPD   ZRO; ETR =377B; STA EAT; LSH 16; ETR =77B
       LSH 18; RSH 18; XMA EAT; SKE =0; BRU EAC41
       LDA IR; BRU EAC44
EAC41  SKA =200B; BRU EAC42; ADD GR; BRU EAC43
EAC42  ADD LR; SUB =200B
EAC43  BRM GET
EAC44  ADD EAT; ETR =FADDF; BRR EAPD
*  INDIRECT POINTER DISPLACEMENT
EAC5   BRM EAPD; BRU EA3
*  BASE INDEX DISPLACEMENT
EAC6   ETR =377B; STA EAT; LSH 16; ETR =77B
       LSH 18; RSH 18; XMA EAT; SKE =0; BRU EAC61
       CLA; BRU EAC64
EAC61  SKA =200B; BRU EAC62; ADD GR; BRU EAC63
EAC62  ADD LR; SUB =200B
EAC63  BRM GET
EAC64  ADD EAT; ETR =FADDF; XMA IR; ETR =FADDF; BRU EA3

*   RELATIVE
EAC7   SKB =2B4; BRU EAC71; SKB =1B4; BRU EAC72

*L-RELATIVE
       LSH 13; LRSH 13; ADD LR
       SKB =4B3; BRU EA3; BRU EAC01
*SOURCE RELATIVE
EAC72  LSH 12; RSH 12; ADD ASA; BRU EAC01
*
EAC71  SKB =1B4; BRU EAC73
*INDIRECT SOURCE RELATIVE
       LSH 12; RSH 12; ADD ASA; BRU EA3
*IMMEDIATE
EAC73  LSH 13; RSH 13; MIN EIM; SKB =4B3; BRR EAC; ADD IR; BRR EAC
EAC1   ADD GR
*   INDIRECTION
EA3    SKR ILIMCT; BRU *+2; BRM ILIMQ; BRM GET; BRM BOC
EA0    SKA =4B7; BRU EA34; SKA =2B7; BRU EA31
*   NORMAL INDIRECTION
       SKA =1B6; BRM IATRPQ
       LRSH 19; ETR =7; CAX
       LSH 19; ETR =FADDF; CAB; ETR =37777B
       LDX EAIT,2; BRU 0,2
EADT   DATA EAC0,EAC1,EAC2,EAC3,EAC4,EAC5,EAC6,EAC7
EAIT   DATA EAI0,EAI1,EAI2,EAC3,EAI4,EAI5,EAC6,EAI7
EAI4   STB ROF
EAI0   CBA; BRU EAC01
EAI1   CBA; BRU EA3
EAI5   CBA; ADD IR; STA ROF; BRU EAC01
EAI2   CBA; ADD IR; BRU EAC01
EAI7   CBA; SKB =2B5; BRU EAI71; SKB =1B5; BRU EAI72
*L-RELATIVE
       LSH 10; LRSH 10; ADD LR; SKB =4B5; ADD IR
       SKB =4B4; BRU EA3; BRU EAC01
*SOURCE RELATIVE
EAI72  LSH 9; RSH 9; ADD ASA; SKB =4B5; ADD IR; BRU EAC01
*
EAI71  SKB =1B5; BRU EAI73
*INDIRECT SOURCE RELATIVE
       LSH 9; RSH 9; ADD ASA; SKB =4B5; ADD IR; BRU EA3
*IMMEDIATE
EAI73  LSH 13; RSH 13; MIN EIM
       SKB =4B4; BRR EAC; ADD IR; BRR EAC
*   FIELD INDIRECTION
EA31   LRSH 21; ETR =1; STA ESE
       CLA; LSH 5; STA EAL; SKG =0; STA ESE
       CLA; LSH 5; STA EAB
       CBA; RSH 13; ADD IR; BRU EAC01
EA34   SKA =2B7; BRU EA33
*   STRING INDIRECTION
       LRSH 20; ETR =3; CAX; LDA EAST,2; STA EAL
       CLA; STA ESE; LSH 2; STB EAT
       MUL EAL; LSH 23; SKG =23; SKG =-1; BRM TIQ
       STA EAB; LDB EAT; LSH 18; BRU EAC01
EAST   DATA 6,8,12,24
*   ARRAY INDIRECTION
EA33   SKN LAXF; EOR =4B6; SKA =4B6; BRM IATRPQ
       LRSH 21; ETR =1; STA EAT
       SKB =2B7; BRU EA331;
       LSH 4; ETR =3; STA EMULT; CLA; LSH 17; BRU EA332
EA331  LSH 8; ETR =77B; STA EMULT; CLA; LSH 13
EA332  XMA IR; SKG IR; BRU *+2; BRM ABEQ
       SUB EAT; SKG =-1; BRM ABEQ
       MIN EMULT; MUL EMULT; LSH 23; STA IR
       LDA ASA; ADD =1; SKR ILIMCT; BRU *+2; BRM ILIMQ; BRM GET; BRM BOC
       ETR =@6B7; BRU EA0

* ACCESS SUBROUTINES
ACCS   LMACRO A
A(0)   ZRO  0
       IF A(4); STA PUTIT; CXA; ENDF
       STA QQ
       IF A(4)>-1; BRM RNG; ENDF; IF A(4)=0; STA ASA; ENDF
       LRSH 11; CAX; STX MAPX; LDA SPM,2
       SKA =PMEF; BRM MAP
       IF A(4)
       SKA =PMRO; BRM PROQ; SKA =PMDB; BRU PUT9
       MRG =PMDB; STA SPM,2; STB MAPB; STA MAPA; BRM GETPMT; BRM PNIMQ
       BRM CHTL; BRM PNICQ; ADD =3; STA ATEMP; SFETCH
       MRG =CHTDB; LDX ATEMP; BRM STOREM
       LDA MAPA; LDB MAPB
PUT9   EQU *
       ENDF
       ETR =377B; LCY 11
A(0)3  EQU *
       IF A(4); CAX; LDA PUTIT; BRM STOREM; ELSE; SFETCH; ENDF
       SKR TUC; BRR A(0); BRM TUR; BRR A(0)
       ENDM
*   READ ONLY TRAP
*   RING PROTECTION CHECK
*   ARGS  (A) = TARGET ADDRESS, (ASA) = SOURCE ADDRESS
*   A IS PRESERVED
RNG    ZRO; STA RINGA; BRM GRING; STA RINGT; LDA ASA; BRM GRING; XMA RINGT
       SKG RINGT; BRU *+2; BRM MACCQ; LDA RINGA; BRR RNG
*
GRING  ZRO; ETR =FADDF; CLB; SKG =SUTIL-1; BRU GRING1
       LDB =2; SKG =SUTIL+2777B; BRU GRING1; SKG =SMON-1; LDB =1
GRING1 CBA; BRR GRING
*
PMEF   EQU     2B3
PMRO   EQU     4B2
PMDB   EQU     1B3
PMTB   EQU     300B
CHTDB  EQU     4B7
BMAP   EQU     200B
PMTIF  EQU     377B
PMTB   EQU     300B
PMSF   EQU     4B3
PMTRO  EQU     4B7
MAPRO  EQU     4B3
PREF   EQU     2B7
DIRTY  EQU     4B7

*   MAP LOADS THE PHYSICAL MAP
*      MAPX   = PHYSICAL MAP INDEX TO BE LOADED
*   RETURN  (A) = LOADED PHYSICAL MAP ENTRY
*           B PRESERVED
MAP    ZRO; STB MAPB
*   FETCH MAP ENTRY
       BRM GETPMT; BRM PNIMQ; STA MAPP; CXA; CLB
* TO SET PMRO
       SKA =MAPRO; LDB =PMRO; STB MAPM
* SET PREF
       LDA MAPP; ADD =3; STA ATEMP; SFETCH
       MRG =PREF; LDX ATEMP; BRM STOREM
       SKA =PMSF; BRU *+2; BRM PNICQ
* TO SET PMRO
       LDB =PMRO; SKA =PMTRO; STB MAPM
       LDA MAPP; BRM CHTL; BRM PNICQ; ADD =3; SFETCH
* MAKE PM ENTRY
       CAX; ETR =FADDF; LRSH 11; CXB; SKB =DIRTY; MRG =PMDB; MRG MAPM
       LDX MAPX; STA SPM,2; LDB MAPB; BRR MAP
* GET PMT ADDRESS
* MAP INDEX IN MAPX
*  SKIP RETURN IF PAGE FOUND
*  (A) = PMT INDEX
GETPMT ZRO; LDA MAPX; LRSH 1; STB MAPM; ADD =BMAP; ADD CBA
       SFETCH; SKN MAPM; LRSH 12; CAX; ETR =PMTIF; SKG =0; BRR GETPMT
       SUB =1; CLB; LSH 2; ADD =PMTB; ADD CBA; MIN GETPMT; BRR GETPMT
* INSTRUCTION FETCH
IGET   ACCS EBA,NLBA,NBK,-1
* OPERAND FETCH
GET    ACCS ERA,NLRA,NRB,0
* OPERAND STORE
PUT    ACCS EPA,NLPA,NPB,1

*
* TIME OUT PROCESSOR
*
TUR    ZRO; BRR TUR    TIME OUT PROCESSOR LOGIC GOES HERE

*
* INSTRUCTION DISPATCHER
*
IDT    DATA ITIQ,ILDA,ILDB,ILDX,ILDD,IEAX,ILNX,IXMA
       DATA IAND,IIOR,IEOR,ISTD,ISTF,ISTA,ISTB,ISTX
       DATA IADD,ISUB,IADC,ISUC,IADM,IADX,IMIN,IMDC
       DATA IMUL,IDIV,IICP,ICPZ,ICMZ,IISD,IDSD,IEXU
       DATA IASHD,IASHA,ILSHD,ILSHA,ICYD,ICYA,ITSB,ILAX
       DATA IBRU,IBLT,IBEQ,IBLE,IBGT,IBNE,IBGE,IBLL
       DATA IBLLN,IBRX,IBSX,ISRS,IEACI,ITIQ,ITIQ,ITIQ
       DATA IFLX,IFLD,IFCP,IFAD,IFSB,IFMP,IFDV,IOPR
*
* INSTRUCTION ROUTINES
*
*
IBRU   SEAC
       STA P
       BRU N
*   NORMAL FETCH INSTRUCTION.
IX     BRM GETO; STX IW
IX1    LDA EA; ETR =77B5; ADM IW
IWX    LDA AR; LDB BR; LDX XR
IW     ZRO; BRU *+2; MIN P
       STA AR; STB BR; STX XR
ICC2   LDB =2; SKG =0; LDB =1; SKG =-1; CLB
       LSH 34; XMA SSR; ETR =@6000B; ADM SSR; BRU INOP
*   NORMAL STORE INSTRUCTIONS
ISTX   LDB XR; BRU IXS
*
ISTB   LDB BR; BRU IXS
*
ISTA   LDB AR
IXS    STB IWT; SEAC; BRM PUTO; BRU INOP
*LOAD INSTRUCTIONS
ILDA   BRM GETO; STA AR; BRU ICC2
ILDB   BRM GETO; STA BR; BRU ICC2
ILDX   BRM GETO; STA XR; BRU INOP
*
*   RCH INSTRUCTION
*
IBRX   MIN XR; SKN XR; BRU INOP; BRU IBRU
*
IEAX   SEAC; BRM RNG; STA XR; BRU INOP
*
IEACI  BRU INI

*
ILDD   SEAC; STA T; LDB SSR; SKB =TQFLAG; BRU ILDD1
ILDD2  ADD =1; BRM GET; STA BR
       LDA T; BRM GET; STA AR; BRU ICC2
ILDD1  ADD =3; BRM GET; STA DR
       LDA T; ADD =2; BRM GET; STA CR
       LDA T; BRU ILDD2
*
ISTD   SEAC; SKN ROF; BRM ROQ; STA T; LDB SSR; SKB =TQFLAG; BRU ISTD1
ISTD2  ADD =1; CAX; LDA BR; BRM PUT
       LDA T; CAX; LDA AR; BRM PUT
       LDA SSR; ETR =@TQFLAG; SKA =PQFLAG; MRG =TQFLAG; STA SSR
       BRU INOP
ISTD1  ADD =3; CAX; LDA DR; BRM PUT
       LDA T; ADD =2; CAX; LDA CR; BRM PUT
       LDA T; BRU ISTD2
*
ISTF   BRU INI
IFLX   BRU INI
IFLD   BRU INI
IFCP   BRU INI
IFAD   BRU INI
IFSB   BRU INI
IFMP   BRU INI
IFDV   BRU INI

*
ILNX   BRM GETO; CNA; STA XR; BRU INOP
*
IXMA   SEAC; SKN ROF; BRM ROQ; STA T; BRM GETO; XMA AR; STA IWT
       LDA T; BRM PUTO; LDA AR; BRU ICC2
*
IAND   BRM GETO; ETR AR; STA AR; BRU ICC2
*
IIOR   BRM GETO; MRG AR; STA AR; BRU ICC2
*
IEOR   BRM GETO; EOR AR; STA AR; BRU ICC2
*
ADDIT  ZRO; STA OP1; STB OP2; STX OP3; LDA SSR; ETR =@TOV; STA SSR
       LDA OP1; ADD OP2; ADD OP3; STA AR
       LDA OP1; EOR OP2; SKA =4B7; BRU ADDIT2
       LDA AR; EOR OP1; SKA =4B7; BRU *+2; BRU ADDIT1
       LDA SSR; MRG =OV+TOV; STA SSR
ADDIT1 LDA OP1; BRU ADDIT3
ADDIT2 LDA AR; EOR =-1
ADDIT3 SKA =4B7; BRU *+2; BRU ADDIT5
       LDA SSR; MRG =CARRY; STA SSR
ADDIT4 LDA AR; BRR ADDIT
ADDIT5 LDA SSR; ETR =@CARRY; STA SSR; BRU ADDIT4
*
IADD   BRM GETO; CLX
IADD1  LDB AR; BRM ADDIT; BRU ICC2
*
ISUB   BRM GETO; EOR =-1; LDX =1; BRU IADD1

*
IADC   BRM GETO
IADC1  LDB SSR; CLX; SKB =CARRY; LDX =1; BRU IADD1
*
ISUC   BRM GETO; EOR =-1; BRU IADC1
*
IMIN   SEAC; STA T; BRM GETO; LDB =1
IMIN1  CLX; BRM ADDIT; STA IWT; LDA T; BRM PUTO; LDA IWT; BRU ICC2
*
IMDC   SEAC; STA T; BRM GETO; LDB =-1; BRU IMIN1
*
IADM   SEAC; STA T; BRM GETO; LDB AR; BRU IMIN1
*
IMUL   BRM GETO; STA T; SKE AR; BRU IMUL1
       SKE =4B7; BRU IMUL1
       LDA SSR; MRG =CARRY+TOV+OV; STA SSR; BRU IMUL2
IMUL1  LDA SSR; ETR =@TOV; STA SSR
IMUL2  LDA T; MUL AR; STA AR; STB BR
       SKE =0; BRU ICC2; LSH 23; BRU ICC2
*
IDIV   BRM GETO; STA T; SKG =-1; BRU IDIV2
       SKN AR; BRU IDIV1; ADD AR; SKG =-1; BRU IDIV5
       BRU IDIV4
IDIV1  SKG AR; BRU IDIV5; BRU IDIV4
IDIV2  SKN AR; BRU IDIV3; LDA AR; SUB T; STA TT
       LDA BR; LRSH 1; MRG TT; SKG =0; BRU IDIV5; BRU IDIV4
IDIV3  ADD AR; STA TT; LDA BR; LRSH 1; MRG TT
       SKG =0; BRU IDIV4; BRU IDIV5
IDIV4  LDA SSR; ETR =@TOV; STA SSR
       LDA AR; LDB BR; DIV T; STA AR; STB BR; BRU ICC2
IDIV5  LDA SSR; MRG =CARRY+OV+TOV; STA SSR; BRU INOP
*
ICPZ   BRM GETO; BRU ICC2
*
ICMZ   BRM GETO; ETR AR; BRU ICC2
*
ISRS   BRM GETO; SKA =1; BRU ISRS1; EOR =-1; ETR SSR; BRU ISRS2
ISRS1  MRG SSR
ISRS2  STA SSR; BRU INOP
*
ITSB   BRM GETO; ETR SSR; BRU ICC2
*
IICP   BRM GETO; CLB; SKE AR; LDB =1; SKG AR; BRU *+2; LDB =-1
       CBA; BRU ICC2

*
IBEQ   LDB SSR; SKB =2B3; BRU IBRU; BRU INOP
IBNE   LDB SSR; SKB =2B3; BRU INOP; BRU IBRU
IBLT   LDB SSR; SKB =6B3; BRU INOP; BRU IBRU
IBGE   LDB SSR; SKB =6B3; BRU IBRU; BRU INOP
IBGT   LDB SSR; SKB =4B3; BRU IBRU; BRU INOP
IBLE   LDB SSR; SKB =4B3; BRU INOP; BRU IBRU
*   SHIFT INSTRUCTIONS
*
IASHD  BRM GETO; SKG =-1; BRU IASHD1
       ETR =77B; CAX; LDA SSR; ETR =@TOV; STA SSR
       LDA AR; LDB BR; STA T; STB TT; LSH 0,2
       STA AR; STB BR; RSH 0,2
       SKE T; BRU IASHD2; CBA; SKE TT; BRU IASHD2
IASHD3 LDA AR; BRU ICC2
IASHD2 LDA SSR; MRG =CARRY+TOV+OV; STA SSR; BRU IASHD3
IASHD1 CNA; ETR =77B; CAX; LDA AR; LDB BR; RSH 0,2; BRU ILSHD2
*
ILSHD  BRM GETO; SKG =-1; BRU ILSHD1
       ETR =77B; CAX; LDA AR; LDB BR; LSH 0,2; BRU ILSHD2
ILSHD1 CNA; ETR =77B; CAX; LDA AR; LDB BR; LRSH 0,2
ILSHD2 STA AR; STB BR; BRU ICC2
*
IASHA  BRM GETO; SKG =-1; BRU IASHA1
       ETR =77B; CAX; LDA SSR; ETR =@TOV; STA SSR
       LDA AR; CLB; STA T; LSH 0,2; STA AR
       RSH 0,2; SKE T; BRU IASHD2; BRU IASHD3
IASHA1 CNA; ETR =77B; CAX; LDA AR; CLB; RSH 0,2; BRU ILSHA2
*
ILSHA  BRM GETO; SKG =-1; BRU ILSHA1
       ETR =77B; CAX; LDA AR; CLB; LSH 0,2; BRU ILSHA2
ILSHA1 CNA; ETR =77B; CAX; LDA AR; CLB; LRSH 0,2
ILSHA2 STA AR; BRU ICC2
*
ICYD   BRM GETO; SKG =-1; BRU ICYD1
       ETR =77B; CAX; LDA AR; LDB BR; LCY 0,2; BRU ILSHD2
ICYD1  CNA ETR =77B; CAX; LDA AR; LDB BR; RCY 0,2; BRU ILSHD2
*
ICYA   BRM GETO; SKG =-1; BRU ICYA1
       ETR =77B; CAX; LDA AR; LDB AR; LCY 0,2; BRU ILSHA2
ICYA1  CNA; ETR =77B; CAX; LDA AR; LDB AR; RCY 0,2; BRU ILSHA2
*
IEXU   STA ASA; SEAC; SKR EXUCNT; BRU NF; CLA; BRU SIMRET
*
IADX   BRM GETO; ADM XR; BRU INOP
*
*
IBSX   MIN P; LDB P; STB XR; BRU IBRU
*
ILAX   SEAC; BRM RNG; MRG =4B6; STA XR; BRU INOP

*
ISDT   ZRO; STB TTT; SEAC; STA T; BRM GET; STA TT
       LDA T; ADD =1; SKN TTT; STA T; BRM GET
       STA OP1; SUB TT; SKN TTT; CNA; XMA OP1
       SKE TT; BRU ISDT1; CLA; BRU ICC2
ISDT1  LDB TT; SKN TTT; CAB; STB TT; LSH 4; ETR =3; STA EAL
       CLA; LSH 2; STA EA; CLA; LSH 18; STA TTT; BRR ISDT
IISD   LDB =-1; BRM ISDT; LDA EAL; ADD EA; SKG =2; BRU IISD1
       LDA TT; ETR =@3B6; ADD =1; STA TT
IISD2  LDA T; CAX; LDA TT; BRM PUT
       LDA OP1; BRU ICC2
IISD1  LDA =1B6; ADM TT; BRU IISD2
*
IDSD   CLB; BRM ISDT; LDA EA; SKE =0; BRU IDSD1
       LDA =3; SUB EAL; CLB; LSH 18; XMA TT; SUB =1
       ETR =@3B6; ADM TT; BRU IISD2
IDSD1  LDA =-1B6; ADM TT; BRU IISD2
*

*
*OPERATE INSTRUCTION
IOPR   BRM GETO; SKG =-1; BRU IOPR1
*NORMAL OPERATE
       CAX; SKG =OPRDE-OPRD-1; BRU *+2; BRM TIQ
       SKG =55B; BRU IOPR0; LDA P; SKG =SMON-1; BRM TIQ
       CLA; STA PRVSC
IOPR0  LDX OPRD,2; BRU 0,2
*OPERATE DISPATCHER
OPRD   DATA ICAB,IXAB,ICBA,ICBX,IXXB,ICXB,ICAX,IXXA
       DATA ICXA,ICNA,ICNX,ICLA,ICLAB,ICLB,ILGA,IXGA
       DATA ILLA,IXLA,ILSA,IXSA,ICTA,ICCA,INOP,IMVB
       DATA IMVC,IMVS,ICPS,ICLS,IASP,ILLT,ICOB,ITIQ
       DATA ITIQ,ILOADS,ISTORS,ILSC,IFIX,IFLOAT,IFNA,ITIQ
       DATA ITCI,ITCO,ITIQ,ITIQ,ITIQ,ISLOK,IRLOK,IALD
       DATA IAST,IAAX,IPRO,ITIQ,IUNPRO,IATTN,IUSCL,ICMAP
       DATA ICMAPS,ICAT,ICAC,IRUN
OPRDE  EQU     *
*OPERATE INSTRUCTIONS
ICAB   LDA AR; STA BR; BRU INOP
*
IXAB   LDA AR; XMA BR; STA AR; BRU ICC2
*
ICBA   LDA BR; STA AR; BRU ICC2
*
ICBX   LDA BR; STA XR; BRU INOP
*
IXXB   LDA BR; XMA XR; STA BR; BRU INOP
*
ICXB   LDA XR; STA BR; BRU INOP
*
ICAX   LDA AR; STA XR; BRU INOP
*
IXXA   LDA AR; XMA XR; STA AR; BRU ICC2
*
ICXA   LDA XR; STA AR; BRU ICC2
*
ICNA   LDA AR; CNA; STA AR; BRU ICC2
*
ICNX   LDA XR; CNA; STA XR; BRU INOP
*
ICLA   CLA; STA AR; BRU ICC2
*
ICLAB  CLA; STA AR; STA BR; BRU INOP
*
ICLB   CLA; STA BR; BRU INOP
*
ILGA   LDA GR; STA AR; BRU ICC2
*
IXGA   LDA GR; XMA AR; STA GR; LDA AR; BRU ICC2
*
ILLA   LDA LR; STA AR; BRU ICC2
*
IXLA   LDA AR; XMA LR; STA AR; BRU ICC2
*
ILSA   LDA SSR; STA AR; BRU ICC2
*
IXSA   LDA AR; XMA SSR; STA AR; BRU ICC2
*
ICTA   BRU INI
*
ICCA   BRU INI
*
IMVB   LDA AR; SKE =0; BRU *+2; BRU INOP
       LDA BR; SKG XR; BRU IMVB1
       LDA P; STA ASA
       LDA AR; ADD XR; SUB =1; BRM GET; STA T
       LDA P; STA ASA
       LDA AR; ADD BR; SUB =1; CAX; LDA T; BRM PUT; BRU IMVB2
IMVB1  LDA P; STA ASA; LDA XR; BRM GET; STA T
       LDA P; STA ASA
       LDA BR; CAX; LDA T; BRM PUT
       MIN XR; MIN BR
IMVB2  SKR AR; NOP; BRM BOC; BRU IMVB
*
IMVC   LDA =-1; STA EIM; STA EAB
IMVC1  LDA AR; SKG =0; BRU INOP; LDA XR; STA IWT; LDA BR; BRM PUTO
       SKR AR; NOP; MIN BR; BRU IMVC1
*
ICPS   BRU INI
IMVS   BRU INI
ICLS   LDA AR; BRM SWB; STA T; LDA CSP1; STA TT; LDA BR; BRM SWB
       SUB T; XMA TT; SKE CSP1; BRM TIQ; LDA TT; STA AR; BRU ICC2
*
IASP   LDA AR; LDB XR; BRM ASP; STA XR; BRU INOP
*
ASP    ZRO; STB ASPT; BRM SWB; ADM ASPT; LDA =4; SUB CSP1; XMA ASPT
       RSH 23; DIV ASPT; STB ASPT; RSH 18; LDA ASPT; RSH 2; LDA CSP1
       RSH 2; LDA =2; LSH 22; BRR ASP
*
ILLT   LDX =-48; CLA; STA XR; LDA AR; LDB BR; SKN AR; BRU ILLT1
       EOR =-1; XAB; EOR =-1; XAB
ILLT1  SKG =-1; BRU ILLT2
       MIN XR; LSH 1; BRX ILLT1; CLA; STA XR; BRU ICC2
ILLT2  LDA XR; BRU ICC2
*
ICOB   CLX; STX XR; LDX =-48; LDA AR; LDB BR
ICOB1  SKG =-1; MIN XR; LSH 1; BRX ICOB1; LDA XR; BRU ICC2
*

ILOADS LDA P; STA PLOAD; LDA SSR; STA SRLOAD
       LDA P; BRM GRING; STA TT; LDA XR; BRM GET; BRM GRING
       SKG TT; BRU *+2; BRM MACCQ
       LDA P; STA ASA
       LDA XR; LDB =P; LDX =EST-P; BRM VCCOPY
       LDA P; BRM GRING; STA TT; LDA PLOAD; BRM GRING; SKG TT; BRU N
       LDA =-1; STA LOADF; LDA PLOAD; LDB SRLOAD; BRM MEXT
       BRU N
*
ISTORS LDA P; STA ASA
       LDA XR; ADD =AR-P; CAB; LDA =AR; LDX =ER-AR+1; BRM CVCOPY
       LDA XR; ADD =LR-P; CAB; LDA =LR; LDX =SSR-LR+1; BRM CVCOPY
       BRU INOP
*
ILSC   LDA XR; BRM GET; STA TT; BRM CSP; LDA XR; RSH 18; LDA =3
       SUB CSP1; RSH 2; LDA CSP1; LSH 20; MRG =4B7; STA AR; STA BR
       LDA XR; ADD CSP3; RSH 18; LDA CSP2; RSH 2; LDA CSP1; LSH 20
       MRG =4B7; STA CR; STA DR; BRU INOP
CSP    ZRO; RSH 20; ETR =3; STA CSP1
       CLA; LSH 2; STA CSP2; ADD CSP1; SKG =3; BRU *+2; BRM TIQ
       CLA; LSH 18; STA CSP3; BRR CSP
*
SWB    ZRO; STA SWBT; BRM CSP; LDA =4; SUB CSP1; MUL CSP3; LSH 23
       ADD CSP2; BRR SWB
*
*
IRLOK  BRU INOP
*
ISLOK  BRU INOP
*
IALD   LDA XR; SFETCH; STA AR; BRU INOP
*
IAST   LDA AR; LDX XR; BRM STOREM; BRU INOP
*
IAAX   LDA XR; ETR =FADDF; RSH 11; CAX; LDA SPM,2
       LSH 11; ETR =FADDF; STA XR; LDA SPM,2; SKA =PMEF; BRU IAAX3
       SKA =PMRO; BRU IAAX1; SKA =PMDB; BRU IAAX2; BRU INOP
IAAX1  LDA =14B6; ADM XR; BRU INOP
IAAX2  LDA =1B7; ADM XR; BRU INOP
IAAX3  LDA =4B7; STA XR; BRU INOP
*
IFIX   BRU INI
*
IFLOAT BRU INI
*
IFNA   BRU INI
*
IPRO   LDA AR; ETR =17B; STA T; ETR PRO
       LDA PRO; MRG T; STA PRO; LDA =-1; BRU ICC2
*
IUNPRO LDA AR; ETR =17B; EOR =-1; ETR PRO; STA PRO; BRU INOP
*
IATTN  LDA ATTNF; ETR AR; SKE =0; BRU DOATTN
       LDA AR; SKA =4B; BRU DOCHIO; BRU INI
DOATTN LDX AR; RQS 0,2; BRU INOP
DOCHIO BRM CHIO; BRU INOP
*
* CHIO SIMULATION
*
ARG1   ZRO
ARG2   ZRO
BREAKT ZRO
BREAKU ZRO
BS     DATA 3
CFB    ZRO
CFD    ZRO
CFL    ZRO
CFT    ZRO
CHAR   ZRO
CHINF  DATA    0
CHRE   ZRO
CLE    ZRO
CRT    ZRO
CWCIT  ZRO
DE     ZRO
DTYP   ZRO
EBC    ZRO
ES     ZRO
GMTAT  ZRO
LNO    ZRO
NSR    ZRO
RESPTR ZRO
RSNDT  ZRO
RWH    ZRO
RWT    ZRO
VALUE  ZRO
WCICH  ZRO
WCIWP  ZRO
GCIX   ZRO
WSAVE  ZRO
RWSB   BSS 7
RWSBE  EQU *
CBB1   BSS 20
CBT1   EQU *
BOT    DATA 3*CBB1-1
TOP    DATA 3*CBT1-1
RPTR   DATA 3*CBB1
WPTR   DATA 3*CBB1
CPUIT  EQU 40B
DVTBA  EQU 2746B
MTAA   EQU 2741B
MTCA   EQU 2742B
XLINE  EQU 2744B
M30LN  DATA 38   LINE # FOR MODEL 30
* COME HERE TO TEST FOR CHIO REQUEST
CHIO   ZRO; BRU ENTRY+1; BRU CHINIT
       LDA =CPUIT; BRM RESGET; SKA =20000B; BRU *+2; BRR CHIO
       LRSH 16; STA CRT; LSH 16; ETR =17777B; STA LNO
       LDB =@1; SKM =0; BRU *+2; BRU LNOK   (LINES 0, 1 OK)
       SKM M30LN; BRM CHIOER   (MODEL 30 ALSO OK, NO OTHERS)
LNOK   LDA =XLINE; BRM RESGET; SKG LNO; BRM CHIOER
       LDA =CPUIT+3; BRM RESGET; STA ARG1; LDA =CPUIT+4; BRM RESGET
       STA ARG2; LDX =-7
CHIO1  CXA; ADD =CPUIT+20B; BRM RESGET; STA RWSBE,2; BRX CHIO1
       BRM GMTA; LDA CRT; SKG =13; SKG =-1; BRM CHIOER
       CAX; CLA; STA NSR; BRU *+1,2
* DISPATCH ON CHIO REQUEST TYPE
       BRU CHIOR       0, RESET LINE
       BRU WST         1, WRITE STRING
       BRU RSND        2, READ STRING NON-DESTRUCTIVELY
       BRU RSTB        3, READ STRING TO BREAK CHARACTER
       BRM CHIOER
       BRM CHIOER
       BRM CHIOER
       BRU PCF         7, SET FIELD
       BRM CHIOER
       BRM CHIOER
       BRM CHIOER
       BRM CHIOER
       BRM CHIOER
*
CHINIT LDA BOT; STA RPTR; STA WPTR
       LDA =-1; STA CHINF; BRR CHIO
CHIOR  LDB LNO; RSH 1; LSH 2; STB GMTAT; BRM PMTA
CHIOR0 LDB CRT; LSH 26; MRG NSR; LSH 14; LDB =CPUIT; BRM RESPUT
       LDA VALUE; LDB =CPUIT+2; BRM RESPUT; LDX =-7
CHIOR1 CXA; ADD =CPUIT+20B; CAB; LDA RWSBE,2; BRM RESPUT; BRX CHIOR1
       BRR CHIO
*
RESGET ZRO; MRG =4B7; STA RESPTR; LDA* RESPTR; BRR RESGET
*
RESPUT ZRO; XAB; MRG =4B7; STA RESPTR
       CBA; STA* RESPTR; BRR RESPUT
*
GMTA   ZRO; LDB LNO; RSH 1; LSH 2; STB GMTAT; LDA =MTAA; BRM RESGET
       ADD GMTAT; BRM RESGET; CLB; LRSH 22; STA BS; LSH 2; STB DE
       LSH 1; STB CLE; LSH 5; STB ES; LSH 7; STB EBC
       LSH 7; ETR =77B; STA DTYP; BRR GMTA
*
PMTA   ZRO; LDA =MTAA; BRM RESGET; ADD GMTAT; STA GMTAT; BRM RESGET
       MRG =3B6; SKN DE; EOR =2B6; SKN CLE; EOR =1B6
       LDB GMTAT; BRM RESPUT; BRR PMTA
*
WST    LDA ARG1; SKG =21; SKG =-1; BRM CHIOER; STA RWT; LDA =3*RWSB-1
       STA RWH; ADM RWT
WST1   LDA RWH; SKE RWT; BRU *+2; BRU CHIOR
       ADD =1; STA RWH; BRM GCE
       SKE =0; BRU *+2; BRU WST1; SKE =35B; BRU *+2; BRU WST1
       SKG =37B; BRU WST3; SUB =40B; ETR =177B
WST5   LDB LNO; SKB =1; BRU WST2; BRM CHW; BRU WST1
WST2   BRM COUT; BRU WST1
WST3   SKE =37B; BRU WST4; LDA RWH; SKE RWT; BRU *+2; BRU WST4
       ADD =1; STA RWH; BRM GCE; ETR =37B; ADD =140B; BRU WST5
WST4   LDA =2; STA NSR; BRU CHIOR
*
RSND   LDA =3*RWSB-1; STA RWH; STA RWT; LDA ARG1; SKG =20; SKG =-1
       BRM CHIOER; LDA RPTR; STA RSNDT; CLA; STA VALUE
       LDA LNO; SKA =1; BRM CHIOER; BRM CINCHK
RSND1  SKR ARG1; BRU RSND2; BRU RSND4
RSND2  LDA =-1; BRM CHR; BRU RSND3; MIN VALUE; LDA CHAR; BRM CWCI; BRU RSND1
RSND3  LDA =1; STA NSR
RSND4  LDA RSNDT; STA RPTR; BRU CHIOR
*
RSTB   LDA =3*RWSB-1; STA RWH; STA RWT; LDA ARG1; SKG =20; SKG =-1
       BRM CHIOER; CLA; STA VALUE; LDA LNO; SKA =1; BRM CHIOER
       BRM CINCHK
RSTB1  SKR ARG1; BRU RSTB2; BRU CHIOR
RSTB2  CLA; BRM CHR; BRU RSTB3; MIN VALUE; LDA CHAR; BRM CWCI
       BRM BREAK; BRU RSTB1; LDA =2; STA NSR; BRU CHIOR
RSTB3  LDA =1; STA NSR; BRU CHIOR
*
PCF    LDB ARG1; LSH 8; ETR =37B; SUB =24; CNA; STA CFL; SKG =-1
       BRM CHIOER; CLA; LSH 5; STA CFD; CLA; LSH 11; SKG =15; BRU PCF1
       SUB =16; STA CFB; LDA LNO; MUL =3; LSH 23; ADM CFB
       LDA =MTCA; BRM RESGET; BRU PCF2
PCF1   STA CFB; LDB LNO; RSH 1; LSH 26; ADM CFB; LDA =MTAA; BRM RESGET
PCF2   ADD CFB; STA CFB; BRM RESGET; LDX CFD; LCY 0,2; STB CFT
       LDX CFL; RSH 0,2; LDA ARG2; LSH 0,2; LDB CFT; LDX CFD
       RCY 0,2; LDB CFB; BRM RESPUT; BRU CHIOR0
*
CWCI   ZRO; ADD =40B; ETR =177B; SKG =37B; BRU *+2; BRU CWCI1
       ADD =40B; STA CWCIT; LDA =37B; MIN RWT; LDB RWT; BRM WCE
       MIN VALUE; SKR ARG1; NOP; LDA CWCIT
CWCI1  MIN RWT; LDB RWT; BRM WCE; BRR CWCI
*
CHW    ZRO; STA CHAR; LDA WPTR; STA WSAVE
       EAX WPTR; BRM INCPTR; CAB; LDA CHAR; BRM WCE
       LDA WPTR; SKE RPTR; BRU CHW1; LDA WSAVE; STA WPTR; BRR CHW
CHW1   SKN CLE; BRU *+2; BRR CHW; LDA CHAR; BRM BREAK; BRU CHW2
       LDA =4B7; STA CLE; SKN EBC; BRR CHW
CHW2   LDA CHAR; BRM ECHO; BRR CHW
*
CHR    ZRO; STA CHRE; LDA RPTR; SKE WPTR; BRU CHR1
       CLA; STA DE; STA CLE; BRR CHR
CHR1   EAX RPTR; BRM INCPTR; BRM GCE
       STA CHAR; SKN CHRE; SKN CLE; BRU CHR2; SKN DE; BRU CHR3
CHR4   LDA CHAR; BRM ECHO
CHR2   MIN CHR; BRR CHR
CHR3   LDA CHAR; BRM BREAK; BRU CHR2; LDA =4B7; STA DE
       SKN EBC; BRU CHR4; BRU CHR2
*
ECHO   ZRO; SKN ES; BRR ECHO
       LDB LNO; SKB =@1; BRM CHIOER   (NO ECHO TO M30)
       SKG =137B; BRU ECHO1
       SKE =155B; BRU *+2; BRU ECHO1; SKE =152B; BRR ECHO
ECHO1  BRM COUT; BRR ECHO
*
BREAK  ZRO; LDX BS; BRU *+1,2
       BRR BREAK; BRU BREAK1; BRU BREAK1; BRU BREAK2
BREAK1 LDA DTYP; MUL =36; LSH 23; STA BREAKT
       LDA CHAR; ADD =40B; ETR =177B; LRSH 3; ADD =2
       ADM BREAKT; LSH 4; ETR =16B; STA BREAKU; LDA =DVTBA; BRM RESGET
       ADD BREAKT; BRM RESGET; LDX BREAKU; LSH 0,2; LRSH 22; ADD BS
       SKG =2; BRR BREAK
BREAK2 MIN BREAK; BRR BREAK
*
INCPTR ZRO; MIN 0,2; LDA 0,2; SKG TOP; BRU INCP1; LDA BOT; STA 0,2
INCP1  BRR INCPTR
*
CHIOER ZRO; BRM PUNT
*
CINCHK ZRO
       BRM CIN; BRR CINCHK
CCHK0  STA CHAR; BRM GMTA
       LDA CHAR; BRM CHW; BRM PMTA; BRU CINCHK+1
*
GCE    ZRO; STX GCIX; RSH 23; DIV =3
       CAX; LDA 0,2; CBX; EXU GCIRSH,2; ETR =377B
       LDX GCIX; BRR GCE
GCIRSH RCY 16; RCY 8; NOP
*
WCE    ZRO; STA WCICH; STX GCIX; CLA; LSH 1; DIV =3
       STA WCIWP; CBX; LDA WCICH; EXU WCILSH,2
       EOR* WCIWP; ETR WCIMSK,2; EOR* WCIWP; STA* WCIWP
       LDA WCICH; LDX GCIX; BRR WCE
WCILSH LSH 16; LSH 8; NOP
WCIMSK DATA 776B5,1774B2,377B

*
ITCI   BRM CIN; BRU *-1; STA AR; LDA =2; STA PRVSC; BRU INOP
*
ITCO   LDA AR; BRM COUT; LDA =2; STA PRVSC; BRU INOP
*
USIBTP EQU 15B
USIBMK EQU 37B
CPUNO  DATA 0
PRO10B MACRO
       CMDA; SKA =1B7; BRU *+3; LDA =6; BRU SIMRET; ETR =@1B7; XMDA
       ENDM
UPR10B MACRO
       CMDA; MRG =1B7; XMDA
       ENDM
*
IUSCL  PRO10B; LDA USIBTP,4; ADD =2; SKA =USIBMK; BRU IUSCL1
       UPR10B; BRM BOC; BRU IUSCL
IUSCL1 STA USIBTP,4; ETR =777777B; MRG =4B7; STA T
       LDA AR; MRG PRTLOC; STA* T; MIN T
       LDA CPUNO; STA* T; UPR10B; RQS 2
       LDA =2; STA PRVSC; BRU INOP
*
ICMAP  BRM FLUSHM; BRU INOP
*
ICMAPS BRM FLUSHM; BRU INOP
*
ICAT   BRU INOP
*
ICAC   BRU INOP
*
IRUN   LDA UNNAME; ADD =2; STA UNNAME; STA BR; CLA; STA AR; BRU INOP
*
*SYSTEM CALLS
IOPR1  CLB; CNA; STA T; SKA =4B2; LDB =1; STB NT; ETR =377B; STA IR
       LDA =1; STA PRVSC
       LDA =2000B; STA SSR
       LDA T; SKA =1B3; BRU* MCALL; BRU* UCALL
*
MENT   ZRO; BRR MENT
*
MEXT   ZRO; STB T; BRM GRING; SKE =2; BRU MEXT1
       LDA T; SKA =100B; BRM XMONQ; BRR MEXT
MEXT1  LDA T; SKA =200B; BRM XUTILQ; BRR MEXT

*
*  STORE INTO MEMORY
*  ENTRY
*    (A) - VALUE
*    (X) - LOCATION
*    EXIT  VALUE STORED
STOREM ZRO; SSTORE; BRR STOREM
*
*  CORE TO MEMORY COPY
*  ENTRY
*    (A) - CORE ADDRESS
*    (B) - MEMORY ADDRESS
*    (X) - NUMBER OF WORDS
*    EXIT - COPY COMPLETED
CMCOPY ZRO; STA COPYC; STB COPYM; STX COPYT
CM1    SKR COPYT; BRU *+2; BRR CMCOPY
       LDA* COPYC; LDX COPYM; BRM STOREM
       MIN COPYC; MIN COPYM; BRU CM1
*
*  MEMORY TO CORE COPY
*  ENTRY
*    (A) - MEMORY ADDRESS
*    (B) - CORE ADDRESS
*    (X) - NUMBER OF WORDS
*    EXIT - COPY COMPLETED
MCCOPY ZRO; STA COPYM; STB COPYC; STX COPYT
MC1    SKR COPYT; BRU *+2; BRR MCCOPY
       LDA COPYM; SFETCH; STA* COPYC
       MIN COPYC; MIN COPYM; BRU MC1
*
*  VIRTUAL TO CORE COPY
*  ENTRY
*    (A) - VIRTUAL ADDRESS
*    (B) - CORE ADDRESS
*    (X) - NUMBER OF WORDS
*    EXIT - COPY COMPLETED
VCCOPY ZRO; STA COPYM; STB COPYC; STX COPYT
VC1    SKR COPYT; BRU *+2; BRR VCCOPY
       LDA COPYM; BRM GET; STA* COPYC
       MIN COPYC; MIN COPYM; BRU VC1
*
*  CORE TO VIRTUAL COPY
*  ENTRY
*  (A) - CORE ADDRESS
*  (B) - VIRTUAL ADDRESS
*  (X) - NUMBER OF WORDS
*  EXIT - COPY COMPLETED
CVCOPY ZRO; STA COPYC; STB COPYM; STX COPYT
CV1    SKR COPYT; BRU *+2; BRR CVCOPY
       LDA* COPYC; LDX COPYM; BRM PUT
       MIN COPYC; MIN COPYM; BRU CV1

*
*  LOOKUP IN CHT
*  ENTRY
*    (A) - PMT INDEX
*    EXIT SKIP RETURN IF FOUND
*    (A) - ADDRESS OF CHT ENTRY
CHTL   ZRO; STA CHTLT; SFETCH; STA CHTLA; LDA CHTLT
       ADD =1; SFETCH; STA CHTLB; LDA CHTLT
       ADD =2; SFETCH; CAX; LDA CHTLA; LDB CHTLB
       BRM CHTSCH; BRR CHTL; LDA CHTSCP; MIN CHTL; BRR CHTL
*
*  VIRTUAL ADDRESS TO REAL ADDRESS
*  ENTRY
*    (A) - VIRTUAL ADDRESS
*    EXIT
*    (A) - REAL ADDRESS
*    (B) - NEW SPM ENTRY
*    (X) - SPM INDEX
MAPVA  ZRO; ETR =FADDF; LRSH 11; CAX; STX MAPX
       LDA SPM,2; SKA =PMEF; BRU MAPVA2;
MAPVA1 STA MAPM; LSH 11; ETR =FADDF; LDB MAPM
       MIN MAPVA; BRR MAPVA
MAPVA2 STB MAPB; BRM GETPMT; BRU MAPVA3; STA MAPP
       CXA; CLB; SKA =MAPRO; LDB =PMRO; STB MAPM
       LDA MAPP; ADD =3; SFETCH; SKA =PMSF; BRU *+2; BRU MAPVA3
       LDB =PMRO; SKA =PMTRO; STB MAPM
       LDA MAPP; BRM CHTL; BRU MAPVA3
       ADD =3; SFETCH; CAX; ETR =FADDF; LRSH 11
       CXB; SKB =DIRTY; MRG =PMDB; MRG MAPM
       LDB MAPB; LDX MAPX; BRU MAPVA1
MAPVA3 LDA =-1; LDB =PMEF; LDX MAPX; BRR MAPVA

CHT1B  EQU     400B
CHTO   EQU 5
CHTHT  ZRO
CHTSCP ZRO
CHTCT  ZRO
CHTSDA ZRO
CHTSHD ZRO
CHTSPP ZRO
CHTSU1 ZRO
CHTSU2 ZRO
COPYC  ZRO
COPYM  ZRO
COPYT  ZRO
STMI   ZRO
*  HASHES UNIQUE NAMES
*  ENTRY
*    (A)-(B) UNIQUE NAME
*  EXIT SKIP RETURN IF NOT 0,0
*    (A) AND (X) CONTAIN ADDRESS IN CHT1
CHTHSH ZRO; SKE =0; BRU CHTHS1; SKB =-1
       BRU CHTHS1; BRR CHTHSH
CHTHS1 STB CHTHT; EOR CHTHT; STA CHTHT
       RSH 8; EOR CHTHT; RSH 8; EOR CHTHT
       EOR =264B; ETR =377B; ADD =CHT1B
       CAX; MIN CHTHSH; BRR CHTHSH
*  SEARCHES CHT FOR UNIQUE NAME AND
*  CHECKS DISK ADDRESS
*  ENTRY
*  (A)-(B) UNIQUE NAME
*  (X) DISK ADDRESS
*  EXIT SKIP RETURN IF FOUND
*  CHTSPP CONTAINS POINTER TO PREVIOUS NODE HEAD
*  CHTSCP CONTAINS POINTER TO CURRENT NODE HEAD
*  CHTSHD CONTAINS POINTER TO CHT1 HEADER
CHTSCH ZRO; STA CHTSU1; STB CHTSU2; STX CHTSDA
       BRM CHTHSH; BRM PUNT; STA CHTSHD
       SUB =5; STA CHTSPP; LDA =256; STA CHTCT; LDA CHTSHD
CHTSC1 SKR CHTCT; BRU *+2; BRM PUNT; SFETCH; ETR =FADDF; STA CHTSCP
       SKE =FADDF; BRU *+2; BRR CHTSCH
       LDA CHTSCP; SFETCH; SKE CHTSU1; BRU CHTSC2
       LDA CHTSCP; ADD =1; SFETCH; SKE CHTSU2; BRU CHTSC2
       LDA CHTSCP; ADD =2; SFETCH; LDB =@6B7
       SKM CHTSDA; BRM PUNT; MIN CHTSCH; BRR CHTSCH
CHTSC2 LDA CHTSCP; STA CHTSPP; ADD =CHTO; BRU CHTSC1
*  FLUSHES PHYSICAL MAP
*  ENTRY - NOTHING
*  EXIT - PHYSICAL MAP FLUSHED
FLUSHM ZRO; LDX =-128; LDA =PMEF
       STA SPME,2; BRX *-1; BRR FLUSHM

*
*   OPERAND REFERENCE ROUTINES
*   GETO - GET OPERAND
*    ARG   (A) = EFFECTIVE ADDRESS
*    RETURN  (A) = OPERAND FOR INSTRUCTION
*            (X) = ADDRESS OF CELL CONTAINING OPERAND
GETO   ZRO; STA IWT; SKN EIM; BRU GETO1
       BRM GET; SKN EAB; BRU GETO2; BRR GETO
GETO2  STA GETT; LDA EAB; ADD EAL; SKG =24; BRU GETO3; BRM TIQ
GETO3  LDA =24; SUB EAL; XMA GETT; LDX EAB; LCY 0,2
       LDX GETT; LDB ESE; SKB =1; BRU *+3; LRSH 0,2
       BRU *+2; RSH 0,2; STA IWT
GETO1  LDX =IWT; BRR GETO
*   PUTO - PUT OPERAND
*    ARG   (IWT) = OPERAND TO BE STORED
*          (A) = EFFECTIVE ADDRESS WHERE TO STORE IT
PUTO   ZRO; STA PUTT1; SKN ROF; BRM ROQ; SKN EAB; BRU PUTO1
       LDA IWT; LDX PUTT1; BRM PUT; BRR PUTO
*   FIELD STORE
PUTO1  LDA EAB; ADD EAL; SKG =24; BRU PUTO2; BRM TIQ
PUTO2  LDB =-1; CLA; LDX EAL; LCY 0,2; STB PUTT2
       LDA PUTT1; BRM GET; CAB; LDX EAB; LCY 0,2
       LDX EAL; LCY 0,2; EOR IWT; ETR PUTT2; EOR IWT; RCY 0,2
       LDX EAB; RCY 0,2; CBA; LDX PUTT1; BRM PUT; BRR PUTO
* INSTRUCTION NOT IMPLEMENTED
INI    LDA =1; BRU SIMRET
* CPU PUNT
PUNT   ZRO; LDA =3; BRU SIMRET

T      ZRO
TT     ZRO
TTT    ZRO
ATEMP  ZRO
ASA    BSS     1               RING CHECK SOURCE ADDRESS
ASPT   BSS     1               ASP TEMP
BOCT   BSS     1
CEAT   BSS     1
CHTLA  BSS     1               CHTL TEMP
CHTLB  BSS     1               SAME
CHTLT  BSS     1               SAME
CSP1   BSS     1
CSP2   BSS     1
CSP3   BSS     1
EA     BSS     1               CURRENT INSTRUCTION
EAL    BSS     1               FIELD LENGTH
ESE    BSS     1               FIELD SIGN EXTENSION BIT
EAT    BSS     1               EAC TEMP
EAB    BSS     1               FIELD OFFSET OR -1
EIM    BSS     1               IMMEDIATE ADDRESSING FLAG
EMULT  BSS     1               EAC TEMP
EXUCNT ZRO     0               COUNTS NUMBER OF EXECUTES
GETT   BSS     1
ICCT   BSS     1
ILIMCT BSS     1               INDIRECT LIMIT COUNT
IWT    BSS     1               TEMP USED FOR EFFECTIVE OPERAND
LAXF   BSS     1               LAX FLAG
LOADF  BSS     1               LOAD STATE FLAG
MAPA   BSS     1               TEMP FOR MAP
MAPB   BSS     1
MAPM   BSS     1
MAPP   BSS     1               PMT ADDRESS
MAPX   BSS     1
NEWI   BSS     1               LATEST INSTRUCTION
OLDI   BSS     1               PREVIOUS INSTRUCTION
OP1    ZRO     0
OP2    ZRO     0
OP3    ZRO     0
PRVSC  ZRO     0               PRIVILEGED INSTRUCTION
SRLOAD BSS     1               SAVE SR IN LOAD STATE
$STOADD BSS     20              STORE ADDRESSES
$STOVAL BSS     20              STORE VALUES
$STOCNT ZRO     0               STORE COUNT
STOFLG ZRO     0               STORE FLAG
SWBT   BSS     1
TUC    BSS     1               TIME OUT COUNTER
TRAPAR ZRO     0               TRAP PARAMETER
UNNAME DATA    0               UNIQUE NAME
PLOAD  ZRO     0               SAVE P IN LOAD STATE
PRO    ZRO     0               PROTECT FLAGS
PP     BSS     1               PREVIOUS P
PS     BSS     1               SAVE P TO STORE IN PREVIOUS
PUTIT  BSS     1
PUTT1  BSS     1               PUT TEMPS
PUTT2  BSS     2
Q      BSS 1
QQ     BSS 1
RINGA  BSS     1
RINGT  BSS     1
ROF    BSS     1               READ ONLY FLAG

*
* TABLES
*
*
* SIMULATED REGISTERS
*
$SIMREG EQU     *
P      BSS     1               (P)
AR     BSS     1               (A)
BR     BSS     1               (B)
CR     BSS     1               (C)
DR     BSS     1               (D)
ER     BSS     1               EXPONENT BITS
XR     BSS     1               (X)
LR     BSS     1               LOCAL ENVIRONMENT REGISTER
GR     BSS     1               GLOBAL ENVIRONMENT REGISTER
SSR    BSS     1               STATUS BITS
EST    EQU *
CSC    BSS     1               COMPUTE TIME CLOCK
IT     BSS     1               INTERVAL TIMER
IR     BSS     1               SIMULATED INDEXING REGISTER
CBA    BSS     1               CONTEXT BLOCK ADDRESS
SPM    RPT     128
       DATA    PMEF
       ENDR
SPME   EQU     *
*
* PSEUDO-MEMORY ACCESS LOGIC
*
SFETCH ZRO; FETCH; BRR SFETCH
SSTORE ZRO; STORE; BRR SSTORE
       END
