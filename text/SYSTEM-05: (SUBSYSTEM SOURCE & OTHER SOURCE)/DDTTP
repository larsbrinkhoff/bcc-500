HOW TO ASSEMBLE DDT:

GET THE FILES NPITP (OR NPCTP) AND DDTTP.

THEN:

@QED

*READ FROM DDTTP.
XXXXX WORDS.

[NOW SET THE DDT PARAMETERS.  THEY ARE NEAR THE FRONT OF THE
   SOURCE LANGUAGE AND ARE CALLED:
     ITPFG EQU 1 FOR ITP(CTP) OR 0 FOR TP-2
     CTPFG EQU 1 FOR CTP OR 0 FOR ITP
     $EDDT EQU XXXXXB DETERMINES THE VALUE OF .. AFTER ASSY
     BEGDDT EQU XXXXXB DETERMINES THE START OF THE ASSY]

*WRITE ON DDTTP.
XXXXX WORDS.
*:SYMBOL:,$WRITE ON "SYMBOL".
566 WORDS.
*FINISHED.

@NARP

SOURCE FILE:  NPITP (OR NPCTP).
OBJECT FILE:  "B1".



5 SEC    0 ERR    0 (0) WRD    (S:9,O:72,L:0,M:660,U:0)


UNDEFINED SYMBOLS:



@CONTINUE
NARP

SOURCE FILE:  DDTTP.
OBJECT FILE:  "B2".

SADDT   IDENT
TEST PROCESSOR DDT VERSION 1.13
7 OCTOBER 1969
ITP DDT


63 SEC    0 ERR    20140 (8288) WRD    (S:832,O:1,L:145,M:1227,U:180)


UNDEFINED SYMBOLS;
LRO     S       S0      S2      SY1     SY2     SYMTAB  SZSYMT


@CONTINUE
NARP

SOURCE FILE:  SYMBOL.
OBJECT FILE  "B3".

SYMBOL  IDENT


2 SEC    0 ERR    40 (32) WRD    (S:30,O:0,L:0,M:758,U:0)


UNDEFINED SYMBOLS:
EDDT    PUNCH   RDDT


@DDT

;T   B1.
IDENT.   02X   240

;T   B2.
IDENT.   SADDT   20400

;T   B3.
IDENT.   SYMBOL   20440

%F
@

THIS COMPLETES THE ASSEMBLY.  YOU TAKE IT FROM HERE.


*THIS PACKAGE CONTAINS TWO SEPARATE PROGRAMS FOR DDT.
*THE SECOND PROGRAM MUST BE SEPARATED FROM THIS PACKAGE AND COMPILED
*SEPARATLY.  THE SECOND PACKAGE BEGINS WITH
*       SYMBOL IDENT

*        THE FOLLOWING IS A LIST OF OPCODES USED BY STAND ALONE DDT.
* IT USES TWO INTERRUPTS, ONE FOR INPUT AND ONE FOR OUTPUT.  IT DOES
* NOT USE POPS, MULTIPLY, OR DIVIDE.
* 
* LDA            STA             LDB
* STB            LDX             STX
* EAX            XMA             ADD
* ADM            MIN             SUB
* ETR            MRG             EOR
* CLA            CLB
* CAB            CBA             XAB
* CLX            CXA
* CAX            XXA
* CNA            BRU
* BRX            BRM             BRR
* SKE            SKG             SKM
* SKA            SKB             SKN
* SKR            RSH             LRSH
* RCY            LSH             LCY
* NOP            EXU             OVT
* ROV            
* NOP = 230001B
* PIN = 33B5
* POT = 13B5
* BRI = 11B5
* EIR = 220002B
* NOP = SKS 0
* BRTW = SKS 21B3
* BETW = SKS 20010B
* WIM
* EOM 604B
* EOM 20020B
* EOM 20002B




SADDT  IDENT;
*      LIST ALL,GO;

*      NEW FLAG
*      ITP FLAG
ITPFG  EQU 1       ITP (OR CTP) VERSION IF 1 OR TP-2 VERSION IF 0
CTPFG  EQU 1       CTP VERSION IF 1 OR ITP VERSION IF 0
$EDDT  EQU 25000B  DETERMINES VALUE OF .. SYMBOL AND ;F
BEGDDT EQU 10000B  LOCATES BEGINNING OF DDT


*      MACRO DEFINITIONS FOLLOW.

DDT    MACRO; BRM RDDT; ENDM
$::     EQU EDDT;
ITP    LMACRO T;
       IF ITPFG>0;
T(0)      ITPSM (T());
       ELSE
T(0)      ITPSM (T(2));
       ENDF;
       ENDM;
ITPSM  LMACRO T
ITPSN  NCHR (T());
       IF ITPSN#0;
T(0)      T();
       ELSE;
T(0)
       ENDF;
       ENDM;


*      THE FOLLOWING FOUR MACROS ARE TO CALL AND RETURN FROM 
*      SUBROUTINES

C     MACRO CA
QCA    NARG; BRM CALL; IF QCA-1; NOP CA(1),CA(2); ELSE; NOP CA(1)
      ENDF; ENDM
R1     MACRO; BRU R1; ENDM
R2     MACRO; BRU R2; ENDM
RPOP   MACRO; SKR PDP; ENDM

*      CALL FOR TYPE CHARACTER ROUTINE,  THE NOP CONTAINS THE 
*      ADDRESS OF THE CHARACER TO BE TYPED.


TCF    MACRO T; BRM TCFP; NOP T(1); ENDM

*      CALL FOR THE TYPE MESSAGE ROUTINE,  THE NOP CONTAINS THE ADDRESS
*      OF THE BEGINNING OF THE MESSAGE.  THE END OF THE MESSAGE IS 
*      DETERMINED BY A /.

TMF    MACRO T; BRM TMFP; NOP T(1); ENDM

*      USER LOAD MACRO, LOADS THRU THE USER ADDRESS CELL URA


ULD    MACRO; STA URA; LDA* URA; ENDM

*      DEFINES A LOCATION CONTAINING ZERO FOR EACH ARGUMENT.

VARD   MACRO D
LIM    NARG; RPT (I=1,LIM)
D(I)   ZRO; ENDR; ENDM

*      HOLDS UNTIL THE ARGUMENT IS NOT EQUAL TO THE A REGISTER.

HOLD   MACRO H; SKE H(); BRU *+2; BRU *-2; ENDM


*      SAVE THE GIVEN REGISTERS BY PUTTING THEM INTO CELLS DETERMINED
*      BY CONCATENATING THE REGISTER NAME BEHIND THE THE FIRST 
*      ARGUMENT OF THE MACRO.

SAVE   MACRO SAV
LSAVE  NARG; RPT (I=2,LSAVE); ST.&SAV(I) SAV(1).&SAV(I); ENDR; ENDM

*      SIMILIAR TO SAVE.

RST    MACRO RESTOR
LRST   NARG; RPT (I=2,LRST); LD.&RESTOR(I) RESTOR(1).&RESTOR(I); ENDR
      ENDM

*      WHEN A ROUTINE REQUIRES THE ADDRESS OR QUANTITY ADDRESSED BY
*      THE NEXT WORD AFTER THE CALL, GET WILL GET THE QUANTITY.
*      THE FIRST ARGUMENT IS THE REGISTER THE QUANTITY IS TO BE 
*      PLACED IN, THE SECOND ARGUMENT IS THE RETURN LINK FOR THE 
*      SUBROUTINE.

GETE   MACRO G; MIN G(1); XMA G(1); ETR ADB; MRG =4B4; XMA G(1);
       EAX* G(1); ENDM;
GET    MACRO G; GETE G(2); LD.&G(1) 0,2; ENDM;

*      THIS PROVIDES A LINK AND TRANSFERS THAT LINK TO SOME OTHER 
*      PLACE DESIGNATED BY THE ARGUMENT.

TLNK   MACRO TR; ZRO; XMA *-1; STA TR(1); LDA *-3; ENDM

*      SKIP RETURN MACRO.

SR     MACRO SR; MIN SR(1); BRR SR(1); ENDM


NBP    EQU 4 NUMBER OF BREAKPOINTS
NPD    EQU 8 LENGTH OF STACK; FRGT NBP,NPD


* DDT ENTRY POINTS

*  MOVE DDT TO END OF LOADER FOR ITP
       ITP (BSS BEGDDT-240B);


$ENTRY LDX COM
JUMP   BRU START
X     EQU *-240B

       IF CTPFG;
MAXOP  EQU 43B
       ELSE;
MAXOP  EQU 41B
       ENDF;
BNL    EQU 32
BN     BSS BNL BLOCK NAMES
BN1    EQU BN+1
EBN    BSS 0
EBN1   EQU EBN+1

      VARD NUMB,REDBIN,QUOT TEMPORARIES FOR PRINT NUMBER ROUTINE
AL     ZRO 0 PRINT FLAGS
BL     ZRO
XL     ZRO
AR     ZRO
BR     ZRO
XR     ZRO
XR1    BSS 0
UMI    ZRO

BLOCK  ZRO 0 CURRENT BLOCK MASK
BPT    BSS NBP BREAKPOINT LOCATIONS
BPTE   BSS 0
DRLB   ZRO 0 SECOND DDT RELABELLING BYTE
LCN    DATA EDDT END OF PROGRAM
LL     ZRO 0 LOWER SEARCH LIMIT
MASK   DATA -1 SEARCH MASK
ORG    DATA 240B LOWER LIMIT FOR SYMBOLIC PRINT
PC     ZRO 0 PROGRAM COUNTER
PRAD   DATA 8 PRINTOUT RADIX
PRCF   ZRO 0 PROCEED PERMISSIBLE FLAG
TPF    ZRO 0 TRACE POPS FLAG
TSF    ZRO 0 TRACE SUBROUTINES FLAG
UL     DATA 37777B UPPER SEARCH LIMIT


AMD    ZRO 0 ADDRESS PRINT ROUTINE
APUMD  ZRO;
ARG    ZRO
ARI    ZRO
BCEAX  ZRO 0 EAX 5,2 OR 7,2 FOR BCI
BLNF   ZRO 0 BLO[K NAME INDICATOR
BPW    BSS NBP BREAKPOINT WORDS
BPWE   BSS 0
CHC    ZRO
CONW   ZRO
       VARD SGNDVD,DVSR DIVIDE SUBROUTINE TEMPS.
DP     ZRO
EFFI   ZRO
EQI    ZRO
ERX    ZRO
EXF    ZRO
FDEX   ZRO
FIELD  ZRO;
IBP    ZRO
SIV    ITP (EQU 23),(EQU 5);
BIV    ITP (EQU 42B),(EQU 21B);
EIV    EQU BIV+SIV
OUTCHR EQU EIV
IBF    ITP (ZRO),(EQU 40B);
ITVT   BSS SIV
ITVTE  BSS 0
L    ZRO
L1    ZRO
L2    ZRO
LDPX   ZRO
LET    ZRO
LETN   ZRO 0 B OR D AFTER NUMBER FLAG
LITF   ZRO
LITW   ZRO
LWT    ZRO
MAXEXT ZRO
MINTAB ZRO
MULCAN ZRO 0 MULTIPLICAND FOR MUL
MSGAD  ZRO 0 TEMP FOR TYPE MESSAGE ROUTINE
NDEC   ZRO 0 NUMBER AS DECIMAL
NOCT   ZRO 0 NUMBER AS OCTAL
NRAD   ZRO 0 RADIX FROM B OR D
NSAVE  ZRO 0 SAVE NUMBER WHEN B OR D SEEN
NUM    ZRO
PAA    ZRO
PAF    ZRO
PAL    ZRO
PAT    ZRO
PDC    ZRO 0 PUSHDOWN COUNTER
PDL    BSS NPD PUSHDOWN LIST
PEX    ZRO
PFG    ZRO
PNS    ZRO
PRCC   ZRO
PRPF   ZRO 0 PROCEED/TRACE PRINT FLAG
RADIX  ZRO
RMD    ZRO 0 WORD PRINT ROUTINE
ROP    ZRO
SIGN   ZRO
SPADMK ZRO;
SSKE   BSS 3 SKE S,2 FOR SYMBOL SEARCH
SSKE1  EQU SSKE+1
SVAL   ZRO
SVF    ZRO 0 < FLAG
SYL    ZRO
SYML   ZRO
SYMR   ZRO
T     ZRO
TBLK   ZRO 0 BLOCK NO. PRINTED; VARD TCFA,TCFX
TLOC   ZRO
TQC    ZRO 0 'TRACE QUIETLY' COUNT
TT     ZRO
TTT    ZRO
TRNSFR ZRO 0 TRANSFER VECTOR
TYC    ZRO 0 CHARACTER TYPED IN
TYX    ZRO
UMA    ZRO 0 LAST USER MAP ADDRESS PAGE
URA    ZRO 0 USERS ADDRESS
USETAB ZRO 0 START OF USAGE TABLE
USIND  ZRO
USML   ZRO
USMR   ZRO
WDI    ZRO
WDW    ZRO
WORD   ZRO
XEA    ZRO 0 EFFECTIVE ADDRESS
XEC    ZRO 0 EXU LOOP COUNTDOWN
XMD    ZRO 0 TEQU PRINT MODE SWITCH
XMULT  ZRO 0 SAVE CELL FOR MULT
XSAVE  ZRO
ZEROBL BSS 0;
PDP    ZRO PDL PUSH DOWN POINTER


TVCI   EQU EDDT;
DTVT   LMACRO D;
TVCI   EQU TVCI-2;
D(0)   EQU TVCI;
       ENDM;

DITV   MACRO D;
LIM    NARG;
       RPT LIM,(DI=1);
       BSS 1;
       BRU D(($DI)).&1;
       ENDR;
EITVT  BSS 0;
       RPT (DI=LIM,-1,1);
$D(($DI)) DTVT
       ENDR;
       ENDM;

*  NOW TO DEFINE THE TRANSFER VECTOR

STRTTV EQU *;
 DITV RX,MX,DIVX,CINXR,COUTY,CRLFX,TABX,TSGXR,DIRX,IOUTX,IINY,RDDT,NOUTX;
SZTVT EQU *-STRTTV;

ADB    DATA 37777B
LADB   DATA 40777777B;
INB    DATA 4B4
CRC    DATA 155B
LFC    DATA 152B
MADB   DATA 7774B4
LMSK   DATA 7777B4 
BPR    DDT
BRUWD  BRU ENTRY
BRMILL BRM ILLIST
COM    BRU DENT;


*  CONTROL REGISTERS
EDDTCV BES 4;
EUCV   BES 4;


*      OPCODE TABLE FOLLOWS

*      FLAG USE IN SECOND SYMB NAME WORD
*      BIT 23 = PRINT ONLY ON EXACT MATCH
*      BIT 21 = OPCODE
*      BIT 20 = UNDEFINED, POINTER CHAIN ENDS WITH 0
*      BIT 19 = AMBIGUOUS NAME
*      BIT 18 = REFERENCED IN POLISH STRING
*      BITS 12-17 = BLOCK NUMBER (0=EXTERNAL)

S     MACRO A
SC     NARG; TEXT 'A(1$1,4)'; DATA SC+3; A(1) 0; ENDM
S1     MACRO A
SC     NARG; TEXT 'A(1$1,4)'; DATA 'A(1$5)   '+SC+3; A(1) 0; ENDM
INIS   BSS 0
P     EQU *
P1     EQU *+1
P2     EQU *+2;  S DDT,1;  S BRU;  S POT,1;  S PIN,1;  ITP ,(S BRI);
       ITP (S CALL; S INITTP,1; S POS,1; S RWRD,1; S STWC,1; S WWRD,1);
       ITP (S PLINE,1; S IPL,1)
       IF CTPFG; ITP (S1 STRB1; S1 STRB2);
       ELSE; ITP (S RQS); ENDF
      ITP ,(S ROV); S ETR; S MRG; S EOR; S NOP; S EXU; S STA
      S STB; S STX; ITP ,(S OVT,1);
      S BRX; S BRM; S CLA,1; S CLB,1; S CLX,1;
      S CAB,1; S CBA,1; S XAB,1;
      S CXA,1; S CAX,1; S XXA,1; S CBX,1; S CXB,1; S XXB,1
      S CNA,1; S CLAB,1; S SKE; S BRR
      S SKB; S SKN; S SUB; S ADD; S SKR; S MIN
      S XMA; S ADM; S MUL,1; S DIV,1; S RSH; S RCY; S LRSH; S LSH
      S LCY; S SKM; S LDX; S SKA; S SKG; S LDB
      S LDA; S EAX; S ZRO;
       IF CTPFG;
       ITP (S XIOA,1; S XBDA,1; S XMDA,1; S XRLA,1; S XCA),(S XAI,1);
       ELSE;
       ITP (S XIOA,1; S XBDA,1; S XMDA,1; S XRLA,1),(S XAI,1);
       ENDF
       IF CTPFG;
       ITP (S CMDA,1; S CIOA,1; S CRLA,1; S CBDA,1; S CCA),(S CIA,1);
       ELSE;
       ITP (S CMDA,1; S CIOA,1; S CRLA,1; S CBDA,1),(S CIA,1);
       ENDF;
       ITP ,(S CAP,1);
       ITP ,(S ALT,1);
       ITP ,(S UEX);
       ITP (),(S RATL,1; S SNAT,1; S RTU,1);
       S TSTG,1; S CIN,1; S COUT,1; S IOUT,1; S NOUT,1;
       S IIN,1; S DIR,1; S EIR,1; 
       S CRLF,1; S TAB,1; S RDX,1;
       S GCI,1; S GCD,1; S GCH,1; S WCI,1; S WCD,1;
       ITP (S UPR),();
       ITP (S PRO),();
       S HLT;
OPTAB  DATA INIS-*; FRGT SC


*      MACROS WHICH SHOULD NOT BE BEFORE THE OPCODE TABLE.

MUL    LMACRO T; 
T(0)   BRM MULL; IST NOP,T(,); ENDM;
DIV    LMACRO T; 
T(0)   BRM DIVV; IST NOP,T(,); ENDM
EIR    LMACRO T; 
T(0)   BRM EIRR; ENDM;
DIR    LMACRO T; 
T(0)   BRM DIRR; ENDM;
STP    LMACRO T;
T(0)   IST STA,T(,); IST1 STB,T(,); ENDM
LDP    LMACRO T;
T(0)   IST LDA,T(,); IST1 LDB,T(,); ENDM
LPR    LMACRO T;
T(0)   BRM LDP; IST NOP,T(,); ENDM

GCI    LMACRO D
D(0)   BRM RCSP; IST NOP,D(,); ENDM;
GCH    LMACRO D
D(0)   BRM RCNP; IST NOP,D(,); ENDM;
GCD    LMACRO D;
D(0)   BRM RCBP; IST NOP,D(,); ENDM;
WCI    LMACRO D;
D(0)   BRM WCSP; IST NOP,D(,); ENDM;
WCD    LMACRO D;
D(0)   BRM WCBP; IST NOP,D(,); ENDM;

IST    LMACRO D;
D(0)   D(1) D(2); ENDM;

IST1   LMACRO D;
D(0)   D(1) 1+D(2); ENDM;
*      SET UP VARIABLE BLOCK


START  STX JUMP;
       IF CTPFG;
START1 LDX =-NBRK
       ELSE;
START1 ITP (LDA =40000B; XBDA),(); LDX =-NBRK;
       ENDF;
       LDA =-1; LDB =APBPT; STA EBRKAD,2; STB EBRKVL,2; BRX *-2;
       CLA; LDX =BN-ZEROBL; STA ZEROBL,2; BRX *-1;
       CLX; STX CSOF; EAX EDDT; STX LL; STX ORG; STX LCN; STX LRO; 
       EAX 8; STX PRAD
       EAX PAD; STX AMD; EAX PS; STX RMD; EAX PWI; STX XMD
       LDA EAX7X; STA BCEAX; LDP SSKI; STP SSKE1; EAX 4; STX SY2
       EAX 37777B; STX UL; LDA =-1; STA MASK; STA PRCF; STA TPF
       STA APUMD; STA TSF; LDB BPR; LDX =-NBP; STA BPTE,2
       STB BPWE,2; BRX *-2; BRM SETUP
$START2 LDX =SZSYMT; STX SYMTAB; LDX =16B6; STX SY1; LDP BZN;
       STP BN
       LDA =77B6; STA ENDX; ITP ,(LDA =EDDT; CAP); BRM EOMSET;
       IF CTPFG;
CDENT  ITP (LDX =-3; CCA 200B,2; STA EDDTCV,2; STA EUCV,2; BRX *-3);
       ELSE;
CDENT  ITP (LDX =-4; CCA: 4,2; STA EDDTCV,2; STA EUCV,2; BRX *-3);
       ENDF;
*      RESET SEQUENCE

DENT   LDX =-NBP; LDA BPWE,2; SKE BPR; BRU *+2; BRU DENT2
      STA* BPTE,2; LDA BPR; STA BPWE,2
DENT2  BRX DENT+1; BRM EOMSET; EAX INBUFR; STX IRPTR
      STX IWPTR; EAX OTBUFR; STX ORPTR; STX OWPTR; LDA =-1
      STA UMA; STA TYC;
RSP    ITP (LDA =TII; STA BIV+1),(LDA =TII; STA BIV+2);
       ITP (LDA =TOI; STA BIV+2),(LDA =TOI; STA BIV+3)
       ITP (LDA =1B5+ENTRY; STA 4; LDA =1B5+CDENT; STA 5);
       ITP (LDA =1B5+START1; STA 6);
RSM    LDA =PDL; STA PDP; BRM TTB; LDA =' DDT'; BRM PXT
RSR    BRM TCR; LDX =TVCI-EDDT; EAX 1,2; LDA EITVT,2; STA EDDT,2; 
       BRX *-3;
RSE    CLA; STA LWT; STA USIND; STA DLWFLG; STA TIIA;
RSC    LDA =-1; STA ROP; STA PFG; STA PEX; LDA =17B; STA EXF
      STA PAF
RSW    LDA =-1; STA SVF
RSL    CLAB; STA ARG; STP USML; LDA =-1; STA ARI; STA LITF
      STA SYL
RSA    CLA; STA WORD; LDA =-1; STA FDEX
RSF    LDA =-1; STA SIGN; CLA; STA FIELD
RSS    CLA
RSB    STA BLNF; ITP (),(LDA =EDDT-SZTVT; CAP);
      LDA =-1; STA LET; STA LETN; CLAB; STP NDEC
      STA NUM; STP SYML; LDA PRAD; STA RADIX; LDA =6; STA CHC
      LDA LRO; BRM IVRST; STA LRO
R     LDA =PDL; STA PDP; LDX =DTAB+1-ENDTAB; C RR; BRU 0,2 


*      DISPATCHER ROUTINE, TAKES AN INCOMING CHARACTER AND
*      READS THE DISPATCHER TABLE TO DETERMINE THE ROUTINE WHICH
*      WILL ANALYSE THE CHARACTER PROPERLY.  PUTS THE ENTRY IN THE 
*      DISPATCHER TABLE INTO THE X REGISTER.

RR1    CAX
RR     C TI; ETR =177B
RRD    STA TYC; LCY 15; SKA =1B7; EAX* ENDTAB-1,2; ETR =77B5; STA T
RD     LDA ENDTAB,2; ETR =7777777B; SKG T; BRX RD; SKA INB; BRU RR1
RE     LDA ENDTAB,2; LRSH 21; ETR PEX; STX DP; CAX; LDA =-1
      STA PEX; BRU RXT,2
RXE    SKN SYL; BRU *+3; LDA LWT; STA WORD; C EVW; STA LWT
RXX    LDX DP; LDX ENDTAB,2; R1
RXZ    C EVL; BRU RXX-1
RXD    SKN SYL; BRU *+2; BRU RXE+2
RXC    C EVW; LDB USML; SKB =-1; BRU ILU; BRU RXX-1
RXB    LDA =6; SKN SYL; SKE CHC; BRU RXC; BRU RXX
RXT    BRU RXX NO EVAL; BRU RXB EVAL SYMBOL
      BRU RXD EVAL (LWT, MUST BE DEFINED); BRU RXZ EVAL, DO NOT COMBINE
      BRU RXE EVAL (LWT)  


*       ASSORTED CONSTANTS

BRY    BRU 1
BZN    DATA 16161616B
BZN1   DATA 1616B4 


*      PUSHDOWN OPERATIONS

CALL   ZRO; XMA PDC; SKG PDP; BRU *+2; BRU C1; XXA; EAX* PDP
      EAX -PDL,2; STX COUNTR; EAX PDL,2; XXA
C1     XMA PDC; MIN CALL; XMA CALL; ETR ADB;
       STA* PDP; XMA CALL; XMA* CALL
      STA SUBRT; XMA* CALL; MIN PDP; BRU* SUBRT
R1     SKR PDP; BRR* PDP
R2     SKR PDP; MIN* PDP; BRR* PDP; VARD $COUNTR,SUBRT


*      MULTIPLY SIMULATION

MULL   ZRO; STA MULCAN; STX XMULT; GET B,MULL; LDX =-23; CLA
      SKB =-1; BRU *+2; BRU OUT; SKB =1
ADDD   ADD MULCAN
ZERO   RSH 1; SKB =1; BRX ADDD; BRX ZERO; SKB =1; BRU FINE
OUT    LDX XMULT; BRR MULL
FINE   SUB MULCAN; LRSH 1; LCY 1; BRU OUT 


*      DIVIDE SIMULATION

DIVV   ZRO; RSH 1; LSH 1; STX XMULT; STA SGNDVD; GET A,DIVV; 
       STA DVSR; LDA SGNDVD; LDX =-23
LOOPD  SKA =4B7; BRU NEG; SKN DVSR; BRU LIKE
UNLIKE LSH 1; ADD DVSR; BRX LOOPD; BRU FINDIV
NEG    SKN DVSR; BRU UNLIKE
LIKE   RCY 1; ADD =4B7; LCY 2; SUB DVSR; BRX LOOPD
FINDIV SKA =4B7; BRU NEGRMD; SKN SGNDVD; BRU OKDIV; BRU POSFIX
NEGRMD SKN SGNDVD; BRU NEGFIX; BRU OUTDIV
NEGFIX ADD DVSR; XAB; ADD =4B7; BRU OUTDIV
POSFIX SUB DVSR; XAB; ADD =4B7+2; BRU OUTDIV
OKDIV  XAB; ADD =4B7+1
OUTDIV LDX XMULT; BRR DIVV


       IF ITPFG<=0;
*SKMF   ZRO; SAVE SKM,A,B,X; GET A,SKMF; EOR SKMA; ETR SKMB;
*       SKE =0; BRU *+2; MIN SKMF; RST SKM,A,B,X; BRR SKMF;
*       VARD SKMA,SKMB,SKMX;
       ENDF;


      REM TEST PROCESSOR DDT VERSION 1.13


*      LDP SIMULATION

LDP    ZRO; MIN LDP; LDA LDP; ETR ADB; STA LDP;
       LDA* LDP; STA LDPX; CXB; EAX* LDPX; STB LDPX
      LDA 0,2; LDB 1,2; LDX LDPX; BRR LDP 
*      CLOSE REGISTER

CLO    LDA ROP; SKN SYL; SKG =-1; R1; SKN USIND; BRU *+2
ILLB   BRU ILL; CLA; SKE USML; BRU CLU
CLS    LDA LRO; SKE LCN; BRU CLW; LDA WORD; BRM USP; BRU CLE
CLW    SKN EXF; BRU CLD
CLD    LDA LRO; BRM IVCHK; LDA WORD; STX URA; STA* URA;
CLE    SKN PFG; R1; BRU ESL
CLU    LDA WORD; SKA ADB; BRU ILU; LDP USML; STP SYML; LDB LMSK
      C SCH; BRU CLI; BRM SIN; ETR =77770001B; MRG =10B; STA* L1
      LDA =-1; STA* L2
CLI    LDA LRO; C SUS; ADM WORD; BRU CLS


*      ASSORTED NO-EVAL CHARACTERS

ILL    TCF =37B
ILX    BSS 0
TR     SKN ROP; BRU RST; BRU RSR
ILU    LDA ='(U) '; BRM PXT; BRU ILX
ILA    LDA ='(A) '; BRU ILU+1
STQ    LDA =-1; STA LET
STH    LDA =5; STA CHC; MIN SYL; LDA SYL; SKG =0; STA WORD; BRU R
INDIR  LDA INB; ADM WORD; MIN SYL; BRU STH 


*      SET BLOCK

BLS    LDP BZN; SKN LET; LPR SYML; C BLKS; BRU ILL; LDA =-1
      BRU RSB


*      SEARCH FOR BLOCK NAME

BLKS   LDX =-BNL
BLS1   SKE EBN,2; BRX BLS2; XAB; SKE EBN1,2; BRX BLS3; CXA; CLB;
      ADD =2B2; LSH 5; STA BLOCK; R2
BLS3   XAB
BLS2   BRX BLS1; R1


*      PRINT AS NUMBER,INST,SIGNED,BCI

EQ     NOP APT; LDA =6; SKN SYL; SKE CHC; BRU EQV; BRU LIT
EMS    NOP PP
EM     NOP PS
BCP    NOP* XMD
RT     NOP PSN
EQV    LDA 0,2; STA EQI; BRM TTB; LDA WORD; LDX =-1; C ←EQI
RST    BRM TTB; BRU RSW 
EADB   ZRO; ETR LADB; SKA =4B7; BRR EADB; ETR ADB; BRR EADB;


*      MODE SWITCHES AND SWITCHERS

SERS   NOP PS; NOP =77B6
SERC   NOP APT; NOP =35B6
SERH   NOP* XMD; NOP =2B6
SERN   NOP PSN; NOP =35B6; LDA 0,2; STA RMD; LDA* 1,2; STA ENDX
      BRU RSR
DLV    SKN SYL; BRU PRCV; LDA =APT; STA AMD; BRU RSR
DLR    SKG =1; BRU *+2; BRU RADS; LDA =PAD
      STA AMD; BRU RSR


*      INTERNAL REGISTERS

DLL    NOP PC; SKN ARI; BRU SETL
DLF    NOP LCN; ETR ADB;
DLL0   NOP ORG
DLL1   NOP LL
DLL2   NOP UL; BRM EADB; ITP (BRM CBOUND),();
SAPUMD NOP APUMD;
DLA    NOP AR
DLB    NOP BR
DLX    NOP XR
DLM    NOP MASK
DLQ    NOP LWT
PEO    NOP CSOF;
PEM    NOP EUCV-4;
PEI    NOP EUCV+1-4;
PER    NOP EUCV+2-4;
PEB    NOP EUCV+3-4;
INTERN LDX 0,2; LDB CHC; XAB; SKE =6; BRU INTS; LDA 0,2; STA NUM
      BRU STQ
INTS   STB 0,2; BRU RSR;


*      COMMA, SETS LIMITS

SEP    SKN ARI; BRU ILL; STA ARG; CLA; STA ARI; BRU RSA


SETL   ITP (BRM CBOUND),(); STA UL; LDA ARG; ITP (BRM CBOUND),();
       STA LL; BRU RSR


       IF ITPFG>0;
CBOUND ZRO; STA CBONDT; LDA CHC; SKE =6; BRU *+2; BRR CBOUND;
       CBDA; SKG CBONDT; BRU ILL; LDA CBONDT; BRR CBOUND;
       VARD CBONDT;
       ENDF;


*      CR, LF, (, OR **

CLOS   C CLO; SKN PFG; BRU *+2; BRU RSC; SKN PAPUF; BRU RSW;
CPAT   LDA LRO; SKN SYL; ADD =1; STA LCN; LDA EXF; SKA =2B7
      BRU TPAT; LDA PNS; BRM USP
TPAT   LDA PFG; STA LRO; ADD BRY; BRM USP; ADD =1; BRM USP; C ESL
      BRU RSC
ORN    C CLO; MIN LRO
OPR    C OPV; BRU RST; BRU RSE
OPV    LDA LRO; BRM EADB; STA LRO; STA WORD; SKN PFG; BRU OPC
      LDX =-1; SKN PAF; BRU OPA


*      DISPATCHES ON THE NEXT CHARACTER

OPC    LDA EXF; ETR =177B; STA TYC; BRM COUT;
      SKN PFG; R1; CLA; STA PEX; STA SYL; STA USIND
      LDA EXF; LDX =DTAB+1-ENDTAB; C RRD; LDA* 0,2; STA ERX
      LDA LRO; BRM IVCHK; STX LRO; CLB; STB ROP; BRU ERT 
OPA    C ←AMD; LDA TBLK; STA BLOCK; BRU OPC
ORA    C CLO; LDA WORD; BRM EAPAD; STA LRO; BRU ORR
ORP    C CLO; SKR LRO; NOP
ORR    BRM TCR; BRU OPR
ORQ    C CLO; LDA LRO; ADD =1; BRM EADB; STA LRO; CAX
      C ERE; BRU RSW 


*      FILL, EXAMINE

EMD    NOP RMD; LDA =4B7; ADM TYC
ERW    NOP RMD
ERI    NOP EM
ERC    NOP EQ
ERB    NOP BCP
ERS    NOP RT; LDA* 0,2; STA ERX; LDA TYC; SKN SYL; STA EXF
      SKN SYL; BRU ERO; LDA LWT; BRM EADB; BRM EAPAD;
ERP    SKN ARI; BRU ERQ; BRM IVCHK
ERY    C ERT; BRU RST; BRU RSE
ERT    SKN TYC; BRU ERL; BRU *+2
ERE    STX URA; LDA* URA; STA LWT; R1
ERL    BRM TTB; STX URA; LDA* URA; STA LWT; C ←ERX
       SKN USIND; R1
      LDA ='[U] '; BRM PXT; R2
ERQ    SKN EXF; BRU *+2; BRU ERY; LDA ARG; BRM EADB; XMA LRO
      STA ARG; BRM TCR
ERR    C OPV; NOP; BRM TCR; LDA ARG; SKG LRO; BRU RSR; MIN LRO
      BRU ERR
ERO    C EVL; LDB USML; SKB =-1; BRU ILU; BRM EADB; STA LRO
      CLB; STB ROP; LDB TBLK; STB BLOCK; BRU ERP 



*      STORE LITERALS

ESL    C LS; LDB LMSK
ELS    LDA* L; SKM LMSK; BRX ELD1; LDA* L1; SKA =10B; BRU *+2
      BRX ELD1; EOR =10B; STA SYMR; STX TYX; LDA LCN; STA SVAL
      C SDA; LPR ←L; LCY 12; BRM USP; LDX TYX; BRX *+1; LDB LMSK
ELD1   BRX *+1; BRX ELS; R1


*      STORE INTO USER PROGRAM

USP    ZRO; CAB; LDA LCN; SKE =37777B; BRU *+2; BRU SIOO
       BRM IVCHK; STX URA; STB* URA; CXA; ADD =1; SKE =37777B;
       BRU *+2; BRU SIOO; STA LCN; CBA; BRR USP


*      SET TEXT MODE

EAX7X  EAX 7,2
EAX5X  EAX 5,2
DL3    NOP PWI
DL4    NOP PWD; LDA 0,2; STA XMD; LDA -2,2; STA BCEAX; BRU TR


*      PERMANENT RADIX CHANGE

DLO    SKN SYL; BRU TPFS; LDA =8
RADS   STA PRAD; BRU RSR
DLD    LDA =10; BRU RADS 


*      SUPPRESS ADDRESS PRINT

PAFF   LDA =-1; STA PAF; BRU TR



*      CHECK TO SEE IF THE CELL REFERENCED IS THE TRANSFER VECTOR 
*      FOR THE I/O INTERRUPTS.  CONVENTIONS:
*      CALL:  A CONTAINS THE ADDRESS OF THE VALUE TO BE CHECKED,
*      RETURN:  X WILL CONTAIN THE CORRECT VALUE, A WILL CONTAIN THE 
*      ORIGINAL CONTENTS OF X, B UNAFFECTED

IVCHK  ZRO; BRM EADB
IVCHK1 SKG =EIV-1; BRU IVCHK2;
IVCHKE XXA; BRR IVCHK
IVCHK2 SKG =BIV-1; BRU IVCHKE; XXA; EAX ITVT-BIV,2; BRR IVCHK
IVRST  ZRO; BRM EADB; SKG =ITVTE-1; SKG =ITVT-1; BRR IVRST;
      ADD =BIV-ITVT; BRR IVRST

*      THIS ROUTINE CHECKS TO SEE IF THE CONTENTS OF A POINTS TO
*      DDT'S ADDRESS SPACE.  IF IT DOES IT PLACES THE END OF DDT'S
*      ADDRESS SPACE IN X,  ADDS 14000B TO X AND PLACES THE RESULT
*      IN A.  CHECKING IS ALSO DONE FOR THE I/O INTERRUPT
*      VECTOR WHICH IS INSIDE DDT'S ADDRESS SPACE.  B IS NOT DISTURBED
DDTCHK ZRO; ZRO;


*      SYMBOL SEARCH

SCH    C LS
SCO    LDA SYML; BRU SSKE
SSKI   BRX SCI; BRU SCR
SCR    LDA* L1; SKM SYMR
SCU    BRX SCL; R1
SCL    LDA SYML
SCI    BRX *+1; BRX SSKE; R2


*      SYMBOL DEFINE

SDF    LDB SVAL; SKB =177B5; SKB =4B7; BRU *+2; BRU SDX;
SDO    LDA SYML; SKE =16B6; BRU SDD; LDA SVAL; BRM EADB; STA LRO
      R1
SDD    LDB LMSK; C SCH; BRU SDE
SDI    BRM SIN
SDV    LDA SYMR; LDB SVAL; XMA* L1; STA SYMR; STB* L2; R1
SDX    LDA SYMR; MRG =4B; SKB =20037777B; MRG =1B; STA SYMR
      BRU SDO
SDE    SKA =20B; BRU SDS; LDB SYMR; SKB =77B2; BRU *+2; BRU SDT
      EOR SYMR; SKA =77B2; BRU *+2; BRU SDT; EOR SYMR; SKA =77B2
      BRU SDK; SKA =10B; BRU SDK; LDA SVAL; SKE* L2; BRU SDK; R1
SDK    LDA =20B; ADM* L1; ADM SYMR; BRU SDI
SDS    LDA =20B; ADM SYMR; LDA* L1
SDU    EOR SYMR; SKA =77B2; BRU *+2; BRU SDT; C SCU; BRU SDU
      BRU SDI
SDT    SKA =10B; BRU SDA; BRU SDV


*      DEFINITION PATCHUP


SDA    LDA* L2; SKE =-1; BRU *+2; BRU SDL; LRSH 14; STA TT; LCY 14
      STX T; BRM IVCHK
SDC    STX TTT; LDA SVAL; SKR TT; BRU *+2; BRM EADB; XMA 0,2; CAB
      ETR MADB; ADM 0,2; CBA; BRM IVCHK; CXA; SKE TTT; BRU SDC
SDL    LDX T; BRU SDV 


*      SYMBOL USE

SUS    STA T; SKA =4B7; BRU  ILL; 
       LDA* L2; SKE =-1; BRU SUI; LDA T; SKN FDEX; BRU *+2
      MRG INB; STA* L2; BRM EADB; R1
SUI    EAX* L2; SKN FDEX; BRU SUD; LDA INB; ADM 0,2
SUR    LDA 0,2; ETR MADB; MRG T; XMA 0,2; BRM EADB; R1
SUD    LDA 0,2; LRSH 14; SKG =0; BRU SUR; STA TTT
SUP    SKR TTT; BRU SUL; CXA; EOR 0,2; SKA ADB; BRU SUR; LDA 0,2
      ETR MADB; MRG T; STA 0,2; BRM EADB; R1
SUL    LDA* 0,2; LDX 0,2; BRU SUP


*      SYMBOL INSERT

SIN    ZRO; LDX SYMTAB; BRM SIO; STB SYMTAB; LDA SYML; STA* L
      LDA SYMR; BRR SIN
SIO    ZRO; LDA =3; ADM L; ADM L1; ADM L2; XXA; ADD =-3; CAB
      CNA; ADD =S; LDX =-3; SKG =EDDT-SZTVT-1; BRR SIO
SIOO   LDA ='FULL'; BRM PXT; BRU ILL 


*      SYMBOL DEF CHARS

SLW    LDA LWT; BRM EADB; SKN LET; BRU DFV; SKN SYL; BRU SNO
      STA WORD; EAX EM; SKN USML; BRU EM; BRU ILU
SNO    LDA NUM; MUL INB; STB NUM; BRU R
HERE   LDA LRO
DFV    STA SVAL
DFE    SKN LET; BRU *+2; BRU ILL; C SDF; BRU TR
SSV    STA SVAL; MIN SVF; BRU RSL 


*      LETTERS OR DIGITS

LETTB  LDA NOCT; LDB =8; BRU *+3
LETTD  LDA NDEC; LDB =10; STA NUM; STB NRAD; SKN LET; BRU LN
      SKN LETN; BRU LETTER; LDA =6; SKG CHC; BRU LETTER; CLA
      STA NOCT; STA NDEC; XMA NUM; STA NSAVE; MIN LETN; BRU LN
LETTER MIN LET
LN     LDA TYC; CLB; LDX CHC; BRU CHT,2
CHT    BRU R; RCY 6; RCY 6; RCY 6; RCY 6; RCY 6; LCY 18; ADM SYML
      CBA; ADM SYMR; MIN SYL; SKR CHC; BRU R
DIGIT  SKN LET; BRU LETTER; LDA RADIX; MUL NUM; LSH 23; ADD TYC
      SUB =20B; STA NUM; LDA TYC; RCY 3; LDA NOCT; LCY 3; STA NOCT
      LDA NDEC; MUL =5; LSH 24; ADD TYC; SUB =20B; STA NDEC
      BRU LN 


*      EVALUATE FIELD

EVF    SKN LET; BRU EVS; LDA =-1; XMA LETN; SKG =-1; BRU EVV
      LDA NDEC; ETR =7; STA NDEC; LDA NSAVE; BRU EVP
EVM    MUL NRAD; LSH 23
EVP    SKR NDEC; BRU EVM; STA NUM
EVV    LDA FIELD; LDX SIGN; EXU EVTAB+1,2
EVVR   STA FIELD; R1
EVS    LDB LMSK; C SCH; BRU EVK; BRU EVO
EVK    SKA =20B; BRU EVSA
EVKR   SKA =10B; BRU EVU; LDA* L1; ETR =77B2; STA TBLK
EVVN   LDA* L2; STA NUM; BRU EVV
EVSA   CLA; STA TT
EVSS   LDA* L1; ETR =77B2; SKE BLOCK; BRU EVSL
EVST   STX TT
EVSK   C SCU; BRU EVSS; SKN TT; BRU ILA; LDX TT; LDA* L1; BRU EVKR
EVSL   SKN BLNF; BRU EVSK; SKE TT; BRU EVSK; BRU EVST
EVU    LDA SYML; XMA USML; SKE =0; BRU ILU; SKN ARI; BRU ILU
      LDA SYMR; STA USMR; LDA FIELD; R1
EVO    LDA FDEX; SKE =-1; BRU EVU; C LP; LDB LMSK; C SCO; BRU EVVN
      BRU EVU
EVTAB  ADD NUM; SUB NUM; BRU EVMUL; BRU EVDIV; BRU EVLSS; BRU EVEQL
      BRU EVGRT; ETR NUM; MRG NUM; EOR NUM; BRU EVMOD; BRU EVPLSP
      BRU EVMNSP
EVMUL  MUL NUM; LCY 23; BRU EVVR
EVDIV  RSH 23; DIV NUM; BRU EVVR
EVLSS  SKG NUM; BRU EVLSS1
EV0    CLA; BRU EVVR
EVLSS1 SKE NUM; BRU EV1; BRU EV0
EVEQL  SKE NUM; BRU EV0
EV1    LDA =1; BRU EVVR
EVGRT  SKG NUM; BRU EV0; BRU EV1
EVMOD  RSH 23; DIV NUM; CBA; BRU EVVR
EVPLSP MUL =3B7; LSH 2; ADD NUM; BRU EVVR
EVMNSP MUL =3B7; LSH 2; SUB NUM; BRU EVVR


*      EVALUATE EXP

EVL    C EVF; ETR FDEX; ADD WORD; STA WORD; SKN LITF; BRU *+2; R1
      LDB =-1; SKB USML; BRU ILU; STB LITF; STB SIGN; LDB =17777B
      RCY 12; STP SYML; LDA LITW; STA WORD; CLA; STA FIELD; C EVS
      BRU EVL+1


*      EVALUATE WORD

EVW    C EVL; SKN ARI; BRU *+2; R1; CAB; CLA; RCY 3; MRG ARG;
       STA WORD; R1;


*      ARITHMETIC OPS

SPC    LDA WORD; LDB ADB; SKA =4B7; LDB =777777B; STB FDEX; BRU RSF;
OPT    EQU *
PLS    BRU SSAOP
MNS    BRU SSAOP
OPMUL  BRU SSAOP
OPDIV  BRU SSAOP
OPLSS  BRU SSAOP
OPEQL  BRU SSAOP
OPGRT  BRU SSAOP
OPETR  BRU SSAOP
OPMRG  BRU SSAOP
OPEOR  BRU SSA1
OPMOD  BRU SSAOP
OQPLS  BRU SSAOP
OQMNS  BRU SSAOP
SSAOP  STX TYC; C EVF; LDA TYC; SUB =OPT+1; STA SIGN; MIN SYL
      BRU RSS
SSA1   SKN SYL; BRU SSAOP; EAX SERN; BRU SERN


*      PROCESS LITERAL

LIT    SKN LITF; BRU ILL; LDA =-1; SKA USML; BRU ILU; LDA WORD
      SKA ADB; BRU ILL; STA LITW; MIN LITF; BRU RSA 


*      PRINT SIGNED NUMBER

PSN    LDB =777B5; SKM =777B5; BRU APT; TCF =15B; CNA


*      PRINT NUMBER

APT    STA NUMB; CLAB
NOLOOP STA REDBIN; LDA NUMB
NOTEQ  STA QUOT; LRSH 23; DIV PRAD; SKE REDBIN; BRU NOTEQ; CBA
      ADD =20B; BRM COUT;
      LDA QUOT; SKE NUMB; BRU NOLOOP; R1 


*      INPUT ROUTINE


CINP   ZRO; SAVE CINP,B,X
CINP2  LDA OWPTR; SKE ORPTR; BRU *-2;
CINP1  LDA IRPTR
      SKE IWPTR; BRU *+2; BRU CINP1; LDX IRPTR; DIR; BRM INCR; EIR;
      LDA 0,2; STX IRPTR; BRM COUT; RST CINP,B,X; BRR CINP


*      INTERRUPT ROUTINE TO INPUT A CHARACTER

       IF ITPFG>0;
TII       ZRO; STA TIIA; IF CTPFG; ELSE; LDA =4B7; XMDA; STA MODE; ENDF
          CLA; XIOA; STA CONW;
          SAVE TII,B,X;
       LDA IBF; ADD =140B; ETR =177B;
*  CONTROL SHIFT O
       SKN CSOF; BRU *+4; SKE =177B; BRU *+2; BRU TII4;
*      RUBOUT?
          SKE =137B; BRU TII3; STA TYC; LDA  TII;
          STA 2; 
          BRM CIOBUF;
          LDA CONW; XIOA; RST TII,A,B,X; BRM SVPST; BRU DENT;
*      NO RUBOUT
TII3      LDX IWPTR; BRM INCR; XXA; SKE IRPTR;
          BRU *+2; BRU TII2; XXA; STA 0,2;
          STX IWPTR;
*      FINISHED?
TII2      RST TII,B,X;
          LDA CONW; XIOA; IF CTPFG; ELSE; LDA MODE; XMDA; ENDF
          LDA TIIA; BRU* TII;
TII4   LDA =137B; STA TYC; BRM CIOBUF; LDA CONW; XIOA; RST TII,A,B,X;
       BRM STVECT; BRM EOMSET; LDA TII; BRM XIE; BRU DENT;
       VARD MODE,CSOF;


       ELSE;


TII    ZRO; XMA TIIA; XAI; STA CONW; SAVE TII,B,X;
       LDA 3; SKE =IBF; BRU *+2; BRU TII2;
TII1   LDX IBP; LDA 0,2; EAX 1,2; XXA;
       SKE 3; BRU *+3; LDA =IBF; STA 3; STA IBP; XXA;
      ADD =140B; ETR =177B;
*  CONTROL ←
       SKN CSOF; BRU *+4; SKE =177B; BRU *+2; BRU TII4;
      SKE =137B; BRU TII3
       STA TYC; LDA TII; ADD =1; STA 7;
       BRM CIOBUF;
       LDA CONW; XAI; XMA TIIA; RST TII,B,X; BRU PANIC;
TII3   LDX IWPTR; BRM INCR; XXA; SKE IRPTR; BRU *+2; BRU TII2; XXA
      STX IWPTR; STA 0,2
TII2   LDA IBP; SKE 3; BRU TII1;
       LDA CONW; ETR =37777777B; XAI; XMA TIIA; RST TII,B,X; BRI TII
TII4   LDA =137B; STA TYC; BRM CIOBUF; LDA CONW; XAI; XMA TIIA; 
       RST TII,B,X; BRM STVECT; LDA TII; BRM XIE; LDA =IBF; STA 3; 
       STA IBP; BRM EOMSET; BRU DENT;
       VARD CSOF;
       ENDF;


*      OUTPUT ROUTINE

COUT   ZRO; 
$PUNCH SAVE COUT,X,B; LDX OWPTR;
       DIR; BRM INCR; EIR; XXA; HOLD ORPTR;
       XXA; STA 0,2; STX OWPTR; CAB;
       CLA; ITP (XIOA; XMA 12B; MRG =4B6; XMA 12B; MRG =4; XIOA),();
       ITP (),(XAI; MRG =5B7; XAI);
       CBA; RST COUT,B,X; BRR COUT


*      INTERRUPT ROUTINE TO OUTPUT A CHARACTER
       IF ITPFG>0;
TOI       ZRO; STA TOIA; IF CTPFG; ELSE; LDA =4B7; XMDA; STA TOMODE; ENDF
          SAVE TOI,B,X;
          LDA ORPTR; SKE OWPTR; BRU *+2; BRU TOI2;
          CAX; CLA; XIOA; STA TOCTL; BRM INCR;
          STX ORPTR; LDA 0,2; ADD =240B;
          STA OUTCHR;
          LDA =OUTCHR+3B7; STA 12B;
       ADD =2+4B6; STA OUTCHR+1; ADD =1; STA OUTCHR+2;
          LDA TOCTL; MRG =4; XIOA;
          LDA =4B6; ADM 12B;
TOI1      RST TOI,B,X; IF CTPFG; ELSE; LDA TOMODE; XMDA; ENDF
          LDA TOIA; BRU* TOI;
TOI2   LDA =OUTCHR+34B6; STA 12B; ADD =1; STA OUTCHR; BRU TOI1;


       VARD TOMODE,TOCTL;


DIRR      ZRO; XMA DIRT; CLA; XIOA;
          XMA DIRT; BRR DIRR;


$EIRR  ZRO; XMA DIRT; XIOA; XMA DIRT;
          BRR EIRR;


       ELSE;

TOI    ZRO; SAVE TOI,A,B,X;
       LDA ORPTR; SKE OWPTR; BRU *+2; 
       BRU TOI1;
       CAX; CLA; XAI; ETR =37777777B; XAI;
       BRM INCR; STX ORPTR; LDA 0,2;
       ADD =240B; STA 30B; LDA =-1; STA 31B; LDA =30B; STA 4;
       CLA; XAI; MRG =1B7; ETR =37777777B; XAI;
TOI1   RST TOI,A,B,X; BRI TOI

DIRR   ZRO; STA DIRT; CLA; XAI; ETR =37777777B;
       XAI; LDA DIRT; BRR DIRR;

$EIRR   ZRO; BRI EIRR;
       ENDF;
DIRT   ZRO


*      INCREMENT POINTER FOR RING BUFFER,  NEGATIVE CELL CONTAINS 
*      THE ADDRESS OF THE BEGINNING OF THE BUFFER.  ONLY THE 
*      X REGISTER IS USED.

INCR   ZRO; EAX 1,2; SKN 0,2; BRR INCR; EAX* 0,2; 
       XXA; ETR =37777B; XXA; BRR INCR


*      ENABLE INTERRUPT STRUCTURE
       IF ITPFG>0;
EOMSET    ZRO; CLA; XIOA; MRG =2; XIOA;
          BRR EOMSET;
       ELSE;

EOMSET ZRO; CLA; XAI; EOR =2B6; SKA =6B6; EOR =2B6;
       MRG =6B7; XAI; BRR EOMSET;
       ENDF;

INBUFL EQU 15
OTBUFL EQU 5
INBUFR BSS INBUFL; ZRO INBUFR,4
OTBUFR BSS OTBUFL; ZRO OTBUFR,4
      VARD IRPTR,IWPTR,ORPTR,OWPTR,TIC,TIIA,TOC
      VARD TIIB,TIIX,TOIA,TOIB,TOIX,CINPB,CINPX,COUTA,COUTB,COUTX


*  CLEAR INPUT AND OUTPUT BUFFERS

CIOBUF ZRO; CLA; LDX =-INBUFL; STA INBUFR+INBUFL,2; BRX *-1;
       LDX =-OTBUFL; STA OTBUFR+OTBUFL,2; BRX *-1; BRR CIOBUF;
       REM 7 OCTOBER 1969


*      PRINT CHARACTER

TCFP   ZRO; SAVE TCF,A,X; GET A,TCFP; BRM COUT;
       RST TCF,A,X; BRR TCFP


*      PRINT MESSAGE

TMFP   ZRO; GETE TMFP; XXA; ETR ADB; STA MSGAD;
TMFP1  LDX =-3; LDB* MSGAD
TMFP2  CLA; LSH 8; SKE =4; BRU *+2; BRU DOLLAR; SKE =17B; BRU *+3
      BRM HANGON; BRR TMFP; BRM COUT;
TMFP3  BRX TMFP2; MIN MSGAD; BRU TMFP1
DOLLAR TCF =155B; TCF =152B; BRU TMFP3


*      PRINT BCI WORD

PWN    CAB; CLA; LCY 6; BRM COUT;
       CBA
PWD    SKE =0; BRU PWN; R1
PWI    CAB; CLA;
PWC    LCY 8; C PCI; CLA; SKB =-1; BRU PWC; R1
PCI    SKA =1B2; TCF =6; ETR =77B; BRM COUT;
       R1

PXT    ZRO; C PWD; BRR PXT 


*      PRINT SYMBOL

PSYM   LDA* L; LDB LMSK; SKM LMSK; BRU PSYN; TCF =35B;
      LDA* L2; STA TT; LDA* TT; BRU PSN
PSYN   LDA* L1; ETR =77B2; SKE =0; STA TBLK; LDA* L1; SKA =20B
      BRU *+2; BRU PSYS; RCY 5; ETR =36B; STX TT; CAX; SKG =0
      BRU PSYA; LDA BN,2; BRM PXT; LDA BN1,2; BRM PXT
PSYA   TCF =6; LDX TT
PSYS   LDA* L; BRM PXT; LDA* L1; ETR LMSK; BRM PXT; R1 


*      PRINT ADDRESS

PAD    BRM EADB; ADD =1; STA PAA; LDA =2B2; STA PAT; CXA; SKE =-1
      BRM EADB; STA TLOC; C LS; LDB =15B; LDA PAA; SKA =4B7;
      BRU *+3; SKG ORG; BRU PAB
PAK    SKB* L1; BRU PAC; 
       SKA =4B7; BRU *+4; SKN* L2; BRU *+4; BRX PAU+2; SKN* L2;
       BRX PAU+2; SKG* L2; BRX PAU+2; SUB* L2
      SKG PAT; BRU PAY
PAU    BRX *+1; LDA PAA; BRX *+1; BRX PAK; LDA PAT; SKG =177B
      BRU PAS
PAB    LDA PAA; SUB =1; STA PAA; LDA TLOC; SKE =-1; BRU PAB1;
       LDA =@4B7; STA SPADMK; LDA PAA; BRU APT;
PAB1   LDA PAA; ETR ADB; BRU APT;
PAY    STA PAT; STX PAL; BRX PAU+1
PAS    LDB =@4B7; STB SPADMK;
       LDX PAL; C PSYM; LDA PAT; SKG =1; R1; TCF =13B; BRU PAB+1
PAC    LDA TLOC; SKE =-1; BRU *+2; BRU PAE;
       LDA* L1; SKA =5; BRU PAE; STX T; LDA =4B2
      STA TYX; LDA* L2; SKE =-1; BRU *+2; BRX PAU+1; BRM EADB
PAJ    STA TTT; SKE TLOC; BRU PAG; LDX T; STX USIND; 
PAJ1   LDB =@4B7; STB SPADMK; BRU PSYM

PAE    LDA* L1; SKA =14B; BRX PAU+1; LDA* L2; ADD =1; 
       SKE PAA; BRX PAU+1; BRU PAJ1;
PAG    LDA* TTT; BRM EADB; SKE TTT; BRU PAM
PAN    LDX T; LDB =15B; BRX PAU+1
PAM    SKR TYX; BRU PAJ; LDX T; LDB =@4B7; STB SPADMK;
       C PSYM; LDA ='(U) '; BRM PXT
      BRU PAN ; VARD PADT; 


*      INPUT CHARACTER

TI     BRM CINP;
       SKE CRC; BRU TI1; LDA LFC;
TIO    BRM COUT;
       EOR =7; R1
TI1    SKE LFC; R1; LDA CRC; BRM COUT;
       BRU TIO


*      TYPE CR, TAB, 'OD'

TCR    ZRO; TCF CRC; TCF LFC; BRR TCR
TTB    ZRO; TCF =0; TCF =0; TCF =0; BRR TTB
TOK    ZRO; LDA ='--OK'; BRM PXT; C TI; SKE =16B; BRU ILL; BRR TOK


*      PRINT INSTRUCTION

PS     LDB =-1; STB SPADMK; STX TLOC; LDB INB; STB USIND; STA WORD; 
       SKA =177B5; BRU PSO
PSP    LDB WORD INDIRECT FLAG; SKB INB; TCF =12B; TCF =0
       LDA WORD PRINT ADDR;
PSA  BRM EADB; LDX TLOC; C ←AMD; LDA WORD; ETR SPADMK;
       SKA =6B7; BRU *+2; R1; ETR =6B7; LRSH 9; ADD =',0  '
      BRM PXT; R1
PSM    LDA WORD; ETR =60077777B; XMA WORD; EOR WORD; RSH 15; C APT
      TCF =40B; BRU PSP
PSV    LDB* L1; SKB =1; BRU PSU
PSW    STX PAL; EOR =-1; STA PAT; LDA TT; STA TTT
PSL    LDB =177B5; BRX *+1
PSG    LDA WORD; BRX *+1; BRX PSS; LDA TT; SKE =LS; BRU PSK
      LDX =LP; BRU PSE
PSK    SKN PAL; BRU PSM; LDX TTT; C 0,2 PRINT OP CODE; LDX PAL
      C PSYM; LDA PAT; STA WORD; LDB* L1; SKB =1; SKE =0; BRU PSP
      R1
PSU    SKE =-1; BRU PSL; BRU PSW
PSO    STB PAL; RSH 15; SKE =-1; BRU PSOS; LDA WORD; BRU PSN
PSOS   LDB =-1; STB PAT; LDB =177B5; LDX =LS
PSE    STX TT; C 0,2; LDA WORD
PSS    SKM ←L2; BRX PSG+1; EOR* L2; SKA* L2; BRX PSG; EOR =-1
      SKA PAT; BRU PSV; BRX PSG 


*      SETUP SYMBOL TABLE SCAN

LP     LDX OPTAB; LDA LPO; BRU LPS
LU     LDX USETAB; BRU LE
LR     LDX MAXEXT; BRU LE
LS     LDX SYMTAB
LE     LDA LSO
LPS    STX L; SUB L; STA L2; SUB =1; STA L1; SUB =1; STA L
      MRG LSKE; STA SSKE; R1
LPO    ZRO P2,2
LSO    ZRO S2,2
LSKE   SKE 0


*      PRINT CHARACTER POINTER

PP     ETR =177777B; MUL =12525253B; STB WORD; C PAD; LDB WORD
      LCY 8; ETR =3B2; MRG =';+0 '; BRM PXT; R1


*      GO TO OR BREAK-POINT EXIT ROUTINE

DLG    C XIC; BRU PCE; BRU PCP
XIC    BRM TCR;
XIT    ETR ADB; STA T
XIS    LDA PC; ETR =1B7; MRG T; STA PC; LDX =-1; STX PRCF; STX UMA
      BRM IEXCH; BRM BPTEX; BRM HANGON; BRM RSTREG; BRU* PC 


*      RENTRY INTO DDT DUE TO A BREAKPOINT OR THE OPCODE DDT

RDDT1 BRM STVECT; LDA RDDT; BRM XIE; LDB UMI; SKB =-1; R1
      STB PRCF; LDX =-NBP; BRM BETHR; R1; R2
XIE    ZRO; ETR =10037777B; STA PC; ETR ADB; STA LRO; STA LWT; 
      CAB; BRM BPTEX; BRM IEXCH; CBA; BRR XIE
BPTEX  ZRO; LDX =-NBP; SKN BPTE,2; BRU *+2; BRU *+4; LDA* BPTE,2
      XMA BPWE,2; STA* BPTE,2; BRX BPTEX+2; BRR BPTEX; 


       IF ITPFG>0;
*      WE ARRIVE HERE DUE TO AN ILLEGAL INSTRUCTION OR MEMORY TRAP.
PANIC  BRM SVPST; LDB ='I>> ';
          LDA* 2; ETR =77B5; SKG =MAXOP*1B5; SKG =0;
          BRU ILLEGAL;
*      AHA MEMORY TRAP IS CONCLUSION
*      OUTPUT M>> FOLLOWED BY ADDRESS FOLLOWED BY INSTRUCTION
          LDB ='M>> ';
*  ILLEGAL INSTRUCTION,  DETERMINE ORIGIN
ILLEGAL LDA 2; SKG =EDDT-SZTVT; BRU PANIC4; CBA; BRU UPANP;
*  POP ERROR
POPIC  XMA 0; STA 2; XMA 0; BRM SVPST; LDB ='POP>'; BRU ILLEGAL;


       ELSE;

*      PANIC LOGIC
PANIC  STA ARG; 
       LDA 3; SKG IBP; BRU PANIC0; SUB =1;
       STX PANICT; CAX; LDA 0,2; ADD =140B; ETR =177B; 
       SKE =137B; BRU PANIC2;
       STA TYC; LDX PANICT; LDA =IBF; STA 3; STA IBP; MIN 7;
PANIC0 BRM EOMSET; LDA 7; ETR ADB; SKG =EDDT-SZTVT; BRU PANIC3;
       LDA ARG; BRM STVECT; LDA 7; BRM XIE; 
      CAX;
PANIC1 LDA 0,2; ETR =77B5; SKE =0; BRU *+2; BRU UILLG;
       LDA TYC; SKE =137B; BRU UILLG; CXA;
      STA LRO; STA LWT
      BRU DENT; VARD PANICT;
PANIC2 LDA ARG; LDX PANICT; BRR 7;
PANIC3 LDX 7; LDA 0,2; ETR =77B5; SKE =0; BRU *+2; BRU PANIC4;
       LDA TYC; SKE =137B; BRU PANIC4; BRU DENT;

       ENDF;


PANIC4 LDA ='DDTE'; BRM PXT; ITP (LDA 2),(LDA 7); C ←AMD; BRM TTB;
       ITP (LDX 2),(LDX 7); LDA 0,2; C ←RMD; BRM HANGON;
       BRU DENT; TCF =37B; BRU DENT;


*      SAVE PANIC STATE
*      A,B,X STATE
*      RETURN:  A - PTR TO INSTRUCTION CAUSING PANIC
SVPST  ZRO; STA SVPSA; LDA 2; ETR ADB;
       SKG =EDDT-SZTVT; BRR SVPST;
       BRM EOMSET; LDA SVPSA; BRM STVECT; LDA 2; BRM XIE;
       BRR SVPST;
       VARD SVPSA;


*      STORE STATE VECTOR OF USER PROGRAM

STVECT ZRO; STP AR; STX XR; 
       IF CTPFG;
       ITP (LDX =-3; LDA EDDTCV,2; XCA 200B,2; STA EUCV,2; BRX *-3),;
       ELSE;
       ITP (LDX =-4; LDA EDDTCV,2; XCA: 4,2; STA EUCV,2; BRX *-3),;
       ENDF;
       BRM COMREG; BRR STVECT


*      COMPARE OLD AND NEW VALUES OF THE REGISTERS

COMREG ZRO; LDX =-3; LDA AR,2; EOR XR1,2; STA AR,2; BRX *-3
      BRR COMREG


*      RESTORE REGISTERS FOR THE USER

RSTREG ZRO; 
       IF CTPFG;
       ITP (LDX =-3; LDA EUCV,2; XCA 200B,2; BRX *-2),;
       ELSE;
       ITP (LDX =-4; LDA EUCV,2; XCA: 4,2; BRX *-2),;
       ENDF;
       BRM MOVREG; CAX; LDP AR; BRR RSTREG


*      MOVE THE USER REGISTER VALUES TO KEEP THE IDENTITY OF THE 
*      LAST VALUES.

MOVREG ZRO; LDX =-3; LDA XR1,2; STA AR,2; BRX *-2; BRR MOVREG


IEXCH  ZRO; LDX =-SIV; LDA ITVTE,2; XMA EIV,2; STA ITVTE,2; BRX *-3
      BRR IEXCH 


*      EXECUTE, GO TO

DLU    SKN SYL; BRU XEXR; BRU LISTUN
XEXR   SKA MADB; BRU *+3; EAX TSF; BRU TUFS; LDX LCN; EAX 1,2
      STA 0,2; LDA BPR; STA 1,2; STA 2,2; 
       LDA LRO; STA OLRO; LDA PC; STA OLDPC; LDA PRCF; STA OPRCF;
      CXA; C XIC; BRU PCE
      SUB =2; SKE LCN; BRU PCXE2
PCXE1  TCF =4; LDA OLRO; STA LRO; LDA OLDPC; STA PC; LDA OPRCF; STA PRCF;
PCXE2  SUB =1; SKE LCN; BRU RSR; TCF =4; BRU PCXE1
       VARD OLRO,OLDPC,OPRCF;


*      PROCEED

PRCS   STA PRPF; CLA; SKE PRCF; BRU ILL; SKN SYL; LDA WORD; SUB =1
      STA PRCC; BRM TCR; R1
PRCV   LDA =-1; BRU *+2
DLP    CLA; C PRCS; BRU PRC1
PRC2   SKN PRPF; BRU PRC1; C PCO; BRM TCR
PRC1   C XEX; LDA PC; C XIT; BRU *+2; BRU PCP; SKR PRCC
      BRU PRC2;


       ITP (REM ITP DDT),(REM TP DDT);


*      RE-ENTRY FROM BREAK-POINT

*      PRINT CONTENTS OF REGISTERS IF CHANGED.  DOES NOT PRINT REGISTERS
*      WHICH HAVE NOT CHANGED SINCE LAST TIME THE REGISTERS WERE PRINTED

PCE    C PCO; BRU RSR
PCO    LDA PC; ETR ADB; STA LRO; STA LWT; LDA PC; LDX =-1; C ←AMD; 
PREG   CLA; STA PSWCH; LDX =-3
PCO2   LDA AR,2; SKA =-1; MIN PSWCH; SKR PSWCH; BRX PCO2; LDX =-3
PCO3   LDA AR,2; SKA =-1; BRU *+3
PCO1   BRX PCO3; R1; LDA REGIST,2; LDB ENDX; LSH 12; STA OREG
      BRM TTB; CLA; SKE PSWCH; LDA OREG; BRM PXT; TCF =0
      LDA XR1,2; STX XSAVE; LDX =-1; C ←RMD; LDX XSAVE; BRU PCO1
      DATA 41B2,42B2,7B3
REGIST BSS 0; VARD PSWCH,OREG,ENDX 


*      INTERPRET ONE INSTRUCTION

XEX    LDA =-1; STA TQC
XEXE   BRM MOVREG; LDA PC; BRM IVCHK; LDA 0,2; LDX =1B2; STX XEC
XEXXE  LDB =177B5; SKA =1B7; ITP (BRU XEPOP),(BRU UILLG);
XOPT   LDX =XOPS-XOPSE; SKM XOPSE,2; BRX *-1; BRU* XOPSE,2
XNOR   STA XEC; RSH 19; ETR =3; CAX; CLA; LDX XILO,2; LCY 4; XXA
      LCY 0,2; SKG =-1; BRU UILLG; LDA XEC; BRM EFF; BRU XEFF
      STX XEC
XDO    ITP ,ROV; BRM RSTREG; EXU XEC; BRU *+2; MIN PC; BRM STVECT
       LDA PC; ADD =1; BRM IVRST; ITP ,(OVT; MRG =1B7); 
       STA PC; BRU XNE
XNX    BRM IVRST; LDB PC; SKB =1B7; MRG =1B7; STA PC
XNE1   BRM COMREG
XNE    SKN TQC; BRU XEXE; LDA PC; ETR ADB; STA LRO; STA LWT; R1
XEFF   LDA ='E>> '; BRU UPANP
XIMM   STA XEC; BRU XDO
XEAX   BRM EFF; BRU XEFF; XMA XR; ETR MADB; ADM XR
XNOP   MIN PC; BRU XNE1
XSH    SKA INB; BRU XSH1; STA XEC; BRU XDO
XSH1   BRM EFF; BRU XDO-1; ETR =77B5; ADM XEC; BRU XDO
XBRU   BRM EFF; BRU XEFF
XBR    BRU XNX
XBRM   SKE BPR; BRU *+2; BRU RSR; BRM EFF; BRU XEFF; LDA PC
      MRG =32B5; STA 0,2; SKN TQC; BRU *+2; SKN TSF; MIN TQC
XBRI   EAX 1,2; CXA; BRU XNX
XBRR   BRM EFF; BRU XEFF; LDX 0,2; SKR TQC; BRU XBRI; LDA =-1
      STA TQC; BRU XBRI
XBRX   MIN XR; LDB XR; SKB INB; BRU XBRU; BRU XNOP
XEXU   BRM EFF; BRU XEFF; LDA 0,2; SKR XEC; BRU XEXXE; BRU XEFF
XEPOP  LRSH 15; ETR =177B; XMA PC; MRG =4B4; STA 0; SKN TQC
      BRU *+2; SKN TPF; MIN TQC; LDA PC; BRU XEXU


*      CHANGE TRACE OPTIONS

TPFS   EAX TPF
TUFS   SKA =-2; BRU ILL; CNA; STA 0,2; BRU RSR


*      USER RUBOUT/PPAN RETURN

PCP    LDA PC; ETR ADB; STA LRO; STA LWT; LDA* LWT; SKE BPR
      BRU RSM; LDA =-1; STA PRCF; BRU RSM


*      OPCODE TABLES

XOPS   BRU XBRU; BRX XBRX
OBRR   BRR XBRR; BRM XBRM; EXU XEXU; NOP XNOP; ITP ,(22B XIMM);
       IF CTPFG;
ORCH   ITP (XCA XIMM),(XAI XIMM); ITP (31B XSH),(66B XSH; 67B XSH);
       ELSE;
ORCH   ITP (XCA: XIMM),(XAI XIMM); ITP (31B XSH),(66B XSH; 67B XSH);
       ENDF;
       EAX XEAX
XOPSE  BRU XNOR
*  BIT TABLE OF ILLEGAL INSTRUCTIONS
XILO   ITP (DATA 0,0,2B7-1,-1),(DATA 57772B3,377B4,500014B2,3004B3);


*      SET, CLEAR, LIST BREAKPOINTS

BETHR  ZRO; ETR ADB; SKE BPTE,2; BRU *+2; BRR BETHR; BRX *-4
      SR BETHR
BEE    SKN SYL; BRU BEE1; LDA =-1; BRU *+4
BEE1   LDX =-NBP; BRM BETHR; BRU ILL; STA BPT; BRU RSR
BER    LDX =-NBP; SKN SYL; BRU BER1
BER2   BRM TTB; LDA BPTE,2; SKG =-1; BRU BER3; STX ARG; C PAD
      LDX ARG; BRU *+3
BER3   TCF =12B; BRX BER2; BRU RSR
BEP    SKN SYL; BRU BEP1; LDA =-1; LDX =-NBP; STA BPTE,2; BRX *-1
      BRU RSR
BEP1   LDX =1-NBP; BRM BETHR; BRU *+2; BRU ILL; LDB =-1; BRU BER4
BER1   BRM BETHR; BRU ILL; CAB; LDA =-1; LDX =1-NBP
BER5   SKE BPTE,2; BRU *+3
BER4   STB BPTE,2; BRU RSR; BRX BER5; BRU SIOO


*      COMPUTE EFFECTIVE ADDRESS,  CONVENTIONS:
*      CALL:   A MUST CONTAIN INSTRUCTION TO BE MODIFIED.
*      EXIT:   A CONTAINS ADDRESS BITS OF EFFECTIVE ADDRESS,
*              X CONTAINS INSTRUCTION OPCODE MERGED WITH THE EFFECTIVE
*              ADDRESS, INDEX AND INDIRECT BITS OFF

EFF    ZRO; LDX =1B2; STX NUM; LDX XR; XXA; ETR ADB; MRG EAXWD
      STA EFFI; CXA; ETR =177B5; STA OPBITS; CXA
EFFE   SKA =2B7; EXU EFFI; SKA INB; BRU EFF1; CXA; ETR ADB;
      CAX;
EFF3  MRG OPBITS; XXA; SR EFF
EFF1   CXA; BRM IVCHK; LDA 0,2; CAX; SKA =4B7; BRU EFF2; 
       SKR NUM; BRU EFFE; BRR EFF
EFF2   SKA =2B7; ADD XR; BRM EADB; MRG =4B7; CAX;
       STA IWD; LDA =IWD+4B4; BRU EFF3;
EAXWD  EAX 0,2; VARD OPBITS,IWD 


*      BCI INPUT

BCI    NOP BCP; SKN SYL; BRU ERB; SKN ROP; BRU BCI1; LDX =-24
BCI2   C TI; SKE =144B; BRU BCI2A; BRU BCIX
BCI2A  EXU BCEAX; CAB; CLA; RCY 25,2; ADM NUM; BRX BCI2
BCI2B  C TI; SKE =144B; BRU BCI2B
BCIX   TCF =2; BRU STQ
BCI1   LDX =-24
BCI3   C TI; SKE =144B; BRU BCI3A; BRU BCIX
BCI3A  EXU BCEAX; CAB; CLA; RCY 25,2; ADM NUM; BRX BCI3; C TI
      SKE =144B; BRU BCI3B; BRU BCIX
BCI3B  CAB; CLA; CLX; EXU BCEAX; RCY 1,2; XMA NUM; STA* LRO;
      MIN LRO
      LDX =-24; EXU BCEAX; BRX BCI3 


*      PATCH FEATURE

IPATCH LDB =20000011B; STB TYC
PATCH  SKN ROP; BRU *+2; STA LRO;
       SKN PFG; BRU ILL; C CLO; LDA LRO; BRM IVCHK
      STX PFG; LDA 0,2; STA PNS; LDA LCN; MRG PATW; STA 0,2
      LDA TYC; MRG =4B7; STA EXF; SKG =6B7; BRU NPAT; LDA PNS
      BRM USP
NPAT   LDA LCN; STA ROP; STA LRO; BRU ORR
PATW   BRU 0


*      LIST ALL BLOCKS

PBK    BRM TCR; LDX =-BNL+2
PBK1   LDA EBN,2; SKE =0; BRU PBK2
PBK3   BRX *+1; BRX PBK1; BRU RSR
PBK2   BRM PXT; LDA EBN1,2; BRM PXT; BRM TCR; BRX PBK3+1


*      ZERO MEMORY

DLZ    SKE =0; BRU *+2; BRU ZKILL; SKN ARI; BRU *+2
       STA ARG; BRM EADB; XMA ARG; STA URA; EOR ARG; SKA =4B7; BRU ILL;
       EOR ARG; CLB; SKN SVF; LDB SVAL;
DLZ1   STB* URA; MIN URA; LDA URA;
DLZ2   SKG ARG; BRU DLZ1; BRU RSP;


ZKILL  BRM TOK; BRM SETUP; CLA; CLB; CLX; BRM STVECT;
       LDA =EDDT; STA URA;
       ITP (CBDA; ETR =777777B),(LDA ADB); STA ARG; BRU DLZ1;


*      SETUP THE TRANSFER VECTORS

PESETP BRM SETUP; BRU RSR


       IF ITPFG>0;
SETUP     ZRO; LDX =-23; LDA =ILLIST; STA EIV,2; BRX *-1;
       LDX =-100B; LDA =1B5+POPIC; STA 200B,2; BRX *-1;
          LDA =TII; STA 43B; LDA =TOI; STA 44B;
          LDX =-23; LDA EIV,2; STA ITVTE,2; BRX *-2;
          LDA =1B5+PANIC; STA 3;
          LDA =IBF+44B6; STA 11B;
       LDA =OUTCHR+74B6; STA 12B; ADD =1; STA OUTCHR;
          DIR; BRM CIOBUF; EIR; BRR SETUP;


       ELSE;

SETUP  ZRO; LDA =ILLIST; STA 20B; STA BIV; STA BIV+1; STA BIV+4;
      LDA =TII; STA BIV+2; LDA =TOI; STA BIV+3; LDX =-5; 
      STX 4; LDA EIV,2; STA ITVTE,2;
      BRX *-2; LDA =1B5+PANIC; STA 8; LDA =IBF; STA 3;
       STA IBP; DIR; BRM CIOBUF; EIR; BRR SETUP;
       ENDF;


*      WORD SEARCH

PEW    LDB =-1; STB DLWFLG
DLW    ETR MASK; LDB LDAWD; SKN SYL; BRU WDS; BRU ILL
WDE    LDX =-1; STX SVF
WDS    STB WDI; STA WDW; BRM TCR; LDA MASK; EOR =-1; STA NMASK
      CLA; STA PSWCH; LDA =-1; STA EXF;
       LDA LL; BRM EADB; STA URA; 
WDN    EXU WDI; ETR MASK; SKE WDW; BRU WDC; SKN DLWFLG
WDP    C OPN; MIN PSWCH; SKN SVF; BRU WDD
WDCR   SKN DLWFLG; BRM TCR
WDC    MIN URA; LDA URA; SKG UL; BRU WDN; BRM TCR; LDA PSWCH; C APT;
       BRU RSR
WDD    SKN DLWFLG; BRM TTB; LDA* URA; ETR NMASK; ADD SVAL; STA* URA;
      SKN DLWFLG; C OPN1; BRU WDCR
NWDS   LDB *+2; BRU WDE; BRU NWDN
NWDN   LDA* URA; ETR MASK; SKE WDW; BRU WDP; BRU WDC
LDAWD  LDA* URA;


*      EFFECTIVE ADDRESS SEARCH

DLE    BRM EADB; LDB =-1; SKB USML; BRU EAU; LDB *+2; BRU WDE
      BRU EAE
EAU    SKE =0; BRU ILL; LDA ='[U] '; BRM PXT; BRM TCR; LDP USML
      STP SYML; LDA =10B; ADM SYMR; LDB =77770010B; C SCH; BRU EUL
      BRU RSR
EUL    LDA* L2; SKE =-1; BRU *+2; BRU RSR; BRM EADB
EUP    C OPN+1; BRM TCR; LDA LWT; BRM EADB; SKE LRO; BRU EUP
      BRU RSR
EAE    LDA* URA; ETR =177B5; STA EAET;
       ITP (SKE =16B5),(SKE =46B5); BRU *+2; BRU WDC; LDA* URA
      SKA =2004B4; BRU *+2; BRU EAL; BRM EFF; BRU WDC; 
EAL    BRM EADB; SKE WDW; BRU *+2; BRU WDP; LDA EAET;
       ITP (SKE =20B5),(SKE =51B5); BRU WDC; LDX* URA; LDA 0,2;
       ADD =1; BRM EADB; SKE WDW; BRU WDC; BRU WDP  


*      PRINT REGISTER

OPN    LDA URA; BRM EADB; STA LRO; 
       CLX; STX ROP; LDX =-1; C ←AMD
       LDA =36002B2; C PWI; LDA* URA;
OPN1   STA LWT; C ←RMD; R1;
      VARD NMASK,OPNT,EAET ; VARD DLWFLG


*      ERROR ENTRIES

ILLIST ZRO; BRM STVECT; LDA ILLIST
      STA PC
UILLG  LDA ='I>> '
UPANP  BRM PXT; LDA PC; ETR ADB; STA LRO; LDX =-1; STX ROP; C ←AMD
      BRM TTB; LDA LRO; BRM IVCHK; LDA 0,2; C ←RMD; 
      BRM HANGON; BRU DENT; TCF =37B; BRU DENT
*      TRACE

DLS    LDA =-1; BRU *+2
DLN    CLA; C PRCS; BRU TRC1
TRC2   SKN PRPF; BRU TRC1; C PCO; BRM TCR
TRC1   C XEX; SKR PRCC; BRU TRC2; BRU PCE


*      LIST UNDEFINED SYMBOLS

LISTUN BRM TCR; C LS
LUN    LDA* L1; SKA =10B; BRU LUP
LUS    BRX *+1; BRX *+1; BRX LUN; BRU RSR
LUP    C PSYM; BRM TCR; BRX LUS+1 


*      KILL SYMBOL OR TABLE

DLK    LDA =S0; SUB SYMTAB; STA MINTAB; LDA BLOCK; ADM SYMR
      SKN LET; BRU KILS; BRM TOK; SKN BLNF; BRU KILT; C DELBLK
      BRU RSR
KILT   LDA =SZSYMT; STA SYMTAB; CLA; STA BLOCK; LDX =-BNL+2;
       STA EBN,2
      BRX *-1; BRU RSR
KILSD  C DELSYM
KILS   LDB =777777B2; SKN BLNF; LDB LMSK; C SCH; BRU KILSD; BRU RSR


*  KILL LITERAL OR LITERAL TABLE
PEK    CAB; LDA CHC; SKE =6; BRU *+2; BRU PEK0;
       LSH 12; MRG LMSK; STP SYML; BRU KILS;
PEK0   BRM TOK; 
PEK1   C SLIT; BRU RSR; C DELSYM; BRU PEK1
       VARD PT,PTT,PTTT;


*  CHECK LITERAL TABLE
PEL    LDA CHC; SKE =6; BRU PELR; BRM TOK;
       C SLIT; BRU RSR; 
PEL1   LDA* L2; STA PT; LDA* L; LDB* L1; LSH 12; STA PTTT; SKE* PT;
       BRU PEL3; 
PEL2   BRX *+1; C SLIT1; BRU RSR; BRU PEL1;
PEL3   BRM TCR; STX PTT; LDX =-1; LDA PT; C APT; LDA =36002B2; C PWI; 
       LDA* PT; C PSN; BRM TTB; TCF ='   ='; LDA PTTT; C PSN; 
       LDX PTT; BRU PEL2;


PELR   LDA SYML; SKE ='REST'; BRU RSR;
       LDA SYMR; SKE ='OR  '; BRU RSR;
       C SLIT; BRU RSR;
PELR0  LDA* L2; STA PT; LDA* L; LDB* L1; LSH 12; STA* PT; BRX *+1; C SLIT1;
       BRU RSR; BRU PELR0;


* SEARCH FOR ANY LITERAL
SLIT   C LS;
SLIT0  LDA LMSK; CAB; SKM* L; BRX *+2; R2; 
SLIT1  BRX *+1; BRX SLIT0; R1;



*      DELETE SYMBOL

DELSYM STX T; CXA; SKG SYMTAB; BRU LS; LDA =-3; CAX; CNA;
      ADM SYMTAB; LDA* L2; LDX T; STA* L2; LDX =-3; LDB* L1
      LDA* L; LDX T; XMA* L; XAB; XMA* L1; SKA =20B; BRU *+2
      BRU LS; XAB; STP SYML; LDB LMSK; C SCH; BRU *+2; R1; STX T
      C SCO; R1; LDX T; LDA =-20B; ADM* L1; R1

*      DELETE BLOCK

DELBLK LDA BLOCK; RSH 5; CAX; CLA; CLB; STP BN,2; BRU DELB1
DELB2  C DELSYM
DELB1  C LS; LDA BLOCK; LDB =77B2
DELB3  SKM ←L1; BRX *+2; BRU DELB2; BRX *+1; BRX DELB3; R1 


PEE    BRM TOK; BRU START1;


       IF ITPFG>0;
$HANGON        ZRO; STA HANGT; CLA; BRU *+2;
HANG0  XIOA; XIOA; SKA =4; BRU HANG0;
       XIOA; LDA HANGT; BRR HANGON;
       ELSE;
$HANGON ZRO; STA HANGT; CLA; BRU *+2;
HANG0  XAI; XAI; SKA =1B7; BRU HANG0;
       XAI; LDA HANGT; BRR HANGON;
       ENDF;
HANGT  ZRO;
CINXR1 BRM CINP; BRM HANGON; BRR CINXR;
COUTY1 BRM COUT; BRM HANGON; BRR COUTY;
CRLFX1 BRM TCR; BRM HANGON; BRR CRLFX;
TABX1  BRM TTB; BRM HANGON; BRR TABX;
TSGXR1 LDA TSGXR; STA TMFP; BRU TMFP+1;
DIRX1  BRM DIRR; BRR DIRX;
NOUTX1 SAVE IOUT,A,B; C APT; BRM HANGON; RST IOUT,A,B; BRR NOUTX;
IOUTX1 SAVE IOUT,A,B; C PSN; BRM HANGON; RST IOUT,A,B; BRR IOUTX;
       VARD IOUTA,IOUTB;
IINY1  SAVE IIN,X; CLA; STA IINT; LDA PRAD; STA RADIX;
       LDA =-1; STA IINFG;
IIN0   CIN; CAX; SKG =31B; SKG =17B; BRU IIN1;
       MIN IINFG; SUB =20B; XMA IINT; MUL RADIX; 
       LSH 23; ADM IINT; BRU IIN0;
IIN1   SKN IINFG; BRU IIN2;
IIN3   CXA; MRG =4B7; CAX; 
IIN2   LDA IINT; CXB; RST IIN,X; BRR IINY;
       VARD IINX,IINT,IINFG;
RX1  STA PRAD; BRR RX;
MX1  XMA MX; STA MULL; LDA MX; BRU MULL+1;
DIVX1  XMA DIVX; STA DIVV; LDA DIVX; BRU DIVV+1;


* STRING OPERATORS

* READ CHARACTER FROM STRING ((Q)...(Q)+3) TO (A)
* NO-SKIP RETURN IF EXHAUSTED, (A) DESTROYED
* (B) DESTROYED OTHERWISE
* FORMAT OF STRING DESCRIPTOR: (Q)=START OF STRING AREA,
*                              (Q+1)=READER, (Q+2)=WRITER,
*                              (Q+3)=END OF STRING AREA
RCSP   ZRO; GETE RCSP; MIN 1,2; LDA 1,2
       SKG 2,2; BRU RCN1; SKR 1,2; BRR RCSP; BRR RCSP;
* READ CURRENT CHARACTER FROM STRING ((Q)...(Q)+3) TO (A)
* (B),(X) DESTROYED
RCNP   ZRO; GETE RCNP; LDA RCNP; STA RCSP; LDA 1,2; ADD =1; BRU *+2
RCN1   MUL =12525253B; CAX; CBA; CLB; LCY 2
       LDA 0,2; CBX; CAB; EXU RCN2,2; ETR =377B; MIN RCSP; BRR RCSP;
RCN2   LCY 8; LCY 16; XAB; BRR RCSP;
* READ LAST CHARACTER FROM STRING ((Q)...(Q)+3) TO (A)
* (B),(X) DESTROYED
RCBP   ZRO; GETE RCNP; LDA RCBP; STA RCSP; LDA 2,2; SKG 0,2; BRR RCBP
       SKG 1,2; SKR 1,2; SKR 2,2; BRU RCN1

* WRITE CHARACTER (Q) ON ((A)...(A)+3)
* NO-SKIP RETURN IF FULL
* (B) DESTROYED OTHERWISE
* (A)←(Q) MASKED TO LAST 8 BITS, (X) DESTROYED IN ANY CASE
WCSP   ZRO; GETE WCSP; XXA; ETR =377B; STA WCSA
       MIN 2,2; LDA 2,2; SKG 3,2; BRU WCS1; SKR 2,2
WCS3   LDA WCSA; BRR WCSP
WCS1   MUL =12525253B; CAX; CLA; LCY 2
       LDB 0,2; XXA; EXU RCN2,2; ETR =77777400B
       MRG WCSA; EXU WCS2,2; CAX; STB 0,2
       LDA WCSA; MIN WCSP; BRR WCSP
WCS2   RCY 8; RCY 16; XAB; BRR WCSP
* WRITE (Q) AS FIRST CHARACTER ON STRING ((A)...(A)+3)
* (B),(X) DESTROYED
WCBP   ZRO; GETE WCBP; LDA WCBP; STA WCSP; XXA; ETR =377B; STA WCSA
       LDA 1,2; SKG 0,2; BRU WCS3; SKR 1,2; BRU WCS1; BRR WCBP;
       VARD WCSA;


SOUT   ZRO; SAVE SOUT,A,B,X; CAX; LDA 1,2; STA SOUTT;
SOUT0  GCI SOUTA; BRU SOUT1; BRM COUT; BRU SOUT0;
SOUT1  LDA SOUTT; LDX SOUTA; STA 1,2; CXA;
       RST SOUT B,X; BRR SOUT;
       VARD SOUTA,SOUTB,SOUTX,SOUTT;


*  PARAMETERS FOR APU
APBPT  EQU 4700045B;*  APU BREAKPOINT INSTRUCTION
APUB   EQU 40000157B;*  APU BASE ADDRESS IS AT THIS ADRESS IN MAIN CORE
ICONT  EQU 662B;
APUM   EQU 7777B
NBRK   EQU 16;
EBRKAD BES NBRK;
EBRKVL BES NBRK;
       VARD LAST,DPBKT,PATB,APINST,EAPDT,PAPUF;


*  SET BREAKPOINT FOR APU
STBRK  BRM APUER; STA LAST; SKN ARI; BRU *+2; STA ARG
       LDA CHC; SKE =6; BRU *+2; BRU ILL; BRM FARG;
STBK0  LDX =-NBRK; LDA ARG;
       SKE EBRKAD,2; BRU *+2; BRU STBK2; BRX *-3;
       LDX =-NBRK; LDA =-1;
       SKE EBRKAD,2; BRU *+2; BRU STBK1; BRX *-3; BRU SIOO;
STBK1  LDA ARG; STA EBRKAD,2;
STBK2  LDA LAST; SKG ARG; BRU *+3; MIN ARG; BRU STBK0;
       LDA ARG; SKG LAST; BRU RSR; SKR ARG; NOP; BRU STBK0;


*  CLEAR BREAKPOINT FOR APU

CL1BK  BRM APUER; STA LAST; SKN ARI; BRU *+2; STA ARG;
       LDA CHC; SKE =6; BRU *+2; BRU CLBRK; BRM FARG;
       LDA LAST; SKG ARG; XMA ARG; STA LAST;
       SKR ARG; NOP; CLA; STA ARI;
       LDX =-NBRK;
CL1BK0 LDA EBRKAD,2; SKG LAST; SKG ARG; BRU CL1BK1;
       LDA =-1; STA EBRKAD,2; LDA =APBPT; STA EBRKVL,2; MIN ARI;
CL1BK1 BRX CL1BK0; BRM TCR; LDA ARI; C APT; BRU RSR;


FARG   ZRO; SKN ARG; BRR FARG; SKN LAST; BRU ILL; LDA ARG;
       BRM RAPAD; STA ARG; LDA LAST; BRM RAPAD; STA LAST; BRR FARG;


*  DISPLAY BREAKPOINT FOR APU

DPBK   BRM APUER; LDX =-NBRK; LDA =7; STA DPBKT; BRM TCR;
       LDA EBRKAD,2; SKE =-1; BRU *+3;
DPBK0  BRX *-3; BRU RSR;
       BRM TTB; LDA EBRKAD,2; STX ARG; C PAD;
       LDX ARG; SKR DPBKT; BRU DPBK0; BRM TCR;
       LDA =7; STA DPBKT; BRU DPBK0;


*  SET PATCH SPACE
SPATB  NOP PATB; BRM APUER; SKE =-1; BRU *+2; BRU SPAT3; SKA =4B7;
       STA PAPUF; BRU INTERN; 
SPAT3  STA PAPUF; LDA =2000B; BRM APUAD; ADD =6000B; STA LAST; LDA PATB;
       STA T;
SPAT0  LDA* URA; SKE =0; BRU SPAT2; LDA URA; STA PATB;
       LDA =100; STA ARG;
SPAT1  MIN URA; LDA* URA; SKE =0; BRU SPAT2; SKR ARG; BRU SPAT1;
       LDB T; LDA LCN; SKE PATB; BRU *+2; STB LCN;
       BRM TCR; LDA PATB; C APT; BRU RSR;
SPAT2  MIN URA; LDA URA; SKG LAST; BRU SPAT0; CLA; STA PATB; BRU ILL;


*  START APU GOING
CONT   BRM APUER; LDB =ICONT; BRU CONT0;
GOTO   BRM APUER; CAB; LDA CHC; SKE =6; BRU *+2; BRU ILL;
CONT0  STB* =20B+4B7; BRM XBRP; BRM MOVREG;
       LDA* =40002503B; STA ARG; LDX =-NBRK;
GOTO0  LDA EBRKAD,2; SKE ARG; BRU GOTO2;
       LDA PATB; STA URA; LDA EBRKVL,2;
       STA* URA; LDA =7; STA DPBKT; LDA EBRKAD,2;
       ETR ADB; MRG =1B5;
       ADD =1; MIN URA; STA* URA; SKR DPBKT; BRU *-4;
       LDA EBRKVL,2; ETR =77B5; SKE =13B5; BRU *+2;
       BRU GOTO1; SKE =66B5; BRU *+2; BRU GOTO1;
       SKE =67B5; BRU GOTO3;
GOTO1  LDA =8; ADM PATB; BRU GOTO3;
GOTO2  BRX GOTO0;
GOTO3  LDA =1; STA* =4B7+25B; BRM TCR;
WAITBK LDA* =4B7+25B; SKE =0; BRU *-2;

*  WHEN CELL BECOMES NON-ZERO AMC STARTS.  CELL BECOMES ZERO WHEN
*  IT STOPS.

       BRM XBRP; LDA* =40002503B; STA ARG; BRM TCR; LDX =-NBRK;
BRK0   LDA EBRKAD,2; SKE ARG; BRU BRK1; TMF BRKMS; BRU BRK2;
BRK1   BRX BRK0; TMF PUNTM;
BRK2   LDA ARG; STA LRO; C PAD; LDA* =40002505B; LDB* =40002506B;
       LDX* =40002507B; BRM STVECT; C PREG; BRM TCR;
       LDA ARG; BRM APUAD; C OPN; BRU RSR;

BRKMS  ASC "BREAK-AT: /";
PUNTM  ASC "PUNT-AT: /";

APUAD  ZRO; ETR =APUM; ADD* =APUB; MRG =4B7; STA URA; BRR APUAD;


RAPAD  ZRO; SKA =4B7; BRU *+2; BRR RAPAD; SUB* =APUB; ETR =APUM; BRR RAPAD;


EAPAD  ZRO; SKN APUMD; BRU *+2; BRR EAPAD; STA EAPDT; LDA LRO; 
       SKA =4B7; BRU *+2; BRU EAPD2; ETR =777777B; SKG* =APUB; BRU EAPD1; 
EAPD0  LDA EAPDT; BRM APUAD; BRR EAPAD;
EAPD1  SKE* =APUB; BRU *+2; BRU EAPD0; 
EAPD2  LDA EAPDT; BRR EAPAD;


CLBRK  SKN ARI; BRU ILL; LDX =-NBRK; LDA EBRKAD,2; SKE =-1; BRU *+3;
CLBRK0 BRX *-3; BRU RSR; BRM APUAD; LDA EBRKVL,2;  SKE =APBPT; BRU *+2;
       BRU CLBRK0; XMA* URA; SKE =APBPT; STA* URA; 
       LDA =APBPT; STA EBRKVL,2; BRU CLBRK0;


*  EXCHANGE BREAKPOINTS
XBRP   ZRO; LDX =-NBRK;
       LDA EBRKAD,2; SKE =-1; BRU XBRP1;
XBRP0  BRX *-3; BRR XBRP;
XBRP1  BRM APUAD; LDA* URA; XMA EBRKVL,2; STA* URA; BRU XBRP0;


*  PATCH LOGIC FOR APU
OPAT   BRM APUER; SKN ROP; BRU *+2; STA LRO; BRM APUAD; SKN LRO; 
       STA LRO; SKN PAPUF; BRU ILL; C CLO; LDA LRO;
       STA URA; BRM RAPAD; STA PAPUF; LDA* URA; STA APINST; LDA LCN;
       XMA PATB; STA LCN; STA LRO; BRM RAPAD; STA ROP; MRG PATW; 
       STA* URA; LDA TYC; MRG =4B7; STA EXF; BRU ORR;


SPINS  SKN PAPUF; BRU *+2; BRU ILL; LDA APINST; STA WORD; STA LWT;
       CLA; STA USIND; STA USML; STA SYL; BRU RSF;


CLSPAT SKN PAPUF; BRU *+2; BRU ILL; C CLO; LDA PAPUF; MRG PATW;
       LDX =7; STX DPBKT;
CPAT0  ADD =1; BRM USP; SKR DPBKT; BRU CPAT0; C ESL; LDA LCN; XMA PATB;
       STA LCN; LDA PAPUF; BRM APUAD; STA LRO; STA PAPUF; BRU RSR;


APUER  ZRO; SKN APUMD; BRR APUER; TMF APUMS; BRU ILL;
APUMS  ASC "APU MODE/";


*      DISPATCHER TABLE
*      MACRO TO CONSTRUCT DISPATCHER TABLE

D     MACRO D
NA     NARG
NC     NCHR D(1); IF NC=1
LT     EQU '  D(1)'; ELSF NC=3
LT     EQU '  D(1$2)'; ELSF NC=2
LT     EQU 7; ENDF
LT:    OPD LT*100000B;
       IF NA>2
       LT: D(2),D(3);
       ELSE;
       LT: D(2); ENDF; ENDM;


*      DISPATCHER TABLE.  AN ORDERED TABLE OF INPUT CHARACTERS AND
*      POINTERS TO THE ROUTINES INDICATED.  THE TAG BITS AND INDIRECT 
*      BIT HAVE SPECIAL MEANING, SEE THE RR ROUTINE

DTAB   ZRO DTAB1-ENDTAB; D ' ',SPC,3; D !,BEE,3; D '"',BCI; D #,RT,2
      D $,ERS; D %,←PCT+1-ENDTAB; D &,BLS; D '',BCP,2; D '(',ORA,2
      D ')',PATCH,4; D *,INDIR; D +,PLS; D ',',SEP,3; D -,MNS
      D .,LETTER; D /,ERW; D 9,DIGIT; D :,HERE; D ';',←DOL+1-ENDTAB
      D <,SSV,2; D =,EQ,2; D >,DFE; D ?,TR; D @,SLW; D A,LETTER
      D B,LETTB; D C,LETTER; D D,LETTD; D Z,LETTER; D [,ERC
      D \,EMD; D ],ERI; D ↑,ORP,4; D ←,EM,2
DTAB1  51B ILL; 52B ORN,4; 54B ILL; 55B CLOS,4 CARRIAGE RETURN
      77B ILL 


PCT    ZRO PCT1-ENDTAB; D ' ',ILL; D !,BEP,2; D #,ILL; D $,PESETP
       D &,PBK; D '',ILL; D '(',OPAT,4; D ')',CLSPAT,4;
       D '>',ILL; D ?,TR; D A,ILL; D B,PEB,1; D C,CL1BK,3;
       D D,DPBK; D E,PEE; D F,SPATB,1; D G,GOTO,1;
       D H,WAITBK; D I,PEI,1; D J,ILL; D K,PEK,1; D L,PEL; D M,PEM,1;
       D N,ILL; D O,PEO,1; D P,CONT; D Q,SPINS; D R,PER,1; D S,STBRK,3;
       D U,ILL; D V,SAPUMD,1; D W,PEW,2
PCT1   77B ILL


DOL    ZRO DOL1-ENDTAB; D ' ',ORQ,4; D !,BER,2; D '"',SERH
      D #,NWDS,2; D $,OPEOR; D %,OPMRG; D &,OPETR; 11B ILL
      D *,OPMUL; D +,OQPLS; 14B ILL; D -,OQMNS; 16B ILL; D /,OPDIV
      D 0,DLL0,1; D 1,DLL1,1; D 2,DLL2,1; D 3,DL3; D 4,DL4; 31B ILL
      D :,OPMOD; 33B ILL; D <,OPLSS; D =,OPEQL; D >,OPGRT; D ?,TR
      40B ILL; D A,DLA,1; D B,DLB,1; 43B ILL; D D,DLD; D E,DLE,4
      D F,DLF,1; D G,DLG,2; D H,ILL; D I,IPATCH,4; D J,ILL; D K,DLK
      D L,DLL,3; D M,DLM,1; D N,DLN,2; D O,DLO,2; D P,DLP,2
      D Q,DLQ,2; D R,DLR,3; D S,DLS,2; D T,ILL,2; D U,DLU,2
      D V,DLV,2; D W,DLW,2; D X,DLX,1; D Y,ILL,2; D Z,DLZ,3
      D [,SERC
      D \,PAFF; D ],SERS; 76B ILL; D ←,EMS,2
DOL1   77B ILL
ENDTAB BSS 0; FRGT LT
       END;


*  INITIALIZE PAPER TAPE READING BUFFERS,ETC

BUFLNG EQU 200;
WBUF   EQU EDDT-BUFLNG;
EOF    EQU 27657537B
WIOCB  EQU 100B;
$WIOIN  ZRO; CLA; STA WIOWD; LDX =-BUFLNG; STA WBUF+BUFLNG,2; 
       BRX *-1; LDA =IWIO; STA 25B;
       LDA =SICK; STA 22B; LDA =STPTR; STA 21B; LDA =WIOCB; 
       STA 5; STA WIOCP; LDA =WBUF; STA RWIOP; STA WWIOP;
       LDA =3; STA WIOCNT; BRR WIOIN;

       VARD WIOWD,WIOCP,RWIOP,WWIOP,WIOCNT;


       IF ITPFG>0;
SICK   ZRO;
WIOSR  ZRO;
IWIO   ZRO;
STPTR  ZRO;
       ZRO;
       ELSE;
*  PAPER TAPE READER IS SICK

SICK   ZRO; LDA ='SICK'; BRM PXT; CLA; XAI; ETR =707B5; MRG =4B5;
       XAI; BRU RSP;

*  START OR STOP PAPER TAPE READER

STPTR  ZRO; BRR STPTR;


*      LOAD FROM PAPER TAPE

$WIOSR  ZRO; CLA; XAI; SKA =6B6; BRU *+2;
*  READER IS NOT GOING, START
       MRG =7B6; XAI;
*  BUFFER EMPTY?
       LDA RWIOP; HOLD WWIOP; DIR; BRM IWBUF;
       STA RWIOP; LDA* RWIOP; BRI WIOSR;


*  INTERRUPT ROUTINE FOR WIO
*  PARITY ON EACH CHARACTER
*  BUFFER HAS THE FOLLOWING PROPERTIES.  LET R BE READ POINTER,
*  W BE THE WRITE PTR:
*    R = W IMPLIES BUFFER EMPTY
*    PUT NEW WORD AT W+1 MOD SZB
*    READ WORD FROM R+1 MOD SZB
*    R = W+1 MOD SZB IMPLIES BUFFER FULL

IWIO   ZRO; SAVE IWIO,A,B,X; CLA; XAI; STA IWIOC;
*  IS BUFFER FULL?
       LDA WWIOP; BRM IWBUF; SKE RWIOP; BRU IWIO1;
*  YES,  TURN OFF PAPER TAPE INPUT
       LDA IWIOC; ETR =307B5; MRG =4B5; BRU IWIO2;
*  LOOP TO GET NEXT CHARACTER
IWIO0  MIN WIOCP;
*  LOOP OVER?
IWIO1  LDA WIOCP; SKE 5; BRU IWIO3;
*  YES, INITIALIZE BUFFER PTR
       LDA =WIOCB; STA 5; STA WIOCP; LDA IWIOC;
*  RESTORE STATE
IWIO2  ETR =37777777B; XAI; RST IWIO,A,B,X; BRI IWIO;
*  WE HAVE A CHARACTER
IWIO3  LDA*  WIOCP; CLB; STB WIOPCT; LDX =-8;
*  LOOP TO CONT BITS ON
       SKA =200B; MIN WIOPCT; LSH 1; BRX *-3; LRSH 8;
*  CHECK ODD PARITY
       LDB WIOPCT; SKB =1; BRU IWIO4;
*  PARITY ERROR
       LDA IWIOC; ETR =707B5; MRG =4B5; XAI;
*  TYPE MESSAGE AND RESET
       LDA ='P>> '; BRM PXT; BRU RSP;
*  DO WE HAVE A LEADER CHARACTER?
IWIO4  SKA =100B; BRU IWIO0; ETR =77B; MRG WIOWD;
       SKR WIOCNT; BRU IWIO6; LDX WWIOP; XXA; BRM IWBUF; XXA;
       STA 0,2; STX WWIOP;
*  END OF TAPE?
       SKE =EOF; BRU IWIO5; LDA IWIOC; ETR =707B5;
       MRG =4B5; STA IWIOC;
*  FIX WORD COUNTER
IWIO5  LDA =3; STA WIOCNT; BRU IWIO0;
*  SAVE PART OF A WORD
IWIO6  LSH 6; STA WIOWD; BRU IWIO0;

       VARD IWIOA,IWIOB,IWIOC,IWIOX,WIOPCT;


*  INCREMENT WIO BUFFER POINTER

IWBUF  ZRO; ADD =1; SKG =WBUF+BUFLNG-1; BRR IWBUF;
       LDA =WBUF; BRR IWBUF;
       ENDF;


* 'SAVE' FILE


$PES   BRM WIOIN; SKN SYL
      BRU ILL; TMF TSVM; BRM WIOSR; 
       ETR ADB; STA SYML; BRM WIOSR;
       ETR ADB; SUB SYML; ADD =1; STA SYMR
       BRM WIOSR; ETR ADB; STA NUM
      BRU TSVC; 
TSVW   BRM WIOSR; LDX SYML; STA 0,2; MIN SYML
TSVC   SKR SYMR; BRU TSVW; LDA NUM; SKG =0; BRU RSR; TMF TSVS
      LDA NUM; C APT; BRU RSR
TSVM   ASC 'AVE   /'
TSVS   ASC 'START AT /'


* RELOCATABLE

DLY    CLB; BRU *+2
$DLT   LDB =-1; STB SFLAG; STA LWT; BRM WIOIN; 
      BRM WIOSR; LDA =-1; STA LIBFLG; STA ROP
RLINK  SKE =2; BRU ILL; BRM WIOSR; 
       STA TYX; LDA SYMTAB; STA MINTAB
SLINK  LDA LCN; SKN SYL; BRU SLO
SLS    STA BASE; STA LCN; MRG EAXWD; STA RELADA; LDA SYMTAB
      STA MAXEXT; STA USETAB; STA USEEND; LDA =3; STA SRLVAL
      LDA TYX; BRU LOAD2A
CONTRL CLB; STB SBIT; LRSH 21; SKG =2; BRU CTL1; SKB =-1
      BRU RDILL
CTL1   CAX; BRU *+1,2; BRU LOAD PROGRAM (BSS); BRU LOAD POP PROGRAM
      BRU EDISP END OR SPECIAL; BRU OPDEF OPD; BRU DEF EXTERNAL DEF
      BRU IDENT IDENT RECORD; BRU INREF EXTERNAL USAGE
      BRU SYDEF SYMBOL DEF
SLO    LDA LWT; ETR ADB; SKG ORG; STA ORG; BRU SLS
LOAD   LDA TYX; ADD LCN; ETR ADB; STA LCN; CXA; SKE =1; BRU LOAD2
      LCY 6; CAX; LDA LCN; MRG BRZ; STA 0,2
LOAD2  SKR WDCNT; BRU LOAD3; BRM WIOSR; 
LOAD2A STA BITS; LDA =7; STA WDCNT;
LOAD3  BRM WIOSR;
       STA TYX; LDA BITS; LRSH 21; STB BITS; CAX
      LDA TYX; BRU *+1,2; BRU STORE ABS WORD
      BRU EXTADD 14 BIT EXTERNAL; BRU RELADD 14 BIT RELOCATABLE
      BRU SRLWRD SPECIAL 24 BIT REL; BRU CONTRL CONTROL WORD
      BRU EXTWRD 24 BIT EXTERNAL; BRU RELWRD 24 BIT RELOCATABLE
      BRU RELADD LITERAL REF.
RELWRD ADD BASE
STORE  STA T; LDA LCN; RSH 11; SKE UMA; BRU STORE1; MIN LCN
      LDA =5; LCY 11; XMA T; STA* T; BRU LOAD2
STORE1 LDA T; BRM USP; BRU LOAD2
RELADD CAX; EXU RELADA; CXA; BRU STORE


*      SPECIAL RELOCATION

SRLWRD LDA SRLVAL; MUL BASE; LSH 23; ADD TYX; BRU STORE

*      2XX CODE

EDISP  CLA; LCY 6; CAX; SKG =EETAB-1-ETAB; BRU ETAB,2; BRU RDILL
ETAB   BRU FIXUP END; BRU LOAD2 LIT ORG; BRU SETSRL SET SPECIAL REL.
      BRU PCHAIN PATCH CHAIN
      BRU PCWRD PATCH CHAIN WITH PREV. WORD (14 BIT)
      BRU PCWRDF SAME, 24 BIT
EETAB  EQU *


*      FIX UP AT END OF LOADING

FIXUP  LDA MAXEXT; SUB USETAB
FIXN   SKE =0; BRU FIXS; LDA LCN; STA BASE; C APT; BRM TCR
FIN    BRM WIOSR;
       STA TYX; SKE =27657537B; BRU FCON; LDA =S0
      SUB MINTAB; STA MINTAB; BRU RSR
FCON   LRSH 21; SKE =4; BRU RDILL; BRU SLINK
FIXS   STA MAPX; C LR; LDX MAPX; LPR ←L; STP SYML; LDA* L2
      STA SVAL; SKB =10B; BRU FIXIND; C SDF
NEXT   LDA MAPX; ADD =3; BRU FIXN
FIXIND SKG =-2; BRU NEXT; C LS; BRM SIN; STA* L1; LDA SVAL
      STA* L2; BRU NEXT


*      SET SPECIAL RELOCATION VALUE

SETSRL LCY 25; RSH 10; STA SRLVAL; BRU LOAD2


*      CHAIN PATCHING ROUTINES

PCWRDF NOP
PCWRD  SKR LCN; LDA LCN; ULD; CBA; CLA; STA* URA; BRU PC1
PCHAIN LDB LCN
PC1    LDA TYX; ADD BASE; C PCHE; BRU LOAD2
PCHE   SKG =-1; R1; ETR ADB; STB T
PCH1   STA TTT; ULD; ETR MADB; MRG T; XMA* URA; ETR ADB; SKE TTT
      BRU PCH1; R1


*      ERROR TRAPS

IOINT  ZRO T
IOILL  TMF IOM; BRU ILX
IOM    ASC 'I-O ERROR/'
RDILL  TMF RFIM; BRU ILX
RFIM   ASC 'ILLEGAL CONTROL WORD/'


*      SYMBOL TABLES

OPDEF  LDA =4; BRU *+2
SYDEF  LDA BLOCK; SKN SFLAG; BRU SKIPSY; STA SBIT
DEF    C LR; C RDSYM; BRU *-2


*      IDENT

IDENT  BRM WIOSR;
       STA USML; BRM WIOSR;
       STA USMR; BRM WIOSR; 
       SKE =0; BRU LIBEXT
IDENT0 TMF IDENTM; LDA USML; BRM PXT; LDA USMR; BRM PXT; BRM TTB
      SKN SFLAG; BRU SKIPSY; LDP USML; C BLKS; BRU IDENT1; C DELBLK
      TMF IDMM; C LU; LDA USETAB; SUB USEEND; BRU *+2
IFIX1  LDA NUM; SKG =0; BRU IDENT1; SUB =3; STA NUM; CAX; LDA* L2
      SUB USETAB; ADD SYMTAB; SKG =-3; BRU IFIX1; LPR ←L; STP SYML
      C LS; C INFIX; BRU IFIX1; CXA; ADD L; STA MAPX; C LU
      LDA MAPX; SUB L; LDX NUM; STA* L2; BRU IFIX1
LIBEXT SKE =-1; BRU LIBEX0; 
SKIPSY BRM WIOSR; 
       SKE =-1; BRU SKIP1
RDSX   CLA; STA WDCNT; BRU LOAD2
IDENTM ASC '$IDENT.   /'
IDENT1 CLAB; C BLKS; BRU IDENT2; LDP USML; STP EBN,2; BRU SKIPSY
IDENT2 TMF IDFM; BRU SKIPSY
IDMM   ASC '(ALREADY LOADED)   /'
IDFM   ASC '(BLOCK TABLE FULL)   /';
SKIP1  BRM WIOSR;
       BRM WIOSR
      BRU SKIPSY
LIBEX0 CNA; STA NUM; MIN LIBFLG;
LIBEX1 BRM WIOSR;
       SKE =-1; BRU LIBEX2; LDX NUM;
      BRM WIOSR; BRX *-1; BRU FIN
LIBEX2 STA SYML; BRM WIOSR;
      MRG =10B; STA SYMR; BRM WIOSR;
      LDB =77770010B; C SCH; BRU IDENT0; BRU LIBEX1


*      EXTERNAL USAGE TABLE

INREF  EQU *
INREF5 C LR; BRM WIOSR; SKE =-1
      BRU INREF0; LDA MAXEXT; STA USEEND; BRU RDSYMZ
INREF0 SKA MADB; BRU *+2; BRU ILL; C RDSYMA; LDA LCN; SKN* L2
      SKG BASE; BRU INREF7; LDA BASE; ADM* L2; ADM SVAL
INREF8 LDA =10B; ADM* L1; C INFIX; BRU INREF5; BRU INREF6
INFIX  CXA; ADD L1; STA MAPX; LDB LMSK; C SCH; BRU INFIX1; R1
INFIX1 SKA =7700B; BRU *+2; R2; MRG =20B; STA* L1; CXB; CLX;
      LDA =20B; MRG* MAPX; STA* MAPX; CBX; LDB =77777700B; C SCU
      BRU INFIX1; R1
INREF7 LDA =-1; STA* L2; BRU INREF8
INREF6 STX MAPX; LDA LCN; SKE BASE; BRU INREF1
INREF4 C LR; LDA MAPX; LDX =-3; STA* L2; BRU INREF5
INREF1 LPR ←L1; SKA =10B; BRU INREF2; C LR; LDA MAPX; LDX =-3
      XMA* L2; C PCHE; BRU INREF5
INREF2 LDA ADB; STA FDEX; C LS; LDA SVAL; SKG =-1; BRU INREF4+1
      ETR ADB
INREF3 STA NUM; ULD; STA TYX; LDA NUM; LDX MAPX; C SUS; EOR TYX
      ETR ADB; EOR TYX; LDX NUM; STA 0,2; LDA TYX; ETR ADB
      SKE NUM; BRU INREF3; BRU INREF4+1


*      EXTERNAL REFERENCE

EXTADD LDB ADB; BRU *+2
EXTWRD LDB =-1; STB FDEX; C LU; CBA; ETR TYX; EOR TYX; XMA TYX
      EOR TYX; MUL =3; LSH 23; CAX; LDA* L2; SKG =-2; BRU EXTT
EXTU   LDA LCN; C SUS; ADD TYX; BRU STORE
EXTT   LDX* L2; LDA =10B; SKA* L1; BRU EXTU
EXTV   LDA* L2; ETR FDEX; ADD TYX; BRU STORE


*      READ SYMBOL INTO TABLE

RDSYM  BRM WIOSR;
       SKE =-1; BRU RDSYMA; RPOP
RDSYMZ LDA MAXEXT; SKG MINTAB; STA MINTAB; BRU RDSX
RDSYMA STA SYML; LDX MAXEXT; BRM SIO; STB MAXEXT; LDA SYML; STA* L
      BRM WIOSR; CAB;
      BRM WIOSR; SKB =40B; BRU RDSYM2
      SKB =4000B; ADD BASE
RDSYM3 STA* L2; STA SVAL; CBA; ETR LMSK; MRG SBIT; STA* L1
      STA SYMR; SKA =4; BRU RDOP; R1
RDSYM2 STB T; LDB SBIT; SKB =4; BRU RDSYM4; MUL BASE; LSH 23
      STA SVAL; BRM WIOSR;
      ADD SVAL
RDSYM4 LDB T; BRU RDSYM3
RDOP   SKB =40B; BRU RDOP3; LDA* L2; SKG =-1; BRU RDOP1; SKA INB
      MRG =40000000B; ETR =57737756B
RDOP2  STA* L2; STA SVAL; R1
RDOP1  EOR INB; SKA INB; EOR =40040000B; BRU RDOP2
RDOP3  SKB =20B; MRG =1; STA* L1; STA SYMR; R1
      VARD MAPX,RELADA,SBIT,SFLAG,SRLVAL,WDCNT,BASE,BITS,BRZ,LIBFLG
      VARD USEEND,FR



       END;


SYMBOL IDENT
ITPFG  EQU 0
$SYMTAB DATA -6 PREDEFINED LENGTH OF SYMBOL TABLE
SYMLNT ZRO
$S0    EQU *-1
$S     EQU *                       FIRST SYMBOL NAME WORD
$S1    EQU *+1                     SECOND NAME WORD AND FLAGS
$S2    EQU *+2                     VALUE WORD


DFM    MACRO D
LIM    NARG;
       IF LIM<2;
N        NCHR D(); TEXT 'D(1$,6)'; IF N<5; ZRO; ENDF; 
       ELSE;
N        NCHR D();
         IF N<5; TEXT 'D(1$,5)'; ZRO D(2);
         ELSE; TEXT 'D(1$,4)';
N1         EQU 'D(1$5,6)'; DATA [N1*2↑[[8-N]*6]]+D(2);
         ENDF;
       ENDF; ENDM;


DF     LMACRO D; DFM D(,);  DATA D(); ENDM;


DO     LMACRO D; DFM D(,); D() 0; ENDM;


DSO    LMACRO D; DFM D(,); D().&: 0; ENDM;


RBGSYM EQU *;
$SY1   TEXT '.'
$SY2   DATA 6
$LRO   ZRO 0                       CURRENT LOCATION
Z      EQU 4B7;
BEGNSY EQU 172625345
NEXTSY EQU 736355234
       DF RBGSYM,1; DF BEGSYM,1; DF PUNCH,1;
       DF SYMTAB,1; DF BEGNSY,1; DF NEXTSY,1;
      DF RDDT,1; DF Z; TEXT '..'; ZRO; ZRO EDDT;


       IF ITPFG>0;
       DO CLEAR,1; DO CNX,1; DSO CSS,4; DO CLS,4; DSO CSSI,4; DSO CSSD,4;
       DO LDF,4; DO STF,4; DO ADF,4; DO MGF,4; DO GOTO,4; DO PUNT,1; 
       DO CALL,4; DO ZRF,4; DO SKNE,4; DO SNEL,4; DO MDC,4; DO SKLE,4;
       DO SCALL,4; DO SKEL,4; DO SKL,4; DO SKGE,4; DO SKP,4; DO SKNA,4;
       DO SKNB,4; DO BSR,4; DO BSL,4; DO BSX,4; DO BVR,4; DO SKUM,4;
       DO SKI,4; DO BRPX,4; DO MUL,4; DO BRQ,4; DO LLO,4; DO LDI,4;
       DO RET,1;


DF1    LMACRO D;
D()    EQU D(2)*4B3+D(); DF D(,);  ENDM;


       DF1 CHTSCH,2; DF1 CHTS0,4; DF1 DHTSCH,2; DF1 EDHT,2; DF ECHT;
       DF CHTHSH; DF PPFCL; DF1 DCHT,2; DF CCHTE; DF1 GFC,3; DF1 DDHT,2;
       DF AELEQP; DF SELEQP; DF1 RTEQP,2; DF1 RELEQP,2; DF WAKEUP; 
       DF STSUI; DF SETFL; DF REFFL; DF1 FSTR,3; DF GETPOS; DF RSTUP; 
       DF R2PNT; DF FRET;
       ENDF;
BEGSYM EQU *;
$SZSYMT EQU S-*;
       END;
